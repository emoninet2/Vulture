
C:\Users\emon1\Atollic\TrueSTUDIO\ARM_workspace_7.1.2\Vulture\Debug\Vulture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005710  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  080058e0  080058e0  000158e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  08005a88  08005a88  00015a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005a90  08005a90  00015a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000c0  20000000  08005a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000ac8  200000c0  08005b54  000200c0  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000b88  08005b54  00020b88  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001417c  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002c1b  00000000  00000000  0003426c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001370  00000000  00000000  00036e88  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001208  00000000  00000000  000381f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00008d96  00000000  00000000  00039400  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000a9c2  00000000  00000000  00042196  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  0004cb58  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000599c  00000000  00000000  0004cbd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c0 	.word	0x200000c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080058c8 	.word	0x080058c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000c4 	.word	0x200000c4
 800020c:	080058c8 	.word	0x080058c8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <vApplicationStackOverflowHook>:

/**
  Dummy implementation of the callback function vApplicationStackOverflowHook().
*/
#if (configCHECK_FOR_STACK_OVERFLOW > 0)
__WEAK void vApplicationStackOverflowHook (TaskHandle_t xTask, signed char *pcTaskName) {
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
  (void)xTask;
  (void)pcTaskName;
}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop

080002d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
 80002de:	60f8      	str	r0, [r7, #12]
 80002e0:	60b9      	str	r1, [r7, #8]
 80002e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	4a07      	ldr	r2, [pc, #28]	; (8000304 <vApplicationGetIdleTaskMemory+0x2c>)
 80002e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	4a06      	ldr	r2, [pc, #24]	; (8000308 <vApplicationGetIdleTaskMemory+0x30>)
 80002ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	2280      	movs	r2, #128	; 0x80
 80002f4:	601a      	str	r2, [r3, #0]
}
 80002f6:	bf00      	nop
 80002f8:	3714      	adds	r7, #20
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	200000dc 	.word	0x200000dc
 8000308:	20000138 	.word	0x20000138

0800030c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
 8000312:	60f8      	str	r0, [r7, #12]
 8000314:	60b9      	str	r1, [r7, #8]
 8000316:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	4a07      	ldr	r2, [pc, #28]	; (8000338 <vApplicationGetTimerTaskMemory+0x2c>)
 800031c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800031e:	68bb      	ldr	r3, [r7, #8]
 8000320:	4a06      	ldr	r2, [pc, #24]	; (800033c <vApplicationGetTimerTaskMemory+0x30>)
 8000322:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	2250      	movs	r2, #80	; 0x50
 8000328:	601a      	str	r2, [r3, #0]
}
 800032a:	bf00      	nop
 800032c:	3714      	adds	r7, #20
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	20000338 	.word	0x20000338
 800033c:	20000394 	.word	0x20000394

08000340 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000340:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000378 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000344:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000346:	e003      	b.n	8000350 <LoopCopyDataInit>

08000348 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000348:	4b0c      	ldr	r3, [pc, #48]	; (800037c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800034a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800034c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800034e:	3104      	adds	r1, #4

08000350 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000350:	480b      	ldr	r0, [pc, #44]	; (8000380 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000352:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000354:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000356:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000358:	d3f6      	bcc.n	8000348 <CopyDataInit>
  ldr  r2, =_sbss
 800035a:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800035c:	e002      	b.n	8000364 <LoopFillZerobss>

0800035e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800035e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000360:	f842 3b04 	str.w	r3, [r2], #4

08000364 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000364:	4b09      	ldr	r3, [pc, #36]	; (800038c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000366:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000368:	d3f9      	bcc.n	800035e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800036a:	f001 f973 	bl	8001654 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800036e:	f004 f93f 	bl	80045f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000372:	f004 f807 	bl	8004384 <main>
  bx  lr    
 8000376:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000378:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 800037c:	08005a94 	.word	0x08005a94
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000380:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000384:	200000c0 	.word	0x200000c0
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000388:	200000c0 	.word	0x200000c0
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800038c:	20000b88 	.word	0x20000b88

08000390 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000390:	e7fe      	b.n	8000390 <ADC_IRQHandler>
	...

08000394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  return uwTick;
 8000398:	4b03      	ldr	r3, [pc, #12]	; (80003a8 <HAL_GetTick+0x14>)
 800039a:	681b      	ldr	r3, [r3, #0]
}
 800039c:	4618      	mov	r0, r3
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	20000b80 	.word	0x20000b80

080003ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b089      	sub	sp, #36	; 0x24
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
 80003b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80003b6:	2300      	movs	r3, #0
 80003b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80003ba:	2300      	movs	r3, #0
 80003bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80003be:	2300      	movs	r3, #0
 80003c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80003c2:	2300      	movs	r3, #0
 80003c4:	61fb      	str	r3, [r7, #28]
 80003c6:	e165      	b.n	8000694 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 80003c8:	2201      	movs	r2, #1
 80003ca:	69fb      	ldr	r3, [r7, #28]
 80003cc:	fa02 f303 	lsl.w	r3, r2, r3
 80003d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003d2:	683b      	ldr	r3, [r7, #0]
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	697b      	ldr	r3, [r7, #20]
 80003d8:	4013      	ands	r3, r2
 80003da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80003dc:	693a      	ldr	r2, [r7, #16]
 80003de:	697b      	ldr	r3, [r7, #20]
 80003e0:	429a      	cmp	r2, r3
 80003e2:	f040 8154 	bne.w	800068e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	685b      	ldr	r3, [r3, #4]
 80003ea:	2b02      	cmp	r3, #2
 80003ec:	d003      	beq.n	80003f6 <HAL_GPIO_Init+0x4a>
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	685b      	ldr	r3, [r3, #4]
 80003f2:	2b12      	cmp	r3, #18
 80003f4:	d123      	bne.n	800043e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80003f6:	69fb      	ldr	r3, [r7, #28]
 80003f8:	08da      	lsrs	r2, r3, #3
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	3208      	adds	r2, #8
 80003fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000404:	69fb      	ldr	r3, [r7, #28]
 8000406:	f003 0307 	and.w	r3, r3, #7
 800040a:	009b      	lsls	r3, r3, #2
 800040c:	220f      	movs	r2, #15
 800040e:	fa02 f303 	lsl.w	r3, r2, r3
 8000412:	43db      	mvns	r3, r3
 8000414:	69ba      	ldr	r2, [r7, #24]
 8000416:	4013      	ands	r3, r2
 8000418:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800041a:	683b      	ldr	r3, [r7, #0]
 800041c:	691a      	ldr	r2, [r3, #16]
 800041e:	69fb      	ldr	r3, [r7, #28]
 8000420:	f003 0307 	and.w	r3, r3, #7
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	fa02 f303 	lsl.w	r3, r2, r3
 800042a:	69ba      	ldr	r2, [r7, #24]
 800042c:	4313      	orrs	r3, r2
 800042e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000430:	69fb      	ldr	r3, [r7, #28]
 8000432:	08da      	lsrs	r2, r3, #3
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	3208      	adds	r2, #8
 8000438:	69b9      	ldr	r1, [r7, #24]
 800043a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000444:	69fb      	ldr	r3, [r7, #28]
 8000446:	005b      	lsls	r3, r3, #1
 8000448:	2203      	movs	r2, #3
 800044a:	fa02 f303 	lsl.w	r3, r2, r3
 800044e:	43db      	mvns	r3, r3
 8000450:	69ba      	ldr	r2, [r7, #24]
 8000452:	4013      	ands	r3, r2
 8000454:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	685b      	ldr	r3, [r3, #4]
 800045a:	f003 0203 	and.w	r2, r3, #3
 800045e:	69fb      	ldr	r3, [r7, #28]
 8000460:	005b      	lsls	r3, r3, #1
 8000462:	fa02 f303 	lsl.w	r3, r2, r3
 8000466:	69ba      	ldr	r2, [r7, #24]
 8000468:	4313      	orrs	r3, r2
 800046a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	69ba      	ldr	r2, [r7, #24]
 8000470:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	685b      	ldr	r3, [r3, #4]
 8000476:	2b01      	cmp	r3, #1
 8000478:	d00b      	beq.n	8000492 <HAL_GPIO_Init+0xe6>
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	685b      	ldr	r3, [r3, #4]
 800047e:	2b02      	cmp	r3, #2
 8000480:	d007      	beq.n	8000492 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	685b      	ldr	r3, [r3, #4]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000486:	2b11      	cmp	r3, #17
 8000488:	d003      	beq.n	8000492 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	685b      	ldr	r3, [r3, #4]
 800048e:	2b12      	cmp	r3, #18
 8000490:	d130      	bne.n	80004f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	689b      	ldr	r3, [r3, #8]
 8000496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000498:	69fb      	ldr	r3, [r7, #28]
 800049a:	005b      	lsls	r3, r3, #1
 800049c:	2203      	movs	r2, #3
 800049e:	fa02 f303 	lsl.w	r3, r2, r3
 80004a2:	43db      	mvns	r3, r3
 80004a4:	69ba      	ldr	r2, [r7, #24]
 80004a6:	4013      	ands	r3, r2
 80004a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	68da      	ldr	r2, [r3, #12]
 80004ae:	69fb      	ldr	r3, [r7, #28]
 80004b0:	005b      	lsls	r3, r3, #1
 80004b2:	fa02 f303 	lsl.w	r3, r2, r3
 80004b6:	69ba      	ldr	r2, [r7, #24]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	69ba      	ldr	r2, [r7, #24]
 80004c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	685b      	ldr	r3, [r3, #4]
 80004c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80004c8:	2201      	movs	r2, #1
 80004ca:	69fb      	ldr	r3, [r7, #28]
 80004cc:	fa02 f303 	lsl.w	r3, r2, r3
 80004d0:	43db      	mvns	r3, r3
 80004d2:	69ba      	ldr	r2, [r7, #24]
 80004d4:	4013      	ands	r3, r2
 80004d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	091b      	lsrs	r3, r3, #4
 80004de:	f003 0201 	and.w	r2, r3, #1
 80004e2:	69fb      	ldr	r3, [r7, #28]
 80004e4:	fa02 f303 	lsl.w	r3, r2, r3
 80004e8:	69ba      	ldr	r2, [r7, #24]
 80004ea:	4313      	orrs	r3, r2
 80004ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	69ba      	ldr	r2, [r7, #24]
 80004f2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	68db      	ldr	r3, [r3, #12]
 80004f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80004fa:	69fb      	ldr	r3, [r7, #28]
 80004fc:	005b      	lsls	r3, r3, #1
 80004fe:	2203      	movs	r2, #3
 8000500:	fa02 f303 	lsl.w	r3, r2, r3
 8000504:	43db      	mvns	r3, r3
 8000506:	69ba      	ldr	r2, [r7, #24]
 8000508:	4013      	ands	r3, r2
 800050a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	689a      	ldr	r2, [r3, #8]
 8000510:	69fb      	ldr	r3, [r7, #28]
 8000512:	005b      	lsls	r3, r3, #1
 8000514:	fa02 f303 	lsl.w	r3, r2, r3
 8000518:	69ba      	ldr	r2, [r7, #24]
 800051a:	4313      	orrs	r3, r2
 800051c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	69ba      	ldr	r2, [r7, #24]
 8000522:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800052c:	2b00      	cmp	r3, #0
 800052e:	f000 80ae 	beq.w	800068e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	4a5c      	ldr	r2, [pc, #368]	; (80006a8 <HAL_GPIO_Init+0x2fc>)
 8000538:	4b5b      	ldr	r3, [pc, #364]	; (80006a8 <HAL_GPIO_Init+0x2fc>)
 800053a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800053c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000540:	6453      	str	r3, [r2, #68]	; 0x44
 8000542:	4b59      	ldr	r3, [pc, #356]	; (80006a8 <HAL_GPIO_Init+0x2fc>)
 8000544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800054e:	4a57      	ldr	r2, [pc, #348]	; (80006ac <HAL_GPIO_Init+0x300>)
 8000550:	69fb      	ldr	r3, [r7, #28]
 8000552:	089b      	lsrs	r3, r3, #2
 8000554:	3302      	adds	r3, #2
 8000556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800055a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800055c:	69fb      	ldr	r3, [r7, #28]
 800055e:	f003 0303 	and.w	r3, r3, #3
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	220f      	movs	r2, #15
 8000566:	fa02 f303 	lsl.w	r3, r2, r3
 800056a:	43db      	mvns	r3, r3
 800056c:	69ba      	ldr	r2, [r7, #24]
 800056e:	4013      	ands	r3, r2
 8000570:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4a4e      	ldr	r2, [pc, #312]	; (80006b0 <HAL_GPIO_Init+0x304>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d025      	beq.n	80005c6 <HAL_GPIO_Init+0x21a>
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4a4d      	ldr	r2, [pc, #308]	; (80006b4 <HAL_GPIO_Init+0x308>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d01f      	beq.n	80005c2 <HAL_GPIO_Init+0x216>
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4a4c      	ldr	r2, [pc, #304]	; (80006b8 <HAL_GPIO_Init+0x30c>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d019      	beq.n	80005be <HAL_GPIO_Init+0x212>
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4a4b      	ldr	r2, [pc, #300]	; (80006bc <HAL_GPIO_Init+0x310>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d013      	beq.n	80005ba <HAL_GPIO_Init+0x20e>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4a4a      	ldr	r2, [pc, #296]	; (80006c0 <HAL_GPIO_Init+0x314>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d00d      	beq.n	80005b6 <HAL_GPIO_Init+0x20a>
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a49      	ldr	r2, [pc, #292]	; (80006c4 <HAL_GPIO_Init+0x318>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d007      	beq.n	80005b2 <HAL_GPIO_Init+0x206>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4a48      	ldr	r2, [pc, #288]	; (80006c8 <HAL_GPIO_Init+0x31c>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d101      	bne.n	80005ae <HAL_GPIO_Init+0x202>
 80005aa:	2306      	movs	r3, #6
 80005ac:	e00c      	b.n	80005c8 <HAL_GPIO_Init+0x21c>
 80005ae:	2307      	movs	r3, #7
 80005b0:	e00a      	b.n	80005c8 <HAL_GPIO_Init+0x21c>
 80005b2:	2305      	movs	r3, #5
 80005b4:	e008      	b.n	80005c8 <HAL_GPIO_Init+0x21c>
 80005b6:	2304      	movs	r3, #4
 80005b8:	e006      	b.n	80005c8 <HAL_GPIO_Init+0x21c>
 80005ba:	2303      	movs	r3, #3
 80005bc:	e004      	b.n	80005c8 <HAL_GPIO_Init+0x21c>
 80005be:	2302      	movs	r3, #2
 80005c0:	e002      	b.n	80005c8 <HAL_GPIO_Init+0x21c>
 80005c2:	2301      	movs	r3, #1
 80005c4:	e000      	b.n	80005c8 <HAL_GPIO_Init+0x21c>
 80005c6:	2300      	movs	r3, #0
 80005c8:	69fa      	ldr	r2, [r7, #28]
 80005ca:	f002 0203 	and.w	r2, r2, #3
 80005ce:	0092      	lsls	r2, r2, #2
 80005d0:	4093      	lsls	r3, r2
 80005d2:	69ba      	ldr	r2, [r7, #24]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80005d8:	4934      	ldr	r1, [pc, #208]	; (80006ac <HAL_GPIO_Init+0x300>)
 80005da:	69fb      	ldr	r3, [r7, #28]
 80005dc:	089b      	lsrs	r3, r3, #2
 80005de:	3302      	adds	r3, #2
 80005e0:	69ba      	ldr	r2, [r7, #24]
 80005e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80005e6:	4b39      	ldr	r3, [pc, #228]	; (80006cc <HAL_GPIO_Init+0x320>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80005ec:	693b      	ldr	r3, [r7, #16]
 80005ee:	43db      	mvns	r3, r3
 80005f0:	69ba      	ldr	r2, [r7, #24]
 80005f2:	4013      	ands	r3, r2
 80005f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	685b      	ldr	r3, [r3, #4]
 80005fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d003      	beq.n	800060a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000602:	69ba      	ldr	r2, [r7, #24]
 8000604:	693b      	ldr	r3, [r7, #16]
 8000606:	4313      	orrs	r3, r2
 8000608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800060a:	4a30      	ldr	r2, [pc, #192]	; (80006cc <HAL_GPIO_Init+0x320>)
 800060c:	69bb      	ldr	r3, [r7, #24]
 800060e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000610:	4b2e      	ldr	r3, [pc, #184]	; (80006cc <HAL_GPIO_Init+0x320>)
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	43db      	mvns	r3, r3
 800061a:	69ba      	ldr	r2, [r7, #24]
 800061c:	4013      	ands	r3, r2
 800061e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000628:	2b00      	cmp	r3, #0
 800062a:	d003      	beq.n	8000634 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800062c:	69ba      	ldr	r2, [r7, #24]
 800062e:	693b      	ldr	r3, [r7, #16]
 8000630:	4313      	orrs	r3, r2
 8000632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000634:	4a25      	ldr	r2, [pc, #148]	; (80006cc <HAL_GPIO_Init+0x320>)
 8000636:	69bb      	ldr	r3, [r7, #24]
 8000638:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800063a:	4b24      	ldr	r3, [pc, #144]	; (80006cc <HAL_GPIO_Init+0x320>)
 800063c:	689b      	ldr	r3, [r3, #8]
 800063e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000640:	693b      	ldr	r3, [r7, #16]
 8000642:	43db      	mvns	r3, r3
 8000644:	69ba      	ldr	r2, [r7, #24]
 8000646:	4013      	ands	r3, r2
 8000648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	685b      	ldr	r3, [r3, #4]
 800064e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000652:	2b00      	cmp	r3, #0
 8000654:	d003      	beq.n	800065e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000656:	69ba      	ldr	r2, [r7, #24]
 8000658:	693b      	ldr	r3, [r7, #16]
 800065a:	4313      	orrs	r3, r2
 800065c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800065e:	4a1b      	ldr	r2, [pc, #108]	; (80006cc <HAL_GPIO_Init+0x320>)
 8000660:	69bb      	ldr	r3, [r7, #24]
 8000662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000664:	4b19      	ldr	r3, [pc, #100]	; (80006cc <HAL_GPIO_Init+0x320>)
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800066a:	693b      	ldr	r3, [r7, #16]
 800066c:	43db      	mvns	r3, r3
 800066e:	69ba      	ldr	r2, [r7, #24]
 8000670:	4013      	ands	r3, r2
 8000672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800067c:	2b00      	cmp	r3, #0
 800067e:	d003      	beq.n	8000688 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000680:	69ba      	ldr	r2, [r7, #24]
 8000682:	693b      	ldr	r3, [r7, #16]
 8000684:	4313      	orrs	r3, r2
 8000686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000688:	4a10      	ldr	r2, [pc, #64]	; (80006cc <HAL_GPIO_Init+0x320>)
 800068a:	69bb      	ldr	r3, [r7, #24]
 800068c:	60d3      	str	r3, [r2, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800068e:	69fb      	ldr	r3, [r7, #28]
 8000690:	3301      	adds	r3, #1
 8000692:	61fb      	str	r3, [r7, #28]
 8000694:	69fb      	ldr	r3, [r7, #28]
 8000696:	2b0f      	cmp	r3, #15
 8000698:	f67f ae96 	bls.w	80003c8 <HAL_GPIO_Init+0x1c>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 800069c:	bf00      	nop
 800069e:	3724      	adds	r7, #36	; 0x24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40013800 	.word	0x40013800
 80006b0:	40020000 	.word	0x40020000
 80006b4:	40020400 	.word	0x40020400
 80006b8:	40020800 	.word	0x40020800
 80006bc:	40020c00 	.word	0x40020c00
 80006c0:	40021000 	.word	0x40021000
 80006c4:	40021400 	.word	0x40021400
 80006c8:	40021800 	.word	0x40021800
 80006cc:	40013c00 	.word	0x40013c00

080006d0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b087      	sub	sp, #28
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80006da:	2300      	movs	r3, #0
 80006dc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]
 80006ea:	e0c8      	b.n	800087e <HAL_GPIO_DeInit+0x1ae>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 80006ec:	2201      	movs	r2, #1
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	fa02 f303 	lsl.w	r3, r2, r3
 80006f4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80006f6:	683a      	ldr	r2, [r7, #0]
 80006f8:	693b      	ldr	r3, [r7, #16]
 80006fa:	4013      	ands	r3, r2
 80006fc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80006fe:	68fa      	ldr	r2, [r7, #12]
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	429a      	cmp	r2, r3
 8000704:	f040 80b8 	bne.w	8000878 <HAL_GPIO_DeInit+0x1a8>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	2103      	movs	r1, #3
 8000712:	fa01 f303 	lsl.w	r3, r1, r3
 8000716:	43db      	mvns	r3, r3
 8000718:	401a      	ands	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	08da      	lsrs	r2, r3, #3
 8000722:	697b      	ldr	r3, [r7, #20]
 8000724:	08d9      	lsrs	r1, r3, #3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	3108      	adds	r1, #8
 800072a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	f003 0307 	and.w	r3, r3, #7
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	200f      	movs	r0, #15
 8000738:	fa00 f303 	lsl.w	r3, r0, r3
 800073c:	43db      	mvns	r3, r3
 800073e:	4019      	ands	r1, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	3208      	adds	r2, #8
 8000744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	689a      	ldr	r2, [r3, #8]
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	2103      	movs	r1, #3
 8000752:	fa01 f303 	lsl.w	r3, r1, r3
 8000756:	43db      	mvns	r3, r3
 8000758:	401a      	ands	r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	685a      	ldr	r2, [r3, #4]
 8000762:	2101      	movs	r1, #1
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	fa01 f303 	lsl.w	r3, r1, r3
 800076a:	43db      	mvns	r3, r3
 800076c:	401a      	ands	r2, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	68da      	ldr	r2, [r3, #12]
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	2103      	movs	r1, #3
 800077c:	fa01 f303 	lsl.w	r3, r1, r3
 8000780:	43db      	mvns	r3, r3
 8000782:	401a      	ands	r2, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	60da      	str	r2, [r3, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8000788:	4a42      	ldr	r2, [pc, #264]	; (8000894 <HAL_GPIO_DeInit+0x1c4>)
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	089b      	lsrs	r3, r3, #2
 800078e:	3302      	adds	r3, #2
 8000790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000794:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	f003 0303 	and.w	r3, r3, #3
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	220f      	movs	r2, #15
 80007a0:	fa02 f303 	lsl.w	r3, r2, r3
 80007a4:	68ba      	ldr	r2, [r7, #8]
 80007a6:	4013      	ands	r3, r2
 80007a8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4a3a      	ldr	r2, [pc, #232]	; (8000898 <HAL_GPIO_DeInit+0x1c8>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d025      	beq.n	80007fe <HAL_GPIO_DeInit+0x12e>
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4a39      	ldr	r2, [pc, #228]	; (800089c <HAL_GPIO_DeInit+0x1cc>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d01f      	beq.n	80007fa <HAL_GPIO_DeInit+0x12a>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4a38      	ldr	r2, [pc, #224]	; (80008a0 <HAL_GPIO_DeInit+0x1d0>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d019      	beq.n	80007f6 <HAL_GPIO_DeInit+0x126>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4a37      	ldr	r2, [pc, #220]	; (80008a4 <HAL_GPIO_DeInit+0x1d4>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d013      	beq.n	80007f2 <HAL_GPIO_DeInit+0x122>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4a36      	ldr	r2, [pc, #216]	; (80008a8 <HAL_GPIO_DeInit+0x1d8>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d00d      	beq.n	80007ee <HAL_GPIO_DeInit+0x11e>
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4a35      	ldr	r2, [pc, #212]	; (80008ac <HAL_GPIO_DeInit+0x1dc>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d007      	beq.n	80007ea <HAL_GPIO_DeInit+0x11a>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4a34      	ldr	r2, [pc, #208]	; (80008b0 <HAL_GPIO_DeInit+0x1e0>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d101      	bne.n	80007e6 <HAL_GPIO_DeInit+0x116>
 80007e2:	2306      	movs	r3, #6
 80007e4:	e00c      	b.n	8000800 <HAL_GPIO_DeInit+0x130>
 80007e6:	2307      	movs	r3, #7
 80007e8:	e00a      	b.n	8000800 <HAL_GPIO_DeInit+0x130>
 80007ea:	2305      	movs	r3, #5
 80007ec:	e008      	b.n	8000800 <HAL_GPIO_DeInit+0x130>
 80007ee:	2304      	movs	r3, #4
 80007f0:	e006      	b.n	8000800 <HAL_GPIO_DeInit+0x130>
 80007f2:	2303      	movs	r3, #3
 80007f4:	e004      	b.n	8000800 <HAL_GPIO_DeInit+0x130>
 80007f6:	2302      	movs	r3, #2
 80007f8:	e002      	b.n	8000800 <HAL_GPIO_DeInit+0x130>
 80007fa:	2301      	movs	r3, #1
 80007fc:	e000      	b.n	8000800 <HAL_GPIO_DeInit+0x130>
 80007fe:	2300      	movs	r3, #0
 8000800:	697a      	ldr	r2, [r7, #20]
 8000802:	f002 0203 	and.w	r2, r2, #3
 8000806:	0092      	lsls	r2, r2, #2
 8000808:	fa03 f202 	lsl.w	r2, r3, r2
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	429a      	cmp	r2, r3
 8000810:	d132      	bne.n	8000878 <HAL_GPIO_DeInit+0x1a8>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0FU) << (4U * (position & 0x03U));
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	f003 0303 	and.w	r3, r3, #3
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	220f      	movs	r2, #15
 800081c:	fa02 f303 	lsl.w	r3, r2, r3
 8000820:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8000822:	481c      	ldr	r0, [pc, #112]	; (8000894 <HAL_GPIO_DeInit+0x1c4>)
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	089b      	lsrs	r3, r3, #2
 8000828:	491a      	ldr	r1, [pc, #104]	; (8000894 <HAL_GPIO_DeInit+0x1c4>)
 800082a:	697a      	ldr	r2, [r7, #20]
 800082c:	0892      	lsrs	r2, r2, #2
 800082e:	3202      	adds	r2, #2
 8000830:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8000834:	68ba      	ldr	r2, [r7, #8]
 8000836:	43d2      	mvns	r2, r2
 8000838:	400a      	ands	r2, r1
 800083a:	3302      	adds	r3, #2
 800083c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8000840:	491c      	ldr	r1, [pc, #112]	; (80008b4 <HAL_GPIO_DeInit+0x1e4>)
 8000842:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <HAL_GPIO_DeInit+0x1e4>)
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	43db      	mvns	r3, r3
 800084a:	4013      	ands	r3, r2
 800084c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800084e:	4919      	ldr	r1, [pc, #100]	; (80008b4 <HAL_GPIO_DeInit+0x1e4>)
 8000850:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <HAL_GPIO_DeInit+0x1e4>)
 8000852:	685a      	ldr	r2, [r3, #4]
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	43db      	mvns	r3, r3
 8000858:	4013      	ands	r3, r2
 800085a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800085c:	4915      	ldr	r1, [pc, #84]	; (80008b4 <HAL_GPIO_DeInit+0x1e4>)
 800085e:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <HAL_GPIO_DeInit+0x1e4>)
 8000860:	689a      	ldr	r2, [r3, #8]
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	43db      	mvns	r3, r3
 8000866:	4013      	ands	r3, r2
 8000868:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800086a:	4912      	ldr	r1, [pc, #72]	; (80008b4 <HAL_GPIO_DeInit+0x1e4>)
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <HAL_GPIO_DeInit+0x1e4>)
 800086e:	68da      	ldr	r2, [r3, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	43db      	mvns	r3, r3
 8000874:	4013      	ands	r3, r2
 8000876:	60cb      	str	r3, [r1, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	3301      	adds	r3, #1
 800087c:	617b      	str	r3, [r7, #20]
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	2b0f      	cmp	r3, #15
 8000882:	f67f af33 	bls.w	80006ec <HAL_GPIO_DeInit+0x1c>
        EXTI->RTSR &= ~((uint32_t)iocurrent);
        EXTI->FTSR &= ~((uint32_t)iocurrent);
      }
    }
  }
}
 8000886:	bf00      	nop
 8000888:	371c      	adds	r7, #28
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40013800 	.word	0x40013800
 8000898:	40020000 	.word	0x40020000
 800089c:	40020400 	.word	0x40020400
 80008a0:	40020800 	.word	0x40020800
 80008a4:	40020c00 	.word	0x40020c00
 80008a8:	40021000 	.word	0x40021000
 80008ac:	40021400 	.word	0x40021400
 80008b0:	40021800 	.word	0x40021800
 80008b4:	40013c00 	.word	0x40013c00

080008b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	460b      	mov	r3, r1
 80008c2:	807b      	strh	r3, [r7, #2]
 80008c4:	4613      	mov	r3, r2
 80008c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008c8:	787b      	ldrb	r3, [r7, #1]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d003      	beq.n	80008d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80008ce:	887a      	ldrh	r2, [r7, #2]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80008d4:	e003      	b.n	80008de <HAL_GPIO_WritePin+0x26>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80008d6:	887b      	ldrh	r3, [r7, #2]
 80008d8:	041a      	lsls	r2, r3, #16
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	619a      	str	r2, [r3, #24]
  }
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80008f0:	4b03      	ldr	r3, [pc, #12]	; (8000900 <HAL_RCC_GetHCLKFreq+0x14>)
 80008f2:	681b      	ldr	r3, [r3, #0]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	20000004 	.word	0x20000004

08000904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800090a:	f7ff ffef 	bl	80008ec <HAL_RCC_GetHCLKFreq>
 800090e:	4601      	mov	r1, r0
 8000910:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8000918:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800091c:	607b      	str	r3, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	fa93 f3a3 	rbit	r3, r3
 8000924:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	fab3 f383 	clz	r3, r3
 800092c:	fa22 f303 	lsr.w	r3, r2, r3
 8000930:	4a04      	ldr	r2, [pc, #16]	; (8000944 <HAL_RCC_GetPCLK1Freq+0x40>)
 8000932:	5cd3      	ldrb	r3, [r2, r3]
 8000934:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000938:	4618      	mov	r0, r3
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40023800 	.word	0x40023800
 8000944:	0800597c 	.word	0x0800597c

08000948 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800094e:	f7ff ffcd 	bl	80008ec <HAL_RCC_GetHCLKFreq>
 8000952:	4601      	mov	r1, r0
 8000954:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8000956:	689b      	ldr	r3, [r3, #8]
 8000958:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 800095c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000960:	607b      	str	r3, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	fa93 f3a3 	rbit	r3, r3
 8000968:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	fab3 f383 	clz	r3, r3
 8000970:	fa22 f303 	lsr.w	r3, r2, r3
 8000974:	4a04      	ldr	r2, [pc, #16]	; (8000988 <HAL_RCC_GetPCLK2Freq+0x40>)
 8000976:	5cd3      	ldrb	r3, [r2, r3]
 8000978:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800097c:	4618      	mov	r0, r3
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40023800 	.word	0x40023800
 8000988:	0800597c 	.word	0x0800597c

0800098c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d101      	bne.n	800099e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	e05c      	b.n	8000a58 <HAL_SPI_Init+0xcc>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d106      	bne.n	80009b8 <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2200      	movs	r2, #0
 80009ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f000 f854 	bl	8000a60 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2202      	movs	r2, #2
 80009bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	687a      	ldr	r2, [r7, #4]
 80009c6:	6812      	ldr	r2, [r2, #0]
 80009c8:	6812      	ldr	r2, [r2, #0]
 80009ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80009ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	6851      	ldr	r1, [r2, #4]
 80009d8:	687a      	ldr	r2, [r7, #4]
 80009da:	6892      	ldr	r2, [r2, #8]
 80009dc:	4311      	orrs	r1, r2
 80009de:	687a      	ldr	r2, [r7, #4]
 80009e0:	68d2      	ldr	r2, [r2, #12]
 80009e2:	4311      	orrs	r1, r2
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	6912      	ldr	r2, [r2, #16]
 80009e8:	4311      	orrs	r1, r2
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	6952      	ldr	r2, [r2, #20]
 80009ee:	4311      	orrs	r1, r2
 80009f0:	687a      	ldr	r2, [r7, #4]
 80009f2:	6992      	ldr	r2, [r2, #24]
 80009f4:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80009f8:	4311      	orrs	r1, r2
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	69d2      	ldr	r2, [r2, #28]
 80009fe:	4311      	orrs	r1, r2
 8000a00:	687a      	ldr	r2, [r7, #4]
 8000a02:	6a12      	ldr	r2, [r2, #32]
 8000a04:	4311      	orrs	r1, r2
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	6992      	ldr	r2, [r2, #24]
 8000a16:	0c12      	lsrs	r2, r2, #16
 8000a18:	f002 0104 	and.w	r1, r2, #4
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000a20:	430a      	orrs	r2, r1
 8000a22:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a2c:	d104      	bne.n	8000a38 <HAL_SPI_Init+0xac>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000a36:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	6812      	ldr	r2, [r2, #0]
 8000a40:	69d2      	ldr	r2, [r2, #28]
 8000a42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000a46:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2201      	movs	r2, #1
 8000a52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8000a56:	2300      	movs	r3, #0
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
  */
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent and received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08e      	sub	sp, #56	; 0x38
 8000a78:	af02      	add	r7, sp, #8
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
 8000a80:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
 8000a86:	2300      	movs	r3, #0
 8000a88:	623b      	str	r3, [r7, #32]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	837b      	strh	r3, [r7, #26]
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8000a92:	2301      	movs	r3, #1
 8000a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef errorcode = HAL_OK;
 8000a96:	2300      	movs	r3, #0
 8000a98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d101      	bne.n	8000aaa <HAL_SPI_TransmitReceive+0x36>
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	e1f1      	b.n	8000e8e <HAL_SPI_TransmitReceive+0x41a>
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	2201      	movs	r2, #1
 8000aae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8000ab2:	f7ff fc6f 	bl	8000394 <HAL_GetTick>
 8000ab6:	61f8      	str	r0, [r7, #28]
  
  tmp  = hspi->State;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp1 = hspi->Init.Mode;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	623b      	str	r3, [r7, #32]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8000ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d00e      	beq.n	8000aec <HAL_SPI_TransmitReceive+0x78>
 8000ace:	6a3b      	ldr	r3, [r7, #32]
 8000ad0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000ad4:	d106      	bne.n	8000ae4 <HAL_SPI_TransmitReceive+0x70>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d102      	bne.n	8000ae4 <HAL_SPI_TransmitReceive+0x70>
 8000ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae0:	2b04      	cmp	r3, #4
 8000ae2:	d003      	beq.n	8000aec <HAL_SPI_TransmitReceive+0x78>
  {
    errorcode = HAL_BUSY;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8000aea:	e1c6      	b.n	8000e7a <HAL_SPI_TransmitReceive+0x406>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d005      	beq.n	8000afe <HAL_SPI_TransmitReceive+0x8a>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d002      	beq.n	8000afe <HAL_SPI_TransmitReceive+0x8a>
 8000af8:	887b      	ldrh	r3, [r7, #2]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d103      	bne.n	8000b06 <HAL_SPI_TransmitReceive+0x92>
  {
    errorcode = HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8000b04:	e1b9      	b.n	8000e7a <HAL_SPI_TransmitReceive+0x406>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d103      	bne.n	8000b1a <HAL_SPI_TransmitReceive+0xa6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	2205      	movs	r2, #5
 8000b16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	887a      	ldrh	r2, [r7, #2]
 8000b2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	887a      	ldrh	r2, [r7, #2]
 8000b30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	68ba      	ldr	r2, [r7, #8]
 8000b36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	887a      	ldrh	r2, [r7, #2]
 8000b3c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	887a      	ldrh	r2, [r7, #2]
 8000b42:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	2200      	movs	r2, #0
 8000b48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b58:	d110      	bne.n	8000b7c <HAL_SPI_TransmitReceive+0x108>
  {
    SPI_RESET_CRC(hspi);
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	6819      	ldr	r1, [r3, #0]
 8000b64:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8000b68:	400b      	ands	r3, r1
 8000b6a:	6013      	str	r3, [r2, #0]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	68fa      	ldr	r2, [r7, #12]
 8000b72:	6812      	ldr	r2, [r2, #0]
 8000b74:	6812      	ldr	r2, [r2, #0]
 8000b76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000b7a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d107      	bne.n	8000b9a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	68fa      	ldr	r2, [r7, #12]
 8000b90:	6812      	ldr	r2, [r2, #0]
 8000b92:	6812      	ldr	r2, [r2, #0]
 8000b94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ba2:	f040 8084 	bne.w	8000cae <HAL_SPI_TransmitReceive+0x23a>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d004      	beq.n	8000bb8 <HAL_SPI_TransmitReceive+0x144>
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d16f      	bne.n	8000c98 <HAL_SPI_TransmitReceive+0x224>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	68ba      	ldr	r2, [r7, #8]
 8000bbe:	8812      	ldrh	r2, [r2, #0]
 8000bc0:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	3302      	adds	r3, #2
 8000bc6:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	b29a      	uxth	r2, r3
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000bd6:	e05f      	b.n	8000c98 <HAL_SPI_TransmitReceive+0x224>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8000bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d02e      	beq.n	8000c3c <HAL_SPI_TransmitReceive+0x1c8>
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d029      	beq.n	8000c3c <HAL_SPI_TransmitReceive+0x1c8>
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d022      	beq.n	8000c3c <HAL_SPI_TransmitReceive+0x1c8>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	8812      	ldrh	r2, [r2, #0]
 8000bfe:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	3302      	adds	r3, #2
 8000c04:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	3b01      	subs	r3, #1
 8000c0e:	b29a      	uxth	r2, r3
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d10c      	bne.n	8000c3c <HAL_SPI_TransmitReceive+0x1c8>
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c2a:	d107      	bne.n	8000c3c <HAL_SPI_TransmitReceive+0x1c8>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	68fa      	ldr	r2, [r7, #12]
 8000c32:	6812      	ldr	r2, [r2, #0]
 8000c34:	6812      	ldr	r2, [r2, #0]
 8000c36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000c3a:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d018      	beq.n	8000c78 <HAL_SPI_TransmitReceive+0x204>
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d011      	beq.n	8000c78 <HAL_SPI_TransmitReceive+0x204>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3302      	adds	r3, #2
 8000c64:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8000c74:	2301      	movs	r3, #1
 8000c76:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8000c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c7e:	d00b      	beq.n	8000c98 <HAL_SPI_TransmitReceive+0x224>
 8000c80:	f7ff fb88 	bl	8000394 <HAL_GetTick>
 8000c84:	4602      	mov	r2, r0
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	1ad2      	subs	r2, r2, r3
 8000c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d303      	bcc.n	8000c98 <HAL_SPI_TransmitReceive+0x224>
      {
        errorcode = HAL_TIMEOUT;
 8000c90:	2303      	movs	r3, #3
 8000c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8000c96:	e0f0      	b.n	8000e7a <HAL_SPI_TransmitReceive+0x406>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
      pTxData += sizeof(uint16_t);
      hspi->TxXferCount--;
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d19a      	bne.n	8000bd8 <HAL_SPI_TransmitReceive+0x164>
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d195      	bne.n	8000bd8 <HAL_SPI_TransmitReceive+0x164>
 8000cac:	e083      	b.n	8000db6 <HAL_SPI_TransmitReceive+0x342>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d004      	beq.n	8000cc0 <HAL_SPI_TransmitReceive+0x24c>
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d170      	bne.n	8000da2 <HAL_SPI_TransmitReceive+0x32e>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	330c      	adds	r3, #12
 8000cc6:	68ba      	ldr	r2, [r7, #8]
 8000cc8:	7812      	ldrb	r2, [r2, #0]
 8000cca:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000ce0:	e05f      	b.n	8000da2 <HAL_SPI_TransmitReceive+0x32e>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8000ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d02f      	beq.n	8000d48 <HAL_SPI_TransmitReceive+0x2d4>
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d02a      	beq.n	8000d48 <HAL_SPI_TransmitReceive+0x2d4>
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	f003 0302 	and.w	r3, r3, #2
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d023      	beq.n	8000d48 <HAL_SPI_TransmitReceive+0x2d4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f103 020c 	add.w	r2, r3, #12
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	1c59      	adds	r1, r3, #1
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d10c      	bne.n	8000d48 <HAL_SPI_TransmitReceive+0x2d4>
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d36:	d107      	bne.n	8000d48 <HAL_SPI_TransmitReceive+0x2d4>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	68fa      	ldr	r2, [r7, #12]
 8000d3e:	6812      	ldr	r2, [r2, #0]
 8000d40:	6812      	ldr	r2, [r2, #0]
 8000d42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000d46:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d017      	beq.n	8000d82 <HAL_SPI_TransmitReceive+0x30e>
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d010      	beq.n	8000d82 <HAL_SPI_TransmitReceive+0x30e>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	1c5a      	adds	r2, r3, #1
 8000d64:	607a      	str	r2, [r7, #4]
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	6812      	ldr	r2, [r2, #0]
 8000d6a:	68d2      	ldr	r2, [r2, #12]
 8000d6c:	b2d2      	uxtb	r2, r2
 8000d6e:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	3b01      	subs	r3, #1
 8000d78:	b29a      	uxth	r2, r3
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8000d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d88:	d00b      	beq.n	8000da2 <HAL_SPI_TransmitReceive+0x32e>
 8000d8a:	f7ff fb03 	bl	8000394 <HAL_GetTick>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	1ad2      	subs	r2, r2, r3
 8000d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d303      	bcc.n	8000da2 <HAL_SPI_TransmitReceive+0x32e>
      {
        errorcode = HAL_TIMEOUT;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8000da0:	e06b      	b.n	8000e7a <HAL_SPI_TransmitReceive+0x406>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
      pTxData += sizeof(uint8_t);
      hspi->TxXferCount--;
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d19a      	bne.n	8000ce2 <HAL_SPI_TransmitReceive+0x26e>
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d195      	bne.n	8000ce2 <HAL_SPI_TransmitReceive+0x26e>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000dbe:	d11a      	bne.n	8000df6 <HAL_SPI_TransmitReceive+0x382>
  {
    /* Wait until TXE flag */
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	2101      	movs	r1, #1
 8000dca:	68f8      	ldr	r0, [r7, #12]
 8000dcc:	f000 f864 	bl	8000e98 <SPI_WaitFlagStateUntilTimeout>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d009      	beq.n	8000dea <HAL_SPI_TransmitReceive+0x376>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dda:	f043 0202 	orr.w	r2, r3, #2
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8000de2:	2303      	movs	r3, #3
 8000de4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 8000de8:	e047      	b.n	8000e7a <HAL_SPI_TransmitReceive+0x406>
    }
    /* Read CRC */
    tmpreg1 = hspi->Instance->DR;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	837b      	strh	r3, [r7, #26]
    /* To avoid GCC warning */
    UNUSED(tmpreg1);
 8000df4:	8b7b      	ldrh	r3, [r7, #26]
  }

  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	f003 0310 	and.w	r3, r3, #16
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d00d      	beq.n	8000e20 <HAL_SPI_TransmitReceive+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e08:	f043 0202 	orr.w	r2, r3, #2
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8000e18:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e26:	2201      	movs	r2, #1
 8000e28:	2102      	movs	r1, #2
 8000e2a:	68f8      	ldr	r0, [r7, #12]
 8000e2c:	f000 f834 	bl	8000e98 <SPI_WaitFlagStateUntilTimeout>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d003      	beq.n	8000e3e <HAL_SPI_TransmitReceive+0x3ca>
  {
    errorcode = HAL_TIMEOUT;
 8000e36:	2303      	movs	r3, #3
 8000e38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8000e3c:	e01d      	b.n	8000e7a <HAL_SPI_TransmitReceive+0x406>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8000e3e:	69fa      	ldr	r2, [r7, #28]
 8000e40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000e42:	68f8      	ldr	r0, [r7, #12]
 8000e44:	f000 f892 	bl	8000f6c <SPI_CheckFlag_BSY>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d006      	beq.n	8000e5c <HAL_SPI_TransmitReceive+0x3e8>
  {
    errorcode = HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2220      	movs	r2, #32
 8000e58:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8000e5a:	e00e      	b.n	8000e7a <HAL_SPI_TransmitReceive+0x406>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d10a      	bne.n	8000e7a <HAL_SPI_TransmitReceive+0x406>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	68db      	ldr	r3, [r3, #12]
 8000e6e:	617b      	str	r3, [r7, #20]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	697b      	ldr	r3, [r7, #20]
  }
  
error :
  hspi->State = HAL_SPI_STATE_READY;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	2200      	movs	r2, #0
 8000e86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8000e8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3730      	adds	r7, #48	; 0x30
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop

08000e98 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
 8000ea4:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000ea6:	e04d      	b.n	8000f44 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eae:	d049      	beq.n	8000f44 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d007      	beq.n	8000ec6 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8000eb6:	f7ff fa6d 	bl	8000394 <HAL_GetTick>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	1ad2      	subs	r2, r2, r3
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d33e      	bcc.n	8000f44 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	6812      	ldr	r2, [r2, #0]
 8000ece:	6852      	ldr	r2, [r2, #4]
 8000ed0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000ed4:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000ede:	d111      	bne.n	8000f04 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ee8:	d004      	beq.n	8000ef4 <SPI_WaitFlagStateUntilTimeout+0x5c>
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ef2:	d107      	bne.n	8000f04 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	68fa      	ldr	r2, [r7, #12]
 8000efa:	6812      	ldr	r2, [r2, #0]
 8000efc:	6812      	ldr	r2, [r2, #0]
 8000efe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f0c:	d110      	bne.n	8000f30 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	6819      	ldr	r1, [r3, #0]
 8000f18:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8000f1c:	400b      	ands	r3, r1
 8000f1e:	6013      	str	r3, [r2, #0]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	68fa      	ldr	r2, [r7, #12]
 8000f26:	6812      	ldr	r2, [r2, #0]
 8000f28:	6812      	ldr	r2, [r2, #0]
 8000f2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000f2e:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2201      	movs	r2, #1
 8000f34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8000f40:	2303      	movs	r3, #3
 8000f42:	e00e      	b.n	8000f62 <SPI_WaitFlagStateUntilTimeout+0xca>
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	689a      	ldr	r2, [r3, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	401a      	ands	r2, r3
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d101      	bne.n	8000f58 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8000f54:	2201      	movs	r2, #1
 8000f56:	e000      	b.n	8000f5a <SPI_WaitFlagStateUntilTimeout+0xc2>
 8000f58:	2200      	movs	r2, #0
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d1a3      	bne.n	8000ea8 <SPI_WaitFlagStateUntilTimeout+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop

08000f6c <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af02      	add	r7, sp, #8
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2180      	movs	r1, #128	; 0x80
 8000f82:	68f8      	ldr	r0, [r7, #12]
 8000f84:	f7ff ff88 	bl	8000e98 <SPI_WaitFlagStateUntilTimeout>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d007      	beq.n	8000f9e <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f92:	f043 0220 	orr.w	r2, r3, #32
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e000      	b.n	8000fa0 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 8000f9e:	2300      	movs	r3, #0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d101      	bne.n	8000fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e03f      	b.n	800103a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d106      	bne.n	8000fd4 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f000 f838 	bl	8001044 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2224      	movs	r2, #36	; 0x24
 8000fd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	6812      	ldr	r2, [r2, #0]
 8000fe4:	68d2      	ldr	r2, [r2, #12]
 8000fe6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000fea:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f000 f915 	bl	800121c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	6812      	ldr	r2, [r2, #0]
 8000ffa:	6912      	ldr	r2, [r2, #16]
 8000ffc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001000:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	6812      	ldr	r2, [r2, #0]
 800100a:	6952      	ldr	r2, [r2, #20]
 800100c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001010:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	6812      	ldr	r2, [r2, #0]
 800101a:	68d2      	ldr	r2, [r2, #12]
 800101c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001020:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2220      	movs	r2, #32
 800102c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2220      	movs	r2, #32
 8001034:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop

08001044 <HAL_UART_MspInit>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
   /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */ 
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b088      	sub	sp, #32
 800105c:	af02      	add	r7, sp, #8
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	603b      	str	r3, [r7, #0]
 8001064:	4613      	mov	r3, r2
 8001066:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001072:	b2db      	uxtb	r3, r3
 8001074:	2b20      	cmp	r3, #32
 8001076:	f040 8082 	bne.w	800117e <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL ) || (Size == 0U)) 
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d002      	beq.n	8001086 <HAL_UART_Transmit+0x2e>
 8001080:	88fb      	ldrh	r3, [r7, #6]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e07a      	b.n	8001180 <HAL_UART_Transmit+0x128>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001090:	2b01      	cmp	r3, #1
 8001092:	d101      	bne.n	8001098 <HAL_UART_Transmit+0x40>
 8001094:	2302      	movs	r3, #2
 8001096:	e073      	b.n	8001180 <HAL_UART_Transmit+0x128>
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2201      	movs	r2, #1
 800109c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2200      	movs	r2, #0
 80010a4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	2221      	movs	r2, #33	; 0x21
 80010aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80010ae:	f7ff f971 	bl	8000394 <HAL_GetTick>
 80010b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	88fa      	ldrh	r2, [r7, #6]
 80010b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	88fa      	ldrh	r2, [r7, #6]
 80010be:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80010c0:	e041      	b.n	8001146 <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	3b01      	subs	r3, #1
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010d8:	d121      	bne.n	800111e <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	2200      	movs	r2, #0
 80010e2:	2180      	movs	r1, #128	; 0x80
 80010e4:	68f8      	ldr	r0, [r7, #12]
 80010e6:	f000 f84f 	bl	8001188 <UART_WaitOnFlagUntilTimeout>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e045      	b.n	8001180 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FFU);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	8812      	ldrh	r2, [r2, #0]
 8001100:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001104:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d103      	bne.n	8001116 <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	3302      	adds	r3, #2
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	e017      	b.n	8001146 <HAL_UART_Transmit+0xee>
        }
        else
        { 
          pData +=1U;
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	3301      	adds	r3, #1
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	e013      	b.n	8001146 <HAL_UART_Transmit+0xee>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	2200      	movs	r2, #0
 8001126:	2180      	movs	r1, #128	; 0x80
 8001128:	68f8      	ldr	r0, [r7, #12]
 800112a:	f000 f82d 	bl	8001188 <UART_WaitOnFlagUntilTimeout>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 8001134:	2303      	movs	r3, #3
 8001136:	e023      	b.n	8001180 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFFU);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	1c59      	adds	r1, r3, #1
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	6053      	str	r3, [r2, #4]
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0U)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800114a:	b29b      	uxth	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1b8      	bne.n	80010c2 <HAL_UART_Transmit+0x6a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFFU);
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	2200      	movs	r2, #0
 8001158:	2140      	movs	r1, #64	; 0x40
 800115a:	68f8      	ldr	r0, [r7, #12]
 800115c:	f000 f814 	bl	8001188 <UART_WaitOnFlagUntilTimeout>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_UART_Transmit+0x112>
    { 
      return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e00a      	b.n	8001180 <HAL_UART_Transmit+0x128>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2220      	movs	r2, #32
 800116e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 800117a:	2300      	movs	r3, #0
 800117c:	e000      	b.n	8001180 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 800117e:	2302      	movs	r3, #2
  }
}
 8001180:	4618      	mov	r0, r3
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	4613      	mov	r3, r2
 8001196:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001198:	e02c      	b.n	80011f4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a0:	d028      	beq.n	80011f4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d007      	beq.n	80011b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80011a8:	f7ff f8f4 	bl	8000394 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	1ad2      	subs	r2, r2, r3
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d91d      	bls.n	80011f4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	68fa      	ldr	r2, [r7, #12]
 80011be:	6812      	ldr	r2, [r2, #0]
 80011c0:	68d2      	ldr	r2, [r2, #12]
 80011c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80011c6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	68fa      	ldr	r2, [r7, #12]
 80011ce:	6812      	ldr	r2, [r2, #0]
 80011d0:	6952      	ldr	r2, [r2, #20]
 80011d2:	f022 0201 	bic.w	r2, r2, #1
 80011d6:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2220      	movs	r2, #32
 80011dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2220      	movs	r2, #32
 80011e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e00f      	b.n	8001214 <UART_WaitOnFlagUntilTimeout+0x8c>
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	401a      	ands	r2, r3
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	429a      	cmp	r2, r3
 8001202:	bf0c      	ite	eq
 8001204:	2301      	moveq	r3, #1
 8001206:	2300      	movne	r3, #0
 8001208:	b2db      	uxtb	r3, r3
 800120a:	461a      	mov	r2, r3
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	429a      	cmp	r2, r3
 8001210:	d0c3      	beq.n	800119a <UART_WaitOnFlagUntilTimeout+0x12>
        return HAL_TIMEOUT;
      }
    }
  }
  
  return HAL_OK;
 8001212:	2300      	movs	r3, #0
}
 8001214:	4618      	mov	r0, r3
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800121c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8001224:	2300      	movs	r3, #0
 8001226:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001236:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	68fa      	ldr	r2, [r7, #12]
 800123e:	4313      	orrs	r3, r2
 8001240:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001258:	f023 030c 	bic.w	r3, r3, #12
 800125c:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689a      	ldr	r2, [r3, #8]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	431a      	orrs	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	431a      	orrs	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	4313      	orrs	r3, r2
 8001274:	68fa      	ldr	r2, [r7, #12]
 8001276:	4313      	orrs	r3, r2
 8001278:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001290:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	4313      	orrs	r3, r2
 800129a:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	68fa      	ldr	r2, [r7, #12]
 80012a2:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	69db      	ldr	r3, [r3, #28]
 80012a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012ac:	f040 80e4 	bne.w	8001478 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4aab      	ldr	r2, [pc, #684]	; (8001564 <UART_SetConfig+0x348>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d004      	beq.n	80012c4 <UART_SetConfig+0xa8>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4aaa      	ldr	r2, [pc, #680]	; (8001568 <UART_SetConfig+0x34c>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d16c      	bne.n	800139e <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681c      	ldr	r4, [r3, #0]
 80012c8:	f7ff fb3e 	bl	8000948 <HAL_RCC_GetPCLK2Freq>
 80012cc:	4602      	mov	r2, r0
 80012ce:	4613      	mov	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	009a      	lsls	r2, r3, #2
 80012d6:	441a      	add	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e2:	4aa2      	ldr	r2, [pc, #648]	; (800156c <UART_SetConfig+0x350>)
 80012e4:	fba2 2303 	umull	r2, r3, r2, r3
 80012e8:	095b      	lsrs	r3, r3, #5
 80012ea:	011d      	lsls	r5, r3, #4
 80012ec:	f7ff fb2c 	bl	8000948 <HAL_RCC_GetPCLK2Freq>
 80012f0:	4602      	mov	r2, r0
 80012f2:	4613      	mov	r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	009a      	lsls	r2, r3, #2
 80012fa:	441a      	add	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	fbb2 f6f3 	udiv	r6, r2, r3
 8001306:	f7ff fb1f 	bl	8000948 <HAL_RCC_GetPCLK2Freq>
 800130a:	4602      	mov	r2, r0
 800130c:	4613      	mov	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	009a      	lsls	r2, r3, #2
 8001314:	441a      	add	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001320:	4a92      	ldr	r2, [pc, #584]	; (800156c <UART_SetConfig+0x350>)
 8001322:	fba2 2303 	umull	r2, r3, r2, r3
 8001326:	095b      	lsrs	r3, r3, #5
 8001328:	2264      	movs	r2, #100	; 0x64
 800132a:	fb02 f303 	mul.w	r3, r2, r3
 800132e:	1af3      	subs	r3, r6, r3
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	3332      	adds	r3, #50	; 0x32
 8001334:	4a8d      	ldr	r2, [pc, #564]	; (800156c <UART_SetConfig+0x350>)
 8001336:	fba2 2303 	umull	r2, r3, r2, r3
 800133a:	095b      	lsrs	r3, r3, #5
 800133c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	441d      	add	r5, r3
 8001344:	f7ff fb00 	bl	8000948 <HAL_RCC_GetPCLK2Freq>
 8001348:	4602      	mov	r2, r0
 800134a:	4613      	mov	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	009a      	lsls	r2, r3, #2
 8001352:	441a      	add	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	fbb2 f6f3 	udiv	r6, r2, r3
 800135e:	f7ff faf3 	bl	8000948 <HAL_RCC_GetPCLK2Freq>
 8001362:	4602      	mov	r2, r0
 8001364:	4613      	mov	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4413      	add	r3, r2
 800136a:	009a      	lsls	r2, r3, #2
 800136c:	441a      	add	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	fbb2 f3f3 	udiv	r3, r2, r3
 8001378:	4a7c      	ldr	r2, [pc, #496]	; (800156c <UART_SetConfig+0x350>)
 800137a:	fba2 2303 	umull	r2, r3, r2, r3
 800137e:	095b      	lsrs	r3, r3, #5
 8001380:	2264      	movs	r2, #100	; 0x64
 8001382:	fb02 f303 	mul.w	r3, r2, r3
 8001386:	1af3      	subs	r3, r6, r3
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	3332      	adds	r3, #50	; 0x32
 800138c:	4a77      	ldr	r2, [pc, #476]	; (800156c <UART_SetConfig+0x350>)
 800138e:	fba2 2303 	umull	r2, r3, r2, r3
 8001392:	095b      	lsrs	r3, r3, #5
 8001394:	f003 0307 	and.w	r3, r3, #7
 8001398:	442b      	add	r3, r5
 800139a:	60a3      	str	r3, [r4, #8]
 800139c:	e154      	b.n	8001648 <UART_SetConfig+0x42c>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681c      	ldr	r4, [r3, #0]
 80013a2:	f7ff faaf 	bl	8000904 <HAL_RCC_GetPCLK1Freq>
 80013a6:	4602      	mov	r2, r0
 80013a8:	4613      	mov	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	009a      	lsls	r2, r3, #2
 80013b0:	441a      	add	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013bc:	4a6b      	ldr	r2, [pc, #428]	; (800156c <UART_SetConfig+0x350>)
 80013be:	fba2 2303 	umull	r2, r3, r2, r3
 80013c2:	095b      	lsrs	r3, r3, #5
 80013c4:	011d      	lsls	r5, r3, #4
 80013c6:	f7ff fa9d 	bl	8000904 <HAL_RCC_GetPCLK1Freq>
 80013ca:	4602      	mov	r2, r0
 80013cc:	4613      	mov	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4413      	add	r3, r2
 80013d2:	009a      	lsls	r2, r3, #2
 80013d4:	441a      	add	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80013e0:	f7ff fa90 	bl	8000904 <HAL_RCC_GetPCLK1Freq>
 80013e4:	4602      	mov	r2, r0
 80013e6:	4613      	mov	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	009a      	lsls	r2, r3, #2
 80013ee:	441a      	add	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fa:	4a5c      	ldr	r2, [pc, #368]	; (800156c <UART_SetConfig+0x350>)
 80013fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001400:	095b      	lsrs	r3, r3, #5
 8001402:	2264      	movs	r2, #100	; 0x64
 8001404:	fb02 f303 	mul.w	r3, r2, r3
 8001408:	1af3      	subs	r3, r6, r3
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	3332      	adds	r3, #50	; 0x32
 800140e:	4a57      	ldr	r2, [pc, #348]	; (800156c <UART_SetConfig+0x350>)
 8001410:	fba2 2303 	umull	r2, r3, r2, r3
 8001414:	095b      	lsrs	r3, r3, #5
 8001416:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	441d      	add	r5, r3
 800141e:	f7ff fa71 	bl	8000904 <HAL_RCC_GetPCLK1Freq>
 8001422:	4602      	mov	r2, r0
 8001424:	4613      	mov	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
 800142a:	009a      	lsls	r2, r3, #2
 800142c:	441a      	add	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	fbb2 f6f3 	udiv	r6, r2, r3
 8001438:	f7ff fa64 	bl	8000904 <HAL_RCC_GetPCLK1Freq>
 800143c:	4602      	mov	r2, r0
 800143e:	4613      	mov	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	009a      	lsls	r2, r3, #2
 8001446:	441a      	add	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001452:	4a46      	ldr	r2, [pc, #280]	; (800156c <UART_SetConfig+0x350>)
 8001454:	fba2 2303 	umull	r2, r3, r2, r3
 8001458:	095b      	lsrs	r3, r3, #5
 800145a:	2264      	movs	r2, #100	; 0x64
 800145c:	fb02 f303 	mul.w	r3, r2, r3
 8001460:	1af3      	subs	r3, r6, r3
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	3332      	adds	r3, #50	; 0x32
 8001466:	4a41      	ldr	r2, [pc, #260]	; (800156c <UART_SetConfig+0x350>)
 8001468:	fba2 2303 	umull	r2, r3, r2, r3
 800146c:	095b      	lsrs	r3, r3, #5
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	442b      	add	r3, r5
 8001474:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8001476:	e0e7      	b.n	8001648 <UART_SetConfig+0x42c>
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a39      	ldr	r2, [pc, #228]	; (8001564 <UART_SetConfig+0x348>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d004      	beq.n	800148c <UART_SetConfig+0x270>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a38      	ldr	r2, [pc, #224]	; (8001568 <UART_SetConfig+0x34c>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d171      	bne.n	8001570 <UART_SetConfig+0x354>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681c      	ldr	r4, [r3, #0]
 8001490:	f7ff fa5a 	bl	8000948 <HAL_RCC_GetPCLK2Freq>
 8001494:	4602      	mov	r2, r0
 8001496:	4613      	mov	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4413      	add	r3, r2
 800149c:	009a      	lsls	r2, r3, #2
 800149e:	441a      	add	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014aa:	4a30      	ldr	r2, [pc, #192]	; (800156c <UART_SetConfig+0x350>)
 80014ac:	fba2 2303 	umull	r2, r3, r2, r3
 80014b0:	095b      	lsrs	r3, r3, #5
 80014b2:	011d      	lsls	r5, r3, #4
 80014b4:	f7ff fa48 	bl	8000948 <HAL_RCC_GetPCLK2Freq>
 80014b8:	4602      	mov	r2, r0
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	009a      	lsls	r2, r3, #2
 80014c2:	441a      	add	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	fbb2 f6f3 	udiv	r6, r2, r3
 80014ce:	f7ff fa3b 	bl	8000948 <HAL_RCC_GetPCLK2Freq>
 80014d2:	4602      	mov	r2, r0
 80014d4:	4613      	mov	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	009a      	lsls	r2, r3, #2
 80014dc:	441a      	add	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e8:	4a20      	ldr	r2, [pc, #128]	; (800156c <UART_SetConfig+0x350>)
 80014ea:	fba2 2303 	umull	r2, r3, r2, r3
 80014ee:	095b      	lsrs	r3, r3, #5
 80014f0:	2264      	movs	r2, #100	; 0x64
 80014f2:	fb02 f303 	mul.w	r3, r2, r3
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	011b      	lsls	r3, r3, #4
 80014fa:	3332      	adds	r3, #50	; 0x32
 80014fc:	4a1b      	ldr	r2, [pc, #108]	; (800156c <UART_SetConfig+0x350>)
 80014fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001502:	095b      	lsrs	r3, r3, #5
 8001504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001508:	441d      	add	r5, r3
 800150a:	f7ff fa1d 	bl	8000948 <HAL_RCC_GetPCLK2Freq>
 800150e:	4602      	mov	r2, r0
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	009a      	lsls	r2, r3, #2
 8001518:	441a      	add	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	fbb2 f6f3 	udiv	r6, r2, r3
 8001524:	f7ff fa10 	bl	8000948 <HAL_RCC_GetPCLK2Freq>
 8001528:	4602      	mov	r2, r0
 800152a:	4613      	mov	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	009a      	lsls	r2, r3, #2
 8001532:	441a      	add	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	fbb2 f3f3 	udiv	r3, r2, r3
 800153e:	4a0b      	ldr	r2, [pc, #44]	; (800156c <UART_SetConfig+0x350>)
 8001540:	fba2 2303 	umull	r2, r3, r2, r3
 8001544:	095b      	lsrs	r3, r3, #5
 8001546:	2264      	movs	r2, #100	; 0x64
 8001548:	fb02 f303 	mul.w	r3, r2, r3
 800154c:	1af3      	subs	r3, r6, r3
 800154e:	011b      	lsls	r3, r3, #4
 8001550:	3332      	adds	r3, #50	; 0x32
 8001552:	4a06      	ldr	r2, [pc, #24]	; (800156c <UART_SetConfig+0x350>)
 8001554:	fba2 2303 	umull	r2, r3, r2, r3
 8001558:	095b      	lsrs	r3, r3, #5
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	442b      	add	r3, r5
 8001560:	60a3      	str	r3, [r4, #8]
 8001562:	e071      	b.n	8001648 <UART_SetConfig+0x42c>
 8001564:	40011000 	.word	0x40011000
 8001568:	40011400 	.word	0x40011400
 800156c:	51eb851f 	.word	0x51eb851f
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681c      	ldr	r4, [r3, #0]
 8001574:	f7ff f9c6 	bl	8000904 <HAL_RCC_GetPCLK1Freq>
 8001578:	4602      	mov	r2, r0
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	009a      	lsls	r2, r3, #2
 8001582:	441a      	add	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	fbb2 f3f3 	udiv	r3, r2, r3
 800158e:	4a30      	ldr	r2, [pc, #192]	; (8001650 <UART_SetConfig+0x434>)
 8001590:	fba2 2303 	umull	r2, r3, r2, r3
 8001594:	095b      	lsrs	r3, r3, #5
 8001596:	011d      	lsls	r5, r3, #4
 8001598:	f7ff f9b4 	bl	8000904 <HAL_RCC_GetPCLK1Freq>
 800159c:	4602      	mov	r2, r0
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	009a      	lsls	r2, r3, #2
 80015a6:	441a      	add	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	fbb2 f6f3 	udiv	r6, r2, r3
 80015b2:	f7ff f9a7 	bl	8000904 <HAL_RCC_GetPCLK1Freq>
 80015b6:	4602      	mov	r2, r0
 80015b8:	4613      	mov	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	009a      	lsls	r2, r3, #2
 80015c0:	441a      	add	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015cc:	4a20      	ldr	r2, [pc, #128]	; (8001650 <UART_SetConfig+0x434>)
 80015ce:	fba2 2303 	umull	r2, r3, r2, r3
 80015d2:	095b      	lsrs	r3, r3, #5
 80015d4:	2264      	movs	r2, #100	; 0x64
 80015d6:	fb02 f303 	mul.w	r3, r2, r3
 80015da:	1af3      	subs	r3, r6, r3
 80015dc:	011b      	lsls	r3, r3, #4
 80015de:	3332      	adds	r3, #50	; 0x32
 80015e0:	4a1b      	ldr	r2, [pc, #108]	; (8001650 <UART_SetConfig+0x434>)
 80015e2:	fba2 2303 	umull	r2, r3, r2, r3
 80015e6:	095b      	lsrs	r3, r3, #5
 80015e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015ec:	441d      	add	r5, r3
 80015ee:	f7ff f989 	bl	8000904 <HAL_RCC_GetPCLK1Freq>
 80015f2:	4602      	mov	r2, r0
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	009a      	lsls	r2, r3, #2
 80015fc:	441a      	add	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	fbb2 f6f3 	udiv	r6, r2, r3
 8001608:	f7ff f97c 	bl	8000904 <HAL_RCC_GetPCLK1Freq>
 800160c:	4602      	mov	r2, r0
 800160e:	4613      	mov	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	009a      	lsls	r2, r3, #2
 8001616:	441a      	add	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001622:	4a0b      	ldr	r2, [pc, #44]	; (8001650 <UART_SetConfig+0x434>)
 8001624:	fba2 2303 	umull	r2, r3, r2, r3
 8001628:	095b      	lsrs	r3, r3, #5
 800162a:	2264      	movs	r2, #100	; 0x64
 800162c:	fb02 f303 	mul.w	r3, r2, r3
 8001630:	1af3      	subs	r3, r6, r3
 8001632:	011b      	lsls	r3, r3, #4
 8001634:	3332      	adds	r3, #50	; 0x32
 8001636:	4a06      	ldr	r2, [pc, #24]	; (8001650 <UART_SetConfig+0x434>)
 8001638:	fba2 2303 	umull	r2, r3, r2, r3
 800163c:	095b      	lsrs	r3, r3, #5
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	442b      	add	r3, r5
 8001644:	60a3      	str	r3, [r4, #8]
    }
  }
}
 8001646:	e7ff      	b.n	8001648 <UART_SetConfig+0x42c>
 8001648:	bf00      	nop
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001650:	51eb851f 	.word	0x51eb851f

08001654 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001658:	4a16      	ldr	r2, [pc, #88]	; (80016b4 <SystemInit+0x60>)
 800165a:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <SystemInit+0x60>)
 800165c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001660:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001664:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001668:	4a13      	ldr	r2, [pc, #76]	; (80016b8 <SystemInit+0x64>)
 800166a:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <SystemInit+0x64>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001674:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <SystemInit+0x64>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800167a:	4a0f      	ldr	r2, [pc, #60]	; (80016b8 <SystemInit+0x64>)
 800167c:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <SystemInit+0x64>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001688:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <SystemInit+0x64>)
 800168c:	4a0b      	ldr	r2, [pc, #44]	; (80016bc <SystemInit+0x68>)
 800168e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001690:	4a09      	ldr	r2, [pc, #36]	; (80016b8 <SystemInit+0x64>)
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <SystemInit+0x64>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800169a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <SystemInit+0x64>)
 800169e:	2200      	movs	r2, #0
 80016a0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016a2:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <SystemInit+0x60>)
 80016a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016a8:	609a      	str	r2, [r3, #8]
#endif
}
 80016aa:	bf00      	nop
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000ed00 	.word	0xe000ed00
 80016b8:	40023800 	.word	0x40023800
 80016bc:	24003010 	.word	0x24003010

080016c0 <SysTick_Handler>:
extern void xPortSysTickHandler (void);

/*
  SysTick handler implementation that also clears overflow flag.
*/
void SysTick_Handler (void) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80016c4:	4b02      	ldr	r3, [pc, #8]	; (80016d0 <SysTick_Handler+0x10>)
 80016c6:	681b      	ldr	r3, [r3, #0]

  /* Call tick handler */
  xPortSysTickHandler();
 80016c8:	f000 f9d6 	bl	8001a78 <xPortSysTickHandler>
}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	e000e010 	.word	0xe000e010

080016d4 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 80016dc:	f000 ffa6 	bl	800262c <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f002 ffab 	bl	800463c <malloc>
 80016e6:	4603      	mov	r3, r0
 80016e8:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80016ea:	f000 ffad 	bl	8002648 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 80016ee:	68fb      	ldr	r3, [r7, #12]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
	if( pv )
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d006      	beq.n	8001714 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 8001706:	f000 ff91 	bl	800262c <vTaskSuspendAll>
		{
			free( pv );
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f002 ff9e 	bl	800464c <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 8001710:	f000 ff9a 	bl	8002648 <xTaskResumeAll>
	}
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f103 0208 	add.w	r2, r3, #8
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f04f 32ff 	mov.w	r2, #4294967295
 8001734:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f103 0208 	add.w	r2, r3, #8
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f103 0208 	add.w	r2, r3, #8
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop

08001778 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	1c5a      	adds	r2, r3, #1
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	601a      	str	r2, [r3, #0]
}
 80017b4:	bf00      	nop
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d6:	d103      	bne.n	80017e0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	e00c      	b.n	80017fa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3308      	adds	r3, #8
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	e002      	b.n	80017ee <vListInsert+0x2e>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d9f6      	bls.n	80017e8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	1c5a      	adds	r2, r3, #1
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	601a      	str	r2, [r3, #0]
}
 8001826:	bf00      	nop
 8001828:	3714      	adds	r7, #20
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop

08001834 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6892      	ldr	r2, [r2, #8]
 800184a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6852      	ldr	r2, [r2, #4]
 8001854:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	429a      	cmp	r2, r3
 800185e:	d103      	bne.n	8001868 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	1e5a      	subs	r2, r3, #1
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	3b04      	subs	r3, #4
 8001898:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	3b04      	subs	r3, #4
 80018a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	f023 0201 	bic.w	r2, r3, #1
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	3b04      	subs	r3, #4
 80018b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80018b8:	4a0c      	ldr	r2, [pc, #48]	; (80018ec <pxPortInitialiseStack+0x64>)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	3b14      	subs	r3, #20
 80018c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	3b04      	subs	r3, #4
 80018ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f06f 0202 	mvn.w	r2, #2
 80018d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	3b20      	subs	r3, #32
 80018dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80018de:	68fb      	ldr	r3, [r7, #12]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	080018f1 	.word	0x080018f1

080018f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80018f6:	f04f 0310 	mov.w	r3, #16
 80018fa:	f383 8811 	msr	BASEPRI, r3
 80018fe:	f3bf 8f6f 	isb	sy
 8001902:	f3bf 8f4f 	dsb	sy
 8001906:	607b      	str	r3, [r7, #4]

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	for( ;; );
 8001908:	e7fe      	b.n	8001908 <prvTaskExitError+0x18>
 800190a:	bf00      	nop
 800190c:	0000      	movs	r0, r0
	...

08001910 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001910:	4b07      	ldr	r3, [pc, #28]	; (8001930 <pxCurrentTCBConst2>)
 8001912:	6819      	ldr	r1, [r3, #0]
 8001914:	6808      	ldr	r0, [r1, #0]
 8001916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800191a:	f380 8809 	msr	PSP, r0
 800191e:	f3bf 8f6f 	isb	sy
 8001922:	f04f 0000 	mov.w	r0, #0
 8001926:	f380 8811 	msr	BASEPRI, r0
 800192a:	4770      	bx	lr
 800192c:	f3af 8000 	nop.w

08001930 <pxCurrentTCBConst2>:
 8001930:	200004d4 	.word	0x200004d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001934:	bf00      	nop
 8001936:	bf00      	nop

08001938 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001938:	4806      	ldr	r0, [pc, #24]	; (8001954 <prvPortStartFirstTask+0x1c>)
 800193a:	6800      	ldr	r0, [r0, #0]
 800193c:	6800      	ldr	r0, [r0, #0]
 800193e:	f380 8808 	msr	MSP, r0
 8001942:	b662      	cpsie	i
 8001944:	b661      	cpsie	f
 8001946:	f3bf 8f4f 	dsb	sy
 800194a:	f3bf 8f6f 	isb	sy
 800194e:	df00      	svc	0
 8001950:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8001952:	bf00      	nop
 8001954:	e000ed08 	.word	0xe000ed08

08001958 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800195c:	4a0f      	ldr	r2, [pc, #60]	; (800199c <xPortStartScheduler+0x44>)
 800195e:	4b0f      	ldr	r3, [pc, #60]	; (800199c <xPortStartScheduler+0x44>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001966:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001968:	4a0c      	ldr	r2, [pc, #48]	; (800199c <xPortStartScheduler+0x44>)
 800196a:	4b0c      	ldr	r3, [pc, #48]	; (800199c <xPortStartScheduler+0x44>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001972:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001974:	f000 f8a0 	bl	8001ab8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001978:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <xPortStartScheduler+0x48>)
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800197e:	f000 f8b7 	bl	8001af0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001982:	4a08      	ldr	r2, [pc, #32]	; (80019a4 <xPortStartScheduler+0x4c>)
 8001984:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <xPortStartScheduler+0x4c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800198c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800198e:	f7ff ffd3 	bl	8001938 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8001992:	f7ff ffad 	bl	80018f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	bd80      	pop	{r7, pc}
 800199c:	e000ed20 	.word	0xe000ed20
 80019a0:	20000008 	.word	0x20000008
 80019a4:	e000ef34 	.word	0xe000ef34

080019a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	f04f 0310 	mov.w	r3, #16
 80019b2:	f383 8811 	msr	BASEPRI, r3
 80019b6:	f3bf 8f6f 	isb	sy
 80019ba:	f3bf 8f4f 	dsb	sy
 80019be:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80019c0:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <vPortEnterCritical+0x30>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	3301      	adds	r3, #1
 80019c6:	4a04      	ldr	r2, [pc, #16]	; (80019d8 <vPortEnterCritical+0x30>)
 80019c8:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	20000008 	.word	0x20000008

080019dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 80019e2:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <vPortExitCritical+0x30>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	4a08      	ldr	r2, [pc, #32]	; (8001a0c <vPortExitCritical+0x30>)
 80019ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80019ec:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <vPortExitCritical+0x30>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d104      	bne.n	80019fe <vPortExitCritical+0x22>
 80019f4:	2300      	movs	r3, #0
 80019f6:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	20000008 	.word	0x20000008

08001a10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001a10:	f3ef 8009 	mrs	r0, PSP
 8001a14:	f3bf 8f6f 	isb	sy
 8001a18:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <pxCurrentTCBConst>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	f01e 0f10 	tst.w	lr, #16
 8001a20:	bf08      	it	eq
 8001a22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001a26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a2a:	6010      	str	r0, [r2, #0]
 8001a2c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8001a30:	f04f 0010 	mov.w	r0, #16
 8001a34:	f380 8811 	msr	BASEPRI, r0
 8001a38:	f3bf 8f4f 	dsb	sy
 8001a3c:	f3bf 8f6f 	isb	sy
 8001a40:	f000 ff4e 	bl	80028e0 <vTaskSwitchContext>
 8001a44:	f04f 0000 	mov.w	r0, #0
 8001a48:	f380 8811 	msr	BASEPRI, r0
 8001a4c:	bc08      	pop	{r3}
 8001a4e:	6819      	ldr	r1, [r3, #0]
 8001a50:	6808      	ldr	r0, [r1, #0]
 8001a52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a56:	f01e 0f10 	tst.w	lr, #16
 8001a5a:	bf08      	it	eq
 8001a5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001a60:	f380 8809 	msr	PSP, r0
 8001a64:	f3bf 8f6f 	isb	sy
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	f3af 8000 	nop.w

08001a70 <pxCurrentTCBConst>:
 8001a70:	200004d4 	.word	0x200004d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001a74:	bf00      	nop
 8001a76:	bf00      	nop

08001a78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001a7e:	f04f 0310 	mov.w	r3, #16
 8001a82:	f383 8811 	msr	BASEPRI, r3
 8001a86:	f3bf 8f6f 	isb	sy
 8001a8a:	f3bf 8f4f 	dsb	sy
 8001a8e:	603b      	str	r3, [r7, #0]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001a90:	f000 fe78 	bl	8002784 <xTaskIncrementTick>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <xPortSysTickHandler+0x3c>)
 8001a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	e000ed04 	.word	0xe000ed04

08001ab8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001abc:	4a08      	ldr	r2, [pc, #32]	; (8001ae0 <vPortSetupTimerInterrupt+0x28>)
 8001abe:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <vPortSetupTimerInterrupt+0x2c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4909      	ldr	r1, [pc, #36]	; (8001ae8 <vPortSetupTimerInterrupt+0x30>)
 8001ac4:	fba1 1303 	umull	r1, r3, r1, r3
 8001ac8:	099b      	lsrs	r3, r3, #6
 8001aca:	3b01      	subs	r3, #1
 8001acc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001ace:	4b07      	ldr	r3, [pc, #28]	; (8001aec <vPortSetupTimerInterrupt+0x34>)
 8001ad0:	2207      	movs	r2, #7
 8001ad2:	601a      	str	r2, [r3, #0]
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	e000e014 	.word	0xe000e014
 8001ae4:	20000004 	.word	0x20000004
 8001ae8:	10624dd3 	.word	0x10624dd3
 8001aec:	e000e010 	.word	0xe000e010

08001af0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001af0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001b00 <vPortEnableVFP+0x10>
 8001af4:	6801      	ldr	r1, [r0, #0]
 8001af6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001afa:	6001      	str	r1, [r0, #0]
 8001afc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8001afe:	bf00      	nop
 8001b00:	e000ed88 	.word	0xe000ed88

08001b04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 8001b12:	f7ff ff49 	bl	80019a8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b1e:	68f9      	ldr	r1, [r7, #12]
 8001b20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001b22:	fb01 f303 	mul.w	r3, r1, r3
 8001b26:	441a      	add	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b42:	3b01      	subs	r3, #1
 8001b44:	68f9      	ldr	r1, [r7, #12]
 8001b46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001b48:	fb01 f303 	mul.w	r3, r1, r3
 8001b4c:	441a      	add	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	22ff      	movs	r2, #255	; 0xff
 8001b56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	22ff      	movs	r2, #255	; 0xff
 8001b5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d114      	bne.n	8001b92 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d01a      	beq.n	8001ba6 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	3310      	adds	r3, #16
 8001b74:	4618      	mov	r0, r3
 8001b76:	f000 ff5b 	bl	8002a30 <xTaskRemoveFromEventList>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d012      	beq.n	8001ba6 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001b80:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <xQueueGenericReset+0xb0>)
 8001b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	f3bf 8f4f 	dsb	sy
 8001b8c:	f3bf 8f6f 	isb	sy
 8001b90:	e009      	b.n	8001ba6 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	3310      	adds	r3, #16
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff fdc0 	bl	800171c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	3324      	adds	r3, #36	; 0x24
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fdbb 	bl	800171c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001ba6:	f7ff ff19 	bl	80019dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001baa:	2301      	movs	r3, #1
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	e000ed04 	.word	0xe000ed04

08001bb8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b088      	sub	sp, #32
 8001bbc:	af02      	add	r7, sp, #8
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
 8001bc4:	603b      	str	r3, [r7, #0]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00d      	beq.n	8001bec <xQueueGenericCreateStatic+0x34>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001bd8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	4613      	mov	r3, r2
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	68b9      	ldr	r1, [r7, #8]
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f000 f806 	bl	8001bf8 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8001bec:	697b      	ldr	r3, [r7, #20]
	}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop

08001bf8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
 8001c04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d103      	bne.n	8001c14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	e002      	b.n	8001c1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001c26:	2101      	movs	r1, #1
 8001c28:	69b8      	ldr	r0, [r7, #24]
 8001c2a:	f7ff ff6b 	bl	8001b04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	78fa      	ldrb	r2, [r7, #3]
 8001c32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001c36:	bf00      	nop
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop

08001c40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08a      	sub	sp, #40	; 0x28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
 8001c4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	623b      	str	r3, [r7, #32]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001c56:	f7ff fea7 	bl	80019a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001c5a:	6a3b      	ldr	r3, [r7, #32]
 8001c5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c5e:	6a3b      	ldr	r3, [r7, #32]
 8001c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d302      	bcc.n	8001c6c <xQueueGenericSend+0x2c>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d129      	bne.n	8001cc0 <xQueueGenericSend+0x80>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	68b9      	ldr	r1, [r7, #8]
 8001c70:	6a38      	ldr	r0, [r7, #32]
 8001c72:	f000 f9bf 	bl	8001ff4 <prvCopyDataToQueue>
 8001c76:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001c78:	6a3b      	ldr	r3, [r7, #32]
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d010      	beq.n	8001ca2 <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001c80:	6a3b      	ldr	r3, [r7, #32]
 8001c82:	3324      	adds	r3, #36	; 0x24
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 fed3 	bl	8002a30 <xTaskRemoveFromEventList>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d013      	beq.n	8001cb8 <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001c90:	4b3f      	ldr	r3, [pc, #252]	; (8001d90 <xQueueGenericSend+0x150>)
 8001c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	f3bf 8f4f 	dsb	sy
 8001c9c:	f3bf 8f6f 	isb	sy
 8001ca0:	e00a      	b.n	8001cb8 <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d007      	beq.n	8001cb8 <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001ca8:	4b39      	ldr	r3, [pc, #228]	; (8001d90 <xQueueGenericSend+0x150>)
 8001caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	f3bf 8f4f 	dsb	sy
 8001cb4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001cb8:	f7ff fe90 	bl	80019dc <vPortExitCritical>
				return pdPASS;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e063      	b.n	8001d88 <xQueueGenericSend+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d103      	bne.n	8001cce <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001cc6:	f7ff fe89 	bl	80019dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	e05c      	b.n	8001d88 <xQueueGenericSend+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d106      	bne.n	8001ce2 <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f000 feff 	bl	8002adc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001ce2:	f7ff fe7b 	bl	80019dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001ce6:	f000 fca1 	bl	800262c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001cea:	f7ff fe5d 	bl	80019a8 <vPortEnterCritical>
 8001cee:	6a3b      	ldr	r3, [r7, #32]
 8001cf0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cf4:	b25b      	sxtb	r3, r3
 8001cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cfa:	d103      	bne.n	8001d04 <xQueueGenericSend+0xc4>
 8001cfc:	6a3b      	ldr	r3, [r7, #32]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d04:	6a3b      	ldr	r3, [r7, #32]
 8001d06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d0a:	b25b      	sxtb	r3, r3
 8001d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d10:	d103      	bne.n	8001d1a <xQueueGenericSend+0xda>
 8001d12:	6a3b      	ldr	r3, [r7, #32]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d1a:	f7ff fe5f 	bl	80019dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001d1e:	1d3a      	adds	r2, r7, #4
 8001d20:	f107 0314 	add.w	r3, r7, #20
 8001d24:	4611      	mov	r1, r2
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 feee 	bl	8002b08 <xTaskCheckForTimeOut>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d124      	bne.n	8001d7c <xQueueGenericSend+0x13c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001d32:	6a38      	ldr	r0, [r7, #32]
 8001d34:	f000 fa56 	bl	80021e4 <prvIsQueueFull>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d018      	beq.n	8001d70 <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001d3e:	6a3b      	ldr	r3, [r7, #32]
 8001d40:	3310      	adds	r3, #16
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	4611      	mov	r1, r2
 8001d46:	4618      	mov	r0, r3
 8001d48:	f000 fe3e 	bl	80029c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001d4c:	6a38      	ldr	r0, [r7, #32]
 8001d4e:	f000 f9e1 	bl	8002114 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001d52:	f000 fc79 	bl	8002648 <xTaskResumeAll>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f47f af7c 	bne.w	8001c56 <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
 8001d5e:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <xQueueGenericSend+0x150>)
 8001d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	f3bf 8f4f 	dsb	sy
 8001d6a:	f3bf 8f6f 	isb	sy
 8001d6e:	e772      	b.n	8001c56 <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001d70:	6a38      	ldr	r0, [r7, #32]
 8001d72:	f000 f9cf 	bl	8002114 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001d76:	f000 fc67 	bl	8002648 <xTaskResumeAll>
 8001d7a:	e76c      	b.n	8001c56 <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001d7c:	6a38      	ldr	r0, [r7, #32]
 8001d7e:	f000 f9c9 	bl	8002114 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001d82:	f000 fc61 	bl	8002648 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001d86:	2300      	movs	r3, #0
		}
	}
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3728      	adds	r7, #40	; 0x28
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	e000ed04 	.word	0xe000ed04

08001d94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08c      	sub	sp, #48	; 0x30
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
 8001da0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	62bb      	str	r3, [r7, #40]	; 0x28

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001da6:	f3ef 8211 	mrs	r2, BASEPRI
 8001daa:	f04f 0310 	mov.w	r3, #16
 8001dae:	f383 8811 	msr	BASEPRI, r3
 8001db2:	f3bf 8f6f 	isb	sy
 8001db6:	f3bf 8f4f 	dsb	sy
 8001dba:	61ba      	str	r2, [r7, #24]
 8001dbc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001dbe:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001dc0:	623b      	str	r3, [r7, #32]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d302      	bcc.n	8001dd4 <xQueueGenericSendFromISR+0x40>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d12a      	bne.n	8001e2a <xQueueGenericSendFromISR+0x96>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001dda:	77fb      	strb	r3, [r7, #31]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	68b9      	ldr	r1, [r7, #8]
 8001de0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001de2:	f000 f907 	bl	8001ff4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001de6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dee:	d112      	bne.n	8001e16 <xQueueGenericSendFromISR+0x82>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d015      	beq.n	8001e24 <xQueueGenericSendFromISR+0x90>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfa:	3324      	adds	r3, #36	; 0x24
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f000 fe17 	bl	8002a30 <xTaskRemoveFromEventList>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d00d      	beq.n	8001e24 <xQueueGenericSendFromISR+0x90>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00a      	beq.n	8001e24 <xQueueGenericSendFromISR+0x90>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	e006      	b.n	8001e24 <xQueueGenericSendFromISR+0x90>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001e16:	7ffb      	ldrb	r3, [r7, #31]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	b25a      	sxtb	r2, r3
 8001e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001e24:	2301      	movs	r3, #1
 8001e26:	62fb      	str	r3, [r7, #44]	; 0x2c
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
 8001e28:	e001      	b.n	8001e2e <xQueueGenericSendFromISR+0x9a>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e2e:	6a3b      	ldr	r3, [r7, #32]
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3730      	adds	r7, #48	; 0x30
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop

08001e44 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08a      	sub	sp, #40	; 0x28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
 8001e50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	623b      	str	r3, [r7, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001e5a:	f7ff fda5 	bl	80019a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001e5e:	6a3b      	ldr	r3, [r7, #32]
 8001e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e62:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d046      	beq.n	8001ef8 <xQueueGenericReceive+0xb4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8001e6a:	6a3b      	ldr	r3, [r7, #32]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001e70:	68b9      	ldr	r1, [r7, #8]
 8001e72:	6a38      	ldr	r0, [r7, #32]
 8001e74:	f000 f928 	bl	80020c8 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d121      	bne.n	8001ec2 <xQueueGenericReceive+0x7e>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	1e5a      	subs	r2, r3, #1
 8001e82:	6a3b      	ldr	r3, [r7, #32]
 8001e84:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001e86:	6a3b      	ldr	r3, [r7, #32]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d104      	bne.n	8001e98 <xQueueGenericReceive+0x54>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8001e8e:	f001 f82b 	bl	8002ee8 <pvTaskIncrementMutexHeldCount>
 8001e92:	4602      	mov	r2, r0
 8001e94:	6a3b      	ldr	r3, [r7, #32]
 8001e96:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e98:	6a3b      	ldr	r3, [r7, #32]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d027      	beq.n	8001ef0 <xQueueGenericReceive+0xac>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ea0:	6a3b      	ldr	r3, [r7, #32]
 8001ea2:	3310      	adds	r3, #16
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f000 fdc3 	bl	8002a30 <xTaskRemoveFromEventList>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d01f      	beq.n	8001ef0 <xQueueGenericReceive+0xac>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8001eb0:	4b4f      	ldr	r3, [pc, #316]	; (8001ff0 <xQueueGenericReceive+0x1ac>)
 8001eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	f3bf 8f4f 	dsb	sy
 8001ebc:	f3bf 8f6f 	isb	sy
 8001ec0:	e016      	b.n	8001ef0 <xQueueGenericReceive+0xac>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ec8:	6a3b      	ldr	r3, [r7, #32]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00f      	beq.n	8001ef0 <xQueueGenericReceive+0xac>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ed0:	6a3b      	ldr	r3, [r7, #32]
 8001ed2:	3324      	adds	r3, #36	; 0x24
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f000 fdab 	bl	8002a30 <xTaskRemoveFromEventList>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d007      	beq.n	8001ef0 <xQueueGenericReceive+0xac>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8001ee0:	4b43      	ldr	r3, [pc, #268]	; (8001ff0 <xQueueGenericReceive+0x1ac>)
 8001ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	f3bf 8f4f 	dsb	sy
 8001eec:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8001ef0:	f7ff fd74 	bl	80019dc <vPortExitCritical>
				return pdPASS;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e077      	b.n	8001fe8 <xQueueGenericReceive+0x1a4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d103      	bne.n	8001f06 <xQueueGenericReceive+0xc2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001efe:	f7ff fd6d 	bl	80019dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001f02:	2300      	movs	r3, #0
 8001f04:	e070      	b.n	8001fe8 <xQueueGenericReceive+0x1a4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d106      	bne.n	8001f1a <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001f0c:	f107 0310 	add.w	r3, r7, #16
 8001f10:	4618      	mov	r0, r3
 8001f12:	f000 fde3 	bl	8002adc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001f16:	2301      	movs	r3, #1
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001f1a:	f7ff fd5f 	bl	80019dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001f1e:	f000 fb85 	bl	800262c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001f22:	f7ff fd41 	bl	80019a8 <vPortEnterCritical>
 8001f26:	6a3b      	ldr	r3, [r7, #32]
 8001f28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f2c:	b25b      	sxtb	r3, r3
 8001f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f32:	d103      	bne.n	8001f3c <xQueueGenericReceive+0xf8>
 8001f34:	6a3b      	ldr	r3, [r7, #32]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f3c:	6a3b      	ldr	r3, [r7, #32]
 8001f3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f42:	b25b      	sxtb	r3, r3
 8001f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f48:	d103      	bne.n	8001f52 <xQueueGenericReceive+0x10e>
 8001f4a:	6a3b      	ldr	r3, [r7, #32]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f52:	f7ff fd43 	bl	80019dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001f56:	1d3a      	adds	r2, r7, #4
 8001f58:	f107 0310 	add.w	r3, r7, #16
 8001f5c:	4611      	mov	r1, r2
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 fdd2 	bl	8002b08 <xTaskCheckForTimeOut>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d131      	bne.n	8001fce <xQueueGenericReceive+0x18a>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001f6a:	6a38      	ldr	r0, [r7, #32]
 8001f6c:	f000 f924 	bl	80021b8 <prvIsQueueEmpty>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d025      	beq.n	8001fc2 <xQueueGenericReceive+0x17e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001f76:	6a3b      	ldr	r3, [r7, #32]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d108      	bne.n	8001f90 <xQueueGenericReceive+0x14c>
					{
						taskENTER_CRITICAL();
 8001f7e:	f7ff fd13 	bl	80019a8 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 ff04 	bl	8002d94 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8001f8c:	f7ff fd26 	bl	80019dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001f90:	6a3b      	ldr	r3, [r7, #32]
 8001f92:	3324      	adds	r3, #36	; 0x24
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	4611      	mov	r1, r2
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f000 fd15 	bl	80029c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001f9e:	6a38      	ldr	r0, [r7, #32]
 8001fa0:	f000 f8b8 	bl	8002114 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001fa4:	f000 fb50 	bl	8002648 <xTaskResumeAll>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f47f af55 	bne.w	8001e5a <xQueueGenericReceive+0x16>
				{
					portYIELD_WITHIN_API();
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <xQueueGenericReceive+0x1ac>)
 8001fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	f3bf 8f4f 	dsb	sy
 8001fbc:	f3bf 8f6f 	isb	sy
 8001fc0:	e74b      	b.n	8001e5a <xQueueGenericReceive+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001fc2:	6a38      	ldr	r0, [r7, #32]
 8001fc4:	f000 f8a6 	bl	8002114 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001fc8:	f000 fb3e 	bl	8002648 <xTaskResumeAll>
 8001fcc:	e745      	b.n	8001e5a <xQueueGenericReceive+0x16>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8001fce:	6a38      	ldr	r0, [r7, #32]
 8001fd0:	f000 f8a0 	bl	8002114 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001fd4:	f000 fb38 	bl	8002648 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001fd8:	6a38      	ldr	r0, [r7, #32]
 8001fda:	f000 f8ed 	bl	80021b8 <prvIsQueueEmpty>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f43f af3a 	beq.w	8001e5a <xQueueGenericReceive+0x16>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001fe6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3728      	adds	r7, #40	; 0x28
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	e000ed04 	.word	0xe000ed04

08001ff4 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002008:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10d      	bne.n	800202e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d14d      	bne.n	80020b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	4618      	mov	r0, r3
 8002020:	f000 ff16 	bl	8002e50 <xTaskPriorityDisinherit>
 8002024:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	e043      	b.n	80020b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d119      	bne.n	8002068 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6898      	ldr	r0, [r3, #8]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	461a      	mov	r2, r3
 800203e:	68b9      	ldr	r1, [r7, #8]
 8002040:	f002 fb0c 	bl	800465c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204c:	441a      	add	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	429a      	cmp	r2, r3
 800205c:	d32b      	bcc.n	80020b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	609a      	str	r2, [r3, #8]
 8002066:	e026      	b.n	80020b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	68d8      	ldr	r0, [r3, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002070:	461a      	mov	r2, r3
 8002072:	68b9      	ldr	r1, [r7, #8]
 8002074:	f002 faf2 	bl	800465c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	68da      	ldr	r2, [r3, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	425b      	negs	r3, r3
 8002082:	441a      	add	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	68da      	ldr	r2, [r3, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	429a      	cmp	r2, r3
 8002092:	d207      	bcs.n	80020a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	425b      	negs	r3, r3
 800209e:	441a      	add	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d105      	bne.n	80020b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d002      	beq.n	80020b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1c5a      	adds	r2, r3, #1
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80020be:	697b      	ldr	r3, [r7, #20]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d018      	beq.n	800210c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68da      	ldr	r2, [r3, #12]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	441a      	add	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d303      	bcc.n	80020fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68d9      	ldr	r1, [r3, #12]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	461a      	mov	r2, r3
 8002106:	6838      	ldr	r0, [r7, #0]
 8002108:	f002 faa8 	bl	800465c <memcpy>
	}
}
 800210c:	bf00      	nop
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800211c:	f7ff fc44 	bl	80019a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002126:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002128:	e011      	b.n	800214e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	2b00      	cmp	r3, #0
 8002130:	d012      	beq.n	8002158 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3324      	adds	r3, #36	; 0x24
 8002136:	4618      	mov	r0, r3
 8002138:	f000 fc7a 	bl	8002a30 <xTaskRemoveFromEventList>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002142:	f000 fd25 	bl	8002b90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002146:	7bfb      	ldrb	r3, [r7, #15]
 8002148:	3b01      	subs	r3, #1
 800214a:	b2db      	uxtb	r3, r3
 800214c:	73fb      	strb	r3, [r7, #15]
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800214e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002152:	2b00      	cmp	r3, #0
 8002154:	dce9      	bgt.n	800212a <prvUnlockQueue+0x16>
 8002156:	e000      	b.n	800215a <prvUnlockQueue+0x46>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
 8002158:	bf00      	nop
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	22ff      	movs	r2, #255	; 0xff
 800215e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002162:	f7ff fc3b 	bl	80019dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002166:	f7ff fc1f 	bl	80019a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002170:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002172:	e011      	b.n	8002198 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d012      	beq.n	80021a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3310      	adds	r3, #16
 8002180:	4618      	mov	r0, r3
 8002182:	f000 fc55 	bl	8002a30 <xTaskRemoveFromEventList>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800218c:	f000 fd00 	bl	8002b90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002190:	7bbb      	ldrb	r3, [r7, #14]
 8002192:	3b01      	subs	r3, #1
 8002194:	b2db      	uxtb	r3, r3
 8002196:	73bb      	strb	r3, [r7, #14]
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002198:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800219c:	2b00      	cmp	r3, #0
 800219e:	dce9      	bgt.n	8002174 <prvUnlockQueue+0x60>
 80021a0:	e000      	b.n	80021a4 <prvUnlockQueue+0x90>

				--cRxLock;
			}
			else
			{
				break;
 80021a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	22ff      	movs	r2, #255	; 0xff
 80021a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80021ac:	f7ff fc16 	bl	80019dc <vPortExitCritical>
}
 80021b0:	bf00      	nop
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80021c0:	f7ff fbf2 	bl	80019a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d102      	bne.n	80021d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80021cc:	2301      	movs	r3, #1
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	e001      	b.n	80021d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80021d6:	f7ff fc01 	bl	80019dc <vPortExitCritical>

	return xReturn;
 80021da:	68fb      	ldr	r3, [r7, #12]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80021ec:	f7ff fbdc 	bl	80019a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d102      	bne.n	8002202 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80021fc:	2301      	movs	r3, #1
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	e001      	b.n	8002206 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002202:	2300      	movs	r3, #0
 8002204:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002206:	f7ff fbe9 	bl	80019dc <vPortExitCritical>

	return xReturn;
 800220a:	68fb      	ldr	r3, [r7, #12]
}
 800220c:	4618      	mov	r0, r3
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002224:	f7ff fbc0 	bl	80019a8 <vPortEnterCritical>
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800222e:	b25b      	sxtb	r3, r3
 8002230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002234:	d103      	bne.n	800223e <vQueueWaitForMessageRestricted+0x2a>
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002244:	b25b      	sxtb	r3, r3
 8002246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224a:	d103      	bne.n	8002254 <vQueueWaitForMessageRestricted+0x40>
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002254:	f7ff fbc2 	bl	80019dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225c:	2b00      	cmp	r3, #0
 800225e:	d106      	bne.n	800226e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	3324      	adds	r3, #36	; 0x24
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	68b9      	ldr	r1, [r7, #8]
 8002268:	4618      	mov	r0, r3
 800226a:	f000 fbc3 	bl	80029f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800226e:	6978      	ldr	r0, [r7, #20]
 8002270:	f7ff ff50 	bl	8002114 <prvUnlockQueue>
	}
 8002274:	bf00      	nop
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08a      	sub	sp, #40	; 0x28
 8002280:	af04      	add	r7, sp, #16
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
 8002288:	603b      	str	r3, [r7, #0]
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
		configASSERT( pxTaskBuffer != NULL );

		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800228a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228c:	2b00      	cmp	r3, #0
 800228e:	d01e      	beq.n	80022ce <xTaskCreateStatic+0x52>
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	2b00      	cmp	r3, #0
 8002294:	d01b      	beq.n	80022ce <xTaskCreateStatic+0x52>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002298:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800229e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	2202      	movs	r2, #2
 80022a4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80022a8:	2300      	movs	r3, #0
 80022aa:	9303      	str	r3, [sp, #12]
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	9302      	str	r3, [sp, #8]
 80022b0:	f107 0310 	add.w	r3, r7, #16
 80022b4:	9301      	str	r3, [sp, #4]
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	68b9      	ldr	r1, [r7, #8]
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f000 f851 	bl	8002368 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80022c6:	6978      	ldr	r0, [r7, #20]
 80022c8:	f000 f8c6 	bl	8002458 <prvAddNewTaskToReadyList>
 80022cc:	e001      	b.n	80022d2 <xTaskCreateStatic+0x56>
		}
		else
		{
			xReturn = NULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
		}

		return xReturn;
 80022d2:	693b      	ldr	r3, [r7, #16]
	}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08c      	sub	sp, #48	; 0x30
 80022e0:	af04      	add	r7, sp, #16
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	603b      	str	r3, [r7, #0]
 80022e8:	4613      	mov	r3, r2
 80022ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022ec:	88fb      	ldrh	r3, [r7, #6]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff f9ef 	bl	80016d4 <pvPortMalloc>
 80022f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00e      	beq.n	800231c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80022fe:	205c      	movs	r0, #92	; 0x5c
 8002300:	f7ff f9e8 	bl	80016d4 <pvPortMalloc>
 8002304:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	631a      	str	r2, [r3, #48]	; 0x30
 8002312:	e005      	b.n	8002320 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002314:	6978      	ldr	r0, [r7, #20]
 8002316:	f7ff f9ef 	bl	80016f8 <vPortFree>
 800231a:	e001      	b.n	8002320 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800231c:	2300      	movs	r3, #0
 800231e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d017      	beq.n	8002356 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800232e:	88fa      	ldrh	r2, [r7, #6]
 8002330:	2300      	movs	r3, #0
 8002332:	9303      	str	r3, [sp, #12]
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	9302      	str	r3, [sp, #8]
 8002338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800233a:	9301      	str	r3, [sp, #4]
 800233c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	68b9      	ldr	r1, [r7, #8]
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 f80f 	bl	8002368 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800234a:	69f8      	ldr	r0, [r7, #28]
 800234c:	f000 f884 	bl	8002458 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002350:	2301      	movs	r3, #1
 8002352:	61bb      	str	r3, [r7, #24]
 8002354:	e002      	b.n	800235c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002356:	f04f 33ff 	mov.w	r3, #4294967295
 800235a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800235c:	69bb      	ldr	r3, [r7, #24]
	}
 800235e:	4618      	mov	r0, r3
 8002360:	3720      	adds	r7, #32
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop

08002368 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
 8002374:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002378:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	461a      	mov	r2, r3
 8002380:	21a5      	movs	r1, #165	; 0xa5
 8002382:	f002 f976 	bl	8004672 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002388:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002390:	3b01      	subs	r3, #1
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	f023 0307 	bic.w	r3, r3, #7
 800239e:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]
 80023a4:	e012      	b.n	80023cc <prvInitialiseNewTask+0x64>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	4413      	add	r3, r2
 80023ac:	7819      	ldrb	r1, [r3, #0]
 80023ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	4413      	add	r3, r2
 80023b4:	3334      	adds	r3, #52	; 0x34
 80023b6:	460a      	mov	r2, r1
 80023b8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	4413      	add	r3, r2
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d006      	beq.n	80023d4 <prvInitialiseNewTask+0x6c>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	3301      	adds	r3, #1
 80023ca:	617b      	str	r3, [r7, #20]
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	2b0f      	cmp	r3, #15
 80023d0:	d9e9      	bls.n	80023a6 <prvInitialiseNewTask+0x3e>
 80023d2:	e000      	b.n	80023d6 <prvInitialiseNewTask+0x6e>
		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
		{
			break;
 80023d4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80023d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80023de:	6a3b      	ldr	r3, [r7, #32]
 80023e0:	2b37      	cmp	r3, #55	; 0x37
 80023e2:	d901      	bls.n	80023e8 <prvInitialiseNewTask+0x80>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80023e4:	2337      	movs	r3, #55	; 0x37
 80023e6:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80023e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ea:	6a3a      	ldr	r2, [r7, #32]
 80023ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80023ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f0:	6a3a      	ldr	r2, [r7, #32]
 80023f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80023f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f6:	2200      	movs	r2, #0
 80023f8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80023fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fc:	3304      	adds	r3, #4
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff f9ac 	bl	800175c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002406:	3318      	adds	r3, #24
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff f9a7 	bl	800175c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800240e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002410:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002412:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002414:	6a3b      	ldr	r3, [r7, #32]
 8002416:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800241a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800241e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002422:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002426:	2200      	movs	r2, #0
 8002428:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800242a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	68f9      	ldr	r1, [r7, #12]
 8002436:	6938      	ldr	r0, [r7, #16]
 8002438:	f7ff fa26 	bl	8001888 <pxPortInitialiseStack>
 800243c:	4602      	mov	r2, r0
 800243e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002440:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	2b00      	cmp	r3, #0
 8002446:	d002      	beq.n	800244e <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800244c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800244e:	bf00      	nop
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop

08002458 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002460:	f7ff faa2 	bl	80019a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002464:	4b2d      	ldr	r3, [pc, #180]	; (800251c <prvAddNewTaskToReadyList+0xc4>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	3301      	adds	r3, #1
 800246a:	4a2c      	ldr	r2, [pc, #176]	; (800251c <prvAddNewTaskToReadyList+0xc4>)
 800246c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800246e:	4b2c      	ldr	r3, [pc, #176]	; (8002520 <prvAddNewTaskToReadyList+0xc8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d109      	bne.n	800248a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002476:	4a2a      	ldr	r2, [pc, #168]	; (8002520 <prvAddNewTaskToReadyList+0xc8>)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800247c:	4b27      	ldr	r3, [pc, #156]	; (800251c <prvAddNewTaskToReadyList+0xc4>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d110      	bne.n	80024a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002484:	f000 fba8 	bl	8002bd8 <prvInitialiseTaskLists>
 8002488:	e00d      	b.n	80024a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800248a:	4b26      	ldr	r3, [pc, #152]	; (8002524 <prvAddNewTaskToReadyList+0xcc>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d109      	bne.n	80024a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002492:	4b23      	ldr	r3, [pc, #140]	; (8002520 <prvAddNewTaskToReadyList+0xc8>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249c:	429a      	cmp	r2, r3
 800249e:	d802      	bhi.n	80024a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80024a0:	4a1f      	ldr	r2, [pc, #124]	; (8002520 <prvAddNewTaskToReadyList+0xc8>)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80024a6:	4b20      	ldr	r3, [pc, #128]	; (8002528 <prvAddNewTaskToReadyList+0xd0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	3301      	adds	r3, #1
 80024ac:	4a1e      	ldr	r2, [pc, #120]	; (8002528 <prvAddNewTaskToReadyList+0xd0>)
 80024ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80024b0:	4b1d      	ldr	r3, [pc, #116]	; (8002528 <prvAddNewTaskToReadyList+0xd0>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024bc:	4b1b      	ldr	r3, [pc, #108]	; (800252c <prvAddNewTaskToReadyList+0xd4>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d903      	bls.n	80024cc <prvAddNewTaskToReadyList+0x74>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c8:	4a18      	ldr	r2, [pc, #96]	; (800252c <prvAddNewTaskToReadyList+0xd4>)
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024d0:	4613      	mov	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4a15      	ldr	r2, [pc, #84]	; (8002530 <prvAddNewTaskToReadyList+0xd8>)
 80024da:	441a      	add	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3304      	adds	r3, #4
 80024e0:	4619      	mov	r1, r3
 80024e2:	4610      	mov	r0, r2
 80024e4:	f7ff f948 	bl	8001778 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80024e8:	f7ff fa78 	bl	80019dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80024ec:	4b0d      	ldr	r3, [pc, #52]	; (8002524 <prvAddNewTaskToReadyList+0xcc>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00e      	beq.n	8002512 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80024f4:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <prvAddNewTaskToReadyList+0xc8>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fe:	429a      	cmp	r2, r3
 8002500:	d207      	bcs.n	8002512 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002502:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <prvAddNewTaskToReadyList+0xdc>)
 8002504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	f3bf 8f4f 	dsb	sy
 800250e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	200009a8 	.word	0x200009a8
 8002520:	200004d4 	.word	0x200004d4
 8002524:	200009b4 	.word	0x200009b4
 8002528:	200009c4 	.word	0x200009c4
 800252c:	200009b0 	.word	0x200009b0
 8002530:	200004d8 	.word	0x200004d8
 8002534:	e000ed04 	.word	0xe000ed04

08002538 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002540:	2300      	movs	r3, #0
 8002542:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d008      	beq.n	800255c <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 800254a:	f000 f86f 	bl	800262c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800254e:	2100      	movs	r1, #0
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 fcdd 	bl	8002f10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002556:	f000 f877 	bl	8002648 <xTaskResumeAll>
 800255a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d107      	bne.n	8002572 <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
 8002562:	4b06      	ldr	r3, [pc, #24]	; (800257c <vTaskDelay+0x44>)
 8002564:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	f3bf 8f4f 	dsb	sy
 800256e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002572:	bf00      	nop
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	e000ed04 	.word	0xe000ed04

08002580 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b08a      	sub	sp, #40	; 0x28
 8002584:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002586:	2300      	movs	r3, #0
 8002588:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800258a:	2300      	movs	r3, #0
 800258c:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800258e:	1d3a      	adds	r2, r7, #4
 8002590:	f107 0108 	add.w	r1, r7, #8
 8002594:	f107 030c 	add.w	r3, r7, #12
 8002598:	4618      	mov	r0, r3
 800259a:	f7fd fe9d 	bl	80002d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	9202      	str	r2, [sp, #8]
 80025a6:	9301      	str	r3, [sp, #4]
 80025a8:	2300      	movs	r3, #0
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	2300      	movs	r3, #0
 80025ae:	460a      	mov	r2, r1
 80025b0:	4918      	ldr	r1, [pc, #96]	; (8002614 <vTaskStartScheduler+0x94>)
 80025b2:	4819      	ldr	r0, [pc, #100]	; (8002618 <vTaskStartScheduler+0x98>)
 80025b4:	f7ff fe62 	bl	800227c <xTaskCreateStatic>
 80025b8:	4602      	mov	r2, r0
 80025ba:	4b18      	ldr	r3, [pc, #96]	; (800261c <vTaskStartScheduler+0x9c>)
 80025bc:	601a      	str	r2, [r3, #0]
												( void * ) NULL,
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80025be:	4b17      	ldr	r3, [pc, #92]	; (800261c <vTaskStartScheduler+0x9c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d002      	beq.n	80025cc <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
 80025c6:	2301      	movs	r3, #1
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	e001      	b.n	80025d0 <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d102      	bne.n	80025dc <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 80025d6:	f000 fcef 	bl	8002fb8 <xTimerCreateTimerTask>
 80025da:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d114      	bne.n	800260c <vTaskStartScheduler+0x8c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80025e2:	f04f 0310 	mov.w	r3, #16
 80025e6:	f383 8811 	msr	BASEPRI, r3
 80025ea:	f3bf 8f6f 	isb	sy
 80025ee:	f3bf 8f4f 	dsb	sy
 80025f2:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80025f4:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <vTaskStartScheduler+0xa0>)
 80025f6:	f04f 32ff 	mov.w	r2, #4294967295
 80025fa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80025fc:	4b09      	ldr	r3, [pc, #36]	; (8002624 <vTaskStartScheduler+0xa4>)
 80025fe:	2201      	movs	r2, #1
 8002600:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002602:	4b09      	ldr	r3, [pc, #36]	; (8002628 <vTaskStartScheduler+0xa8>)
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002608:	f7ff f9a6 	bl	8001958 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800260c:	bf00      	nop
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	080058e0 	.word	0x080058e0
 8002618:	08002ba9 	.word	0x08002ba9
 800261c:	200009cc 	.word	0x200009cc
 8002620:	200009c8 	.word	0x200009c8
 8002624:	200009b4 	.word	0x200009b4
 8002628:	200009ac 	.word	0x200009ac

0800262c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002630:	4b04      	ldr	r3, [pc, #16]	; (8002644 <vTaskSuspendAll+0x18>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	3301      	adds	r3, #1
 8002636:	4a03      	ldr	r2, [pc, #12]	; (8002644 <vTaskSuspendAll+0x18>)
 8002638:	6013      	str	r3, [r2, #0]
}
 800263a:	bf00      	nop
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	200009d0 	.word	0x200009d0

08002648 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002652:	2300      	movs	r3, #0
 8002654:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002656:	f7ff f9a7 	bl	80019a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800265a:	4b39      	ldr	r3, [pc, #228]	; (8002740 <xTaskResumeAll+0xf8>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	3b01      	subs	r3, #1
 8002660:	4a37      	ldr	r2, [pc, #220]	; (8002740 <xTaskResumeAll+0xf8>)
 8002662:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002664:	4b36      	ldr	r3, [pc, #216]	; (8002740 <xTaskResumeAll+0xf8>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d162      	bne.n	8002732 <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800266c:	4b35      	ldr	r3, [pc, #212]	; (8002744 <xTaskResumeAll+0xfc>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d05e      	beq.n	8002732 <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002674:	e02f      	b.n	80026d6 <xTaskResumeAll+0x8e>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002676:	4b34      	ldr	r3, [pc, #208]	; (8002748 <xTaskResumeAll+0x100>)
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	3318      	adds	r3, #24
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff f8d6 	bl	8001834 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	3304      	adds	r3, #4
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff f8d1 	bl	8001834 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002696:	4b2d      	ldr	r3, [pc, #180]	; (800274c <xTaskResumeAll+0x104>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d903      	bls.n	80026a6 <xTaskResumeAll+0x5e>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a2:	4a2a      	ldr	r2, [pc, #168]	; (800274c <xTaskResumeAll+0x104>)
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026aa:	4613      	mov	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4a27      	ldr	r2, [pc, #156]	; (8002750 <xTaskResumeAll+0x108>)
 80026b4:	441a      	add	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	3304      	adds	r3, #4
 80026ba:	4619      	mov	r1, r3
 80026bc:	4610      	mov	r0, r2
 80026be:	f7ff f85b 	bl	8001778 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c6:	4b23      	ldr	r3, [pc, #140]	; (8002754 <xTaskResumeAll+0x10c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d302      	bcc.n	80026d6 <xTaskResumeAll+0x8e>
					{
						xYieldPending = pdTRUE;
 80026d0:	4b21      	ldr	r3, [pc, #132]	; (8002758 <xTaskResumeAll+0x110>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026d6:	4b1c      	ldr	r3, [pc, #112]	; (8002748 <xTaskResumeAll+0x100>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1cb      	bne.n	8002676 <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <xTaskResumeAll+0xa0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80026e4:	f000 fb12 	bl	8002d0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80026e8:	4b1c      	ldr	r3, [pc, #112]	; (800275c <xTaskResumeAll+0x114>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d010      	beq.n	8002716 <xTaskResumeAll+0xce>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80026f4:	f000 f846 	bl	8002784 <xTaskIncrementTick>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d002      	beq.n	8002704 <xTaskResumeAll+0xbc>
							{
								xYieldPending = pdTRUE;
 80026fe:	4b16      	ldr	r3, [pc, #88]	; (8002758 <xTaskResumeAll+0x110>)
 8002700:	2201      	movs	r2, #1
 8002702:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3b01      	subs	r3, #1
 8002708:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1f1      	bne.n	80026f4 <xTaskResumeAll+0xac>

						uxPendedTicks = 0;
 8002710:	4b12      	ldr	r3, [pc, #72]	; (800275c <xTaskResumeAll+0x114>)
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002716:	4b10      	ldr	r3, [pc, #64]	; (8002758 <xTaskResumeAll+0x110>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d009      	beq.n	8002732 <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800271e:	2301      	movs	r3, #1
 8002720:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002722:	4b0f      	ldr	r3, [pc, #60]	; (8002760 <xTaskResumeAll+0x118>)
 8002724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	f3bf 8f4f 	dsb	sy
 800272e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002732:	f7ff f953 	bl	80019dc <vPortExitCritical>

	return xAlreadyYielded;
 8002736:	68bb      	ldr	r3, [r7, #8]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	200009d0 	.word	0x200009d0
 8002744:	200009a8 	.word	0x200009a8
 8002748:	20000968 	.word	0x20000968
 800274c:	200009b0 	.word	0x200009b0
 8002750:	200004d8 	.word	0x200004d8
 8002754:	200004d4 	.word	0x200004d4
 8002758:	200009bc 	.word	0x200009bc
 800275c:	200009b8 	.word	0x200009b8
 8002760:	e000ed04 	.word	0xe000ed04

08002764 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800276a:	4b05      	ldr	r3, [pc, #20]	; (8002780 <xTaskGetTickCount+0x1c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002770:	687b      	ldr	r3, [r7, #4]
}
 8002772:	4618      	mov	r0, r3
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	200009ac 	.word	0x200009ac

08002784 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800278a:	2300      	movs	r3, #0
 800278c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800278e:	4b49      	ldr	r3, [pc, #292]	; (80028b4 <xTaskIncrementTick+0x130>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d17d      	bne.n	8002892 <xTaskIncrementTick+0x10e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8002796:	4b48      	ldr	r3, [pc, #288]	; (80028b8 <xTaskIncrementTick+0x134>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	3301      	adds	r3, #1
 800279c:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800279e:	4a46      	ldr	r2, [pc, #280]	; (80028b8 <xTaskIncrementTick+0x134>)
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d110      	bne.n	80027cc <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 80027aa:	4b44      	ldr	r3, [pc, #272]	; (80028bc <xTaskIncrementTick+0x138>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	4b43      	ldr	r3, [pc, #268]	; (80028c0 <xTaskIncrementTick+0x13c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a41      	ldr	r2, [pc, #260]	; (80028bc <xTaskIncrementTick+0x138>)
 80027b6:	6013      	str	r3, [r2, #0]
 80027b8:	4a41      	ldr	r2, [pc, #260]	; (80028c0 <xTaskIncrementTick+0x13c>)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	4b41      	ldr	r3, [pc, #260]	; (80028c4 <xTaskIncrementTick+0x140>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	3301      	adds	r3, #1
 80027c4:	4a3f      	ldr	r2, [pc, #252]	; (80028c4 <xTaskIncrementTick+0x140>)
 80027c6:	6013      	str	r3, [r2, #0]
 80027c8:	f000 faa0 	bl	8002d0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80027cc:	4b3e      	ldr	r3, [pc, #248]	; (80028c8 <xTaskIncrementTick+0x144>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d34e      	bcc.n	8002874 <xTaskIncrementTick+0xf0>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027d6:	4b39      	ldr	r3, [pc, #228]	; (80028bc <xTaskIncrementTick+0x138>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <xTaskIncrementTick+0x60>
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <xTaskIncrementTick+0x62>
 80027e4:	2300      	movs	r3, #0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d004      	beq.n	80027f4 <xTaskIncrementTick+0x70>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027ea:	4b37      	ldr	r3, [pc, #220]	; (80028c8 <xTaskIncrementTick+0x144>)
 80027ec:	f04f 32ff 	mov.w	r2, #4294967295
 80027f0:	601a      	str	r2, [r3, #0]
					break;
 80027f2:	e03f      	b.n	8002874 <xTaskIncrementTick+0xf0>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80027f4:	4b31      	ldr	r3, [pc, #196]	; (80028bc <xTaskIncrementTick+0x138>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	429a      	cmp	r2, r3
 800280a:	d203      	bcs.n	8002814 <xTaskIncrementTick+0x90>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800280c:	4a2e      	ldr	r2, [pc, #184]	; (80028c8 <xTaskIncrementTick+0x144>)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6013      	str	r3, [r2, #0]
						break;
 8002812:	e02f      	b.n	8002874 <xTaskIncrementTick+0xf0>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	3304      	adds	r3, #4
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff f80b 	bl	8001834 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002822:	2b00      	cmp	r3, #0
 8002824:	d004      	beq.n	8002830 <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	3318      	adds	r3, #24
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff f802 	bl	8001834 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002834:	4b25      	ldr	r3, [pc, #148]	; (80028cc <xTaskIncrementTick+0x148>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	d903      	bls.n	8002844 <xTaskIncrementTick+0xc0>
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002840:	4a22      	ldr	r2, [pc, #136]	; (80028cc <xTaskIncrementTick+0x148>)
 8002842:	6013      	str	r3, [r2, #0]
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002848:	4613      	mov	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4a1f      	ldr	r2, [pc, #124]	; (80028d0 <xTaskIncrementTick+0x14c>)
 8002852:	441a      	add	r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	3304      	adds	r3, #4
 8002858:	4619      	mov	r1, r3
 800285a:	4610      	mov	r0, r2
 800285c:	f7fe ff8c 	bl	8001778 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002864:	4b1b      	ldr	r3, [pc, #108]	; (80028d4 <xTaskIncrementTick+0x150>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286a:	429a      	cmp	r2, r3
 800286c:	d3b3      	bcc.n	80027d6 <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 800286e:	2301      	movs	r3, #1
 8002870:	617b      	str	r3, [r7, #20]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
 8002872:	e7b0      	b.n	80027d6 <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002874:	4b17      	ldr	r3, [pc, #92]	; (80028d4 <xTaskIncrementTick+0x150>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800287a:	4915      	ldr	r1, [pc, #84]	; (80028d0 <xTaskIncrementTick+0x14c>)
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d907      	bls.n	800289c <xTaskIncrementTick+0x118>
			{
				xSwitchRequired = pdTRUE;
 800288c:	2301      	movs	r3, #1
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	e004      	b.n	800289c <xTaskIncrementTick+0x118>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002892:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <xTaskIncrementTick+0x154>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	3301      	adds	r3, #1
 8002898:	4a0f      	ldr	r2, [pc, #60]	; (80028d8 <xTaskIncrementTick+0x154>)
 800289a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800289c:	4b0f      	ldr	r3, [pc, #60]	; (80028dc <xTaskIncrementTick+0x158>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <xTaskIncrementTick+0x124>
		{
			xSwitchRequired = pdTRUE;
 80028a4:	2301      	movs	r3, #1
 80028a6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80028a8:	697b      	ldr	r3, [r7, #20]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	200009d0 	.word	0x200009d0
 80028b8:	200009ac 	.word	0x200009ac
 80028bc:	20000960 	.word	0x20000960
 80028c0:	20000964 	.word	0x20000964
 80028c4:	200009c0 	.word	0x200009c0
 80028c8:	200009c8 	.word	0x200009c8
 80028cc:	200009b0 	.word	0x200009b0
 80028d0:	200004d8 	.word	0x200004d8
 80028d4:	200004d4 	.word	0x200004d4
 80028d8:	200009b8 	.word	0x200009b8
 80028dc:	200009bc 	.word	0x200009bc

080028e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80028e6:	4b33      	ldr	r3, [pc, #204]	; (80029b4 <vTaskSwitchContext+0xd4>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80028ee:	4b32      	ldr	r3, [pc, #200]	; (80029b8 <vTaskSwitchContext+0xd8>)
 80028f0:	2201      	movs	r2, #1
 80028f2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80028f4:	e05a      	b.n	80029ac <vTaskSwitchContext+0xcc>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 80028f6:	4b30      	ldr	r3, [pc, #192]	; (80029b8 <vTaskSwitchContext+0xd8>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
 80028fc:	4b2f      	ldr	r3, [pc, #188]	; (80029bc <vTaskSwitchContext+0xdc>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	60bb      	str	r3, [r7, #8]
 8002904:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8002908:	607b      	str	r3, [r7, #4]
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	429a      	cmp	r2, r3
 8002912:	d111      	bne.n	8002938 <vTaskSwitchContext+0x58>
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	3304      	adds	r3, #4
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	429a      	cmp	r2, r3
 800291e:	d10b      	bne.n	8002938 <vTaskSwitchContext+0x58>
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	3308      	adds	r3, #8
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	429a      	cmp	r2, r3
 800292a:	d105      	bne.n	8002938 <vTaskSwitchContext+0x58>
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	330c      	adds	r3, #12
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	429a      	cmp	r2, r3
 8002936:	d008      	beq.n	800294a <vTaskSwitchContext+0x6a>
 8002938:	4b20      	ldr	r3, [pc, #128]	; (80029bc <vTaskSwitchContext+0xdc>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	4b1f      	ldr	r3, [pc, #124]	; (80029bc <vTaskSwitchContext+0xdc>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	3334      	adds	r3, #52	; 0x34
 8002942:	4619      	mov	r1, r3
 8002944:	4610      	mov	r0, r2
 8002946:	f7fd fcbb 	bl	80002c0 <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800294a:	4b1d      	ldr	r3, [pc, #116]	; (80029c0 <vTaskSwitchContext+0xe0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	e002      	b.n	8002958 <vTaskSwitchContext+0x78>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	3b01      	subs	r3, #1
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	491a      	ldr	r1, [pc, #104]	; (80029c4 <vTaskSwitchContext+0xe4>)
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	4613      	mov	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0f2      	beq.n	8002952 <vTaskSwitchContext+0x72>
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	4613      	mov	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4a13      	ldr	r2, [pc, #76]	; (80029c4 <vTaskSwitchContext+0xe4>)
 8002978:	4413      	add	r3, r2
 800297a:	603b      	str	r3, [r7, #0]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	3308      	adds	r3, #8
 800298e:	429a      	cmp	r2, r3
 8002990:	d104      	bne.n	800299c <vTaskSwitchContext+0xbc>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	605a      	str	r2, [r3, #4]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	4a06      	ldr	r2, [pc, #24]	; (80029bc <vTaskSwitchContext+0xdc>)
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	4a06      	ldr	r2, [pc, #24]	; (80029c0 <vTaskSwitchContext+0xe0>)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6013      	str	r3, [r2, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80029ac:	bf00      	nop
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	200009d0 	.word	0x200009d0
 80029b8:	200009bc 	.word	0x200009bc
 80029bc:	200004d4 	.word	0x200004d4
 80029c0:	200009b0 	.word	0x200009b0
 80029c4:	200004d8 	.word	0x200004d8

080029c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80029d2:	4b07      	ldr	r3, [pc, #28]	; (80029f0 <vTaskPlaceOnEventList+0x28>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	3318      	adds	r3, #24
 80029d8:	4619      	mov	r1, r3
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7fe fef0 	bl	80017c0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80029e0:	2101      	movs	r1, #1
 80029e2:	6838      	ldr	r0, [r7, #0]
 80029e4:	f000 fa94 	bl	8002f10 <prvAddCurrentTaskToDelayedList>
}
 80029e8:	bf00      	nop
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	200004d4 	.word	0x200004d4

080029f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002a00:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <vTaskPlaceOnEventListRestricted+0x38>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	3318      	adds	r3, #24
 8002a06:	4619      	mov	r1, r3
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f7fe feb5 	bl	8001778 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d002      	beq.n	8002a1a <vTaskPlaceOnEventListRestricted+0x26>
		{
			xTicksToWait = portMAX_DELAY;
 8002a14:	f04f 33ff 	mov.w	r3, #4294967295
 8002a18:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	68b8      	ldr	r0, [r7, #8]
 8002a1e:	f000 fa77 	bl	8002f10 <prvAddCurrentTaskToDelayedList>
	}
 8002a22:	bf00      	nop
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	200004d4 	.word	0x200004d4

08002a30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	3318      	adds	r3, #24
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fe fef5 	bl	8001834 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a4a:	4b1e      	ldr	r3, [pc, #120]	; (8002ac4 <xTaskRemoveFromEventList+0x94>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d11d      	bne.n	8002a8e <xTaskRemoveFromEventList+0x5e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	3304      	adds	r3, #4
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fe feec 	bl	8001834 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a60:	4b19      	ldr	r3, [pc, #100]	; (8002ac8 <xTaskRemoveFromEventList+0x98>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d903      	bls.n	8002a70 <xTaskRemoveFromEventList+0x40>
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6c:	4a16      	ldr	r2, [pc, #88]	; (8002ac8 <xTaskRemoveFromEventList+0x98>)
 8002a6e:	6013      	str	r3, [r2, #0]
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a74:	4613      	mov	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4a13      	ldr	r2, [pc, #76]	; (8002acc <xTaskRemoveFromEventList+0x9c>)
 8002a7e:	441a      	add	r2, r3
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	3304      	adds	r3, #4
 8002a84:	4619      	mov	r1, r3
 8002a86:	4610      	mov	r0, r2
 8002a88:	f7fe fe76 	bl	8001778 <vListInsertEnd>
 8002a8c:	e005      	b.n	8002a9a <xTaskRemoveFromEventList+0x6a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	3318      	adds	r3, #24
 8002a92:	4619      	mov	r1, r3
 8002a94:	480e      	ldr	r0, [pc, #56]	; (8002ad0 <xTaskRemoveFromEventList+0xa0>)
 8002a96:	f7fe fe6f 	bl	8001778 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a9e:	4b0d      	ldr	r3, [pc, #52]	; (8002ad4 <xTaskRemoveFromEventList+0xa4>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d905      	bls.n	8002ab4 <xTaskRemoveFromEventList+0x84>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002aac:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <xTaskRemoveFromEventList+0xa8>)
 8002aae:	2201      	movs	r2, #1
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	e001      	b.n	8002ab8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		xReturn = pdFALSE;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	200009d0 	.word	0x200009d0
 8002ac8:	200009b0 	.word	0x200009b0
 8002acc:	200004d8 	.word	0x200004d8
 8002ad0:	20000968 	.word	0x20000968
 8002ad4:	200004d4 	.word	0x200004d4
 8002ad8:	200009bc 	.word	0x200009bc

08002adc <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002ae4:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <vTaskSetTimeOutState+0x24>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002aec:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <vTaskSetTimeOutState+0x28>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	605a      	str	r2, [r3, #4]
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	200009c0 	.word	0x200009c0
 8002b04:	200009ac 	.word	0x200009ac

08002b08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 8002b12:	f7fe ff49 	bl	80019a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002b16:	4b1c      	ldr	r3, [pc, #112]	; (8002b88 <xTaskCheckForTimeOut+0x80>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b24:	d102      	bne.n	8002b2c <xTaskCheckForTimeOut+0x24>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002b26:	2300      	movs	r3, #0
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	e026      	b.n	8002b7a <xTaskCheckForTimeOut+0x72>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	4b16      	ldr	r3, [pc, #88]	; (8002b8c <xTaskCheckForTimeOut+0x84>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d007      	beq.n	8002b48 <xTaskCheckForTimeOut+0x40>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d802      	bhi.n	8002b48 <xTaskCheckForTimeOut+0x40>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002b42:	2301      	movs	r3, #1
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	e018      	b.n	8002b7a <xTaskCheckForTimeOut+0x72>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	1ad2      	subs	r2, r2, r3
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d20e      	bcs.n	8002b76 <xTaskCheckForTimeOut+0x6e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6859      	ldr	r1, [r3, #4]
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	1acb      	subs	r3, r1, r3
 8002b64:	441a      	add	r2, r3
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7ff ffb6 	bl	8002adc <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8002b70:	2300      	movs	r3, #0
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	e001      	b.n	8002b7a <xTaskCheckForTimeOut+0x72>
		}
		else
		{
			xReturn = pdTRUE;
 8002b76:	2301      	movs	r3, #1
 8002b78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b7a:	f7fe ff2f 	bl	80019dc <vPortExitCritical>

	return xReturn;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	200009ac 	.word	0x200009ac
 8002b8c:	200009c0 	.word	0x200009c0

08002b90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002b94:	4b03      	ldr	r3, [pc, #12]	; (8002ba4 <vTaskMissedYield+0x14>)
 8002b96:	2201      	movs	r2, #1
 8002b98:	601a      	str	r2, [r3, #0]
}
 8002b9a:	bf00      	nop
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	200009bc 	.word	0x200009bc

08002ba8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002bb0:	f000 f852 	bl	8002c58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002bb4:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <prvIdleTask+0x28>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d9f9      	bls.n	8002bb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002bbc:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <prvIdleTask+0x2c>)
 8002bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	f3bf 8f4f 	dsb	sy
 8002bc8:	f3bf 8f6f 	isb	sy
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8002bcc:	e7f0      	b.n	8002bb0 <prvIdleTask+0x8>
 8002bce:	bf00      	nop
 8002bd0:	200004d8 	.word	0x200004d8
 8002bd4:	e000ed04 	.word	0xe000ed04

08002bd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002bde:	2300      	movs	r3, #0
 8002be0:	607b      	str	r3, [r7, #4]
 8002be2:	e00c      	b.n	8002bfe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4a12      	ldr	r2, [pc, #72]	; (8002c38 <prvInitialiseTaskLists+0x60>)
 8002bf0:	4413      	add	r3, r2
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fe fd92 	bl	800171c <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	607b      	str	r3, [r7, #4]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b37      	cmp	r3, #55	; 0x37
 8002c02:	d9ef      	bls.n	8002be4 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8002c04:	480d      	ldr	r0, [pc, #52]	; (8002c3c <prvInitialiseTaskLists+0x64>)
 8002c06:	f7fe fd89 	bl	800171c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002c0a:	480d      	ldr	r0, [pc, #52]	; (8002c40 <prvInitialiseTaskLists+0x68>)
 8002c0c:	f7fe fd86 	bl	800171c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002c10:	480c      	ldr	r0, [pc, #48]	; (8002c44 <prvInitialiseTaskLists+0x6c>)
 8002c12:	f7fe fd83 	bl	800171c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002c16:	480c      	ldr	r0, [pc, #48]	; (8002c48 <prvInitialiseTaskLists+0x70>)
 8002c18:	f7fe fd80 	bl	800171c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002c1c:	480b      	ldr	r0, [pc, #44]	; (8002c4c <prvInitialiseTaskLists+0x74>)
 8002c1e:	f7fe fd7d 	bl	800171c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002c22:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <prvInitialiseTaskLists+0x78>)
 8002c24:	4a05      	ldr	r2, [pc, #20]	; (8002c3c <prvInitialiseTaskLists+0x64>)
 8002c26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002c28:	4b0a      	ldr	r3, [pc, #40]	; (8002c54 <prvInitialiseTaskLists+0x7c>)
 8002c2a:	4a05      	ldr	r2, [pc, #20]	; (8002c40 <prvInitialiseTaskLists+0x68>)
 8002c2c:	601a      	str	r2, [r3, #0]
}
 8002c2e:	bf00      	nop
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	200004d8 	.word	0x200004d8
 8002c3c:	20000938 	.word	0x20000938
 8002c40:	2000094c 	.word	0x2000094c
 8002c44:	20000968 	.word	0x20000968
 8002c48:	2000097c 	.word	0x2000097c
 8002c4c:	20000994 	.word	0x20000994
 8002c50:	20000960 	.word	0x20000960
 8002c54:	20000964 	.word	0x20000964

08002c58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c5e:	e028      	b.n	8002cb2 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8002c60:	f7ff fce4 	bl	800262c <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002c64:	4b17      	ldr	r3, [pc, #92]	; (8002cc4 <prvCheckTasksWaitingTermination+0x6c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	bf0c      	ite	eq
 8002c6c:	2301      	moveq	r3, #1
 8002c6e:	2300      	movne	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8002c74:	f7ff fce8 	bl	8002648 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d119      	bne.n	8002cb2 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8002c7e:	f7fe fe93 	bl	80019a8 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002c82:	4b10      	ldr	r3, [pc, #64]	; (8002cc4 <prvCheckTasksWaitingTermination+0x6c>)
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe fdd0 	bl	8001834 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8002c94:	4b0c      	ldr	r3, [pc, #48]	; (8002cc8 <prvCheckTasksWaitingTermination+0x70>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	4a0b      	ldr	r2, [pc, #44]	; (8002cc8 <prvCheckTasksWaitingTermination+0x70>)
 8002c9c:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8002c9e:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <prvCheckTasksWaitingTermination+0x74>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	4a09      	ldr	r2, [pc, #36]	; (8002ccc <prvCheckTasksWaitingTermination+0x74>)
 8002ca6:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8002ca8:	f7fe fe98 	bl	80019dc <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8002cac:	6838      	ldr	r0, [r7, #0]
 8002cae:	f000 f80f 	bl	8002cd0 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002cb2:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <prvCheckTasksWaitingTermination+0x74>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1d2      	bne.n	8002c60 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	2000097c 	.word	0x2000097c
 8002cc8:	200009a8 	.word	0x200009a8
 8002ccc:	20000990 	.word	0x20000990

08002cd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d108      	bne.n	8002cf4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fe fd06 	bl	80016f8 <vPortFree>
				vPortFree( pxTCB );
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7fe fd03 	bl	80016f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002cf2:	e007      	b.n	8002d04 <prvDeleteTCB+0x34>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d102      	bne.n	8002d04 <prvDeleteTCB+0x34>
			{
				/* Only the stack was statically allocated, so the TCB is the
				only memory that must be freed. */
				vPortFree( pxTCB );
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7fe fcfa 	bl	80016f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002d04:	bf00      	nop
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d12:	4b0f      	ldr	r3, [pc, #60]	; (8002d50 <prvResetNextTaskUnblockTime+0x44>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <prvResetNextTaskUnblockTime+0x14>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e000      	b.n	8002d22 <prvResetNextTaskUnblockTime+0x16>
 8002d20:	2300      	movs	r3, #0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d004      	beq.n	8002d30 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002d26:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <prvResetNextTaskUnblockTime+0x48>)
 8002d28:	f04f 32ff 	mov.w	r2, #4294967295
 8002d2c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002d2e:	e008      	b.n	8002d42 <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002d30:	4b07      	ldr	r3, [pc, #28]	; (8002d50 <prvResetNextTaskUnblockTime+0x44>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	4a05      	ldr	r2, [pc, #20]	; (8002d54 <prvResetNextTaskUnblockTime+0x48>)
 8002d40:	6013      	str	r3, [r2, #0]
	}
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	20000960 	.word	0x20000960
 8002d54:	200009c8 	.word	0x200009c8

08002d58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002d5e:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <xTaskGetSchedulerState+0x34>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d102      	bne.n	8002d6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002d66:	2301      	movs	r3, #1
 8002d68:	607b      	str	r3, [r7, #4]
 8002d6a:	e008      	b.n	8002d7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d6c:	4b08      	ldr	r3, [pc, #32]	; (8002d90 <xTaskGetSchedulerState+0x38>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d102      	bne.n	8002d7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002d74:	2302      	movs	r3, #2
 8002d76:	607b      	str	r3, [r7, #4]
 8002d78:	e001      	b.n	8002d7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002d7e:	687b      	ldr	r3, [r7, #4]
	}
 8002d80:	4618      	mov	r0, r3
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	200009b4 	.word	0x200009b4
 8002d90:	200009d0 	.word	0x200009d0

08002d94 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d04a      	beq.n	8002e3c <vTaskPriorityInherit+0xa8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002daa:	4b26      	ldr	r3, [pc, #152]	; (8002e44 <vTaskPriorityInherit+0xb0>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d243      	bcs.n	8002e3c <vTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	db06      	blt.n	8002dca <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dbc:	4b21      	ldr	r3, [pc, #132]	; (8002e44 <vTaskPriorityInherit+0xb0>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6959      	ldr	r1, [r3, #20]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	4a1b      	ldr	r2, [pc, #108]	; (8002e48 <vTaskPriorityInherit+0xb4>)
 8002ddc:	4413      	add	r3, r2
 8002dde:	4299      	cmp	r1, r3
 8002de0:	d101      	bne.n	8002de6 <vTaskPriorityInherit+0x52>
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <vTaskPriorityInherit+0x54>
 8002de6:	2300      	movs	r3, #0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d022      	beq.n	8002e32 <vTaskPriorityInherit+0x9e>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	3304      	adds	r3, #4
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fe fd1f 	bl	8001834 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002df6:	4b13      	ldr	r3, [pc, #76]	; (8002e44 <vTaskPriorityInherit+0xb0>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e04:	4b11      	ldr	r3, [pc, #68]	; (8002e4c <vTaskPriorityInherit+0xb8>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d903      	bls.n	8002e14 <vTaskPriorityInherit+0x80>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e10:	4a0e      	ldr	r2, [pc, #56]	; (8002e4c <vTaskPriorityInherit+0xb8>)
 8002e12:	6013      	str	r3, [r2, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e18:	4613      	mov	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4a09      	ldr	r2, [pc, #36]	; (8002e48 <vTaskPriorityInherit+0xb4>)
 8002e22:	441a      	add	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	3304      	adds	r3, #4
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4610      	mov	r0, r2
 8002e2c:	f7fe fca4 	bl	8001778 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002e30:	e004      	b.n	8002e3c <vTaskPriorityInherit+0xa8>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002e32:	4b04      	ldr	r3, [pc, #16]	; (8002e44 <vTaskPriorityInherit+0xb0>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002e3c:	bf00      	nop
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	200004d4 	.word	0x200004d4
 8002e48:	200004d8 	.word	0x200004d8
 8002e4c:	200009b0 	.word	0x200009b0

08002e50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d037      	beq.n	8002ed6 <xTaskPriorityDisinherit+0x86>
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e6a:	1e5a      	subs	r2, r3, #1
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d02c      	beq.n	8002ed6 <xTaskPriorityDisinherit+0x86>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d128      	bne.n	8002ed6 <xTaskPriorityDisinherit+0x86>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	3304      	adds	r3, #4
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7fe fcd3 	bl	8001834 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea6:	4b0e      	ldr	r3, [pc, #56]	; (8002ee0 <xTaskPriorityDisinherit+0x90>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d903      	bls.n	8002eb6 <xTaskPriorityDisinherit+0x66>
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb2:	4a0b      	ldr	r2, [pc, #44]	; (8002ee0 <xTaskPriorityDisinherit+0x90>)
 8002eb4:	6013      	str	r3, [r2, #0]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eba:	4613      	mov	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4413      	add	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4a08      	ldr	r2, [pc, #32]	; (8002ee4 <xTaskPriorityDisinherit+0x94>)
 8002ec4:	441a      	add	r2, r3
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	3304      	adds	r3, #4
 8002eca:	4619      	mov	r1, r3
 8002ecc:	4610      	mov	r0, r2
 8002ece:	f7fe fc53 	bl	8001778 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
	}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	200009b0 	.word	0x200009b0
 8002ee4:	200004d8 	.word	0x200004d8

08002ee8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8002eec:	4b07      	ldr	r3, [pc, #28]	; (8002f0c <pvTaskIncrementMutexHeldCount+0x24>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d004      	beq.n	8002efe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8002ef4:	4b05      	ldr	r3, [pc, #20]	; (8002f0c <pvTaskIncrementMutexHeldCount+0x24>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002efa:	3201      	adds	r2, #1
 8002efc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8002efe:	4b03      	ldr	r3, [pc, #12]	; (8002f0c <pvTaskIncrementMutexHeldCount+0x24>)
 8002f00:	681b      	ldr	r3, [r3, #0]
	}
 8002f02:	4618      	mov	r0, r3
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	200004d4 	.word	0x200004d4

08002f10 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002f1a:	4b21      	ldr	r3, [pc, #132]	; (8002fa0 <prvAddCurrentTaskToDelayedList+0x90>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f20:	4b20      	ldr	r3, [pc, #128]	; (8002fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	3304      	adds	r3, #4
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7fe fc84 	bl	8001834 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f32:	d10a      	bne.n	8002f4a <prvAddCurrentTaskToDelayedList+0x3a>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d007      	beq.n	8002f4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f3a:	4b1a      	ldr	r3, [pc, #104]	; (8002fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	3304      	adds	r3, #4
 8002f40:	4619      	mov	r1, r3
 8002f42:	4819      	ldr	r0, [pc, #100]	; (8002fa8 <prvAddCurrentTaskToDelayedList+0x98>)
 8002f44:	f7fe fc18 	bl	8001778 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002f48:	e026      	b.n	8002f98 <prvAddCurrentTaskToDelayedList+0x88>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4413      	add	r3, r2
 8002f50:	60bb      	str	r3, [r7, #8]

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002f52:	4b14      	ldr	r3, [pc, #80]	; (8002fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	605a      	str	r2, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d209      	bcs.n	8002f76 <prvAddCurrentTaskToDelayedList+0x66>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f62:	4b12      	ldr	r3, [pc, #72]	; (8002fac <prvAddCurrentTaskToDelayedList+0x9c>)
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	4b0f      	ldr	r3, [pc, #60]	; (8002fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4610      	mov	r0, r2
 8002f70:	f7fe fc26 	bl	80017c0 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002f74:	e010      	b.n	8002f98 <prvAddCurrentTaskToDelayedList+0x88>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f76:	4b0e      	ldr	r3, [pc, #56]	; (8002fb0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	4b0a      	ldr	r3, [pc, #40]	; (8002fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	3304      	adds	r3, #4
 8002f80:	4619      	mov	r1, r3
 8002f82:	4610      	mov	r0, r2
 8002f84:	f7fe fc1c 	bl	80017c0 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8002f88:	4b0a      	ldr	r3, [pc, #40]	; (8002fb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d202      	bcs.n	8002f98 <prvAddCurrentTaskToDelayedList+0x88>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8002f92:	4a08      	ldr	r2, [pc, #32]	; (8002fb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	6013      	str	r3, [r2, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002f98:	bf00      	nop
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	200009ac 	.word	0x200009ac
 8002fa4:	200004d4 	.word	0x200004d4
 8002fa8:	20000994 	.word	0x20000994
 8002fac:	20000964 	.word	0x20000964
 8002fb0:	20000960 	.word	0x20000960
 8002fb4:	200009c8 	.word	0x200009c8

08002fb8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b088      	sub	sp, #32
 8002fbc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002fc2:	f000 fa69 	bl	8003498 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002fc6:	4b15      	ldr	r3, [pc, #84]	; (800301c <xTimerCreateTimerTask+0x64>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d020      	beq.n	8003010 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002fd6:	463a      	mov	r2, r7
 8002fd8:	1d39      	adds	r1, r7, #4
 8002fda:	f107 0308 	add.w	r3, r7, #8
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fd f994 	bl	800030c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8002fe4:	6839      	ldr	r1, [r7, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	9202      	str	r2, [sp, #8]
 8002fec:	9301      	str	r3, [sp, #4]
 8002fee:	2328      	movs	r3, #40	; 0x28
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	460a      	mov	r2, r1
 8002ff6:	490a      	ldr	r1, [pc, #40]	; (8003020 <xTimerCreateTimerTask+0x68>)
 8002ff8:	480a      	ldr	r0, [pc, #40]	; (8003024 <xTimerCreateTimerTask+0x6c>)
 8002ffa:	f7ff f93f 	bl	800227c <xTaskCreateStatic>
 8002ffe:	4602      	mov	r2, r0
 8003000:	4b09      	ldr	r3, [pc, #36]	; (8003028 <xTimerCreateTimerTask+0x70>)
 8003002:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003004:	4b08      	ldr	r3, [pc, #32]	; (8003028 <xTimerCreateTimerTask+0x70>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800300c:	2301      	movs	r3, #1
 800300e:	60fb      	str	r3, [r7, #12]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
 8003010:	68fb      	ldr	r3, [r7, #12]
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	20000a04 	.word	0x20000a04
 8003020:	080058e8 	.word	0x080058e8
 8003024:	08003111 	.word	0x08003111
 8003028:	20000a08 	.word	0x20000a08

0800302c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b08a      	sub	sp, #40	; 0x28
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
 8003038:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800303a:	2300      	movs	r3, #0
 800303c:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800303e:	4b1a      	ldr	r3, [pc, #104]	; (80030a8 <xTimerGenericCommand+0x7c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d02a      	beq.n	800309c <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2b05      	cmp	r3, #5
 8003056:	dc18      	bgt.n	800308a <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003058:	f7ff fe7e 	bl	8002d58 <xTaskGetSchedulerState>
 800305c:	4603      	mov	r3, r0
 800305e:	2b02      	cmp	r3, #2
 8003060:	d109      	bne.n	8003076 <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003062:	4b11      	ldr	r3, [pc, #68]	; (80030a8 <xTimerGenericCommand+0x7c>)
 8003064:	6818      	ldr	r0, [r3, #0]
 8003066:	f107 0114 	add.w	r1, r7, #20
 800306a:	2300      	movs	r3, #0
 800306c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800306e:	f7fe fde7 	bl	8001c40 <xQueueGenericSend>
 8003072:	6278      	str	r0, [r7, #36]	; 0x24
 8003074:	e012      	b.n	800309c <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003076:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <xTimerGenericCommand+0x7c>)
 8003078:	6818      	ldr	r0, [r3, #0]
 800307a:	f107 0114 	add.w	r1, r7, #20
 800307e:	2300      	movs	r3, #0
 8003080:	2200      	movs	r2, #0
 8003082:	f7fe fddd 	bl	8001c40 <xQueueGenericSend>
 8003086:	6278      	str	r0, [r7, #36]	; 0x24
 8003088:	e008      	b.n	800309c <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800308a:	4b07      	ldr	r3, [pc, #28]	; (80030a8 <xTimerGenericCommand+0x7c>)
 800308c:	6818      	ldr	r0, [r3, #0]
 800308e:	f107 0114 	add.w	r1, r7, #20
 8003092:	2300      	movs	r3, #0
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	f7fe fe7d 	bl	8001d94 <xQueueGenericSendFromISR>
 800309a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3728      	adds	r7, #40	; 0x28
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	20000a04 	.word	0x20000a04

080030ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af02      	add	r7, sp, #8
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80030b6:	4b15      	ldr	r3, [pc, #84]	; (800310c <prvProcessExpiredTimer+0x60>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	3304      	adds	r3, #4
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7fe fbb5 	bl	8001834 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d114      	bne.n	80030fc <prvProcessExpiredTimer+0x50>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	699a      	ldr	r2, [r3, #24]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	18d1      	adds	r1, r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 f8ba 	bl	8003258 <prvInsertTimerInActiveList>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d008      	beq.n	80030fc <prvProcessExpiredTimer+0x50>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80030ea:	2300      	movs	r3, #0
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	2300      	movs	r3, #0
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	2100      	movs	r1, #0
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f7ff ff99 	bl	800302c <xTimerGenericCommand>
 80030fa:	60b8      	str	r0, [r7, #8]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	4798      	blx	r3
}
 8003104:	bf00      	nop
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	200009fc 	.word	0x200009fc

08003110 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003118:	f107 0308 	add.w	r3, r7, #8
 800311c:	4618      	mov	r0, r3
 800311e:	f000 f857 	bl	80031d0 <prvGetNextExpireTime>
 8003122:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	4619      	mov	r1, r3
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 f803 	bl	8003134 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800312e:	f000 f8d5 	bl	80032dc <prvProcessReceivedCommands>
	}
 8003132:	e7f1      	b.n	8003118 <prvTimerTask+0x8>

08003134 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800313e:	f7ff fa75 	bl	800262c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003142:	f107 0308 	add.w	r3, r7, #8
 8003146:	4618      	mov	r0, r3
 8003148:	f000 f866 	bl	8003218 <prvSampleTimeNow>
 800314c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d130      	bne.n	80031b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10a      	bne.n	8003170 <prvProcessTimerOrBlockTask+0x3c>
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	429a      	cmp	r2, r3
 8003160:	d806      	bhi.n	8003170 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003162:	f7ff fa71 	bl	8002648 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003166:	68f9      	ldr	r1, [r7, #12]
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f7ff ff9f 	bl	80030ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800316e:	e024      	b.n	80031ba <prvProcessTimerOrBlockTask+0x86>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d008      	beq.n	8003188 <prvProcessTimerOrBlockTask+0x54>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003176:	4b13      	ldr	r3, [pc, #76]	; (80031c4 <prvProcessTimerOrBlockTask+0x90>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	bf0c      	ite	eq
 8003180:	2301      	moveq	r3, #1
 8003182:	2300      	movne	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	603b      	str	r3, [r7, #0]
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003188:	4b0f      	ldr	r3, [pc, #60]	; (80031c8 <prvProcessTimerOrBlockTask+0x94>)
 800318a:	6818      	ldr	r0, [r3, #0]
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	4619      	mov	r1, r3
 8003196:	f7ff f83d 	bl	8002214 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 800319a:	f7ff fa55 	bl	8002648 <xTaskResumeAll>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10a      	bne.n	80031ba <prvProcessTimerOrBlockTask+0x86>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 80031a4:	4b09      	ldr	r3, [pc, #36]	; (80031cc <prvProcessTimerOrBlockTask+0x98>)
 80031a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	f3bf 8f4f 	dsb	sy
 80031b0:	f3bf 8f6f 	isb	sy
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80031b4:	e001      	b.n	80031ba <prvProcessTimerOrBlockTask+0x86>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 80031b6:	f7ff fa47 	bl	8002648 <xTaskResumeAll>
		}
	}
}
 80031ba:	bf00      	nop
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	20000a00 	.word	0x20000a00
 80031c8:	20000a04 	.word	0x20000a04
 80031cc:	e000ed04 	.word	0xe000ed04

080031d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80031d8:	4b0e      	ldr	r3, [pc, #56]	; (8003214 <prvGetNextExpireTime+0x44>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	bf0c      	ite	eq
 80031e2:	2301      	moveq	r3, #1
 80031e4:	2300      	movne	r3, #0
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	461a      	mov	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d105      	bne.n	8003202 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80031f6:	4b07      	ldr	r3, [pc, #28]	; (8003214 <prvGetNextExpireTime+0x44>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	e001      	b.n	8003206 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003202:	2300      	movs	r3, #0
 8003204:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003206:	68fb      	ldr	r3, [r7, #12]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	200009fc 	.word	0x200009fc

08003218 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003220:	f7ff faa0 	bl	8002764 <xTaskGetTickCount>
 8003224:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003226:	4b0b      	ldr	r3, [pc, #44]	; (8003254 <prvSampleTimeNow+0x3c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	429a      	cmp	r2, r3
 800322e:	d205      	bcs.n	800323c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003230:	f000 f8de 	bl	80033f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	e002      	b.n	8003242 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003242:	4a04      	ldr	r2, [pc, #16]	; (8003254 <prvSampleTimeNow+0x3c>)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003248:	68fb      	ldr	r3, [r7, #12]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	20000a0c 	.word	0x20000a0c

08003258 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
 8003264:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003266:	2300      	movs	r3, #0
 8003268:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	429a      	cmp	r2, r3
 800327c:	d812      	bhi.n	80032a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	1ad2      	subs	r2, r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	429a      	cmp	r2, r3
 800328a:	d302      	bcc.n	8003292 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800328c:	2301      	movs	r3, #1
 800328e:	617b      	str	r3, [r7, #20]
 8003290:	e01b      	b.n	80032ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003292:	4b10      	ldr	r3, [pc, #64]	; (80032d4 <prvInsertTimerInActiveList+0x7c>)
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	3304      	adds	r3, #4
 800329a:	4619      	mov	r1, r3
 800329c:	4610      	mov	r0, r2
 800329e:	f7fe fa8f 	bl	80017c0 <vListInsert>
 80032a2:	e012      	b.n	80032ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d206      	bcs.n	80032ba <prvInsertTimerInActiveList+0x62>
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d302      	bcc.n	80032ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80032b4:	2301      	movs	r3, #1
 80032b6:	617b      	str	r3, [r7, #20]
 80032b8:	e007      	b.n	80032ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80032ba:	4b07      	ldr	r3, [pc, #28]	; (80032d8 <prvInsertTimerInActiveList+0x80>)
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	3304      	adds	r3, #4
 80032c2:	4619      	mov	r1, r3
 80032c4:	4610      	mov	r0, r2
 80032c6:	f7fe fa7b 	bl	80017c0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80032ca:	697b      	ldr	r3, [r7, #20]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3718      	adds	r7, #24
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	20000a00 	.word	0x20000a00
 80032d8:	200009fc 	.word	0x200009fc

080032dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b08c      	sub	sp, #48	; 0x30
 80032e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80032e2:	e073      	b.n	80033cc <prvProcessReceivedCommands+0xf0>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	da0b      	bge.n	8003302 <prvProcessReceivedCommands+0x26>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80032ea:	f107 0308 	add.w	r3, r7, #8
 80032ee:	3304      	adds	r3, #4
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f8:	6850      	ldr	r0, [r2, #4]
 80032fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032fc:	6892      	ldr	r2, [r2, #8]
 80032fe:	4611      	mov	r1, r2
 8003300:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	db61      	blt.n	80033cc <prvProcessReceivedCommands+0xf0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d004      	beq.n	800331e <prvProcessReceivedCommands+0x42>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003314:	6a3b      	ldr	r3, [r7, #32]
 8003316:	3304      	adds	r3, #4
 8003318:	4618      	mov	r0, r3
 800331a:	f7fe fa8b 	bl	8001834 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800331e:	1d3b      	adds	r3, r7, #4
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff ff79 	bl	8003218 <prvSampleTimeNow>
 8003326:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	2b09      	cmp	r3, #9
 800332c:	d84d      	bhi.n	80033ca <prvProcessReceivedCommands+0xee>
 800332e:	a201      	add	r2, pc, #4	; (adr r2, 8003334 <prvProcessReceivedCommands+0x58>)
 8003330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003334:	0800335d 	.word	0x0800335d
 8003338:	0800335d 	.word	0x0800335d
 800333c:	0800335d 	.word	0x0800335d
 8003340:	080033cd 	.word	0x080033cd
 8003344:	0800339f 	.word	0x0800339f
 8003348:	080033b9 	.word	0x080033b9
 800334c:	0800335d 	.word	0x0800335d
 8003350:	0800335d 	.word	0x0800335d
 8003354:	080033cd 	.word	0x080033cd
 8003358:	0800339f 	.word	0x0800339f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	18d1      	adds	r1, r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	69fa      	ldr	r2, [r7, #28]
 8003368:	6a38      	ldr	r0, [r7, #32]
 800336a:	f7ff ff75 	bl	8003258 <prvInsertTimerInActiveList>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d02b      	beq.n	80033cc <prvProcessReceivedCommands+0xf0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003374:	6a3b      	ldr	r3, [r7, #32]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	6a38      	ldr	r0, [r7, #32]
 800337a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d123      	bne.n	80033cc <prvProcessReceivedCommands+0xf0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	6a3b      	ldr	r3, [r7, #32]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	441a      	add	r2, r3
 800338c:	2300      	movs	r3, #0
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	2300      	movs	r3, #0
 8003392:	2100      	movs	r1, #0
 8003394:	6a38      	ldr	r0, [r7, #32]
 8003396:	f7ff fe49 	bl	800302c <xTimerGenericCommand>
 800339a:	61b8      	str	r0, [r7, #24]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 800339c:	e016      	b.n	80033cc <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	619a      	str	r2, [r3, #24]
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	699a      	ldr	r2, [r3, #24]
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	18d1      	adds	r1, r2, r3
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	69fa      	ldr	r2, [r7, #28]
 80033b0:	6a38      	ldr	r0, [r7, #32]
 80033b2:	f7ff ff51 	bl	8003258 <prvInsertTimerInActiveList>
					break;
 80033b6:	e009      	b.n	80033cc <prvProcessReceivedCommands+0xf0>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d104      	bne.n	80033cc <prvProcessReceivedCommands+0xf0>
						{
							vPortFree( pxTimer );
 80033c2:	6a38      	ldr	r0, [r7, #32]
 80033c4:	f7fe f998 	bl	80016f8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80033c8:	e000      	b.n	80033cc <prvProcessReceivedCommands+0xf0>

				default	:
					/* Don't expect to get here. */
					break;
 80033ca:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80033cc:	4b07      	ldr	r3, [pc, #28]	; (80033ec <prvProcessReceivedCommands+0x110>)
 80033ce:	6818      	ldr	r0, [r3, #0]
 80033d0:	f107 0108 	add.w	r1, r7, #8
 80033d4:	2300      	movs	r3, #0
 80033d6:	2200      	movs	r2, #0
 80033d8:	f7fe fd34 	bl	8001e44 <xQueueGenericReceive>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d180      	bne.n	80032e4 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
 80033e2:	bf00      	nop
 80033e4:	3728      	adds	r7, #40	; 0x28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20000a04 	.word	0x20000a04

080033f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b088      	sub	sp, #32
 80033f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80033f6:	e037      	b.n	8003468 <prvSwitchTimerLists+0x78>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80033f8:	4b25      	ldr	r3, [pc, #148]	; (8003490 <prvSwitchTimerLists+0xa0>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003402:	4b23      	ldr	r3, [pc, #140]	; (8003490 <prvSwitchTimerLists+0xa0>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	3304      	adds	r3, #4
 8003410:	4618      	mov	r0, r3
 8003412:	f7fe fa0f 	bl	8001834 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	6938      	ldr	r0, [r7, #16]
 800341c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d120      	bne.n	8003468 <prvSwitchTimerLists+0x78>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	699a      	ldr	r2, [r3, #24]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	4413      	add	r3, r2
 800342e:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	429a      	cmp	r2, r3
 8003436:	d90e      	bls.n	8003456 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003444:	4b12      	ldr	r3, [pc, #72]	; (8003490 <prvSwitchTimerLists+0xa0>)
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	3304      	adds	r3, #4
 800344c:	4619      	mov	r1, r3
 800344e:	4610      	mov	r0, r2
 8003450:	f7fe f9b6 	bl	80017c0 <vListInsert>
 8003454:	e008      	b.n	8003468 <prvSwitchTimerLists+0x78>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003456:	2300      	movs	r3, #0
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	2300      	movs	r3, #0
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	2100      	movs	r1, #0
 8003460:	6938      	ldr	r0, [r7, #16]
 8003462:	f7ff fde3 	bl	800302c <xTimerGenericCommand>
 8003466:	60b8      	str	r0, [r7, #8]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003468:	4b09      	ldr	r3, [pc, #36]	; (8003490 <prvSwitchTimerLists+0xa0>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1c2      	bne.n	80033f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003472:	4b07      	ldr	r3, [pc, #28]	; (8003490 <prvSwitchTimerLists+0xa0>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8003478:	4b06      	ldr	r3, [pc, #24]	; (8003494 <prvSwitchTimerLists+0xa4>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a04      	ldr	r2, [pc, #16]	; (8003490 <prvSwitchTimerLists+0xa0>)
 800347e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003480:	4a04      	ldr	r2, [pc, #16]	; (8003494 <prvSwitchTimerLists+0xa4>)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6013      	str	r3, [r2, #0]
}
 8003486:	bf00      	nop
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	200009fc 	.word	0x200009fc
 8003494:	20000a00 	.word	0x20000a00

08003498 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800349e:	f7fe fa83 	bl	80019a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80034a2:	4b10      	ldr	r3, [pc, #64]	; (80034e4 <prvCheckForValidListAndQueue+0x4c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d116      	bne.n	80034d8 <prvCheckForValidListAndQueue+0x40>
		{
			vListInitialise( &xActiveTimerList1 );
 80034aa:	480f      	ldr	r0, [pc, #60]	; (80034e8 <prvCheckForValidListAndQueue+0x50>)
 80034ac:	f7fe f936 	bl	800171c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80034b0:	480e      	ldr	r0, [pc, #56]	; (80034ec <prvCheckForValidListAndQueue+0x54>)
 80034b2:	f7fe f933 	bl	800171c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80034b6:	4b0e      	ldr	r3, [pc, #56]	; (80034f0 <prvCheckForValidListAndQueue+0x58>)
 80034b8:	4a0b      	ldr	r2, [pc, #44]	; (80034e8 <prvCheckForValidListAndQueue+0x50>)
 80034ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80034bc:	4b0d      	ldr	r3, [pc, #52]	; (80034f4 <prvCheckForValidListAndQueue+0x5c>)
 80034be:	4a0b      	ldr	r2, [pc, #44]	; (80034ec <prvCheckForValidListAndQueue+0x54>)
 80034c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue;
				static uint8_t ucStaticTimerQueueStorage[ configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ];

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80034c2:	2300      	movs	r3, #0
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	4b0c      	ldr	r3, [pc, #48]	; (80034f8 <prvCheckForValidListAndQueue+0x60>)
 80034c8:	4a0c      	ldr	r2, [pc, #48]	; (80034fc <prvCheckForValidListAndQueue+0x64>)
 80034ca:	2110      	movs	r1, #16
 80034cc:	2005      	movs	r0, #5
 80034ce:	f7fe fb73 	bl	8001bb8 <xQueueGenericCreateStatic>
 80034d2:	4602      	mov	r2, r0
 80034d4:	4b03      	ldr	r3, [pc, #12]	; (80034e4 <prvCheckForValidListAndQueue+0x4c>)
 80034d6:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80034d8:	f7fe fa80 	bl	80019dc <vPortExitCritical>
}
 80034dc:	bf00      	nop
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20000a04 	.word	0x20000a04
 80034e8:	200009d4 	.word	0x200009d4
 80034ec:	200009e8 	.word	0x200009e8
 80034f0:	200009fc 	.word	0x200009fc
 80034f4:	20000a00 	.word	0x20000a00
 80034f8:	20000a60 	.word	0x20000a60
 80034fc:	20000a10 	.word	0x20000a10

08003500 <_ZN5LCD03D1Ev>:
LCD03::LCD03() {
	// TODO Auto-generated constructor stub

}

LCD03::~LCD03() {
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	4a08      	ldr	r2, [pc, #32]	; (800352c <_ZN5LCD03D1Ev+0x2c>)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4618      	mov	r0, r3
 8003512:	f000 f86b 	bl	80035ec <_ZN9LCD03PortD1Ev>
	// TODO Auto-generated destructor stub
}
 8003516:	2300      	movs	r3, #0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d002      	beq.n	8003522 <_ZN5LCD03D1Ev+0x22>
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f001 f856 	bl	80045ce <_ZdlPv>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4618      	mov	r0, r3
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	08005994 	.word	0x08005994

08003530 <_ZN5LCD03D0Ev>:
LCD03::LCD03() {
	// TODO Auto-generated constructor stub

}

LCD03::~LCD03() {
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f7ff ffe1 	bl	8003500 <_ZN5LCD03D1Ev>
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f001 f845 	bl	80045ce <_ZdlPv>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop

08003550 <_ZN5LCD03C1ENS_14COMM_MODE_ENUMENS_9SIZE_ENUMENS_16I2C_ADDRESS_ENUME>:


LCD03::LCD03(COMM_MODE_t mode = LCD03_SERIAL,LCD_SIZE_t type = LCD03_20_4,LCD03_I2C_ADDRESS_t addr = LCD03_I2C_ADDRESS_0xc8){
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	4608      	mov	r0, r1
 800355a:	4611      	mov	r1, r2
 800355c:	461a      	mov	r2, r3
 800355e:	4603      	mov	r3, r0
 8003560:	70fb      	strb	r3, [r7, #3]
 8003562:	460b      	mov	r3, r1
 8003564:	70bb      	strb	r3, [r7, #2]
 8003566:	4613      	mov	r3, r2
 8003568:	707b      	strb	r3, [r7, #1]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4618      	mov	r0, r3
 800356e:	f000 f82d 	bl	80035cc <_ZN9LCD03PortC1Ev>
 8003572:	4a13      	ldr	r2, [pc, #76]	; (80035c0 <_ZN5LCD03C1ENS_14COMM_MODE_ENUMENS_9SIZE_ENUMENS_16I2C_ADDRESS_ENUME+0x70>)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	601a      	str	r2, [r3, #0]
	if(mode == LCD03_I2C){
 8003578:	78fb      	ldrb	r3, [r7, #3]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10a      	bne.n	8003594 <_ZN5LCD03C1ENS_14COMM_MODE_ENUMENS_9SIZE_ENUMENS_16I2C_ADDRESS_ENUME+0x44>
		portI2CInit();
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4618      	mov	r0, r3
 8003582:	f000 f8ef 	bl	8003764 <_ZN9LCD03Port11portI2CInitEv>
		psend = &LCD03::portI2CTransmit;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a0e      	ldr	r2, [pc, #56]	; (80035c4 <_ZN5LCD03C1ENS_14COMM_MODE_ENUMENS_9SIZE_ENUMENS_16I2C_ADDRESS_ENUME+0x74>)
 800358a:	605a      	str	r2, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	609a      	str	r2, [r3, #8]
 8003592:	e00c      	b.n	80035ae <_ZN5LCD03C1ENS_14COMM_MODE_ENUMENS_9SIZE_ENUMENS_16I2C_ADDRESS_ENUME+0x5e>
	}
	else if (mode == LCD03_SERIAL){
 8003594:	78fb      	ldrb	r3, [r7, #3]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d109      	bne.n	80035ae <_ZN5LCD03C1ENS_14COMM_MODE_ENUMENS_9SIZE_ENUMENS_16I2C_ADDRESS_ENUME+0x5e>
		portSerialInit();
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4618      	mov	r0, r3
 800359e:	f000 f849 	bl	8003634 <_ZN9LCD03Port14portSerialInitEv>
		psend = &LCD03::portSerialTransmit;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a08      	ldr	r2, [pc, #32]	; (80035c8 <_ZN5LCD03C1ENS_14COMM_MODE_ENUMENS_9SIZE_ENUMENS_16I2C_ADDRESS_ENUME+0x78>)
 80035a6:	605a      	str	r2, [r3, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	609a      	str	r2, [r3, #8]
	}

	_size = type;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	78ba      	ldrb	r2, [r7, #2]
 80035b2:	735a      	strb	r2, [r3, #13]
}
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4618      	mov	r0, r3
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	08005994 	.word	0x08005994
 80035c4:	0800377d 	.word	0x0800377d
 80035c8:	0800373d 	.word	0x0800373d

080035cc <_ZN9LCD03PortC1Ev>:

/* UART handler declaration */
UART_HandleTypeDef LCD03UartHandle;
GPIO_InitTypeDef  GPIO_InitStruct;

LCD03Port::LCD03Port() {
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	4a04      	ldr	r2, [pc, #16]	; (80035e8 <_ZN9LCD03PortC1Ev+0x1c>)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4618      	mov	r0, r3
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr
 80035e8:	080059a4 	.word	0x080059a4

080035ec <_ZN9LCD03PortD1Ev>:

LCD03Port::~LCD03Port() {
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	4a06      	ldr	r2, [pc, #24]	; (8003610 <_ZN9LCD03PortD1Ev+0x24>)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80035fa:	2300      	movs	r3, #0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d002      	beq.n	8003606 <_ZN9LCD03PortD1Ev+0x1a>
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 ffe4 	bl	80045ce <_ZdlPv>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4618      	mov	r0, r3
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	080059a4 	.word	0x080059a4

08003614 <_ZN9LCD03PortD0Ev>:
LCD03Port::LCD03Port() {
	// TODO Auto-generated constructor stub

}

LCD03Port::~LCD03Port() {
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f7ff ffe5 	bl	80035ec <_ZN9LCD03PortD1Ev>
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 ffd3 	bl	80045ce <_ZdlPv>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4618      	mov	r0, r3
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop

08003634 <_ZN9LCD03Port14portSerialInitEv>:

int LCD03Port::portSerialInit(){
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]

	LCD03_USARTx_RX_GPIO_CLK_ENABLE();
 800363c:	2300      	movs	r3, #0
 800363e:	617b      	str	r3, [r7, #20]
 8003640:	4a39      	ldr	r2, [pc, #228]	; (8003728 <_ZN9LCD03Port14portSerialInitEv+0xf4>)
 8003642:	4b39      	ldr	r3, [pc, #228]	; (8003728 <_ZN9LCD03Port14portSerialInitEv+0xf4>)
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003646:	f043 0301 	orr.w	r3, r3, #1
 800364a:	6313      	str	r3, [r2, #48]	; 0x30
 800364c:	4b36      	ldr	r3, [pc, #216]	; (8003728 <_ZN9LCD03Port14portSerialInitEv+0xf4>)
 800364e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	617b      	str	r3, [r7, #20]
 8003656:	697b      	ldr	r3, [r7, #20]
	LCD03_USARTx_TX_GPIO_CLK_ENABLE();
 8003658:	2300      	movs	r3, #0
 800365a:	613b      	str	r3, [r7, #16]
 800365c:	4a32      	ldr	r2, [pc, #200]	; (8003728 <_ZN9LCD03Port14portSerialInitEv+0xf4>)
 800365e:	4b32      	ldr	r3, [pc, #200]	; (8003728 <_ZN9LCD03Port14portSerialInitEv+0xf4>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	f043 0301 	orr.w	r3, r3, #1
 8003666:	6313      	str	r3, [r2, #48]	; 0x30
 8003668:	4b2f      	ldr	r3, [pc, #188]	; (8003728 <_ZN9LCD03Port14portSerialInitEv+0xf4>)
 800366a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	613b      	str	r3, [r7, #16]
 8003672:	693b      	ldr	r3, [r7, #16]
	LCD03_USARTx_CLK_ENABLE() ;
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	4a2b      	ldr	r2, [pc, #172]	; (8003728 <_ZN9LCD03Port14portSerialInitEv+0xf4>)
 800367a:	4b2b      	ldr	r3, [pc, #172]	; (8003728 <_ZN9LCD03Port14portSerialInitEv+0xf4>)
 800367c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367e:	f043 0310 	orr.w	r3, r3, #16
 8003682:	6453      	str	r3, [r2, #68]	; 0x44
 8003684:	4b28      	ldr	r3, [pc, #160]	; (8003728 <_ZN9LCD03Port14portSerialInitEv+0xf4>)
 8003686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003688:	f003 0310 	and.w	r3, r3, #16
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	68fb      	ldr	r3, [r7, #12]

	LCD03UartHandle.Instance          = LCD03_USARTx;
 8003690:	4b26      	ldr	r3, [pc, #152]	; (800372c <_ZN9LCD03Port14portSerialInitEv+0xf8>)
 8003692:	4a27      	ldr	r2, [pc, #156]	; (8003730 <_ZN9LCD03Port14portSerialInitEv+0xfc>)
 8003694:	601a      	str	r2, [r3, #0]
	LCD03UartHandle.Init.BaudRate     = 9600;
 8003696:	4b25      	ldr	r3, [pc, #148]	; (800372c <_ZN9LCD03Port14portSerialInitEv+0xf8>)
 8003698:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800369c:	605a      	str	r2, [r3, #4]
	LCD03UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 800369e:	4b23      	ldr	r3, [pc, #140]	; (800372c <_ZN9LCD03Port14portSerialInitEv+0xf8>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	609a      	str	r2, [r3, #8]
	LCD03UartHandle.Init.StopBits     = UART_STOPBITS_1;
 80036a4:	4b21      	ldr	r3, [pc, #132]	; (800372c <_ZN9LCD03Port14portSerialInitEv+0xf8>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	60da      	str	r2, [r3, #12]
	LCD03UartHandle.Init.Parity       = UART_PARITY_NONE;
 80036aa:	4b20      	ldr	r3, [pc, #128]	; (800372c <_ZN9LCD03Port14portSerialInitEv+0xf8>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	611a      	str	r2, [r3, #16]
	LCD03UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 80036b0:	4b1e      	ldr	r3, [pc, #120]	; (800372c <_ZN9LCD03Port14portSerialInitEv+0xf8>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	619a      	str	r2, [r3, #24]
	LCD03UartHandle.Init.Mode         = UART_MODE_TX_RX;
 80036b6:	4b1d      	ldr	r3, [pc, #116]	; (800372c <_ZN9LCD03Port14portSerialInitEv+0xf8>)
 80036b8:	220c      	movs	r2, #12
 80036ba:	615a      	str	r2, [r3, #20]
	LCD03UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 80036bc:	4b1b      	ldr	r3, [pc, #108]	; (800372c <_ZN9LCD03Port14portSerialInitEv+0xf8>)
 80036be:	2200      	movs	r2, #0
 80036c0:	61da      	str	r2, [r3, #28]


	/*##-2- Configure peripheral GPIO ##########################################*/
	/* UART TX GPIO pin configuration  */
	GPIO_InitStruct.Pin       = LCD03_USARTx_TX_PIN;
 80036c2:	4b1c      	ldr	r3, [pc, #112]	; (8003734 <_ZN9LCD03Port14portSerialInitEv+0x100>)
 80036c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036c8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80036ca:	4b1a      	ldr	r3, [pc, #104]	; (8003734 <_ZN9LCD03Port14portSerialInitEv+0x100>)
 80036cc:	2202      	movs	r2, #2
 80036ce:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80036d0:	4b18      	ldr	r3, [pc, #96]	; (8003734 <_ZN9LCD03Port14portSerialInitEv+0x100>)
 80036d2:	2201      	movs	r2, #1
 80036d4:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80036d6:	4b17      	ldr	r3, [pc, #92]	; (8003734 <_ZN9LCD03Port14portSerialInitEv+0x100>)
 80036d8:	2202      	movs	r2, #2
 80036da:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Alternate = LCD03_USARTx_TX_AF;
 80036dc:	4b15      	ldr	r3, [pc, #84]	; (8003734 <_ZN9LCD03Port14portSerialInitEv+0x100>)
 80036de:	2207      	movs	r2, #7
 80036e0:	611a      	str	r2, [r3, #16]

	HAL_GPIO_Init(LCD03_USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80036e2:	4914      	ldr	r1, [pc, #80]	; (8003734 <_ZN9LCD03Port14portSerialInitEv+0x100>)
 80036e4:	4814      	ldr	r0, [pc, #80]	; (8003738 <_ZN9LCD03Port14portSerialInitEv+0x104>)
 80036e6:	f7fc fe61 	bl	80003ac <HAL_GPIO_Init>

	/* UART RX GPIO pin configuration  */
	GPIO_InitStruct.Pin = LCD03_USARTx_RX_PIN;
 80036ea:	4b12      	ldr	r3, [pc, #72]	; (8003734 <_ZN9LCD03Port14portSerialInitEv+0x100>)
 80036ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036f0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80036f2:	4b10      	ldr	r3, [pc, #64]	; (8003734 <_ZN9LCD03Port14portSerialInitEv+0x100>)
 80036f4:	2202      	movs	r2, #2
 80036f6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80036f8:	4b0e      	ldr	r3, [pc, #56]	; (8003734 <_ZN9LCD03Port14portSerialInitEv+0x100>)
 80036fa:	2201      	movs	r2, #1
 80036fc:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80036fe:	4b0d      	ldr	r3, [pc, #52]	; (8003734 <_ZN9LCD03Port14portSerialInitEv+0x100>)
 8003700:	2202      	movs	r2, #2
 8003702:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Alternate = LCD03_USARTx_RX_AF;
 8003704:	4b0b      	ldr	r3, [pc, #44]	; (8003734 <_ZN9LCD03Port14portSerialInitEv+0x100>)
 8003706:	2207      	movs	r2, #7
 8003708:	611a      	str	r2, [r3, #16]

	HAL_GPIO_Init(LCD03_USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 800370a:	490a      	ldr	r1, [pc, #40]	; (8003734 <_ZN9LCD03Port14portSerialInitEv+0x100>)
 800370c:	480a      	ldr	r0, [pc, #40]	; (8003738 <_ZN9LCD03Port14portSerialInitEv+0x104>)
 800370e:	f7fc fe4d 	bl	80003ac <HAL_GPIO_Init>


	if(HAL_UART_Init(&LCD03UartHandle) != HAL_OK)
 8003712:	4806      	ldr	r0, [pc, #24]	; (800372c <_ZN9LCD03Port14portSerialInitEv+0xf8>)
 8003714:	f7fd fc48 	bl	8000fa8 <HAL_UART_Init>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
	{
	/* Initialization Error */
	//Error_Handler();
	}

}
 800371c:	bf00      	nop
 800371e:	4618      	mov	r0, r3
 8003720:	3718      	adds	r7, #24
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	40023800 	.word	0x40023800
 800372c:	20000ab0 	.word	0x20000ab0
 8003730:	40011000 	.word	0x40011000
 8003734:	20000af0 	.word	0x20000af0
 8003738:	40020000 	.word	0x40020000

0800373c <_ZN9LCD03Port18portSerialTransmitEh>:
int LCD03Port::portSerialTransmit(uint8_t data){
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	460b      	mov	r3, r1
 8003746:	70fb      	strb	r3, [r7, #3]
	return HAL_UART_Transmit(&LCD03UartHandle, &data, sizeof(uint8_t),0xFFFF);
 8003748:	2201      	movs	r2, #1
 800374a:	1cf9      	adds	r1, r7, #3
 800374c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003750:	4803      	ldr	r0, [pc, #12]	; (8003760 <_ZN9LCD03Port18portSerialTransmitEh+0x24>)
 8003752:	f7fd fc81 	bl	8001058 <HAL_UART_Transmit>
 8003756:	4603      	mov	r3, r0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	20000ab0 	.word	0x20000ab0

08003764 <_ZN9LCD03Port11portI2CInitEv>:


int LCD03Port::portI2CInit(){
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]

}
 800376c:	bf00      	nop
 800376e:	4618      	mov	r0, r3
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop

0800377c <_ZN9LCD03Port15portI2CTransmitEh>:
int LCD03Port::portI2CTransmit(uint8_t data){
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	460b      	mov	r3, r1
 8003786:	70fb      	strb	r3, [r7, #3]

}
 8003788:	bf00      	nop
 800378a:	4618      	mov	r0, r3
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop

08003798 <_ZN7LoRaHALC1Ev>:
 *      Author: emon1
 */

#include "LoRaHAL.h"

LoRaHAL::LoRaHAL() {
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 f8d4 	bl	8003950 <_ZN8LoRaPortC1Ev>
 80037a8:	4a03      	ldr	r2, [pc, #12]	; (80037b8 <_ZN7LoRaHALC1Ev+0x20>)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4618      	mov	r0, r3
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	080059b4 	.word	0x080059b4

080037bc <_ZN7LoRaHALD1Ev>:

LoRaHAL::~LoRaHAL() {
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	4a08      	ldr	r2, [pc, #32]	; (80037e8 <_ZN7LoRaHALD1Ev+0x2c>)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 f90d 	bl	80039ec <_ZN8LoRaPortD1Ev>
	// TODO Auto-generated destructor stub
}
 80037d2:	2300      	movs	r3, #0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d002      	beq.n	80037de <_ZN7LoRaHALD1Ev+0x22>
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 fef8 	bl	80045ce <_ZdlPv>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4618      	mov	r0, r3
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	080059b4 	.word	0x080059b4

080037ec <_ZN7LoRaHALD0Ev>:
LoRaHAL::LoRaHAL() {
	// TODO Auto-generated constructor stub

}

LoRaHAL::~LoRaHAL() {
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff ffe1 	bl	80037bc <_ZN7LoRaHALD1Ev>
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 fee7 	bl	80045ce <_ZdlPv>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4618      	mov	r0, r3
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop

0800380c <_ZN7LoRaHAL8antSwSetEb>:
}
void LoRaHAL::antSwDeInit(void){
	GPIO_DeInit(PIN_TX);
	GPIO_DeInit(PIN_RX);
}
void LoRaHAL::antSwSet(bool txrx){
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	460b      	mov	r3, r1
 8003816:	70fb      	strb	r3, [r7, #3]
	if(txrx){
 8003818:	78fb      	ldrb	r3, [r7, #3]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00c      	beq.n	8003838 <_ZN7LoRaHAL8antSwSetEb+0x2c>
		GPIO_SetValue(PIN_TX,1);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	2102      	movs	r1, #2
 8003824:	4618      	mov	r0, r3
 8003826:	f000 f971 	bl	8003b0c <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb>
		GPIO_SetValue(PIN_RX,0);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	2103      	movs	r1, #3
 8003830:	4618      	mov	r0, r3
 8003832:	f000 f96b 	bl	8003b0c <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb>
	}
	else{
		GPIO_SetValue(PIN_TX,0);
		GPIO_SetValue(PIN_RX,1);
	}
}
 8003836:	e00b      	b.n	8003850 <_ZN7LoRaHAL8antSwSetEb+0x44>
	if(txrx){
		GPIO_SetValue(PIN_TX,1);
		GPIO_SetValue(PIN_RX,0);
	}
	else{
		GPIO_SetValue(PIN_TX,0);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	2102      	movs	r1, #2
 800383e:	4618      	mov	r0, r3
 8003840:	f000 f964 	bl	8003b0c <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb>
		GPIO_SetValue(PIN_RX,1);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	2103      	movs	r1, #3
 800384a:	4618      	mov	r0, r3
 800384c:	f000 f95e 	bl	8003b0c <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb>
	}
}
 8003850:	bf00      	nop
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <_ZN7LoRaHAL5ResetEv>:

void LoRaHAL::Reset(){
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
	GPIO_Init(PIN_RESET);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2101      	movs	r1, #1
 8003864:	4618      	mov	r0, r3
 8003866:	f000 f8e5 	bl	8003a34 <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE>
	GPIO_SetValue(PIN_RESET,1);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	2101      	movs	r1, #1
 8003870:	4618      	mov	r0, r3
 8003872:	f000 f94b 	bl	8003b0c <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb>
	delayMs(1);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2101      	movs	r1, #1
 800387a:	4618      	mov	r0, r3
 800387c:	f000 fa32 	bl	8003ce4 <_ZN8LoRaPort7delayMsEj>
	GPIO_SetValue(PIN_RESET,0);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	2101      	movs	r1, #1
 8003886:	4618      	mov	r0, r3
 8003888:	f000 f940 	bl	8003b0c <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb>
	GPIO_DeInit(PIN_RESET);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2101      	movs	r1, #1
 8003890:	4618      	mov	r0, r3
 8003892:	f000 f909 	bl	8003aa8 <_ZN8LoRaPort11GPIO_DeInitENS_10LoRaGPIO_tE>
	delayMs(6);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2106      	movs	r1, #6
 800389a:	4618      	mov	r0, r3
 800389c:	f000 fa22 	bl	8003ce4 <_ZN8LoRaPort7delayMsEj>
}
 80038a0:	bf00      	nop
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <_ZN7LoRaHAL5WriteEhh>:

void LoRaHAL::Write(uint8_t addr, uint8_t data){
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	460b      	mov	r3, r1
 80038b2:	70fb      	strb	r3, [r7, #3]
 80038b4:	4613      	mov	r3, r2
 80038b6:	70bb      	strb	r3, [r7, #2]
    uint8_t address = addr | (1<<7);
 80038b8:	78fb      	ldrb	r3, [r7, #3]
 80038ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	73fb      	strb	r3, [r7, #15]
    GPIO_SetValue(PIN_NSS,0);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	2100      	movs	r1, #0
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 f91f 	bl	8003b0c <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb>
    SPI_TranscieveBuffer(&address, 1);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f107 010f 	add.w	r1, r7, #15
 80038d4:	2201      	movs	r2, #1
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 f9ec 	bl	8003cb4 <_ZN8LoRaPort20SPI_TranscieveBufferEPhj>
    SPI_TranscieveBuffer(&data, 1);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	1cb9      	adds	r1, r7, #2
 80038e0:	2201      	movs	r2, #1
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 f9e6 	bl	8003cb4 <_ZN8LoRaPort20SPI_TranscieveBufferEPhj>
    GPIO_SetValue(PIN_NSS,1);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	2100      	movs	r1, #0
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 f90c 	bl	8003b0c <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb>
}
 80038f4:	bf00      	nop
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <_ZN7LoRaHAL4ReadEh>:
uint8_t LoRaHAL::Read(uint8_t addr){
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	460b      	mov	r3, r1
 8003906:	70fb      	strb	r3, [r7, #3]
    uint8_t address = addr& ~(1<<7);
 8003908:	78fb      	ldrb	r3, [r7, #3]
 800390a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800390e:	b2db      	uxtb	r3, r3
 8003910:	73fb      	strb	r3, [r7, #15]
    uint8_t data;
    GPIO_SetValue(PIN_NSS,0);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	2100      	movs	r1, #0
 8003918:	4618      	mov	r0, r3
 800391a:	f000 f8f7 	bl	8003b0c <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb>
    SPI_TranscieveBuffer(&address, 1);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f107 010f 	add.w	r1, r7, #15
 8003924:	2201      	movs	r2, #1
 8003926:	4618      	mov	r0, r3
 8003928:	f000 f9c4 	bl	8003cb4 <_ZN8LoRaPort20SPI_TranscieveBufferEPhj>
    SPI_TranscieveBuffer(&data, 1);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f107 010e 	add.w	r1, r7, #14
 8003932:	2201      	movs	r2, #1
 8003934:	4618      	mov	r0, r3
 8003936:	f000 f9bd 	bl	8003cb4 <_ZN8LoRaPort20SPI_TranscieveBufferEPhj>
    GPIO_SetValue(PIN_NSS,1);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	2100      	movs	r1, #0
 8003940:	4618      	mov	r0, r3
 8003942:	f000 f8e3 	bl	8003b0c <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb>
    return data;
 8003946:	7bbb      	ldrb	r3, [r7, #14]
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <_ZN8LoRaPortC1Ev>:
static GPIO_InitTypeDef LoRa_RESET_PIN_Struct = {LoRa_RESET_PIN,GPIO_MODE_OUTPUT_PP,GPIO_PULLUP,GPIO_SPEED_FREQ_HIGH,};
static GPIO_InitTypeDef LoRa_TX_PIN_Struct = {LoRa_TX_PIN,GPIO_MODE_OUTPUT_PP,GPIO_PULLUP,GPIO_SPEED_FREQ_HIGH,};
static GPIO_InitTypeDef LoRa_RX_PIN_Struct = {LoRa_RX_PIN,GPIO_MODE_OUTPUT_PP,GPIO_PULLUP,GPIO_SPEED_FREQ_HIGH,};


LoRaPort::LoRaPort() {
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	4a22      	ldr	r2, [pc, #136]	; (80039e4 <_ZN8LoRaPortC1Ev+0x94>)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	/* Enable GPIOA clock */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800395e:	2300      	movs	r3, #0
 8003960:	617b      	str	r3, [r7, #20]
 8003962:	4a21      	ldr	r2, [pc, #132]	; (80039e8 <_ZN8LoRaPortC1Ev+0x98>)
 8003964:	4b20      	ldr	r3, [pc, #128]	; (80039e8 <_ZN8LoRaPortC1Ev+0x98>)
 8003966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003968:	f043 0301 	orr.w	r3, r3, #1
 800396c:	6313      	str	r3, [r2, #48]	; 0x30
 800396e:	4b1e      	ldr	r3, [pc, #120]	; (80039e8 <_ZN8LoRaPortC1Ev+0x98>)
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	617b      	str	r3, [r7, #20]
 8003978:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800397a:	2300      	movs	r3, #0
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	4a1a      	ldr	r2, [pc, #104]	; (80039e8 <_ZN8LoRaPortC1Ev+0x98>)
 8003980:	4b19      	ldr	r3, [pc, #100]	; (80039e8 <_ZN8LoRaPortC1Ev+0x98>)
 8003982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003984:	f043 0302 	orr.w	r3, r3, #2
 8003988:	6313      	str	r3, [r2, #48]	; 0x30
 800398a:	4b17      	ldr	r3, [pc, #92]	; (80039e8 <_ZN8LoRaPortC1Ev+0x98>)
 800398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003996:	2300      	movs	r3, #0
 8003998:	60fb      	str	r3, [r7, #12]
 800399a:	4a13      	ldr	r2, [pc, #76]	; (80039e8 <_ZN8LoRaPortC1Ev+0x98>)
 800399c:	4b12      	ldr	r3, [pc, #72]	; (80039e8 <_ZN8LoRaPortC1Ev+0x98>)
 800399e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a0:	f043 0304 	orr.w	r3, r3, #4
 80039a4:	6313      	str	r3, [r2, #48]	; 0x30
 80039a6:	4b10      	ldr	r3, [pc, #64]	; (80039e8 <_ZN8LoRaPortC1Ev+0x98>)
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	f003 0304 	and.w	r3, r3, #4
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	68fb      	ldr	r3, [r7, #12]

	SPI_Init();
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f8e8 	bl	8003b88 <_ZN8LoRaPort8SPI_InitEv>

	GPIO_Init(PIN_NSS);
 80039b8:	2100      	movs	r1, #0
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f83a 	bl	8003a34 <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE>
	GPIO_Init(PIN_RESET);
 80039c0:	2101      	movs	r1, #1
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f836 	bl	8003a34 <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE>
	GPIO_Init(PIN_TX);
 80039c8:	2102      	movs	r1, #2
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f832 	bl	8003a34 <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE>
	GPIO_Init(PIN_RX);
 80039d0:	2103      	movs	r1, #3
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f82e 	bl	8003a34 <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE>
}
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4618      	mov	r0, r3
 80039dc:	3718      	adds	r7, #24
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	080059c4 	.word	0x080059c4
 80039e8:	40023800 	.word	0x40023800

080039ec <_ZN8LoRaPortD1Ev>:

LoRaPort::~LoRaPort() {
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	4a06      	ldr	r2, [pc, #24]	; (8003a10 <_ZN8LoRaPortD1Ev+0x24>)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80039fa:	2300      	movs	r3, #0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <_ZN8LoRaPortD1Ev+0x1a>
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 fde4 	bl	80045ce <_ZdlPv>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	080059c4 	.word	0x080059c4

08003a14 <_ZN8LoRaPortD0Ev>:
	GPIO_Init(PIN_RESET);
	GPIO_Init(PIN_TX);
	GPIO_Init(PIN_RX);
}

LoRaPort::~LoRaPort() {
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7ff ffe5 	bl	80039ec <_ZN8LoRaPortD1Ev>
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 fdd3 	bl	80045ce <_ZdlPv>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop

08003a34 <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE>:

void LoRaPort::GPIO_Init(LoRaPort::LoRaGPIO_t pin){
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	70fb      	strb	r3, [r7, #3]
	switch(pin){
 8003a40:	78fb      	ldrb	r3, [r7, #3]
 8003a42:	2b03      	cmp	r3, #3
 8003a44:	d81e      	bhi.n	8003a84 <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE+0x50>
 8003a46:	a201      	add	r2, pc, #4	; (adr r2, 8003a4c <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE+0x18>)
 8003a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4c:	08003a5d 	.word	0x08003a5d
 8003a50:	08003a67 	.word	0x08003a67
 8003a54:	08003a71 	.word	0x08003a71
 8003a58:	08003a7b 	.word	0x08003a7b
	case PIN_NSS 	: HAL_GPIO_Init(LoRa_NSS_PORT, &LoRa_NSS_PIN_Struct); break;
 8003a5c:	490c      	ldr	r1, [pc, #48]	; (8003a90 <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE+0x5c>)
 8003a5e:	480d      	ldr	r0, [pc, #52]	; (8003a94 <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE+0x60>)
 8003a60:	f7fc fca4 	bl	80003ac <HAL_GPIO_Init>
 8003a64:	e00f      	b.n	8003a86 <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE+0x52>
	case PIN_RESET 	: HAL_GPIO_Init(LoRa_RESET_PORT, &LoRa_RESET_PIN_Struct); break;
 8003a66:	490c      	ldr	r1, [pc, #48]	; (8003a98 <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE+0x64>)
 8003a68:	480c      	ldr	r0, [pc, #48]	; (8003a9c <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE+0x68>)
 8003a6a:	f7fc fc9f 	bl	80003ac <HAL_GPIO_Init>
 8003a6e:	e00a      	b.n	8003a86 <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE+0x52>
	case PIN_TX 	: HAL_GPIO_Init(LoRa_TX_PORT, &LoRa_TX_PIN_Struct); break;
 8003a70:	490b      	ldr	r1, [pc, #44]	; (8003aa0 <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE+0x6c>)
 8003a72:	4808      	ldr	r0, [pc, #32]	; (8003a94 <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE+0x60>)
 8003a74:	f7fc fc9a 	bl	80003ac <HAL_GPIO_Init>
 8003a78:	e005      	b.n	8003a86 <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE+0x52>
	case PIN_RX 	: HAL_GPIO_Init(LoRa_RX_PORT, &LoRa_RX_PIN_Struct); break;
 8003a7a:	490a      	ldr	r1, [pc, #40]	; (8003aa4 <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE+0x70>)
 8003a7c:	4805      	ldr	r0, [pc, #20]	; (8003a94 <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE+0x60>)
 8003a7e:	f7fc fc95 	bl	80003ac <HAL_GPIO_Init>
 8003a82:	e000      	b.n	8003a86 <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE+0x52>
	default			: break;
 8003a84:	bf00      	nop
	}
}
 8003a86:	bf00      	nop
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	2000000c 	.word	0x2000000c
 8003a94:	40020400 	.word	0x40020400
 8003a98:	20000020 	.word	0x20000020
 8003a9c:	40020800 	.word	0x40020800
 8003aa0:	20000034 	.word	0x20000034
 8003aa4:	20000048 	.word	0x20000048

08003aa8 <_ZN8LoRaPort11GPIO_DeInitENS_10LoRaGPIO_tE>:
void LoRaPort::GPIO_DeInit(LoRaPort::LoRaGPIO_t pin){
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	70fb      	strb	r3, [r7, #3]
	switch(pin){
 8003ab4:	78fb      	ldrb	r3, [r7, #3]
 8003ab6:	2b03      	cmp	r3, #3
 8003ab8:	d81e      	bhi.n	8003af8 <_ZN8LoRaPort11GPIO_DeInitENS_10LoRaGPIO_tE+0x50>
 8003aba:	a201      	add	r2, pc, #4	; (adr r2, 8003ac0 <_ZN8LoRaPort11GPIO_DeInitENS_10LoRaGPIO_tE+0x18>)
 8003abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac0:	08003ad1 	.word	0x08003ad1
 8003ac4:	08003adb 	.word	0x08003adb
 8003ac8:	08003ae5 	.word	0x08003ae5
 8003acc:	08003aef 	.word	0x08003aef
	case PIN_NSS 	: HAL_GPIO_DeInit(LoRa_NSS_PORT, LoRa_NSS_PIN); break;
 8003ad0:	2140      	movs	r1, #64	; 0x40
 8003ad2:	480c      	ldr	r0, [pc, #48]	; (8003b04 <_ZN8LoRaPort11GPIO_DeInitENS_10LoRaGPIO_tE+0x5c>)
 8003ad4:	f7fc fdfc 	bl	80006d0 <HAL_GPIO_DeInit>
 8003ad8:	e00f      	b.n	8003afa <_ZN8LoRaPort11GPIO_DeInitENS_10LoRaGPIO_tE+0x52>
	case PIN_RESET 	: HAL_GPIO_DeInit(LoRa_RESET_PORT, LoRa_RESET_PIN); break;
 8003ada:	2180      	movs	r1, #128	; 0x80
 8003adc:	480a      	ldr	r0, [pc, #40]	; (8003b08 <_ZN8LoRaPort11GPIO_DeInitENS_10LoRaGPIO_tE+0x60>)
 8003ade:	f7fc fdf7 	bl	80006d0 <HAL_GPIO_DeInit>
 8003ae2:	e00a      	b.n	8003afa <_ZN8LoRaPort11GPIO_DeInitENS_10LoRaGPIO_tE+0x52>
	case PIN_TX 	: HAL_GPIO_DeInit(LoRa_TX_PORT, LoRa_RESET_PIN); break;
 8003ae4:	2180      	movs	r1, #128	; 0x80
 8003ae6:	4807      	ldr	r0, [pc, #28]	; (8003b04 <_ZN8LoRaPort11GPIO_DeInitENS_10LoRaGPIO_tE+0x5c>)
 8003ae8:	f7fc fdf2 	bl	80006d0 <HAL_GPIO_DeInit>
 8003aec:	e005      	b.n	8003afa <_ZN8LoRaPort11GPIO_DeInitENS_10LoRaGPIO_tE+0x52>
	case PIN_RX 	: HAL_GPIO_DeInit(LoRa_RX_PORT, LoRa_RESET_PIN); break;
 8003aee:	2180      	movs	r1, #128	; 0x80
 8003af0:	4804      	ldr	r0, [pc, #16]	; (8003b04 <_ZN8LoRaPort11GPIO_DeInitENS_10LoRaGPIO_tE+0x5c>)
 8003af2:	f7fc fded 	bl	80006d0 <HAL_GPIO_DeInit>
 8003af6:	e000      	b.n	8003afa <_ZN8LoRaPort11GPIO_DeInitENS_10LoRaGPIO_tE+0x52>
	default			: break;
 8003af8:	bf00      	nop
	}
}
 8003afa:	bf00      	nop
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	40020400 	.word	0x40020400
 8003b08:	40020800 	.word	0x40020800

08003b0c <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb>:
void LoRaPort::GPIO_SetValue(LoRaPort::LoRaGPIO_t pin, bool value){
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	460b      	mov	r3, r1
 8003b16:	70fb      	strb	r3, [r7, #3]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	70bb      	strb	r3, [r7, #2]
	switch(pin){
 8003b1c:	78fb      	ldrb	r3, [r7, #3]
 8003b1e:	2b03      	cmp	r3, #3
 8003b20:	d828      	bhi.n	8003b74 <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb+0x68>
 8003b22:	a201      	add	r2, pc, #4	; (adr r2, 8003b28 <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb+0x1c>)
 8003b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b28:	08003b39 	.word	0x08003b39
 8003b2c:	08003b47 	.word	0x08003b47
 8003b30:	08003b55 	.word	0x08003b55
 8003b34:	08003b65 	.word	0x08003b65
	case PIN_NSS 	: HAL_GPIO_WritePin(LoRa_NSS_PORT, LoRa_NSS_PIN, (GPIO_PinState)value); break;
 8003b38:	78bb      	ldrb	r3, [r7, #2]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	2140      	movs	r1, #64	; 0x40
 8003b3e:	4810      	ldr	r0, [pc, #64]	; (8003b80 <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb+0x74>)
 8003b40:	f7fc feba 	bl	80008b8 <HAL_GPIO_WritePin>
 8003b44:	e017      	b.n	8003b76 <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb+0x6a>
	case PIN_RESET 	: HAL_GPIO_WritePin(LoRa_RESET_PORT, LoRa_RESET_PIN, (GPIO_PinState)value); break;
 8003b46:	78bb      	ldrb	r3, [r7, #2]
 8003b48:	461a      	mov	r2, r3
 8003b4a:	2180      	movs	r1, #128	; 0x80
 8003b4c:	480d      	ldr	r0, [pc, #52]	; (8003b84 <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb+0x78>)
 8003b4e:	f7fc feb3 	bl	80008b8 <HAL_GPIO_WritePin>
 8003b52:	e010      	b.n	8003b76 <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb+0x6a>
	case PIN_TX 	: HAL_GPIO_WritePin(LoRa_TX_PORT, LoRa_TX_PIN, (GPIO_PinState)value); break;
 8003b54:	78bb      	ldrb	r3, [r7, #2]
 8003b56:	461a      	mov	r2, r3
 8003b58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b5c:	4808      	ldr	r0, [pc, #32]	; (8003b80 <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb+0x74>)
 8003b5e:	f7fc feab 	bl	80008b8 <HAL_GPIO_WritePin>
 8003b62:	e008      	b.n	8003b76 <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb+0x6a>
	case PIN_RX 	: HAL_GPIO_WritePin(LoRa_RX_PORT, LoRa_RX_PIN, (GPIO_PinState)value); break;
 8003b64:	78bb      	ldrb	r3, [r7, #2]
 8003b66:	461a      	mov	r2, r3
 8003b68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b6c:	4804      	ldr	r0, [pc, #16]	; (8003b80 <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb+0x74>)
 8003b6e:	f7fc fea3 	bl	80008b8 <HAL_GPIO_WritePin>
 8003b72:	e000      	b.n	8003b76 <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb+0x6a>
	default			: break;
 8003b74:	bf00      	nop
	}
}
 8003b76:	bf00      	nop
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	40020400 	.word	0x40020400
 8003b84:	40020800 	.word	0x40020800

08003b88 <_ZN8LoRaPort8SPI_InitEv>:
	case PIN_RX 	: return HAL_GPIO_ReadPin(LoRa_RX_PORT, LoRa_RX_PIN); break;
	default			: break;
	}
}

void LoRaPort::SPI_Init(void){
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b08c      	sub	sp, #48	; 0x30
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub

	/*##-1- Configure the SPI peripheral #######################################*/
	/* Set the SPI parameters */
	LoRa_SpiHandle.Instance               = SPIx;
 8003b90:	4b44      	ldr	r3, [pc, #272]	; (8003ca4 <_ZN8LoRaPort8SPI_InitEv+0x11c>)
 8003b92:	4a45      	ldr	r2, [pc, #276]	; (8003ca8 <_ZN8LoRaPort8SPI_InitEv+0x120>)
 8003b94:	601a      	str	r2, [r3, #0]
	LoRa_SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003b96:	4b43      	ldr	r3, [pc, #268]	; (8003ca4 <_ZN8LoRaPort8SPI_InitEv+0x11c>)
 8003b98:	2220      	movs	r2, #32
 8003b9a:	61da      	str	r2, [r3, #28]
	LoRa_SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 8003b9c:	4b41      	ldr	r3, [pc, #260]	; (8003ca4 <_ZN8LoRaPort8SPI_InitEv+0x11c>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	609a      	str	r2, [r3, #8]
	LoRa_SpiHandle.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8003ba2:	4b40      	ldr	r3, [pc, #256]	; (8003ca4 <_ZN8LoRaPort8SPI_InitEv+0x11c>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	615a      	str	r2, [r3, #20]
	LoRa_SpiHandle.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8003ba8:	4b3e      	ldr	r3, [pc, #248]	; (8003ca4 <_ZN8LoRaPort8SPI_InitEv+0x11c>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	611a      	str	r2, [r3, #16]
	LoRa_SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 8003bae:	4b3d      	ldr	r3, [pc, #244]	; (8003ca4 <_ZN8LoRaPort8SPI_InitEv+0x11c>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	60da      	str	r2, [r3, #12]
	LoRa_SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8003bb4:	4b3b      	ldr	r3, [pc, #236]	; (8003ca4 <_ZN8LoRaPort8SPI_InitEv+0x11c>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	621a      	str	r2, [r3, #32]
	LoRa_SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLE;
 8003bba:	4b3a      	ldr	r3, [pc, #232]	; (8003ca4 <_ZN8LoRaPort8SPI_InitEv+0x11c>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	625a      	str	r2, [r3, #36]	; 0x24
	LoRa_SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8003bc0:	4b38      	ldr	r3, [pc, #224]	; (8003ca4 <_ZN8LoRaPort8SPI_InitEv+0x11c>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	629a      	str	r2, [r3, #40]	; 0x28
	LoRa_SpiHandle.Init.CRCPolynomial     = 7;
 8003bc6:	4b37      	ldr	r3, [pc, #220]	; (8003ca4 <_ZN8LoRaPort8SPI_InitEv+0x11c>)
 8003bc8:	2207      	movs	r2, #7
 8003bca:	62da      	str	r2, [r3, #44]	; 0x2c
	//nrf24l01p_SpiHandle.Init.CRCLength         = SPI_CRC_LENGTH_8BIT;
	LoRa_SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 8003bcc:	4b35      	ldr	r3, [pc, #212]	; (8003ca4 <_ZN8LoRaPort8SPI_InitEv+0x11c>)
 8003bce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bd2:	619a      	str	r2, [r3, #24]
	//nrf24l01p_SpiHandle.Init.NSSPMode          = SPI_NSS_PULSE_DISABLE;

	LoRa_SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8003bd4:	4b33      	ldr	r3, [pc, #204]	; (8003ca4 <_ZN8LoRaPort8SPI_InitEv+0x11c>)
 8003bd6:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003bda:	605a      	str	r2, [r3, #4]
	GPIO_InitTypeDef  GPIO_InitStruct;

	/*##-1- Enable peripherals and GPIO Clocks #################################*/
	/* Enable GPIO TX/RX clock */
	SPIx_SCK_GPIO_CLK_ENABLE();
 8003bdc:	2300      	movs	r3, #0
 8003bde:	61bb      	str	r3, [r7, #24]
 8003be0:	4a32      	ldr	r2, [pc, #200]	; (8003cac <_ZN8LoRaPort8SPI_InitEv+0x124>)
 8003be2:	4b32      	ldr	r3, [pc, #200]	; (8003cac <_ZN8LoRaPort8SPI_InitEv+0x124>)
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	f043 0301 	orr.w	r3, r3, #1
 8003bea:	6313      	str	r3, [r2, #48]	; 0x30
 8003bec:	4b2f      	ldr	r3, [pc, #188]	; (8003cac <_ZN8LoRaPort8SPI_InitEv+0x124>)
 8003bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	61bb      	str	r3, [r7, #24]
 8003bf6:	69bb      	ldr	r3, [r7, #24]
	SPIx_MISO_GPIO_CLK_ENABLE();
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	617b      	str	r3, [r7, #20]
 8003bfc:	4a2b      	ldr	r2, [pc, #172]	; (8003cac <_ZN8LoRaPort8SPI_InitEv+0x124>)
 8003bfe:	4b2b      	ldr	r3, [pc, #172]	; (8003cac <_ZN8LoRaPort8SPI_InitEv+0x124>)
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	f043 0301 	orr.w	r3, r3, #1
 8003c06:	6313      	str	r3, [r2, #48]	; 0x30
 8003c08:	4b28      	ldr	r3, [pc, #160]	; (8003cac <_ZN8LoRaPort8SPI_InitEv+0x124>)
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	617b      	str	r3, [r7, #20]
 8003c12:	697b      	ldr	r3, [r7, #20]
	SPIx_MOSI_GPIO_CLK_ENABLE();
 8003c14:	2300      	movs	r3, #0
 8003c16:	613b      	str	r3, [r7, #16]
 8003c18:	4a24      	ldr	r2, [pc, #144]	; (8003cac <_ZN8LoRaPort8SPI_InitEv+0x124>)
 8003c1a:	4b24      	ldr	r3, [pc, #144]	; (8003cac <_ZN8LoRaPort8SPI_InitEv+0x124>)
 8003c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1e:	f043 0301 	orr.w	r3, r3, #1
 8003c22:	6313      	str	r3, [r2, #48]	; 0x30
 8003c24:	4b21      	ldr	r3, [pc, #132]	; (8003cac <_ZN8LoRaPort8SPI_InitEv+0x124>)
 8003c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	613b      	str	r3, [r7, #16]
 8003c2e:	693b      	ldr	r3, [r7, #16]
	/* Enable SPI clock */
	SPIx_CLK_ENABLE();
 8003c30:	2300      	movs	r3, #0
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	4a1d      	ldr	r2, [pc, #116]	; (8003cac <_ZN8LoRaPort8SPI_InitEv+0x124>)
 8003c36:	4b1d      	ldr	r3, [pc, #116]	; (8003cac <_ZN8LoRaPort8SPI_InitEv+0x124>)
 8003c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c3e:	6453      	str	r3, [r2, #68]	; 0x44
 8003c40:	4b1a      	ldr	r3, [pc, #104]	; (8003cac <_ZN8LoRaPort8SPI_InitEv+0x124>)
 8003c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	68fb      	ldr	r3, [r7, #12]

	/*##-2- Configure peripheral GPIO ##########################################*/
	/* SPI SCK GPIO pin configuration  */
	GPIO_InitStruct.Pin       = SPIx_SCK_PIN;
 8003c4c:	2320      	movs	r3, #32
 8003c4e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003c50:	2302      	movs	r3, #2
 8003c52:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 8003c54:	2302      	movs	r3, #2
 8003c56:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003c58:	2302      	movs	r3, #2
 8003c5a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 8003c5c:	2305      	movs	r3, #5
 8003c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8003c60:	f107 031c 	add.w	r3, r7, #28
 8003c64:	4619      	mov	r1, r3
 8003c66:	4812      	ldr	r0, [pc, #72]	; (8003cb0 <_ZN8LoRaPort8SPI_InitEv+0x128>)
 8003c68:	f7fc fba0 	bl	80003ac <HAL_GPIO_Init>

	/* SPI MISO GPIO pin configuration  */
	GPIO_InitStruct.Pin = SPIx_MISO_PIN;
 8003c6c:	2340      	movs	r3, #64	; 0x40
 8003c6e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Alternate = SPIx_MISO_AF;
 8003c70:	2305      	movs	r3, #5
 8003c72:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003c74:	f107 031c 	add.w	r3, r7, #28
 8003c78:	4619      	mov	r1, r3
 8003c7a:	480d      	ldr	r0, [pc, #52]	; (8003cb0 <_ZN8LoRaPort8SPI_InitEv+0x128>)
 8003c7c:	f7fc fb96 	bl	80003ac <HAL_GPIO_Init>

	/* SPI MOSI GPIO pin configuration  */
	GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 8003c80:	2380      	movs	r3, #128	; 0x80
 8003c82:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Alternate = SPIx_MOSI_AF;
 8003c84:	2305      	movs	r3, #5
 8003c86:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003c88:	f107 031c 	add.w	r3, r7, #28
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4808      	ldr	r0, [pc, #32]	; (8003cb0 <_ZN8LoRaPort8SPI_InitEv+0x128>)
 8003c90:	f7fc fb8c 	bl	80003ac <HAL_GPIO_Init>

	HAL_SPI_Init(&LoRa_SpiHandle);
 8003c94:	4803      	ldr	r0, [pc, #12]	; (8003ca4 <_ZN8LoRaPort8SPI_InitEv+0x11c>)
 8003c96:	f7fc fe79 	bl	800098c <HAL_SPI_Init>
}
 8003c9a:	bf00      	nop
 8003c9c:	3730      	adds	r7, #48	; 0x30
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	20000b04 	.word	0x20000b04
 8003ca8:	40013000 	.word	0x40013000
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	40020000 	.word	0x40020000

08003cb4 <_ZN8LoRaPort20SPI_TranscieveBufferEPhj>:
void LoRaPort::SPI_TranscieveBuffer( uint8_t *dataInOut, unsigned int size ){
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af02      	add	r7, sp, #8
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
	HAL_SPI_TransmitReceive(&LoRa_SpiHandle, dataInOut, dataInOut, size,1000);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	68b9      	ldr	r1, [r7, #8]
 8003cd0:	4803      	ldr	r0, [pc, #12]	; (8003ce0 <_ZN8LoRaPort20SPI_TranscieveBufferEPhj+0x2c>)
 8003cd2:	f7fc fecf 	bl	8000a74 <HAL_SPI_TransmitReceive>
}
 8003cd6:	bf00      	nop
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	20000b04 	.word	0x20000b04

08003ce4 <_ZN8LoRaPort7delayMsEj>:

}
void LoRaPort::delayUs(unsigned int us){
	asm("nop");
}
void LoRaPort::delayMs(unsigned int ms){
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
	asm("nop");
 8003cee:	bf00      	nop
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <_ZN6SX1272C1Ev>:
 *      Author: emon1
 */

#include "SX1272.h"

SX1272::SX1272() {
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 f836 	bl	8003d78 <_ZN12SX1272DriverC1Ev>
 8003d0c:	4a05      	ldr	r2, [pc, #20]	; (8003d24 <_ZN6SX1272C1Ev+0x28>)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	settings.Modem = MODEM_FSK;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	711a      	strb	r2, [r3, #4]
}
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	080059d4 	.word	0x080059d4

08003d28 <_ZN6SX1272D1Ev>:

SX1272::~SX1272() {
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	4a08      	ldr	r2, [pc, #32]	; (8003d54 <_ZN6SX1272D1Ev+0x2c>)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f000 f82f 	bl	8003d9c <_ZN12SX1272DriverD1Ev>
	// TODO Auto-generated destructor stub
}
 8003d3e:	2300      	movs	r3, #0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d002      	beq.n	8003d4a <_ZN6SX1272D1Ev+0x22>
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 fc42 	bl	80045ce <_ZdlPv>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	080059d4 	.word	0x080059d4

08003d58 <_ZN6SX1272D0Ev>:
SX1272::SX1272() {
	// TODO Auto-generated constructor stub
	settings.Modem = MODEM_FSK;
}

SX1272::~SX1272() {
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7ff ffe1 	bl	8003d28 <_ZN6SX1272D1Ev>
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 fc31 	bl	80045ce <_ZdlPv>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop

08003d78 <_ZN12SX1272DriverC1Ev>:
 *      Author: emon1
 */

#include "SX1272Driver.h"

SX1272Driver::SX1272Driver() {
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7ff fd08 	bl	8003798 <_ZN7LoRaHALC1Ev>
 8003d88:	4a03      	ldr	r2, [pc, #12]	; (8003d98 <_ZN12SX1272DriverC1Ev+0x20>)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4618      	mov	r0, r3
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	080059e4 	.word	0x080059e4

08003d9c <_ZN12SX1272DriverD1Ev>:

SX1272Driver::~SX1272Driver() {
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	4a08      	ldr	r2, [pc, #32]	; (8003dc8 <_ZN12SX1272DriverD1Ev+0x2c>)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	601a      	str	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7ff fd05 	bl	80037bc <_ZN7LoRaHALD1Ev>
	// TODO Auto-generated destructor stub
}
 8003db2:	2300      	movs	r3, #0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d002      	beq.n	8003dbe <_ZN12SX1272DriverD1Ev+0x22>
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 fc08 	bl	80045ce <_ZdlPv>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	080059e4 	.word	0x080059e4

08003dcc <_ZN12SX1272DriverD0Ev>:
SX1272Driver::SX1272Driver() {
	// TODO Auto-generated constructor stub

}

SX1272Driver::~SX1272Driver() {
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7ff ffe1 	bl	8003d9c <_ZN12SX1272DriverD1Ev>
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 fbf7 	bl	80045ce <_ZdlPv>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4618      	mov	r0, r3
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop

08003dec <_ZN12SX1272Driver8SetModemENS_13RadioModems_tE>:


void SX1272Driver::SetModem(RadioModems_t modem){
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	460b      	mov	r3, r1
 8003df6:	70fb      	strb	r3, [r7, #3]
    if(modem == MODEM_FSK){
 8003df8:	78fb      	ldrb	r3, [r7, #3]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d108      	bne.n	8003e10 <_ZN12SX1272Driver8SetModemENS_13RadioModems_tE+0x24>
        FskMode(FSK_OpMode_Sleep);
 8003dfe:	2100      	movs	r1, #0
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 f8d1 	bl	8003fa8 <_ZN12SX1272Driver7FskModeE12FSK_OpMode_t>
        LongRangeMode(SX1272_LongRangeMode_FSK);
 8003e06:	2100      	movs	r1, #0
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 f831 	bl	8003e70 <_ZN12SX1272Driver13LongRangeModeE22SX1272_LongRangeMode_t>
 8003e0e:	e00a      	b.n	8003e26 <_ZN12SX1272Driver8SetModemENS_13RadioModems_tE+0x3a>
    }
    else if(modem == MODEM_LORA){
 8003e10:	78fb      	ldrb	r3, [r7, #3]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d107      	bne.n	8003e26 <_ZN12SX1272Driver8SetModemENS_13RadioModems_tE+0x3a>
        LoRaOpMode(LoRa_OpMode_SLEEP);
 8003e16:	2180      	movs	r1, #128	; 0x80
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f941 	bl	80040a0 <_ZN12SX1272Driver10LoRaOpModeE13LoRa_OpMode_t>
        LongRangeMode(SX1272_LongRangeMode_LoRa);
 8003e1e:	2180      	movs	r1, #128	; 0x80
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 f825 	bl	8003e70 <_ZN12SX1272Driver13LongRangeModeE22SX1272_LongRangeMode_t>
    }
    settings.Modem = modem;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	78fa      	ldrb	r2, [r7, #3]
 8003e2a:	711a      	strb	r2, [r3, #4]
}
 8003e2c:	bf00      	nop
 8003e2e:	3708      	adds	r7, #8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <_ZN12SX1272Driver9WriteFifoEPhh>:

void SX1272Driver::WriteFifo( uint8_t *buffer, uint8_t size )
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	71fb      	strb	r3, [r7, #7]
    int i;
    for(i=0;i<size;i++){
 8003e42:	2300      	movs	r3, #0
 8003e44:	617b      	str	r3, [r7, #20]
 8003e46:	79fa      	ldrb	r2, [r7, #7]
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	dd0c      	ble.n	8003e68 <_ZN12SX1272Driver9WriteFifoEPhh+0x34>
        Write(0, buffer[i]);
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	4413      	add	r3, r2
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	461a      	mov	r2, r3
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	f7ff fd24 	bl	80038a8 <_ZN7LoRaHAL5WriteEhh>
}

void SX1272Driver::WriteFifo( uint8_t *buffer, uint8_t size )
{
    int i;
    for(i=0;i<size;i++){
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	3301      	adds	r3, #1
 8003e64:	617b      	str	r3, [r7, #20]
 8003e66:	e7ee      	b.n	8003e46 <_ZN12SX1272Driver9WriteFifoEPhh+0x12>
        Write(0, buffer[i]);
    }
}
 8003e68:	bf00      	nop
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <_ZN12SX1272Driver13LongRangeModeE22SX1272_LongRangeMode_t>:
    for(i=0;i<size;i++){
        buffer[i] = Read(0);
    }
}

void SX1272Driver::LongRangeMode(SX1272_LongRangeMode_t mode){
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	460b      	mov	r3, r1
 8003e7a:	70fb      	strb	r3, [r7, #3]
	Write( REG_COMMON_OPMODE, mode );
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	78fa      	ldrb	r2, [r7, #3]
 8003e80:	2101      	movs	r1, #1
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7ff fd10 	bl	80038a8 <_ZN7LoRaHAL5WriteEhh>
}
 8003e88:	bf00      	nop
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <_ZN12SX1272Driver3FrfEm>:
void SX1272Driver::Frf(uint32_t freq){
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
	Write( REG_COMMON_FRFMSB, (freq>>16));
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	0c1b      	lsrs	r3, r3, #16
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	2106      	movs	r1, #6
 8003ea6:	f7ff fcff 	bl	80038a8 <_ZN7LoRaHAL5WriteEhh>
	Write( REG_COMMON_FRFMID, (freq>>8) );
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	0a1b      	lsrs	r3, r3, #8
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	2107      	movs	r1, #7
 8003eb6:	f7ff fcf7 	bl	80038a8 <_ZN7LoRaHAL5WriteEhh>
	Write( REG_COMMON_FRFLSB, (freq>>0) );
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	b2d2      	uxtb	r2, r2
 8003ec0:	2108      	movs	r1, #8
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7ff fcf0 	bl	80038a8 <_ZN7LoRaHAL5WriteEhh>
}
 8003ec8:	bf00      	nop
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <_ZN12SX1272Driver8PaConfigE17SX1272_PaSelect_th>:
void SX1272Driver::PaConfig(SX1272_PaSelect_t PAsel, uint8_t outputPower){
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	460b      	mov	r3, r1
 8003eda:	70fb      	strb	r3, [r7, #3]
 8003edc:	4613      	mov	r3, r2
 8003ede:	70bb      	strb	r3, [r7, #2]
	uint8_t temp = (PAsel<<SX1272_PaConfig_PaSelect_bp) |
 8003ee0:	78fb      	ldrb	r3, [r7, #3]
 8003ee2:	01db      	lsls	r3, r3, #7
			((outputPower<<SX1272_PaConfig_OutputPower_gp)&SX1272_PaConfig_OutputPower_gm);
 8003ee4:	b25a      	sxtb	r2, r3
 8003ee6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	b25b      	sxtb	r3, r3
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	b25b      	sxtb	r3, r3
 8003ef4:	73fb      	strb	r3, [r7, #15]
	Write( REG_COMMON_PACONFIG,temp );
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	7bfa      	ldrb	r2, [r7, #15]
 8003efa:	2109      	movs	r1, #9
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7ff fcd3 	bl	80038a8 <_ZN7LoRaHAL5WriteEhh>
}
 8003f02:	bf00      	nop
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop

08003f0c <_ZN12SX1272Driver6PaRampEb15SX1272_PaRamp_t>:
void SX1272Driver::PaRamp(bool LowPnTxPllOff , SX1272_PaRamp_t PaRamp){
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	460b      	mov	r3, r1
 8003f16:	70fb      	strb	r3, [r7, #3]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	70bb      	strb	r3, [r7, #2]
	uint8_t temp = (LowPnTxPllOff<<SX1272_PaRamp_LowPnTxPllOff_bp )|
 8003f1c:	78fb      	ldrb	r3, [r7, #3]
 8003f1e:	011b      	lsls	r3, r3, #4
			((PaRamp<<SX1272_PaRamp_PaRamp_gp)&SX1272_PaRamp_PaRamp_gm);
 8003f20:	b25a      	sxtb	r2, r3
 8003f22:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	b25b      	sxtb	r3, r3
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	b25b      	sxtb	r3, r3
 8003f30:	73fb      	strb	r3, [r7, #15]
	Write( REG_COMMON_PARAMP,temp );
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	7bfa      	ldrb	r2, [r7, #15]
 8003f36:	210a      	movs	r1, #10
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff fcb5 	bl	80038a8 <_ZN7LoRaHAL5WriteEhh>
}
 8003f3e:	bf00      	nop
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop

08003f48 <_ZN12SX1272Driver3OCPEbh>:
void SX1272Driver::OCP(bool ocpOn, uint8_t trim){
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	460b      	mov	r3, r1
 8003f52:	70fb      	strb	r3, [r7, #3]
 8003f54:	4613      	mov	r3, r2
 8003f56:	70bb      	strb	r3, [r7, #2]
	uint8_t temp = (ocpOn<<SX1272_Ocp_OcpOn_bp) | (trim<<SX1272_Ocp_OcpTrim_gp);
 8003f58:	78fb      	ldrb	r3, [r7, #3]
 8003f5a:	015b      	lsls	r3, r3, #5
 8003f5c:	b25a      	sxtb	r2, r3
 8003f5e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	b25b      	sxtb	r3, r3
 8003f66:	73fb      	strb	r3, [r7, #15]
	Write( REG_COMMON_OCP,temp );
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	7bfa      	ldrb	r2, [r7, #15]
 8003f6c:	210b      	movs	r1, #11
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7ff fc9a 	bl	80038a8 <_ZN7LoRaHAL5WriteEhh>
}
 8003f74:	bf00      	nop
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <_ZN12SX1272Driver3LNAE16SX1272_LnaGain_t17SX1272_LnaBoost_t>:
void SX1272Driver::LNA(SX1272_LnaGain_t gain, SX1272_LnaBoost_t boostOn){
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	460b      	mov	r3, r1
 8003f86:	70fb      	strb	r3, [r7, #3]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	70bb      	strb	r3, [r7, #2]
	uint8_t temp = gain | boostOn;
 8003f8c:	78fa      	ldrb	r2, [r7, #3]
 8003f8e:	78bb      	ldrb	r3, [r7, #2]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	73fb      	strb	r3, [r7, #15]
	Write( REG_COMMON_LNA,temp );
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	7bfa      	ldrb	r2, [r7, #15]
 8003f98:	210c      	movs	r1, #12
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7ff fc84 	bl	80038a8 <_ZN7LoRaHAL5WriteEhh>
}
 8003fa0:	bf00      	nop
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <_ZN12SX1272Driver7FskModeE12FSK_OpMode_t>:
	uint8_t temp =  Read(REG_COMMON_OPMODE);
	temp &= ~FSK_OpMode_ModulationShaping_gm;
	temp |= sel<<FSK_OpMode_ModulationShaping_gp;
	Write( REG_COMMON_OPMODE, temp );
}
void SX1272Driver::FskMode(FSK_OpMode_t sel){
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	70fb      	strb	r3, [r7, #3]
	uint8_t temp =  Read(REG_COMMON_OPMODE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7ff fc9f 	bl	80038fc <_ZN7LoRaHAL4ReadEh>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	73fb      	strb	r3, [r7, #15]
	temp &= ~FSK_OpMode_Mode_gm;
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
 8003fc4:	f023 0307 	bic.w	r3, r3, #7
 8003fc8:	73fb      	strb	r3, [r7, #15]
	temp |= sel<<FSK_OpMode_Mode_gp;
 8003fca:	7bfa      	ldrb	r2, [r7, #15]
 8003fcc:	78fb      	ldrb	r3, [r7, #3]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	73fb      	strb	r3, [r7, #15]
	Write( REG_COMMON_OPMODE, temp );
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	7bfa      	ldrb	r2, [r7, #15]
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff fc65 	bl	80038a8 <_ZN7LoRaHAL5WriteEhh>
}
 8003fde:	bf00      	nop
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop

08003fe8 <_ZN12SX1272Driver14FskNodeAddressEh>:
	temp |= (val>>8);
	Write( REG_FSK_PACKETCONFIG2, temp);
	Write( REG_FSK_PAYLOADLENGTH, (val>>0));
    Write(REG_COMMON_OPMODE, original_opmode);
}
void SX1272Driver::FskNodeAddress(uint8_t val){
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	70fb      	strb	r3, [r7, #3]
    uint8_t original_opmode = Read(REG_COMMON_OPMODE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7ff fc7f 	bl	80038fc <_ZN7LoRaHAL4ReadEh>
 8003ffe:	4603      	mov	r3, r0
 8004000:	73fb      	strb	r3, [r7, #15]
    if(settings.Modem == MODEM_FSK){
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	791b      	ldrb	r3, [r3, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d104      	bne.n	8004014 <_ZN12SX1272Driver14FskNodeAddressEh+0x2c>
        FskMode(FSK_OpMode_Stdby);
 800400a:	2101      	movs	r1, #1
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f7ff ffcb 	bl	8003fa8 <_ZN12SX1272Driver7FskModeE12FSK_OpMode_t>
 8004012:	e007      	b.n	8004024 <_ZN12SX1272Driver14FskNodeAddressEh+0x3c>
    }
    else if(settings.Modem == MODEM_LORA){
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	791b      	ldrb	r3, [r3, #4]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d103      	bne.n	8004024 <_ZN12SX1272Driver14FskNodeAddressEh+0x3c>
        LoRaOpMode(LoRa_OpMode_STDBY_FskRegAccess);
 800401c:	21c1      	movs	r1, #193	; 0xc1
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f83e 	bl	80040a0 <_ZN12SX1272Driver10LoRaOpModeE13LoRa_OpMode_t>
    }
    Write(REG_FSK_NODEADRS,val);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	78fa      	ldrb	r2, [r7, #3]
 8004028:	2133      	movs	r1, #51	; 0x33
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff fc3c 	bl	80038a8 <_ZN7LoRaHAL5WriteEhh>
    Write(REG_COMMON_OPMODE, original_opmode);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	7bfa      	ldrb	r2, [r7, #15]
 8004034:	2101      	movs	r1, #1
 8004036:	4618      	mov	r0, r3
 8004038:	f7ff fc36 	bl	80038a8 <_ZN7LoRaHAL5WriteEhh>
}
 800403c:	bf00      	nop
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <_ZN12SX1272Driver19FskBroadcastAddressEh>:
void SX1272Driver::FskBroadcastAddress(uint8_t val){
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	460b      	mov	r3, r1
 800404e:	70fb      	strb	r3, [r7, #3]
    uint8_t original_opmode = Read(REG_COMMON_OPMODE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2101      	movs	r1, #1
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff fc51 	bl	80038fc <_ZN7LoRaHAL4ReadEh>
 800405a:	4603      	mov	r3, r0
 800405c:	73fb      	strb	r3, [r7, #15]
    if(settings.Modem == MODEM_FSK){
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	791b      	ldrb	r3, [r3, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d104      	bne.n	8004070 <_ZN12SX1272Driver19FskBroadcastAddressEh+0x2c>
        FskMode(FSK_OpMode_Stdby);
 8004066:	2101      	movs	r1, #1
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f7ff ff9d 	bl	8003fa8 <_ZN12SX1272Driver7FskModeE12FSK_OpMode_t>
 800406e:	e007      	b.n	8004080 <_ZN12SX1272Driver19FskBroadcastAddressEh+0x3c>
    }
    else if(settings.Modem == MODEM_LORA){
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	791b      	ldrb	r3, [r3, #4]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d103      	bne.n	8004080 <_ZN12SX1272Driver19FskBroadcastAddressEh+0x3c>
        LoRaOpMode(LoRa_OpMode_STDBY_FskRegAccess);
 8004078:	21c1      	movs	r1, #193	; 0xc1
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f810 	bl	80040a0 <_ZN12SX1272Driver10LoRaOpModeE13LoRa_OpMode_t>
    }
    Write(REG_FSK_BROADCASTADRS,val);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	78fa      	ldrb	r2, [r7, #3]
 8004084:	2134      	movs	r1, #52	; 0x34
 8004086:	4618      	mov	r0, r3
 8004088:	f7ff fc0e 	bl	80038a8 <_ZN7LoRaHAL5WriteEhh>
    Write(REG_COMMON_OPMODE, original_opmode);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	7bfa      	ldrb	r2, [r7, #15]
 8004090:	2101      	movs	r1, #1
 8004092:	4618      	mov	r0, r3
 8004094:	f7ff fc08 	bl	80038a8 <_ZN7LoRaHAL5WriteEhh>
}
 8004098:	bf00      	nop
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <_ZN12SX1272Driver10LoRaOpModeE13LoRa_OpMode_t>:
			Write(REG_FSK_IRQFLAGS2, temp);
		}
	}
}

void SX1272Driver::LoRaOpMode(LoRa_OpMode_t mode){
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	460b      	mov	r3, r1
 80040aa:	70fb      	strb	r3, [r7, #3]
    Write( REG_COMMON_OPMODE, mode);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	78fa      	ldrb	r2, [r7, #3]
 80040b0:	2101      	movs	r1, #1
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7ff fbf8 	bl	80038a8 <_ZN7LoRaHAL5WriteEhh>
}
 80040b8:	bf00      	nop
 80040ba:	3708      	adds	r7, #8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <_ZN12SX1272Driver20LoRaWriteFifoAddrPtrEh>:
void SX1272Driver::LoRaWriteFifoAddrPtr(uint8_t addr){
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	460b      	mov	r3, r1
 80040ca:	70fb      	strb	r3, [r7, #3]
	Write( REG_LORA_FIFOADDRPTR, addr);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	78fa      	ldrb	r2, [r7, #3]
 80040d0:	210d      	movs	r1, #13
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7ff fbe8 	bl	80038a8 <_ZN7LoRaHAL5WriteEhh>
}
 80040d8:	bf00      	nop
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <_ZN12SX1272Driver12LoRaIrqFlagsE15LoRa_IrqFlags_t>:
	return Read( REG_LORA_FIFORXCURRENTADDR);
}
void SX1272Driver::LoRaIrqFlagsMask(uint8_t mask){
	Write( REG_LORA_IRQFLAGSMASK, mask);
}
bool SX1272Driver::LoRaIrqFlags(LoRa_IrqFlags_t flag){
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	460b      	mov	r3, r1
 80040ea:	70fb      	strb	r3, [r7, #3]
	uint8_t temp = Read (REG_LORA_IRQFLAGS);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2112      	movs	r1, #18
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7ff fc03 	bl	80038fc <_ZN7LoRaHAL4ReadEh>
 80040f6:	4603      	mov	r3, r0
 80040f8:	73fb      	strb	r3, [r7, #15]
	if ((temp & flag)!= 0) return 1;
 80040fa:	7bfa      	ldrb	r2, [r7, #15]
 80040fc:	78fb      	ldrb	r3, [r7, #3]
 80040fe:	4013      	ands	r3, r2
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <_ZN12SX1272Driver12LoRaIrqFlagsE15LoRa_IrqFlags_t+0x2a>
 8004106:	2301      	movs	r3, #1
 8004108:	e000      	b.n	800410c <_ZN12SX1272Driver12LoRaIrqFlagsE15LoRa_IrqFlags_t+0x2c>
	else return 0;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <_ZN12SX1272Driver15LoRaModemConfigE14LoRa_ModemBw_t22LoRa_ModemCodingRate_tbbb27LoRa_ModemSpreadingFactor_tbb>:
		bool RxPayloadCrcOn,
		bool LowDataRateOptimize,
		LoRa_ModemSpreadingFactor_t spreadingfactor,
		bool txContinuousMode,
		bool ArcAutoOn
		){
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	4608      	mov	r0, r1
 800411e:	4611      	mov	r1, r2
 8004120:	461a      	mov	r2, r3
 8004122:	4603      	mov	r3, r0
 8004124:	70fb      	strb	r3, [r7, #3]
 8004126:	460b      	mov	r3, r1
 8004128:	70bb      	strb	r3, [r7, #2]
 800412a:	4613      	mov	r3, r2
 800412c:	707b      	strb	r3, [r7, #1]

	uint8_t config1 = bandwidth |
			codingRate |
			(implicitHeaderModeOn<<LoRa_ModemConfig1_ImplicitHeaderModeOn_bp) |
			(RxPayloadCrcOn<<LoRa_ModemConfig1_RxPayloadCrcOn_bp) |
			(LowDataRateOptimize<<LoRa_ModemConfig1_LowDataRateOptimize_bp);
 800412e:	78fa      	ldrb	r2, [r7, #3]
 8004130:	78bb      	ldrb	r3, [r7, #2]
 8004132:	4313      	orrs	r3, r2
 8004134:	b2db      	uxtb	r3, r3
 8004136:	b25a      	sxtb	r2, r3
		bool ArcAutoOn
		){

	uint8_t config1 = bandwidth |
			codingRate |
			(implicitHeaderModeOn<<LoRa_ModemConfig1_ImplicitHeaderModeOn_bp) |
 8004138:	787b      	ldrb	r3, [r7, #1]
 800413a:	009b      	lsls	r3, r3, #2
			(RxPayloadCrcOn<<LoRa_ModemConfig1_RxPayloadCrcOn_bp) |
			(LowDataRateOptimize<<LoRa_ModemConfig1_LowDataRateOptimize_bp);
 800413c:	b25b      	sxtb	r3, r3
 800413e:	4313      	orrs	r3, r2
 8004140:	b25a      	sxtb	r2, r3
		){

	uint8_t config1 = bandwidth |
			codingRate |
			(implicitHeaderModeOn<<LoRa_ModemConfig1_ImplicitHeaderModeOn_bp) |
			(RxPayloadCrcOn<<LoRa_ModemConfig1_RxPayloadCrcOn_bp) |
 8004142:	7e3b      	ldrb	r3, [r7, #24]
 8004144:	005b      	lsls	r3, r3, #1
			(LowDataRateOptimize<<LoRa_ModemConfig1_LowDataRateOptimize_bp);
 8004146:	b25b      	sxtb	r3, r3
 8004148:	4313      	orrs	r3, r2
 800414a:	b25a      	sxtb	r2, r3
 800414c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8004150:	4313      	orrs	r3, r2
 8004152:	b25b      	sxtb	r3, r3
 8004154:	73fb      	strb	r3, [r7, #15]

	uint8_t config2 = spreadingfactor |
			(txContinuousMode<<LoRa_ModemConfig2_TxContMode_bp) |
 8004156:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800415a:	00db      	lsls	r3, r3, #3
			(ArcAutoOn<<LoRa_ModemConfig2_ArcAutoOn_bp);
 800415c:	b25a      	sxtb	r2, r3
 800415e:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8004162:	4313      	orrs	r3, r2
 8004164:	b25a      	sxtb	r2, r3
 8004166:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	b25b      	sxtb	r3, r3
 800416e:	4313      	orrs	r3, r2
 8004170:	b25b      	sxtb	r3, r3
 8004172:	73bb      	strb	r3, [r7, #14]

	Write (REG_LORA_MODEMCONFIG1, config1);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	7bfa      	ldrb	r2, [r7, #15]
 8004178:	211d      	movs	r1, #29
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff fb94 	bl	80038a8 <_ZN7LoRaHAL5WriteEhh>
	Write (REG_LORA_MODEMCONFIG2, config2);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	7bba      	ldrb	r2, [r7, #14]
 8004184:	211e      	movs	r1, #30
 8004186:	4618      	mov	r0, r3
 8004188:	f7ff fb8e 	bl	80038a8 <_ZN7LoRaHAL5WriteEhh>
}
 800418c:	bf00      	nop
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <_ZN12SX1272Driver17LoRaPayloadLengthEh>:
}
void SX1272Driver::LoRaPreambleLength(uint16_t len){
	Write (REG_LORA_PREAMBLEMSB, (len>>8)&0xFF);
	Write (REG_LORA_PREAMBLELSB, (len>>0)&0xFF);
}
void SX1272Driver::LoRaPayloadLength(uint8_t len){
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	460b      	mov	r3, r1
 800419e:	70fb      	strb	r3, [r7, #3]
	Write (REG_LORA_PAYLOADLENGTH, len);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	78fa      	ldrb	r2, [r7, #3]
 80041a4:	2122      	movs	r1, #34	; 0x22
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7ff fb7e 	bl	80038a8 <_ZN7LoRaHAL5WriteEhh>
}
 80041ac:	bf00      	nop
 80041ae:	3708      	adds	r7, #8
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <_Z12lcd03_threadPv>:
    nrfRadio->ResetConfigValues(&RadioConfig, RxPipeConfig);
}


void lcd03_thread(void * ptr)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]

	while (1)
	{
		vTaskDelay(200);
 80041bc:	20c8      	movs	r0, #200	; 0xc8
 80041be:	f7fe f9bb 	bl	8002538 <vTaskDelay>


void lcd03_thread(void * ptr)
{

	while (1)
 80041c2:	e7fb      	b.n	80041bc <_Z12lcd03_threadPv+0x8>

080041c4 <_Z13sx1272_threadPv>:
	}
}


void sx1272_thread(void * ptr)
{
 80041c4:	b5b0      	push	{r4, r5, r7, lr}
 80041c6:	b094      	sub	sp, #80	; 0x50
 80041c8:	af06      	add	r7, sp, #24
 80041ca:	6078      	str	r0, [r7, #4]

    printf("starting up system\r\n");
 80041cc:	4866      	ldr	r0, [pc, #408]	; (8004368 <_Z13sx1272_threadPv+0x1a4>)
 80041ce:	f000 fb77 	bl	80048c0 <puts>
    myRadio.Reset();
 80041d2:	4866      	ldr	r0, [pc, #408]	; (800436c <_Z13sx1272_threadPv+0x1a8>)
 80041d4:	f7ff fb40 	bl	8003858 <_ZN7LoRaHAL5ResetEv>


    myRadio.SetModem(SX1272::MODEM_LORA );
 80041d8:	2101      	movs	r1, #1
 80041da:	4864      	ldr	r0, [pc, #400]	; (800436c <_Z13sx1272_threadPv+0x1a8>)
 80041dc:	f7ff fe06 	bl	8003dec <_ZN12SX1272Driver8SetModemENS_13RadioModems_tE>
    myRadio.LoRaOpMode(LoRa_OpMode_STDBY);
 80041e0:	2181      	movs	r1, #129	; 0x81
 80041e2:	4862      	ldr	r0, [pc, #392]	; (800436c <_Z13sx1272_threadPv+0x1a8>)
 80041e4:	f7ff ff5c 	bl	80040a0 <_ZN12SX1272Driver10LoRaOpModeE13LoRa_OpMode_t>
                    1,
                    1,
					LoRa_ModemSpreadingFactor_4096chipsPerSymbol,
                    0,
                    1
                    );
 80041e8:	2301      	movs	r3, #1
 80041ea:	9304      	str	r3, [sp, #16]
 80041ec:	2300      	movs	r3, #0
 80041ee:	9303      	str	r3, [sp, #12]
 80041f0:	23c0      	movs	r3, #192	; 0xc0
 80041f2:	9302      	str	r3, [sp, #8]
 80041f4:	2301      	movs	r3, #1
 80041f6:	9301      	str	r3, [sp, #4]
 80041f8:	2301      	movs	r3, #1
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	2300      	movs	r3, #0
 80041fe:	2208      	movs	r2, #8
 8004200:	2180      	movs	r1, #128	; 0x80
 8004202:	485a      	ldr	r0, [pc, #360]	; (800436c <_Z13sx1272_threadPv+0x1a8>)
 8004204:	f7ff ff86 	bl	8004114 <_ZN12SX1272Driver15LoRaModemConfigE14LoRa_ModemBw_t22LoRa_ModemCodingRate_tbbb27LoRa_ModemSpreadingFactor_tbb>
    myRadio.Frf(0xD84CCC);
 8004208:	4959      	ldr	r1, [pc, #356]	; (8004370 <_Z13sx1272_threadPv+0x1ac>)
 800420a:	4858      	ldr	r0, [pc, #352]	; (800436c <_Z13sx1272_threadPv+0x1a8>)
 800420c:	f7ff fe40 	bl	8003e90 <_ZN12SX1272Driver3FrfEm>
    myRadio.PaConfig(SX1272_PaSelect_PA_BOOST_pin, 0x07);
 8004210:	2207      	movs	r2, #7
 8004212:	2101      	movs	r1, #1
 8004214:	4855      	ldr	r0, [pc, #340]	; (800436c <_Z13sx1272_threadPv+0x1a8>)
 8004216:	f7ff fe5b 	bl	8003ed0 <_ZN12SX1272Driver8PaConfigE17SX1272_PaSelect_th>
    myRadio.PaRamp(0 , SX1272_PaRamp_40us);
 800421a:	2209      	movs	r2, #9
 800421c:	2100      	movs	r1, #0
 800421e:	4853      	ldr	r0, [pc, #332]	; (800436c <_Z13sx1272_threadPv+0x1a8>)
 8004220:	f7ff fe74 	bl	8003f0c <_ZN12SX1272Driver6PaRampEb15SX1272_PaRamp_t>
    myRadio.OCP(1, 0x1B);
 8004224:	221b      	movs	r2, #27
 8004226:	2101      	movs	r1, #1
 8004228:	4850      	ldr	r0, [pc, #320]	; (800436c <_Z13sx1272_threadPv+0x1a8>)
 800422a:	f7ff fe8d 	bl	8003f48 <_ZN12SX1272Driver3OCPEbh>
    myRadio.LNA(SX1272_LnaGain_G1, SX1272_LnaBoost_BoostOn)    ;
 800422e:	2203      	movs	r2, #3
 8004230:	2120      	movs	r1, #32
 8004232:	484e      	ldr	r0, [pc, #312]	; (800436c <_Z13sx1272_threadPv+0x1a8>)
 8004234:	f7ff fea2 	bl	8003f7c <_ZN12SX1272Driver3LNAE16SX1272_LnaGain_t17SX1272_LnaBoost_t>
    myRadio.LoRaWriteFifoAddrPtr(0);
 8004238:	2100      	movs	r1, #0
 800423a:	484c      	ldr	r0, [pc, #304]	; (800436c <_Z13sx1272_threadPv+0x1a8>)
 800423c:	f7ff ff40 	bl	80040c0 <_ZN12SX1272Driver20LoRaWriteFifoAddrPtrEh>
    myRadio.FskNodeAddress(3);
 8004240:	2103      	movs	r1, #3
 8004242:	484a      	ldr	r0, [pc, #296]	; (800436c <_Z13sx1272_threadPv+0x1a8>)
 8004244:	f7ff fed0 	bl	8003fe8 <_ZN12SX1272Driver14FskNodeAddressEh>
    myRadio.FskBroadcastAddress(0);
 8004248:	2100      	movs	r1, #0
 800424a:	4848      	ldr	r0, [pc, #288]	; (800436c <_Z13sx1272_threadPv+0x1a8>)
 800424c:	f7ff fefa 	bl	8004044 <_ZN12SX1272Driver19FskBroadcastAddressEh>

    myRadio.LoRaPayloadLength(255);
 8004250:	21ff      	movs	r1, #255	; 0xff
 8004252:	4846      	ldr	r0, [pc, #280]	; (800436c <_Z13sx1272_threadPv+0x1a8>)
 8004254:	f7ff ff9e 	bl	8004194 <_ZN12SX1272Driver17LoRaPayloadLengthEh>

    int i;
    int x;
    for(i=1;i<0x3F;i++){
 8004258:	2301      	movs	r3, #1
 800425a:	637b      	str	r3, [r7, #52]	; 0x34
 800425c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800425e:	2b3e      	cmp	r3, #62	; 0x3e
 8004260:	dc10      	bgt.n	8004284 <_Z13sx1272_threadPv+0xc0>
        x = myRadio.Read(i);
 8004262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004264:	b2db      	uxtb	r3, r3
 8004266:	4619      	mov	r1, r3
 8004268:	4840      	ldr	r0, [pc, #256]	; (800436c <_Z13sx1272_threadPv+0x1a8>)
 800426a:	f7ff fb47 	bl	80038fc <_ZN7LoRaHAL4ReadEh>
 800426e:	4603      	mov	r3, r0
 8004270:	62fb      	str	r3, [r7, #44]	; 0x2c
        printf("%x : %x\r\n", i, x);
 8004272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004274:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004276:	483f      	ldr	r0, [pc, #252]	; (8004374 <_Z13sx1272_threadPv+0x1b0>)
 8004278:	f000 fab0 	bl	80047dc <iprintf>

    myRadio.LoRaPayloadLength(255);

    int i;
    int x;
    for(i=1;i<0x3F;i++){
 800427c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800427e:	3301      	adds	r3, #1
 8004280:	637b      	str	r3, [r7, #52]	; 0x34
 8004282:	e7eb      	b.n	800425c <_Z13sx1272_threadPv+0x98>
        x = myRadio.Read(i);
        printf("%x : %x\r\n", i, x);
    }

    char myname[] = "the way you shake it";
 8004284:	4b3c      	ldr	r3, [pc, #240]	; (8004378 <_Z13sx1272_threadPv+0x1b4>)
 8004286:	f107 040c 	add.w	r4, r7, #12
 800428a:	461d      	mov	r5, r3
 800428c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800428e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004290:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004294:	6020      	str	r0, [r4, #0]
 8004296:	3404      	adds	r4, #4
 8004298:	7021      	strb	r1, [r4, #0]

    myRadio.Write( REG_LORA_IRQFLAGS, 0xFF);
 800429a:	22ff      	movs	r2, #255	; 0xff
 800429c:	2112      	movs	r1, #18
 800429e:	4833      	ldr	r0, [pc, #204]	; (800436c <_Z13sx1272_threadPv+0x1a8>)
 80042a0:	f7ff fb02 	bl	80038a8 <_ZN7LoRaHAL5WriteEhh>
    int n=0;
 80042a4:	2300      	movs	r3, #0
 80042a6:	62bb      	str	r3, [r7, #40]	; 0x28
    int count = 0;
 80042a8:	2300      	movs	r3, #0
 80042aa:	633b      	str	r3, [r7, #48]	; 0x30

	#if (TX_NODE == 1)
		myRadio.FskNodeAddress(3);
 80042ac:	2103      	movs	r1, #3
 80042ae:	482f      	ldr	r0, [pc, #188]	; (800436c <_Z13sx1272_threadPv+0x1a8>)
 80042b0:	f7ff fe9a 	bl	8003fe8 <_ZN12SX1272Driver14FskNodeAddressEh>
		myRadio.antSwSet(1);
 80042b4:	2101      	movs	r1, #1
 80042b6:	482d      	ldr	r0, [pc, #180]	; (800436c <_Z13sx1272_threadPv+0x1a8>)
 80042b8:	f7ff faa8 	bl	800380c <_ZN7LoRaHAL8antSwSetEb>
	#if (RX_NODE == 1)
		myRadio.FskNodeAddress(8);
		myRadio.antSwSet(0);
	#endif

	myRadio.delayMs(1000);
 80042bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80042c0:	482a      	ldr	r0, [pc, #168]	; (800436c <_Z13sx1272_threadPv+0x1a8>)
 80042c2:	f7ff fd0f 	bl	8003ce4 <_ZN8LoRaPort7delayMsEj>

	while (1)
	{
#if (TX_NODE == 1)
        //TX
        sprintf(myname, "count : %d", count++);
 80042c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c8:	1c5a      	adds	r2, r3, #1
 80042ca:	633a      	str	r2, [r7, #48]	; 0x30
 80042cc:	f107 000c 	add.w	r0, r7, #12
 80042d0:	461a      	mov	r2, r3
 80042d2:	492a      	ldr	r1, [pc, #168]	; (800437c <_Z13sx1272_threadPv+0x1b8>)
 80042d4:	f000 fb0c 	bl	80048f0 <siprintf>
        myRadio.LoRaOpMode(LoRa_OpMode_STDBY);
 80042d8:	2181      	movs	r1, #129	; 0x81
 80042da:	4824      	ldr	r0, [pc, #144]	; (800436c <_Z13sx1272_threadPv+0x1a8>)
 80042dc:	f7ff fee0 	bl	80040a0 <_ZN12SX1272Driver10LoRaOpModeE13LoRa_OpMode_t>
        myRadio.LoRaWriteFifoAddrPtr(0x80);
 80042e0:	2180      	movs	r1, #128	; 0x80
 80042e2:	4822      	ldr	r0, [pc, #136]	; (800436c <_Z13sx1272_threadPv+0x1a8>)
 80042e4:	f7ff feec 	bl	80040c0 <_ZN12SX1272Driver20LoRaWriteFifoAddrPtrEh>
        myRadio.Write(0, strlen(myname) + 1);
 80042e8:	f107 030c 	add.w	r3, r7, #12
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7fb ff8f 	bl	8000210 <strlen>
 80042f2:	4603      	mov	r3, r0
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	3301      	adds	r3, #1
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	461a      	mov	r2, r3
 80042fc:	2100      	movs	r1, #0
 80042fe:	481b      	ldr	r0, [pc, #108]	; (800436c <_Z13sx1272_threadPv+0x1a8>)
 8004300:	f7ff fad2 	bl	80038a8 <_ZN7LoRaHAL5WriteEhh>
        myRadio.WriteFifo((uint8_t*)myname, strlen(myname) );
 8004304:	f107 030c 	add.w	r3, r7, #12
 8004308:	4618      	mov	r0, r3
 800430a:	f7fb ff81 	bl	8000210 <strlen>
 800430e:	4603      	mov	r3, r0
 8004310:	b2da      	uxtb	r2, r3
 8004312:	f107 030c 	add.w	r3, r7, #12
 8004316:	4619      	mov	r1, r3
 8004318:	4814      	ldr	r0, [pc, #80]	; (800436c <_Z13sx1272_threadPv+0x1a8>)
 800431a:	f7ff fd8b 	bl	8003e34 <_ZN12SX1272Driver9WriteFifoEPhh>
        int addr = myRadio.Read( REG_LORA_FIFOADDRPTR);
 800431e:	210d      	movs	r1, #13
 8004320:	4812      	ldr	r0, [pc, #72]	; (800436c <_Z13sx1272_threadPv+0x1a8>)
 8004322:	f7ff faeb 	bl	80038fc <_ZN7LoRaHAL4ReadEh>
 8004326:	4603      	mov	r3, r0
 8004328:	627b      	str	r3, [r7, #36]	; 0x24
        myRadio.LoRaOpMode(LoRa_OpMode_TX);
 800432a:	2183      	movs	r1, #131	; 0x83
 800432c:	480f      	ldr	r0, [pc, #60]	; (800436c <_Z13sx1272_threadPv+0x1a8>)
 800432e:	f7ff feb7 	bl	80040a0 <_ZN12SX1272Driver10LoRaOpModeE13LoRa_OpMode_t>

        while(myRadio.LoRaIrqFlags(LoRa_IrqFlags_TxDone) == 0);
 8004332:	2108      	movs	r1, #8
 8004334:	480d      	ldr	r0, [pc, #52]	; (800436c <_Z13sx1272_threadPv+0x1a8>)
 8004336:	f7ff fed3 	bl	80040e0 <_ZN12SX1272Driver12LoRaIrqFlagsE15LoRa_IrqFlags_t>
 800433a:	4603      	mov	r3, r0
 800433c:	f083 0301 	eor.w	r3, r3, #1
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d000      	beq.n	8004348 <_Z13sx1272_threadPv+0x184>
 8004346:	e7f4      	b.n	8004332 <_Z13sx1272_threadPv+0x16e>
        printf("sent : %s\r\n", myname);
 8004348:	f107 030c 	add.w	r3, r7, #12
 800434c:	4619      	mov	r1, r3
 800434e:	480c      	ldr	r0, [pc, #48]	; (8004380 <_Z13sx1272_threadPv+0x1bc>)
 8004350:	f000 fa44 	bl	80047dc <iprintf>

        myRadio.LoRaOpMode(LoRa_OpMode_STDBY);
 8004354:	2181      	movs	r1, #129	; 0x81
 8004356:	4805      	ldr	r0, [pc, #20]	; (800436c <_Z13sx1272_threadPv+0x1a8>)
 8004358:	f7ff fea2 	bl	80040a0 <_ZN12SX1272Driver10LoRaOpModeE13LoRa_OpMode_t>
        myRadio.Write( REG_LORA_IRQFLAGS, 0xFF);
 800435c:	22ff      	movs	r2, #255	; 0xff
 800435e:	2112      	movs	r1, #18
 8004360:	4802      	ldr	r0, [pc, #8]	; (800436c <_Z13sx1272_threadPv+0x1a8>)
 8004362:	f7ff faa1 	bl	80038a8 <_ZN7LoRaHAL5WriteEhh>
		myRadio.antSwSet(0);
	#endif

	myRadio.delayMs(1000);

	while (1)
 8004366:	e7ae      	b.n	80042c6 <_Z13sx1272_threadPv+0x102>
 8004368:	08005918 	.word	0x08005918
 800436c:	20000b6c 	.word	0x20000b6c
 8004370:	00d84ccc 	.word	0x00d84ccc
 8004374:	0800592c 	.word	0x0800592c
 8004378:	08005950 	.word	0x08005950
 800437c:	08005938 	.word	0x08005938
 8004380:	08005944 	.word	0x08005944

08004384 <main>:
}


/* main function */
int main(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af02      	add	r7, sp, #8
  // create 'thread' functions that start executing,
  // example: tid_name = osThreadCreate (osThread(name), NULL);
  osKernelStart ();                     // start thread execution
#endif

   xTaskCreate(sx1272_thread,( const char * ) "sx1272",configMINIMAL_STACK_SIZE*2,NULL,tskIDLE_PRIORITY+1 ,NULL );
 800438a:	2300      	movs	r3, #0
 800438c:	9301      	str	r3, [sp, #4]
 800438e:	2301      	movs	r3, #1
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	2300      	movs	r3, #0
 8004394:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004398:	4908      	ldr	r1, [pc, #32]	; (80043bc <main+0x38>)
 800439a:	4809      	ldr	r0, [pc, #36]	; (80043c0 <main+0x3c>)
 800439c:	f7fd ff9e 	bl	80022dc <xTaskCreate>
  //xTaskCreate(nrf24l01p_thread,( const char * ) "nrf24l01p",configMINIMAL_STACK_SIZE*2,NULL,tskIDLE_PRIORITY+1 ,NULL );
  xTaskCreate(lcd03_thread,( const char * ) "nrf24l01p",configMINIMAL_STACK_SIZE*2,NULL,tskIDLE_PRIORITY+1 ,NULL );
 80043a0:	2300      	movs	r3, #0
 80043a2:	9301      	str	r3, [sp, #4]
 80043a4:	2301      	movs	r3, #1
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	2300      	movs	r3, #0
 80043aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043ae:	4905      	ldr	r1, [pc, #20]	; (80043c4 <main+0x40>)
 80043b0:	4805      	ldr	r0, [pc, #20]	; (80043c8 <main+0x44>)
 80043b2:	f7fd ff93 	bl	80022dc <xTaskCreate>


  vTaskStartScheduler();
 80043b6:	f7fe f8e3 	bl	8002580 <vTaskStartScheduler>
  /* Infinite loop */
  while (1)
 80043ba:	e7fe      	b.n	80043ba <main+0x36>
 80043bc:	08005968 	.word	0x08005968
 80043c0:	080041c5 	.word	0x080041c5
 80043c4:	08005970 	.word	0x08005970
 80043c8:	080041b5 	.word	0x080041b5

080043cc <_Z41__static_initialization_and_destruction_0ii>:
static void Error_Handler(void)
{
  while(1)
  {
  }
}
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d117      	bne.n	800440c <_Z41__static_initialization_and_destruction_0ii+0x40>
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d112      	bne.n	800440c <_Z41__static_initialization_and_destruction_0ii+0x40>
#include "../components/components.h"

void SystemClock_Config(void);
static void Error_Handler(void);

LCD03 lcd(LCD03::LCD03_SERIAL,LCD03::LCD03_20_4,LCD03::LCD03_I2C_ADDRESS_0xc8);
 80043e6:	23c8      	movs	r3, #200	; 0xc8
 80043e8:	2201      	movs	r2, #1
 80043ea:	2101      	movs	r1, #1
 80043ec:	4809      	ldr	r0, [pc, #36]	; (8004414 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80043ee:	f7ff f8af 	bl	8003550 <_ZN5LCD03C1ENS_14COMM_MODE_ENUMENS_9SIZE_ENUMENS_16I2C_ADDRESS_ENUME>
 80043f2:	4a09      	ldr	r2, [pc, #36]	; (8004418 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80043f4:	4909      	ldr	r1, [pc, #36]	; (800441c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80043f6:	4807      	ldr	r0, [pc, #28]	; (8004414 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80043f8:	f000 f8e4 	bl	80045c4 <__aeabi_atexit>
NRF24L01p *nrfRadio;
SX1272 myRadio;
 80043fc:	4808      	ldr	r0, [pc, #32]	; (8004420 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80043fe:	f7ff fc7d 	bl	8003cfc <_ZN6SX1272C1Ev>
 8004402:	4a05      	ldr	r2, [pc, #20]	; (8004418 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004404:	4907      	ldr	r1, [pc, #28]	; (8004424 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004406:	4806      	ldr	r0, [pc, #24]	; (8004420 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004408:	f000 f8dc 	bl	80045c4 <__aeabi_atexit>
static void Error_Handler(void)
{
  while(1)
  {
  }
}
 800440c:	bf00      	nop
 800440e:	3708      	adds	r7, #8
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	20000b5c 	.word	0x20000b5c
 8004418:	20000000 	.word	0x20000000
 800441c:	08003501 	.word	0x08003501
 8004420:	20000b6c 	.word	0x20000b6c
 8004424:	08003d29 	.word	0x08003d29

08004428 <_GLOBAL__sub_I_lcd>:
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
 800442c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004430:	2001      	movs	r0, #1
 8004432:	f7ff ffcb 	bl	80043cc <_Z41__static_initialization_and_destruction_0ii>
 8004436:	bd80      	pop	{r7, pc}

08004438 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004440:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004444:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b00      	cmp	r3, #0
 800444e:	d013      	beq.n	8004478 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8004450:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004454:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8004458:	f003 0301 	and.w	r3, r3, #1
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00b      	beq.n	8004478 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8004460:	e000      	b.n	8004464 <ITM_SendChar+0x2c>
    {
      __NOP();
 8004462:	bf00      	nop
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8004464:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0f9      	beq.n	8004462 <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800446e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	b2d2      	uxtb	r2, r2
 8004476:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8004478:	687b      	ldr	r3, [r7, #4]
}
 800447a:	4618      	mov	r0, r3
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop

08004488 <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	/* return len; */
	int i;
	for(i=0;i<len;i++){
 8004494:	2300      	movs	r3, #0
 8004496:	617b      	str	r3, [r7, #20]
 8004498:	e009      	b.n	80044ae <_write+0x26>
		ITM_SendChar(*ptr++);
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	1c5a      	adds	r2, r3, #1
 800449e:	60ba      	str	r2, [r7, #8]
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7ff ffc8 	bl	8004438 <ITM_SendChar>
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
	/* Implement your write code here, this is used by puts and printf for example */
	/* return len; */
	int i;
	for(i=0;i<len;i++){
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	3301      	adds	r3, #1
 80044ac:	617b      	str	r3, [r7, #20]
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	dbf1      	blt.n	800449a <_write+0x12>
		ITM_SendChar(*ptr++);
	}
	errno = ENOSYS;
 80044b6:	4b04      	ldr	r3, [pc, #16]	; (80044c8 <_write+0x40>)
 80044b8:	2258      	movs	r2, #88	; 0x58
 80044ba:	601a      	str	r2, [r3, #0]
	return len;
 80044bc:	687b      	ldr	r3, [r7, #4]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3718      	adds	r7, #24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	20000b84 	.word	0x20000b84

080044cc <_sbrk>:

void * _sbrk(int32_t incr)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 80044d4:	4b0b      	ldr	r3, [pc, #44]	; (8004504 <_sbrk+0x38>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d102      	bne.n	80044e2 <_sbrk+0x16>
		heap_end = & end;
 80044dc:	4b09      	ldr	r3, [pc, #36]	; (8004504 <_sbrk+0x38>)
 80044de:	4a0a      	ldr	r2, [pc, #40]	; (8004508 <_sbrk+0x3c>)
 80044e0:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 80044e2:	4b08      	ldr	r3, [pc, #32]	; (8004504 <_sbrk+0x38>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 80044e8:	4b06      	ldr	r3, [pc, #24]	; (8004504 <_sbrk+0x38>)
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4413      	add	r3, r2
 80044f0:	4a04      	ldr	r2, [pc, #16]	; (8004504 <_sbrk+0x38>)
 80044f2:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 80044f4:	68fb      	ldr	r3, [r7, #12]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	20000b74 	.word	0x20000b74
 8004508:	20000b88 	.word	0x20000b88

0800450c <_close>:

int _close(int32_t file)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8004514:	4b05      	ldr	r3, [pc, #20]	; (800452c <_close+0x20>)
 8004516:	2258      	movs	r2, #88	; 0x58
 8004518:	601a      	str	r2, [r3, #0]
	return -1;
 800451a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800451e:	4618      	mov	r0, r3
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	20000b84 	.word	0x20000b84

08004530 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 800453a:	4b05      	ldr	r3, [pc, #20]	; (8004550 <_fstat+0x20>)
 800453c:	2258      	movs	r2, #88	; 0x58
 800453e:	601a      	str	r2, [r3, #0]
	return -1;
 8004540:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004544:	4618      	mov	r0, r3
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	20000b84 	.word	0x20000b84

08004554 <_isatty>:

int _isatty(int32_t file)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 800455c:	4b04      	ldr	r3, [pc, #16]	; (8004570 <_isatty+0x1c>)
 800455e:	2258      	movs	r2, #88	; 0x58
 8004560:	601a      	str	r2, [r3, #0]
	return 0;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	20000b84 	.word	0x20000b84

08004574 <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8004580:	4b05      	ldr	r3, [pc, #20]	; (8004598 <_lseek+0x24>)
 8004582:	2258      	movs	r2, #88	; 0x58
 8004584:	601a      	str	r2, [r3, #0]
	return -1;
 8004586:	f04f 33ff 	mov.w	r3, #4294967295
}
 800458a:	4618      	mov	r0, r3
 800458c:	3714      	adds	r7, #20
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	20000b84 	.word	0x20000b84

0800459c <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 80045a8:	4b05      	ldr	r3, [pc, #20]	; (80045c0 <_read+0x24>)
 80045aa:	2258      	movs	r2, #88	; 0x58
 80045ac:	601a      	str	r2, [r3, #0]
	return -1;
 80045ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	20000b84 	.word	0x20000b84

080045c4 <__aeabi_atexit>:
 80045c4:	460b      	mov	r3, r1
 80045c6:	4601      	mov	r1, r0
 80045c8:	4618      	mov	r0, r3
 80045ca:	f000 b803 	b.w	80045d4 <__cxa_atexit>

080045ce <_ZdlPv>:
 80045ce:	f000 b83d 	b.w	800464c <free>
	...

080045d4 <__cxa_atexit>:
 80045d4:	b510      	push	{r4, lr}
 80045d6:	4c05      	ldr	r4, [pc, #20]	; (80045ec <__cxa_atexit+0x18>)
 80045d8:	4613      	mov	r3, r2
 80045da:	b12c      	cbz	r4, 80045e8 <__cxa_atexit+0x14>
 80045dc:	460a      	mov	r2, r1
 80045de:	4601      	mov	r1, r0
 80045e0:	2002      	movs	r0, #2
 80045e2:	f3af 8000 	nop.w
 80045e6:	bd10      	pop	{r4, pc}
 80045e8:	4620      	mov	r0, r4
 80045ea:	bd10      	pop	{r4, pc}
 80045ec:	00000000 	.word	0x00000000

080045f0 <__libc_init_array>:
 80045f0:	b570      	push	{r4, r5, r6, lr}
 80045f2:	4b0e      	ldr	r3, [pc, #56]	; (800462c <__libc_init_array+0x3c>)
 80045f4:	4c0e      	ldr	r4, [pc, #56]	; (8004630 <__libc_init_array+0x40>)
 80045f6:	1ae4      	subs	r4, r4, r3
 80045f8:	10a4      	asrs	r4, r4, #2
 80045fa:	2500      	movs	r5, #0
 80045fc:	461e      	mov	r6, r3
 80045fe:	42a5      	cmp	r5, r4
 8004600:	d004      	beq.n	800460c <__libc_init_array+0x1c>
 8004602:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004606:	4798      	blx	r3
 8004608:	3501      	adds	r5, #1
 800460a:	e7f8      	b.n	80045fe <__libc_init_array+0xe>
 800460c:	f001 f95c 	bl	80058c8 <_init>
 8004610:	4c08      	ldr	r4, [pc, #32]	; (8004634 <__libc_init_array+0x44>)
 8004612:	4b09      	ldr	r3, [pc, #36]	; (8004638 <__libc_init_array+0x48>)
 8004614:	1ae4      	subs	r4, r4, r3
 8004616:	10a4      	asrs	r4, r4, #2
 8004618:	2500      	movs	r5, #0
 800461a:	461e      	mov	r6, r3
 800461c:	42a5      	cmp	r5, r4
 800461e:	d004      	beq.n	800462a <__libc_init_array+0x3a>
 8004620:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004624:	4798      	blx	r3
 8004626:	3501      	adds	r5, #1
 8004628:	e7f8      	b.n	800461c <__libc_init_array+0x2c>
 800462a:	bd70      	pop	{r4, r5, r6, pc}
 800462c:	08005a88 	.word	0x08005a88
 8004630:	08005a88 	.word	0x08005a88
 8004634:	08005a90 	.word	0x08005a90
 8004638:	08005a88 	.word	0x08005a88

0800463c <malloc>:
 800463c:	4b02      	ldr	r3, [pc, #8]	; (8004648 <malloc+0xc>)
 800463e:	4601      	mov	r1, r0
 8004640:	6818      	ldr	r0, [r3, #0]
 8004642:	f000 b86d 	b.w	8004720 <_malloc_r>
 8004646:	bf00      	nop
 8004648:	200000bc 	.word	0x200000bc

0800464c <free>:
 800464c:	4b02      	ldr	r3, [pc, #8]	; (8004658 <free+0xc>)
 800464e:	4601      	mov	r1, r0
 8004650:	6818      	ldr	r0, [r3, #0]
 8004652:	f000 b817 	b.w	8004684 <_free_r>
 8004656:	bf00      	nop
 8004658:	200000bc 	.word	0x200000bc

0800465c <memcpy>:
 800465c:	b510      	push	{r4, lr}
 800465e:	1e43      	subs	r3, r0, #1
 8004660:	440a      	add	r2, r1
 8004662:	4291      	cmp	r1, r2
 8004664:	d004      	beq.n	8004670 <memcpy+0x14>
 8004666:	f811 4b01 	ldrb.w	r4, [r1], #1
 800466a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800466e:	e7f8      	b.n	8004662 <memcpy+0x6>
 8004670:	bd10      	pop	{r4, pc}

08004672 <memset>:
 8004672:	4402      	add	r2, r0
 8004674:	4603      	mov	r3, r0
 8004676:	4293      	cmp	r3, r2
 8004678:	d002      	beq.n	8004680 <memset+0xe>
 800467a:	f803 1b01 	strb.w	r1, [r3], #1
 800467e:	e7fa      	b.n	8004676 <memset+0x4>
 8004680:	4770      	bx	lr
	...

08004684 <_free_r>:
 8004684:	b538      	push	{r3, r4, r5, lr}
 8004686:	4605      	mov	r5, r0
 8004688:	2900      	cmp	r1, #0
 800468a:	d046      	beq.n	800471a <_free_r+0x96>
 800468c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004690:	1f0c      	subs	r4, r1, #4
 8004692:	2b00      	cmp	r3, #0
 8004694:	bfb8      	it	lt
 8004696:	18e4      	addlt	r4, r4, r3
 8004698:	f000 fbec 	bl	8004e74 <__malloc_lock>
 800469c:	4a1f      	ldr	r2, [pc, #124]	; (800471c <_free_r+0x98>)
 800469e:	6813      	ldr	r3, [r2, #0]
 80046a0:	4611      	mov	r1, r2
 80046a2:	b913      	cbnz	r3, 80046aa <_free_r+0x26>
 80046a4:	6063      	str	r3, [r4, #4]
 80046a6:	6014      	str	r4, [r2, #0]
 80046a8:	e032      	b.n	8004710 <_free_r+0x8c>
 80046aa:	42a3      	cmp	r3, r4
 80046ac:	d90e      	bls.n	80046cc <_free_r+0x48>
 80046ae:	6822      	ldr	r2, [r4, #0]
 80046b0:	18a0      	adds	r0, r4, r2
 80046b2:	4283      	cmp	r3, r0
 80046b4:	bf04      	itt	eq
 80046b6:	6818      	ldreq	r0, [r3, #0]
 80046b8:	685b      	ldreq	r3, [r3, #4]
 80046ba:	6063      	str	r3, [r4, #4]
 80046bc:	bf04      	itt	eq
 80046be:	1812      	addeq	r2, r2, r0
 80046c0:	6022      	streq	r2, [r4, #0]
 80046c2:	600c      	str	r4, [r1, #0]
 80046c4:	e024      	b.n	8004710 <_free_r+0x8c>
 80046c6:	42a2      	cmp	r2, r4
 80046c8:	d803      	bhi.n	80046d2 <_free_r+0x4e>
 80046ca:	4613      	mov	r3, r2
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	2a00      	cmp	r2, #0
 80046d0:	d1f9      	bne.n	80046c6 <_free_r+0x42>
 80046d2:	6818      	ldr	r0, [r3, #0]
 80046d4:	1819      	adds	r1, r3, r0
 80046d6:	42a1      	cmp	r1, r4
 80046d8:	d10b      	bne.n	80046f2 <_free_r+0x6e>
 80046da:	6821      	ldr	r1, [r4, #0]
 80046dc:	4401      	add	r1, r0
 80046de:	1858      	adds	r0, r3, r1
 80046e0:	4282      	cmp	r2, r0
 80046e2:	6019      	str	r1, [r3, #0]
 80046e4:	d114      	bne.n	8004710 <_free_r+0x8c>
 80046e6:	6810      	ldr	r0, [r2, #0]
 80046e8:	6852      	ldr	r2, [r2, #4]
 80046ea:	605a      	str	r2, [r3, #4]
 80046ec:	4401      	add	r1, r0
 80046ee:	6019      	str	r1, [r3, #0]
 80046f0:	e00e      	b.n	8004710 <_free_r+0x8c>
 80046f2:	d902      	bls.n	80046fa <_free_r+0x76>
 80046f4:	230c      	movs	r3, #12
 80046f6:	602b      	str	r3, [r5, #0]
 80046f8:	e00a      	b.n	8004710 <_free_r+0x8c>
 80046fa:	6821      	ldr	r1, [r4, #0]
 80046fc:	1860      	adds	r0, r4, r1
 80046fe:	4282      	cmp	r2, r0
 8004700:	bf04      	itt	eq
 8004702:	6810      	ldreq	r0, [r2, #0]
 8004704:	6852      	ldreq	r2, [r2, #4]
 8004706:	6062      	str	r2, [r4, #4]
 8004708:	bf04      	itt	eq
 800470a:	1809      	addeq	r1, r1, r0
 800470c:	6021      	streq	r1, [r4, #0]
 800470e:	605c      	str	r4, [r3, #4]
 8004710:	4628      	mov	r0, r5
 8004712:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004716:	f000 bbae 	b.w	8004e76 <__malloc_unlock>
 800471a:	bd38      	pop	{r3, r4, r5, pc}
 800471c:	20000b7c 	.word	0x20000b7c

08004720 <_malloc_r>:
 8004720:	b570      	push	{r4, r5, r6, lr}
 8004722:	1ccd      	adds	r5, r1, #3
 8004724:	f025 0503 	bic.w	r5, r5, #3
 8004728:	3508      	adds	r5, #8
 800472a:	2d0c      	cmp	r5, #12
 800472c:	bf38      	it	cc
 800472e:	250c      	movcc	r5, #12
 8004730:	2d00      	cmp	r5, #0
 8004732:	4606      	mov	r6, r0
 8004734:	db01      	blt.n	800473a <_malloc_r+0x1a>
 8004736:	42a9      	cmp	r1, r5
 8004738:	d902      	bls.n	8004740 <_malloc_r+0x20>
 800473a:	230c      	movs	r3, #12
 800473c:	6033      	str	r3, [r6, #0]
 800473e:	e046      	b.n	80047ce <_malloc_r+0xae>
 8004740:	f000 fb98 	bl	8004e74 <__malloc_lock>
 8004744:	4b23      	ldr	r3, [pc, #140]	; (80047d4 <_malloc_r+0xb4>)
 8004746:	681c      	ldr	r4, [r3, #0]
 8004748:	461a      	mov	r2, r3
 800474a:	4621      	mov	r1, r4
 800474c:	b1a1      	cbz	r1, 8004778 <_malloc_r+0x58>
 800474e:	680b      	ldr	r3, [r1, #0]
 8004750:	1b5b      	subs	r3, r3, r5
 8004752:	d40e      	bmi.n	8004772 <_malloc_r+0x52>
 8004754:	2b0b      	cmp	r3, #11
 8004756:	d903      	bls.n	8004760 <_malloc_r+0x40>
 8004758:	600b      	str	r3, [r1, #0]
 800475a:	18cc      	adds	r4, r1, r3
 800475c:	50cd      	str	r5, [r1, r3]
 800475e:	e01e      	b.n	800479e <_malloc_r+0x7e>
 8004760:	428c      	cmp	r4, r1
 8004762:	bf0d      	iteet	eq
 8004764:	6863      	ldreq	r3, [r4, #4]
 8004766:	684b      	ldrne	r3, [r1, #4]
 8004768:	6063      	strne	r3, [r4, #4]
 800476a:	6013      	streq	r3, [r2, #0]
 800476c:	bf18      	it	ne
 800476e:	460c      	movne	r4, r1
 8004770:	e015      	b.n	800479e <_malloc_r+0x7e>
 8004772:	460c      	mov	r4, r1
 8004774:	6849      	ldr	r1, [r1, #4]
 8004776:	e7e9      	b.n	800474c <_malloc_r+0x2c>
 8004778:	4c17      	ldr	r4, [pc, #92]	; (80047d8 <_malloc_r+0xb8>)
 800477a:	6823      	ldr	r3, [r4, #0]
 800477c:	b91b      	cbnz	r3, 8004786 <_malloc_r+0x66>
 800477e:	4630      	mov	r0, r6
 8004780:	f000 f8a6 	bl	80048d0 <_sbrk_r>
 8004784:	6020      	str	r0, [r4, #0]
 8004786:	4629      	mov	r1, r5
 8004788:	4630      	mov	r0, r6
 800478a:	f000 f8a1 	bl	80048d0 <_sbrk_r>
 800478e:	1c43      	adds	r3, r0, #1
 8004790:	d018      	beq.n	80047c4 <_malloc_r+0xa4>
 8004792:	1cc4      	adds	r4, r0, #3
 8004794:	f024 0403 	bic.w	r4, r4, #3
 8004798:	42a0      	cmp	r0, r4
 800479a:	d10d      	bne.n	80047b8 <_malloc_r+0x98>
 800479c:	6025      	str	r5, [r4, #0]
 800479e:	4630      	mov	r0, r6
 80047a0:	f000 fb69 	bl	8004e76 <__malloc_unlock>
 80047a4:	f104 000b 	add.w	r0, r4, #11
 80047a8:	1d23      	adds	r3, r4, #4
 80047aa:	f020 0007 	bic.w	r0, r0, #7
 80047ae:	1ac3      	subs	r3, r0, r3
 80047b0:	d00e      	beq.n	80047d0 <_malloc_r+0xb0>
 80047b2:	425a      	negs	r2, r3
 80047b4:	50e2      	str	r2, [r4, r3]
 80047b6:	bd70      	pop	{r4, r5, r6, pc}
 80047b8:	1a21      	subs	r1, r4, r0
 80047ba:	4630      	mov	r0, r6
 80047bc:	f000 f888 	bl	80048d0 <_sbrk_r>
 80047c0:	3001      	adds	r0, #1
 80047c2:	d1eb      	bne.n	800479c <_malloc_r+0x7c>
 80047c4:	230c      	movs	r3, #12
 80047c6:	6033      	str	r3, [r6, #0]
 80047c8:	4630      	mov	r0, r6
 80047ca:	f000 fb54 	bl	8004e76 <__malloc_unlock>
 80047ce:	2000      	movs	r0, #0
 80047d0:	bd70      	pop	{r4, r5, r6, pc}
 80047d2:	bf00      	nop
 80047d4:	20000b7c 	.word	0x20000b7c
 80047d8:	20000b78 	.word	0x20000b78

080047dc <iprintf>:
 80047dc:	b40f      	push	{r0, r1, r2, r3}
 80047de:	4b0a      	ldr	r3, [pc, #40]	; (8004808 <iprintf+0x2c>)
 80047e0:	b513      	push	{r0, r1, r4, lr}
 80047e2:	681c      	ldr	r4, [r3, #0]
 80047e4:	b124      	cbz	r4, 80047f0 <iprintf+0x14>
 80047e6:	69a3      	ldr	r3, [r4, #24]
 80047e8:	b913      	cbnz	r3, 80047f0 <iprintf+0x14>
 80047ea:	4620      	mov	r0, r4
 80047ec:	f000 fa58 	bl	8004ca0 <__sinit>
 80047f0:	ab05      	add	r3, sp, #20
 80047f2:	9a04      	ldr	r2, [sp, #16]
 80047f4:	68a1      	ldr	r1, [r4, #8]
 80047f6:	9301      	str	r3, [sp, #4]
 80047f8:	4620      	mov	r0, r4
 80047fa:	f000 fcb5 	bl	8005168 <_vfiprintf_r>
 80047fe:	b002      	add	sp, #8
 8004800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004804:	b004      	add	sp, #16
 8004806:	4770      	bx	lr
 8004808:	200000bc 	.word	0x200000bc

0800480c <_puts_r>:
 800480c:	b570      	push	{r4, r5, r6, lr}
 800480e:	460e      	mov	r6, r1
 8004810:	4605      	mov	r5, r0
 8004812:	b118      	cbz	r0, 800481c <_puts_r+0x10>
 8004814:	6983      	ldr	r3, [r0, #24]
 8004816:	b90b      	cbnz	r3, 800481c <_puts_r+0x10>
 8004818:	f000 fa42 	bl	8004ca0 <__sinit>
 800481c:	69ab      	ldr	r3, [r5, #24]
 800481e:	68ac      	ldr	r4, [r5, #8]
 8004820:	b913      	cbnz	r3, 8004828 <_puts_r+0x1c>
 8004822:	4628      	mov	r0, r5
 8004824:	f000 fa3c 	bl	8004ca0 <__sinit>
 8004828:	4b22      	ldr	r3, [pc, #136]	; (80048b4 <_puts_r+0xa8>)
 800482a:	429c      	cmp	r4, r3
 800482c:	d101      	bne.n	8004832 <_puts_r+0x26>
 800482e:	686c      	ldr	r4, [r5, #4]
 8004830:	e008      	b.n	8004844 <_puts_r+0x38>
 8004832:	4b21      	ldr	r3, [pc, #132]	; (80048b8 <_puts_r+0xac>)
 8004834:	429c      	cmp	r4, r3
 8004836:	d101      	bne.n	800483c <_puts_r+0x30>
 8004838:	68ac      	ldr	r4, [r5, #8]
 800483a:	e003      	b.n	8004844 <_puts_r+0x38>
 800483c:	4b1f      	ldr	r3, [pc, #124]	; (80048bc <_puts_r+0xb0>)
 800483e:	429c      	cmp	r4, r3
 8004840:	bf08      	it	eq
 8004842:	68ec      	ldreq	r4, [r5, #12]
 8004844:	89a3      	ldrh	r3, [r4, #12]
 8004846:	071b      	lsls	r3, r3, #28
 8004848:	d501      	bpl.n	800484e <_puts_r+0x42>
 800484a:	6923      	ldr	r3, [r4, #16]
 800484c:	b93b      	cbnz	r3, 800485e <_puts_r+0x52>
 800484e:	4621      	mov	r1, r4
 8004850:	4628      	mov	r0, r5
 8004852:	f000 f8c5 	bl	80049e0 <__swsetup_r>
 8004856:	b110      	cbz	r0, 800485e <_puts_r+0x52>
 8004858:	f04f 30ff 	mov.w	r0, #4294967295
 800485c:	bd70      	pop	{r4, r5, r6, pc}
 800485e:	3e01      	subs	r6, #1
 8004860:	68a3      	ldr	r3, [r4, #8]
 8004862:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004866:	3b01      	subs	r3, #1
 8004868:	60a3      	str	r3, [r4, #8]
 800486a:	b191      	cbz	r1, 8004892 <_puts_r+0x86>
 800486c:	2b00      	cmp	r3, #0
 800486e:	da04      	bge.n	800487a <_puts_r+0x6e>
 8004870:	69a2      	ldr	r2, [r4, #24]
 8004872:	4293      	cmp	r3, r2
 8004874:	db06      	blt.n	8004884 <_puts_r+0x78>
 8004876:	290a      	cmp	r1, #10
 8004878:	d004      	beq.n	8004884 <_puts_r+0x78>
 800487a:	6823      	ldr	r3, [r4, #0]
 800487c:	1c5a      	adds	r2, r3, #1
 800487e:	6022      	str	r2, [r4, #0]
 8004880:	7019      	strb	r1, [r3, #0]
 8004882:	e7ed      	b.n	8004860 <_puts_r+0x54>
 8004884:	4622      	mov	r2, r4
 8004886:	4628      	mov	r0, r5
 8004888:	f000 f856 	bl	8004938 <__swbuf_r>
 800488c:	3001      	adds	r0, #1
 800488e:	d1e7      	bne.n	8004860 <_puts_r+0x54>
 8004890:	e7e2      	b.n	8004858 <_puts_r+0x4c>
 8004892:	2b00      	cmp	r3, #0
 8004894:	da08      	bge.n	80048a8 <_puts_r+0x9c>
 8004896:	4622      	mov	r2, r4
 8004898:	210a      	movs	r1, #10
 800489a:	4628      	mov	r0, r5
 800489c:	f000 f84c 	bl	8004938 <__swbuf_r>
 80048a0:	3001      	adds	r0, #1
 80048a2:	d0d9      	beq.n	8004858 <_puts_r+0x4c>
 80048a4:	200a      	movs	r0, #10
 80048a6:	bd70      	pop	{r4, r5, r6, pc}
 80048a8:	6823      	ldr	r3, [r4, #0]
 80048aa:	200a      	movs	r0, #10
 80048ac:	1c5a      	adds	r2, r3, #1
 80048ae:	6022      	str	r2, [r4, #0]
 80048b0:	7018      	strb	r0, [r3, #0]
 80048b2:	bd70      	pop	{r4, r5, r6, pc}
 80048b4:	080059f4 	.word	0x080059f4
 80048b8:	08005a14 	.word	0x08005a14
 80048bc:	08005a34 	.word	0x08005a34

080048c0 <puts>:
 80048c0:	4b02      	ldr	r3, [pc, #8]	; (80048cc <puts+0xc>)
 80048c2:	4601      	mov	r1, r0
 80048c4:	6818      	ldr	r0, [r3, #0]
 80048c6:	f7ff bfa1 	b.w	800480c <_puts_r>
 80048ca:	bf00      	nop
 80048cc:	200000bc 	.word	0x200000bc

080048d0 <_sbrk_r>:
 80048d0:	b538      	push	{r3, r4, r5, lr}
 80048d2:	4c06      	ldr	r4, [pc, #24]	; (80048ec <_sbrk_r+0x1c>)
 80048d4:	2300      	movs	r3, #0
 80048d6:	4605      	mov	r5, r0
 80048d8:	4608      	mov	r0, r1
 80048da:	6023      	str	r3, [r4, #0]
 80048dc:	f7ff fdf6 	bl	80044cc <_sbrk>
 80048e0:	1c43      	adds	r3, r0, #1
 80048e2:	d102      	bne.n	80048ea <_sbrk_r+0x1a>
 80048e4:	6823      	ldr	r3, [r4, #0]
 80048e6:	b103      	cbz	r3, 80048ea <_sbrk_r+0x1a>
 80048e8:	602b      	str	r3, [r5, #0]
 80048ea:	bd38      	pop	{r3, r4, r5, pc}
 80048ec:	20000b84 	.word	0x20000b84

080048f0 <siprintf>:
 80048f0:	b40e      	push	{r1, r2, r3}
 80048f2:	b500      	push	{lr}
 80048f4:	b09c      	sub	sp, #112	; 0x70
 80048f6:	f44f 7102 	mov.w	r1, #520	; 0x208
 80048fa:	ab1d      	add	r3, sp, #116	; 0x74
 80048fc:	f8ad 1014 	strh.w	r1, [sp, #20]
 8004900:	9002      	str	r0, [sp, #8]
 8004902:	9006      	str	r0, [sp, #24]
 8004904:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004908:	480a      	ldr	r0, [pc, #40]	; (8004934 <siprintf+0x44>)
 800490a:	9104      	str	r1, [sp, #16]
 800490c:	9107      	str	r1, [sp, #28]
 800490e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004912:	f853 2b04 	ldr.w	r2, [r3], #4
 8004916:	f8ad 1016 	strh.w	r1, [sp, #22]
 800491a:	6800      	ldr	r0, [r0, #0]
 800491c:	9301      	str	r3, [sp, #4]
 800491e:	a902      	add	r1, sp, #8
 8004920:	f000 fb04 	bl	8004f2c <_svfiprintf_r>
 8004924:	9b02      	ldr	r3, [sp, #8]
 8004926:	2200      	movs	r2, #0
 8004928:	701a      	strb	r2, [r3, #0]
 800492a:	b01c      	add	sp, #112	; 0x70
 800492c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004930:	b003      	add	sp, #12
 8004932:	4770      	bx	lr
 8004934:	200000bc 	.word	0x200000bc

08004938 <__swbuf_r>:
 8004938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800493a:	460f      	mov	r7, r1
 800493c:	4614      	mov	r4, r2
 800493e:	4606      	mov	r6, r0
 8004940:	b118      	cbz	r0, 800494a <__swbuf_r+0x12>
 8004942:	6983      	ldr	r3, [r0, #24]
 8004944:	b90b      	cbnz	r3, 800494a <__swbuf_r+0x12>
 8004946:	f000 f9ab 	bl	8004ca0 <__sinit>
 800494a:	4b22      	ldr	r3, [pc, #136]	; (80049d4 <__swbuf_r+0x9c>)
 800494c:	429c      	cmp	r4, r3
 800494e:	d101      	bne.n	8004954 <__swbuf_r+0x1c>
 8004950:	6874      	ldr	r4, [r6, #4]
 8004952:	e008      	b.n	8004966 <__swbuf_r+0x2e>
 8004954:	4b20      	ldr	r3, [pc, #128]	; (80049d8 <__swbuf_r+0xa0>)
 8004956:	429c      	cmp	r4, r3
 8004958:	d101      	bne.n	800495e <__swbuf_r+0x26>
 800495a:	68b4      	ldr	r4, [r6, #8]
 800495c:	e003      	b.n	8004966 <__swbuf_r+0x2e>
 800495e:	4b1f      	ldr	r3, [pc, #124]	; (80049dc <__swbuf_r+0xa4>)
 8004960:	429c      	cmp	r4, r3
 8004962:	bf08      	it	eq
 8004964:	68f4      	ldreq	r4, [r6, #12]
 8004966:	69a3      	ldr	r3, [r4, #24]
 8004968:	60a3      	str	r3, [r4, #8]
 800496a:	89a3      	ldrh	r3, [r4, #12]
 800496c:	071a      	lsls	r2, r3, #28
 800496e:	d509      	bpl.n	8004984 <__swbuf_r+0x4c>
 8004970:	6923      	ldr	r3, [r4, #16]
 8004972:	b13b      	cbz	r3, 8004984 <__swbuf_r+0x4c>
 8004974:	6823      	ldr	r3, [r4, #0]
 8004976:	6920      	ldr	r0, [r4, #16]
 8004978:	1a18      	subs	r0, r3, r0
 800497a:	6963      	ldr	r3, [r4, #20]
 800497c:	4298      	cmp	r0, r3
 800497e:	b2fd      	uxtb	r5, r7
 8004980:	db0f      	blt.n	80049a2 <__swbuf_r+0x6a>
 8004982:	e008      	b.n	8004996 <__swbuf_r+0x5e>
 8004984:	4621      	mov	r1, r4
 8004986:	4630      	mov	r0, r6
 8004988:	f000 f82a 	bl	80049e0 <__swsetup_r>
 800498c:	2800      	cmp	r0, #0
 800498e:	d0f1      	beq.n	8004974 <__swbuf_r+0x3c>
 8004990:	f04f 30ff 	mov.w	r0, #4294967295
 8004994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004996:	4621      	mov	r1, r4
 8004998:	4630      	mov	r0, r6
 800499a:	f000 f917 	bl	8004bcc <_fflush_r>
 800499e:	2800      	cmp	r0, #0
 80049a0:	d1f6      	bne.n	8004990 <__swbuf_r+0x58>
 80049a2:	68a3      	ldr	r3, [r4, #8]
 80049a4:	3b01      	subs	r3, #1
 80049a6:	60a3      	str	r3, [r4, #8]
 80049a8:	6823      	ldr	r3, [r4, #0]
 80049aa:	1c5a      	adds	r2, r3, #1
 80049ac:	6022      	str	r2, [r4, #0]
 80049ae:	701f      	strb	r7, [r3, #0]
 80049b0:	6962      	ldr	r2, [r4, #20]
 80049b2:	1c43      	adds	r3, r0, #1
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d004      	beq.n	80049c2 <__swbuf_r+0x8a>
 80049b8:	89a3      	ldrh	r3, [r4, #12]
 80049ba:	07db      	lsls	r3, r3, #31
 80049bc:	d507      	bpl.n	80049ce <__swbuf_r+0x96>
 80049be:	2d0a      	cmp	r5, #10
 80049c0:	d105      	bne.n	80049ce <__swbuf_r+0x96>
 80049c2:	4621      	mov	r1, r4
 80049c4:	4630      	mov	r0, r6
 80049c6:	f000 f901 	bl	8004bcc <_fflush_r>
 80049ca:	2800      	cmp	r0, #0
 80049cc:	d1e0      	bne.n	8004990 <__swbuf_r+0x58>
 80049ce:	4628      	mov	r0, r5
 80049d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049d2:	bf00      	nop
 80049d4:	080059f4 	.word	0x080059f4
 80049d8:	08005a14 	.word	0x08005a14
 80049dc:	08005a34 	.word	0x08005a34

080049e0 <__swsetup_r>:
 80049e0:	4b32      	ldr	r3, [pc, #200]	; (8004aac <__swsetup_r+0xcc>)
 80049e2:	b570      	push	{r4, r5, r6, lr}
 80049e4:	681d      	ldr	r5, [r3, #0]
 80049e6:	4606      	mov	r6, r0
 80049e8:	460c      	mov	r4, r1
 80049ea:	b125      	cbz	r5, 80049f6 <__swsetup_r+0x16>
 80049ec:	69ab      	ldr	r3, [r5, #24]
 80049ee:	b913      	cbnz	r3, 80049f6 <__swsetup_r+0x16>
 80049f0:	4628      	mov	r0, r5
 80049f2:	f000 f955 	bl	8004ca0 <__sinit>
 80049f6:	4b2e      	ldr	r3, [pc, #184]	; (8004ab0 <__swsetup_r+0xd0>)
 80049f8:	429c      	cmp	r4, r3
 80049fa:	d101      	bne.n	8004a00 <__swsetup_r+0x20>
 80049fc:	686c      	ldr	r4, [r5, #4]
 80049fe:	e008      	b.n	8004a12 <__swsetup_r+0x32>
 8004a00:	4b2c      	ldr	r3, [pc, #176]	; (8004ab4 <__swsetup_r+0xd4>)
 8004a02:	429c      	cmp	r4, r3
 8004a04:	d101      	bne.n	8004a0a <__swsetup_r+0x2a>
 8004a06:	68ac      	ldr	r4, [r5, #8]
 8004a08:	e003      	b.n	8004a12 <__swsetup_r+0x32>
 8004a0a:	4b2b      	ldr	r3, [pc, #172]	; (8004ab8 <__swsetup_r+0xd8>)
 8004a0c:	429c      	cmp	r4, r3
 8004a0e:	bf08      	it	eq
 8004a10:	68ec      	ldreq	r4, [r5, #12]
 8004a12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	0715      	lsls	r5, r2, #28
 8004a1a:	d41d      	bmi.n	8004a58 <__swsetup_r+0x78>
 8004a1c:	06d0      	lsls	r0, r2, #27
 8004a1e:	d402      	bmi.n	8004a26 <__swsetup_r+0x46>
 8004a20:	2209      	movs	r2, #9
 8004a22:	6032      	str	r2, [r6, #0]
 8004a24:	e03a      	b.n	8004a9c <__swsetup_r+0xbc>
 8004a26:	0751      	lsls	r1, r2, #29
 8004a28:	d512      	bpl.n	8004a50 <__swsetup_r+0x70>
 8004a2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a2c:	b141      	cbz	r1, 8004a40 <__swsetup_r+0x60>
 8004a2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a32:	4299      	cmp	r1, r3
 8004a34:	d002      	beq.n	8004a3c <__swsetup_r+0x5c>
 8004a36:	4630      	mov	r0, r6
 8004a38:	f7ff fe24 	bl	8004684 <_free_r>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	6363      	str	r3, [r4, #52]	; 0x34
 8004a40:	89a3      	ldrh	r3, [r4, #12]
 8004a42:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004a46:	81a3      	strh	r3, [r4, #12]
 8004a48:	2300      	movs	r3, #0
 8004a4a:	6063      	str	r3, [r4, #4]
 8004a4c:	6923      	ldr	r3, [r4, #16]
 8004a4e:	6023      	str	r3, [r4, #0]
 8004a50:	89a3      	ldrh	r3, [r4, #12]
 8004a52:	f043 0308 	orr.w	r3, r3, #8
 8004a56:	81a3      	strh	r3, [r4, #12]
 8004a58:	6923      	ldr	r3, [r4, #16]
 8004a5a:	b94b      	cbnz	r3, 8004a70 <__swsetup_r+0x90>
 8004a5c:	89a3      	ldrh	r3, [r4, #12]
 8004a5e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004a62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a66:	d003      	beq.n	8004a70 <__swsetup_r+0x90>
 8004a68:	4621      	mov	r1, r4
 8004a6a:	4630      	mov	r0, r6
 8004a6c:	f000 f9c6 	bl	8004dfc <__smakebuf_r>
 8004a70:	89a2      	ldrh	r2, [r4, #12]
 8004a72:	f012 0301 	ands.w	r3, r2, #1
 8004a76:	d005      	beq.n	8004a84 <__swsetup_r+0xa4>
 8004a78:	2300      	movs	r3, #0
 8004a7a:	60a3      	str	r3, [r4, #8]
 8004a7c:	6963      	ldr	r3, [r4, #20]
 8004a7e:	425b      	negs	r3, r3
 8004a80:	61a3      	str	r3, [r4, #24]
 8004a82:	e003      	b.n	8004a8c <__swsetup_r+0xac>
 8004a84:	0792      	lsls	r2, r2, #30
 8004a86:	bf58      	it	pl
 8004a88:	6963      	ldrpl	r3, [r4, #20]
 8004a8a:	60a3      	str	r3, [r4, #8]
 8004a8c:	6923      	ldr	r3, [r4, #16]
 8004a8e:	b95b      	cbnz	r3, 8004aa8 <__swsetup_r+0xc8>
 8004a90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a94:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8004a98:	b280      	uxth	r0, r0
 8004a9a:	b130      	cbz	r0, 8004aaa <__swsetup_r+0xca>
 8004a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aa0:	81a3      	strh	r3, [r4, #12]
 8004aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa6:	bd70      	pop	{r4, r5, r6, pc}
 8004aa8:	2000      	movs	r0, #0
 8004aaa:	bd70      	pop	{r4, r5, r6, pc}
 8004aac:	200000bc 	.word	0x200000bc
 8004ab0:	080059f4 	.word	0x080059f4
 8004ab4:	08005a14 	.word	0x08005a14
 8004ab8:	08005a34 	.word	0x08005a34

08004abc <__sflush_r>:
 8004abc:	898a      	ldrh	r2, [r1, #12]
 8004abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ac2:	4605      	mov	r5, r0
 8004ac4:	0710      	lsls	r0, r2, #28
 8004ac6:	460c      	mov	r4, r1
 8004ac8:	d459      	bmi.n	8004b7e <__sflush_r+0xc2>
 8004aca:	684b      	ldr	r3, [r1, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	dc02      	bgt.n	8004ad6 <__sflush_r+0x1a>
 8004ad0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	dd17      	ble.n	8004b06 <__sflush_r+0x4a>
 8004ad6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ad8:	b1ae      	cbz	r6, 8004b06 <__sflush_r+0x4a>
 8004ada:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004ade:	2300      	movs	r3, #0
 8004ae0:	b292      	uxth	r2, r2
 8004ae2:	682f      	ldr	r7, [r5, #0]
 8004ae4:	602b      	str	r3, [r5, #0]
 8004ae6:	b10a      	cbz	r2, 8004aec <__sflush_r+0x30>
 8004ae8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004aea:	e015      	b.n	8004b18 <__sflush_r+0x5c>
 8004aec:	6a21      	ldr	r1, [r4, #32]
 8004aee:	2301      	movs	r3, #1
 8004af0:	4628      	mov	r0, r5
 8004af2:	47b0      	blx	r6
 8004af4:	1c41      	adds	r1, r0, #1
 8004af6:	d10f      	bne.n	8004b18 <__sflush_r+0x5c>
 8004af8:	682b      	ldr	r3, [r5, #0]
 8004afa:	b16b      	cbz	r3, 8004b18 <__sflush_r+0x5c>
 8004afc:	2b1d      	cmp	r3, #29
 8004afe:	d001      	beq.n	8004b04 <__sflush_r+0x48>
 8004b00:	2b16      	cmp	r3, #22
 8004b02:	d103      	bne.n	8004b0c <__sflush_r+0x50>
 8004b04:	602f      	str	r7, [r5, #0]
 8004b06:	2000      	movs	r0, #0
 8004b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b0c:	89a3      	ldrh	r3, [r4, #12]
 8004b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b12:	81a3      	strh	r3, [r4, #12]
 8004b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b18:	89a3      	ldrh	r3, [r4, #12]
 8004b1a:	075a      	lsls	r2, r3, #29
 8004b1c:	d505      	bpl.n	8004b2a <__sflush_r+0x6e>
 8004b1e:	6863      	ldr	r3, [r4, #4]
 8004b20:	1ac0      	subs	r0, r0, r3
 8004b22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b24:	b10b      	cbz	r3, 8004b2a <__sflush_r+0x6e>
 8004b26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b28:	1ac0      	subs	r0, r0, r3
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b30:	6a21      	ldr	r1, [r4, #32]
 8004b32:	4628      	mov	r0, r5
 8004b34:	47b0      	blx	r6
 8004b36:	1c43      	adds	r3, r0, #1
 8004b38:	89a3      	ldrh	r3, [r4, #12]
 8004b3a:	d106      	bne.n	8004b4a <__sflush_r+0x8e>
 8004b3c:	6829      	ldr	r1, [r5, #0]
 8004b3e:	291d      	cmp	r1, #29
 8004b40:	d83a      	bhi.n	8004bb8 <__sflush_r+0xfc>
 8004b42:	4a21      	ldr	r2, [pc, #132]	; (8004bc8 <__sflush_r+0x10c>)
 8004b44:	40ca      	lsrs	r2, r1
 8004b46:	07d6      	lsls	r6, r2, #31
 8004b48:	d536      	bpl.n	8004bb8 <__sflush_r+0xfc>
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	6062      	str	r2, [r4, #4]
 8004b4e:	04d9      	lsls	r1, r3, #19
 8004b50:	6922      	ldr	r2, [r4, #16]
 8004b52:	6022      	str	r2, [r4, #0]
 8004b54:	d504      	bpl.n	8004b60 <__sflush_r+0xa4>
 8004b56:	1c42      	adds	r2, r0, #1
 8004b58:	d101      	bne.n	8004b5e <__sflush_r+0xa2>
 8004b5a:	682b      	ldr	r3, [r5, #0]
 8004b5c:	b903      	cbnz	r3, 8004b60 <__sflush_r+0xa4>
 8004b5e:	6560      	str	r0, [r4, #84]	; 0x54
 8004b60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b62:	602f      	str	r7, [r5, #0]
 8004b64:	2900      	cmp	r1, #0
 8004b66:	d0ce      	beq.n	8004b06 <__sflush_r+0x4a>
 8004b68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b6c:	4299      	cmp	r1, r3
 8004b6e:	d002      	beq.n	8004b76 <__sflush_r+0xba>
 8004b70:	4628      	mov	r0, r5
 8004b72:	f7ff fd87 	bl	8004684 <_free_r>
 8004b76:	2000      	movs	r0, #0
 8004b78:	6360      	str	r0, [r4, #52]	; 0x34
 8004b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b7e:	690f      	ldr	r7, [r1, #16]
 8004b80:	2f00      	cmp	r7, #0
 8004b82:	d0c0      	beq.n	8004b06 <__sflush_r+0x4a>
 8004b84:	0793      	lsls	r3, r2, #30
 8004b86:	680e      	ldr	r6, [r1, #0]
 8004b88:	bf08      	it	eq
 8004b8a:	694b      	ldreq	r3, [r1, #20]
 8004b8c:	600f      	str	r7, [r1, #0]
 8004b8e:	bf18      	it	ne
 8004b90:	2300      	movne	r3, #0
 8004b92:	ebc7 0806 	rsb	r8, r7, r6
 8004b96:	608b      	str	r3, [r1, #8]
 8004b98:	e002      	b.n	8004ba0 <__sflush_r+0xe4>
 8004b9a:	4407      	add	r7, r0
 8004b9c:	ebc0 0808 	rsb	r8, r0, r8
 8004ba0:	f1b8 0f00 	cmp.w	r8, #0
 8004ba4:	ddaf      	ble.n	8004b06 <__sflush_r+0x4a>
 8004ba6:	4643      	mov	r3, r8
 8004ba8:	463a      	mov	r2, r7
 8004baa:	6a21      	ldr	r1, [r4, #32]
 8004bac:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004bae:	4628      	mov	r0, r5
 8004bb0:	47b0      	blx	r6
 8004bb2:	2800      	cmp	r0, #0
 8004bb4:	dcf1      	bgt.n	8004b9a <__sflush_r+0xde>
 8004bb6:	89a3      	ldrh	r3, [r4, #12]
 8004bb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bbc:	81a3      	strh	r3, [r4, #12]
 8004bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8004bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20400001 	.word	0x20400001

08004bcc <_fflush_r>:
 8004bcc:	b538      	push	{r3, r4, r5, lr}
 8004bce:	690b      	ldr	r3, [r1, #16]
 8004bd0:	4605      	mov	r5, r0
 8004bd2:	460c      	mov	r4, r1
 8004bd4:	b1db      	cbz	r3, 8004c0e <_fflush_r+0x42>
 8004bd6:	b118      	cbz	r0, 8004be0 <_fflush_r+0x14>
 8004bd8:	6983      	ldr	r3, [r0, #24]
 8004bda:	b90b      	cbnz	r3, 8004be0 <_fflush_r+0x14>
 8004bdc:	f000 f860 	bl	8004ca0 <__sinit>
 8004be0:	4b0c      	ldr	r3, [pc, #48]	; (8004c14 <_fflush_r+0x48>)
 8004be2:	429c      	cmp	r4, r3
 8004be4:	d101      	bne.n	8004bea <_fflush_r+0x1e>
 8004be6:	686c      	ldr	r4, [r5, #4]
 8004be8:	e008      	b.n	8004bfc <_fflush_r+0x30>
 8004bea:	4b0b      	ldr	r3, [pc, #44]	; (8004c18 <_fflush_r+0x4c>)
 8004bec:	429c      	cmp	r4, r3
 8004bee:	d101      	bne.n	8004bf4 <_fflush_r+0x28>
 8004bf0:	68ac      	ldr	r4, [r5, #8]
 8004bf2:	e003      	b.n	8004bfc <_fflush_r+0x30>
 8004bf4:	4b09      	ldr	r3, [pc, #36]	; (8004c1c <_fflush_r+0x50>)
 8004bf6:	429c      	cmp	r4, r3
 8004bf8:	bf08      	it	eq
 8004bfa:	68ec      	ldreq	r4, [r5, #12]
 8004bfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c00:	b12b      	cbz	r3, 8004c0e <_fflush_r+0x42>
 8004c02:	4621      	mov	r1, r4
 8004c04:	4628      	mov	r0, r5
 8004c06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c0a:	f7ff bf57 	b.w	8004abc <__sflush_r>
 8004c0e:	2000      	movs	r0, #0
 8004c10:	bd38      	pop	{r3, r4, r5, pc}
 8004c12:	bf00      	nop
 8004c14:	080059f4 	.word	0x080059f4
 8004c18:	08005a14 	.word	0x08005a14
 8004c1c:	08005a34 	.word	0x08005a34

08004c20 <_cleanup_r>:
 8004c20:	4901      	ldr	r1, [pc, #4]	; (8004c28 <_cleanup_r+0x8>)
 8004c22:	f000 b8a9 	b.w	8004d78 <_fwalk_reent>
 8004c26:	bf00      	nop
 8004c28:	08004bcd 	.word	0x08004bcd

08004c2c <std.isra.0>:
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	b510      	push	{r4, lr}
 8004c30:	4604      	mov	r4, r0
 8004c32:	6003      	str	r3, [r0, #0]
 8004c34:	6043      	str	r3, [r0, #4]
 8004c36:	6083      	str	r3, [r0, #8]
 8004c38:	8181      	strh	r1, [r0, #12]
 8004c3a:	6643      	str	r3, [r0, #100]	; 0x64
 8004c3c:	81c2      	strh	r2, [r0, #14]
 8004c3e:	6103      	str	r3, [r0, #16]
 8004c40:	6143      	str	r3, [r0, #20]
 8004c42:	6183      	str	r3, [r0, #24]
 8004c44:	4619      	mov	r1, r3
 8004c46:	2208      	movs	r2, #8
 8004c48:	305c      	adds	r0, #92	; 0x5c
 8004c4a:	f7ff fd12 	bl	8004672 <memset>
 8004c4e:	4b05      	ldr	r3, [pc, #20]	; (8004c64 <std.isra.0+0x38>)
 8004c50:	6263      	str	r3, [r4, #36]	; 0x24
 8004c52:	4b05      	ldr	r3, [pc, #20]	; (8004c68 <std.isra.0+0x3c>)
 8004c54:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c56:	4b05      	ldr	r3, [pc, #20]	; (8004c6c <std.isra.0+0x40>)
 8004c58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c5a:	4b05      	ldr	r3, [pc, #20]	; (8004c70 <std.isra.0+0x44>)
 8004c5c:	6224      	str	r4, [r4, #32]
 8004c5e:	6323      	str	r3, [r4, #48]	; 0x30
 8004c60:	bd10      	pop	{r4, pc}
 8004c62:	bf00      	nop
 8004c64:	080056d9 	.word	0x080056d9
 8004c68:	080056fb 	.word	0x080056fb
 8004c6c:	08005733 	.word	0x08005733
 8004c70:	08005757 	.word	0x08005757

08004c74 <__sfmoreglue>:
 8004c74:	b570      	push	{r4, r5, r6, lr}
 8004c76:	2368      	movs	r3, #104	; 0x68
 8004c78:	1e4d      	subs	r5, r1, #1
 8004c7a:	435d      	muls	r5, r3
 8004c7c:	460e      	mov	r6, r1
 8004c7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c82:	f7ff fd4d 	bl	8004720 <_malloc_r>
 8004c86:	4604      	mov	r4, r0
 8004c88:	b140      	cbz	r0, 8004c9c <__sfmoreglue+0x28>
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	e880 0042 	stmia.w	r0, {r1, r6}
 8004c90:	300c      	adds	r0, #12
 8004c92:	60a0      	str	r0, [r4, #8]
 8004c94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c98:	f7ff fceb 	bl	8004672 <memset>
 8004c9c:	4620      	mov	r0, r4
 8004c9e:	bd70      	pop	{r4, r5, r6, pc}

08004ca0 <__sinit>:
 8004ca0:	6983      	ldr	r3, [r0, #24]
 8004ca2:	b510      	push	{r4, lr}
 8004ca4:	4604      	mov	r4, r0
 8004ca6:	bb33      	cbnz	r3, 8004cf6 <__sinit+0x56>
 8004ca8:	6483      	str	r3, [r0, #72]	; 0x48
 8004caa:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004cac:	6503      	str	r3, [r0, #80]	; 0x50
 8004cae:	4b12      	ldr	r3, [pc, #72]	; (8004cf8 <__sinit+0x58>)
 8004cb0:	4a12      	ldr	r2, [pc, #72]	; (8004cfc <__sinit+0x5c>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6282      	str	r2, [r0, #40]	; 0x28
 8004cb6:	4298      	cmp	r0, r3
 8004cb8:	bf04      	itt	eq
 8004cba:	2301      	moveq	r3, #1
 8004cbc:	6183      	streq	r3, [r0, #24]
 8004cbe:	f000 f81f 	bl	8004d00 <__sfp>
 8004cc2:	6060      	str	r0, [r4, #4]
 8004cc4:	4620      	mov	r0, r4
 8004cc6:	f000 f81b 	bl	8004d00 <__sfp>
 8004cca:	60a0      	str	r0, [r4, #8]
 8004ccc:	4620      	mov	r0, r4
 8004cce:	f000 f817 	bl	8004d00 <__sfp>
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	60e0      	str	r0, [r4, #12]
 8004cd6:	2104      	movs	r1, #4
 8004cd8:	6860      	ldr	r0, [r4, #4]
 8004cda:	f7ff ffa7 	bl	8004c2c <std.isra.0>
 8004cde:	2201      	movs	r2, #1
 8004ce0:	2109      	movs	r1, #9
 8004ce2:	68a0      	ldr	r0, [r4, #8]
 8004ce4:	f7ff ffa2 	bl	8004c2c <std.isra.0>
 8004ce8:	2202      	movs	r2, #2
 8004cea:	2112      	movs	r1, #18
 8004cec:	68e0      	ldr	r0, [r4, #12]
 8004cee:	f7ff ff9d 	bl	8004c2c <std.isra.0>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	61a3      	str	r3, [r4, #24]
 8004cf6:	bd10      	pop	{r4, pc}
 8004cf8:	080059f0 	.word	0x080059f0
 8004cfc:	08004c21 	.word	0x08004c21

08004d00 <__sfp>:
 8004d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d02:	4b1c      	ldr	r3, [pc, #112]	; (8004d74 <__sfp+0x74>)
 8004d04:	681e      	ldr	r6, [r3, #0]
 8004d06:	69b3      	ldr	r3, [r6, #24]
 8004d08:	4607      	mov	r7, r0
 8004d0a:	b913      	cbnz	r3, 8004d12 <__sfp+0x12>
 8004d0c:	4630      	mov	r0, r6
 8004d0e:	f7ff ffc7 	bl	8004ca0 <__sinit>
 8004d12:	3648      	adds	r6, #72	; 0x48
 8004d14:	68b4      	ldr	r4, [r6, #8]
 8004d16:	6873      	ldr	r3, [r6, #4]
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	d404      	bmi.n	8004d26 <__sfp+0x26>
 8004d1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004d20:	b17d      	cbz	r5, 8004d42 <__sfp+0x42>
 8004d22:	3468      	adds	r4, #104	; 0x68
 8004d24:	e7f8      	b.n	8004d18 <__sfp+0x18>
 8004d26:	6833      	ldr	r3, [r6, #0]
 8004d28:	b10b      	cbz	r3, 8004d2e <__sfp+0x2e>
 8004d2a:	6836      	ldr	r6, [r6, #0]
 8004d2c:	e7f2      	b.n	8004d14 <__sfp+0x14>
 8004d2e:	2104      	movs	r1, #4
 8004d30:	4638      	mov	r0, r7
 8004d32:	f7ff ff9f 	bl	8004c74 <__sfmoreglue>
 8004d36:	6030      	str	r0, [r6, #0]
 8004d38:	2800      	cmp	r0, #0
 8004d3a:	d1f6      	bne.n	8004d2a <__sfp+0x2a>
 8004d3c:	230c      	movs	r3, #12
 8004d3e:	603b      	str	r3, [r7, #0]
 8004d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d46:	81e3      	strh	r3, [r4, #14]
 8004d48:	2301      	movs	r3, #1
 8004d4a:	81a3      	strh	r3, [r4, #12]
 8004d4c:	6665      	str	r5, [r4, #100]	; 0x64
 8004d4e:	6025      	str	r5, [r4, #0]
 8004d50:	60a5      	str	r5, [r4, #8]
 8004d52:	6065      	str	r5, [r4, #4]
 8004d54:	6125      	str	r5, [r4, #16]
 8004d56:	6165      	str	r5, [r4, #20]
 8004d58:	61a5      	str	r5, [r4, #24]
 8004d5a:	2208      	movs	r2, #8
 8004d5c:	4629      	mov	r1, r5
 8004d5e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d62:	f7ff fc86 	bl	8004672 <memset>
 8004d66:	6365      	str	r5, [r4, #52]	; 0x34
 8004d68:	63a5      	str	r5, [r4, #56]	; 0x38
 8004d6a:	64a5      	str	r5, [r4, #72]	; 0x48
 8004d6c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004d6e:	4620      	mov	r0, r4
 8004d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d72:	bf00      	nop
 8004d74:	080059f0 	.word	0x080059f0

08004d78 <_fwalk_reent>:
 8004d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d7c:	4680      	mov	r8, r0
 8004d7e:	4689      	mov	r9, r1
 8004d80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004d84:	2600      	movs	r6, #0
 8004d86:	b194      	cbz	r4, 8004dae <_fwalk_reent+0x36>
 8004d88:	68a5      	ldr	r5, [r4, #8]
 8004d8a:	6867      	ldr	r7, [r4, #4]
 8004d8c:	3f01      	subs	r7, #1
 8004d8e:	d40c      	bmi.n	8004daa <_fwalk_reent+0x32>
 8004d90:	89ab      	ldrh	r3, [r5, #12]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d907      	bls.n	8004da6 <_fwalk_reent+0x2e>
 8004d96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	d003      	beq.n	8004da6 <_fwalk_reent+0x2e>
 8004d9e:	4629      	mov	r1, r5
 8004da0:	4640      	mov	r0, r8
 8004da2:	47c8      	blx	r9
 8004da4:	4306      	orrs	r6, r0
 8004da6:	3568      	adds	r5, #104	; 0x68
 8004da8:	e7f0      	b.n	8004d8c <_fwalk_reent+0x14>
 8004daa:	6824      	ldr	r4, [r4, #0]
 8004dac:	e7eb      	b.n	8004d86 <_fwalk_reent+0xe>
 8004dae:	4630      	mov	r0, r6
 8004db0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004db4 <__swhatbuf_r>:
 8004db4:	b570      	push	{r4, r5, r6, lr}
 8004db6:	460e      	mov	r6, r1
 8004db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dbc:	2900      	cmp	r1, #0
 8004dbe:	b090      	sub	sp, #64	; 0x40
 8004dc0:	4614      	mov	r4, r2
 8004dc2:	461d      	mov	r5, r3
 8004dc4:	da06      	bge.n	8004dd4 <__swhatbuf_r+0x20>
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	602b      	str	r3, [r5, #0]
 8004dca:	89b3      	ldrh	r3, [r6, #12]
 8004dcc:	061a      	lsls	r2, r3, #24
 8004dce:	d50e      	bpl.n	8004dee <__swhatbuf_r+0x3a>
 8004dd0:	2340      	movs	r3, #64	; 0x40
 8004dd2:	e00e      	b.n	8004df2 <__swhatbuf_r+0x3e>
 8004dd4:	aa01      	add	r2, sp, #4
 8004dd6:	f000 fce5 	bl	80057a4 <_fstat_r>
 8004dda:	2800      	cmp	r0, #0
 8004ddc:	dbf3      	blt.n	8004dc6 <__swhatbuf_r+0x12>
 8004dde:	9a02      	ldr	r2, [sp, #8]
 8004de0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004de4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004de8:	425a      	negs	r2, r3
 8004dea:	415a      	adcs	r2, r3
 8004dec:	602a      	str	r2, [r5, #0]
 8004dee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004df2:	2000      	movs	r0, #0
 8004df4:	6023      	str	r3, [r4, #0]
 8004df6:	b010      	add	sp, #64	; 0x40
 8004df8:	bd70      	pop	{r4, r5, r6, pc}
	...

08004dfc <__smakebuf_r>:
 8004dfc:	898b      	ldrh	r3, [r1, #12]
 8004dfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e00:	079e      	lsls	r6, r3, #30
 8004e02:	4605      	mov	r5, r0
 8004e04:	460c      	mov	r4, r1
 8004e06:	d410      	bmi.n	8004e2a <__smakebuf_r+0x2e>
 8004e08:	ab01      	add	r3, sp, #4
 8004e0a:	466a      	mov	r2, sp
 8004e0c:	f7ff ffd2 	bl	8004db4 <__swhatbuf_r>
 8004e10:	9900      	ldr	r1, [sp, #0]
 8004e12:	4606      	mov	r6, r0
 8004e14:	4628      	mov	r0, r5
 8004e16:	f7ff fc83 	bl	8004720 <_malloc_r>
 8004e1a:	b968      	cbnz	r0, 8004e38 <__smakebuf_r+0x3c>
 8004e1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e20:	059a      	lsls	r2, r3, #22
 8004e22:	d422      	bmi.n	8004e6a <__smakebuf_r+0x6e>
 8004e24:	f043 0302 	orr.w	r3, r3, #2
 8004e28:	81a3      	strh	r3, [r4, #12]
 8004e2a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004e2e:	6023      	str	r3, [r4, #0]
 8004e30:	6123      	str	r3, [r4, #16]
 8004e32:	2301      	movs	r3, #1
 8004e34:	6163      	str	r3, [r4, #20]
 8004e36:	e018      	b.n	8004e6a <__smakebuf_r+0x6e>
 8004e38:	4b0d      	ldr	r3, [pc, #52]	; (8004e70 <__smakebuf_r+0x74>)
 8004e3a:	62ab      	str	r3, [r5, #40]	; 0x28
 8004e3c:	89a3      	ldrh	r3, [r4, #12]
 8004e3e:	6020      	str	r0, [r4, #0]
 8004e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e44:	81a3      	strh	r3, [r4, #12]
 8004e46:	9b00      	ldr	r3, [sp, #0]
 8004e48:	6163      	str	r3, [r4, #20]
 8004e4a:	9b01      	ldr	r3, [sp, #4]
 8004e4c:	6120      	str	r0, [r4, #16]
 8004e4e:	b14b      	cbz	r3, 8004e64 <__smakebuf_r+0x68>
 8004e50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e54:	4628      	mov	r0, r5
 8004e56:	f000 fcb7 	bl	80057c8 <_isatty_r>
 8004e5a:	b118      	cbz	r0, 8004e64 <__smakebuf_r+0x68>
 8004e5c:	89a3      	ldrh	r3, [r4, #12]
 8004e5e:	f043 0301 	orr.w	r3, r3, #1
 8004e62:	81a3      	strh	r3, [r4, #12]
 8004e64:	89a0      	ldrh	r0, [r4, #12]
 8004e66:	4330      	orrs	r0, r6
 8004e68:	81a0      	strh	r0, [r4, #12]
 8004e6a:	b002      	add	sp, #8
 8004e6c:	bd70      	pop	{r4, r5, r6, pc}
 8004e6e:	bf00      	nop
 8004e70:	08004c21 	.word	0x08004c21

08004e74 <__malloc_lock>:
 8004e74:	4770      	bx	lr

08004e76 <__malloc_unlock>:
 8004e76:	4770      	bx	lr

08004e78 <__ssputs_r>:
 8004e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e7c:	688e      	ldr	r6, [r1, #8]
 8004e7e:	429e      	cmp	r6, r3
 8004e80:	4682      	mov	sl, r0
 8004e82:	460c      	mov	r4, r1
 8004e84:	4691      	mov	r9, r2
 8004e86:	4698      	mov	r8, r3
 8004e88:	d83e      	bhi.n	8004f08 <__ssputs_r+0x90>
 8004e8a:	898a      	ldrh	r2, [r1, #12]
 8004e8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e90:	d03a      	beq.n	8004f08 <__ssputs_r+0x90>
 8004e92:	6825      	ldr	r5, [r4, #0]
 8004e94:	6909      	ldr	r1, [r1, #16]
 8004e96:	1a6f      	subs	r7, r5, r1
 8004e98:	6965      	ldr	r5, [r4, #20]
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ea0:	fb95 f5f3 	sdiv	r5, r5, r3
 8004ea4:	1c7b      	adds	r3, r7, #1
 8004ea6:	4443      	add	r3, r8
 8004ea8:	429d      	cmp	r5, r3
 8004eaa:	bf38      	it	cc
 8004eac:	461d      	movcc	r5, r3
 8004eae:	0553      	lsls	r3, r2, #21
 8004eb0:	d50f      	bpl.n	8004ed2 <__ssputs_r+0x5a>
 8004eb2:	4629      	mov	r1, r5
 8004eb4:	f7ff fc34 	bl	8004720 <_malloc_r>
 8004eb8:	4606      	mov	r6, r0
 8004eba:	b198      	cbz	r0, 8004ee4 <__ssputs_r+0x6c>
 8004ebc:	463a      	mov	r2, r7
 8004ebe:	6921      	ldr	r1, [r4, #16]
 8004ec0:	f7ff fbcc 	bl	800465c <memcpy>
 8004ec4:	89a3      	ldrh	r3, [r4, #12]
 8004ec6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ece:	81a3      	strh	r3, [r4, #12]
 8004ed0:	e013      	b.n	8004efa <__ssputs_r+0x82>
 8004ed2:	462a      	mov	r2, r5
 8004ed4:	f000 fcb5 	bl	8005842 <_realloc_r>
 8004ed8:	4606      	mov	r6, r0
 8004eda:	b970      	cbnz	r0, 8004efa <__ssputs_r+0x82>
 8004edc:	6921      	ldr	r1, [r4, #16]
 8004ede:	4650      	mov	r0, sl
 8004ee0:	f7ff fbd0 	bl	8004684 <_free_r>
 8004ee4:	230c      	movs	r3, #12
 8004ee6:	f8ca 3000 	str.w	r3, [sl]
 8004eea:	89a3      	ldrh	r3, [r4, #12]
 8004eec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ef0:	81a3      	strh	r3, [r4, #12]
 8004ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004efa:	6126      	str	r6, [r4, #16]
 8004efc:	6165      	str	r5, [r4, #20]
 8004efe:	443e      	add	r6, r7
 8004f00:	1bed      	subs	r5, r5, r7
 8004f02:	6026      	str	r6, [r4, #0]
 8004f04:	60a5      	str	r5, [r4, #8]
 8004f06:	4646      	mov	r6, r8
 8004f08:	4546      	cmp	r6, r8
 8004f0a:	bf28      	it	cs
 8004f0c:	4646      	movcs	r6, r8
 8004f0e:	4632      	mov	r2, r6
 8004f10:	4649      	mov	r1, r9
 8004f12:	6820      	ldr	r0, [r4, #0]
 8004f14:	f000 fc7a 	bl	800580c <memmove>
 8004f18:	68a3      	ldr	r3, [r4, #8]
 8004f1a:	1b9b      	subs	r3, r3, r6
 8004f1c:	60a3      	str	r3, [r4, #8]
 8004f1e:	6823      	ldr	r3, [r4, #0]
 8004f20:	441e      	add	r6, r3
 8004f22:	6026      	str	r6, [r4, #0]
 8004f24:	2000      	movs	r0, #0
 8004f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08004f2c <_svfiprintf_r>:
 8004f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f30:	b09d      	sub	sp, #116	; 0x74
 8004f32:	4680      	mov	r8, r0
 8004f34:	9303      	str	r3, [sp, #12]
 8004f36:	898b      	ldrh	r3, [r1, #12]
 8004f38:	061c      	lsls	r4, r3, #24
 8004f3a:	460d      	mov	r5, r1
 8004f3c:	4616      	mov	r6, r2
 8004f3e:	d50d      	bpl.n	8004f5c <_svfiprintf_r+0x30>
 8004f40:	690b      	ldr	r3, [r1, #16]
 8004f42:	b95b      	cbnz	r3, 8004f5c <_svfiprintf_r+0x30>
 8004f44:	2140      	movs	r1, #64	; 0x40
 8004f46:	f7ff fbeb 	bl	8004720 <_malloc_r>
 8004f4a:	6028      	str	r0, [r5, #0]
 8004f4c:	6128      	str	r0, [r5, #16]
 8004f4e:	b918      	cbnz	r0, 8004f58 <_svfiprintf_r+0x2c>
 8004f50:	230c      	movs	r3, #12
 8004f52:	f8c8 3000 	str.w	r3, [r8]
 8004f56:	e0cd      	b.n	80050f4 <_svfiprintf_r+0x1c8>
 8004f58:	2340      	movs	r3, #64	; 0x40
 8004f5a:	616b      	str	r3, [r5, #20]
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f60:	2320      	movs	r3, #32
 8004f62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f66:	f8df b19c 	ldr.w	fp, [pc, #412]	; 8005104 <_svfiprintf_r+0x1d8>
 8004f6a:	2330      	movs	r3, #48	; 0x30
 8004f6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f70:	4637      	mov	r7, r6
 8004f72:	463c      	mov	r4, r7
 8004f74:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004f78:	b91b      	cbnz	r3, 8004f82 <_svfiprintf_r+0x56>
 8004f7a:	ebb7 0906 	subs.w	r9, r7, r6
 8004f7e:	d010      	beq.n	8004fa2 <_svfiprintf_r+0x76>
 8004f80:	e003      	b.n	8004f8a <_svfiprintf_r+0x5e>
 8004f82:	2b25      	cmp	r3, #37	; 0x25
 8004f84:	d0f9      	beq.n	8004f7a <_svfiprintf_r+0x4e>
 8004f86:	4627      	mov	r7, r4
 8004f88:	e7f3      	b.n	8004f72 <_svfiprintf_r+0x46>
 8004f8a:	464b      	mov	r3, r9
 8004f8c:	4632      	mov	r2, r6
 8004f8e:	4629      	mov	r1, r5
 8004f90:	4640      	mov	r0, r8
 8004f92:	f7ff ff71 	bl	8004e78 <__ssputs_r>
 8004f96:	3001      	adds	r0, #1
 8004f98:	f000 80a7 	beq.w	80050ea <_svfiprintf_r+0x1be>
 8004f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f9e:	444b      	add	r3, r9
 8004fa0:	9309      	str	r3, [sp, #36]	; 0x24
 8004fa2:	783b      	ldrb	r3, [r7, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f000 80a0 	beq.w	80050ea <_svfiprintf_r+0x1be>
 8004faa:	2300      	movs	r3, #0
 8004fac:	f04f 32ff 	mov.w	r2, #4294967295
 8004fb0:	9304      	str	r3, [sp, #16]
 8004fb2:	9307      	str	r3, [sp, #28]
 8004fb4:	9205      	str	r2, [sp, #20]
 8004fb6:	9306      	str	r3, [sp, #24]
 8004fb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fbc:	931a      	str	r3, [sp, #104]	; 0x68
 8004fbe:	2601      	movs	r6, #1
 8004fc0:	2205      	movs	r2, #5
 8004fc2:	7821      	ldrb	r1, [r4, #0]
 8004fc4:	484e      	ldr	r0, [pc, #312]	; (8005100 <_svfiprintf_r+0x1d4>)
 8004fc6:	f7fb f92b 	bl	8000220 <memchr>
 8004fca:	1c67      	adds	r7, r4, #1
 8004fcc:	9b04      	ldr	r3, [sp, #16]
 8004fce:	b138      	cbz	r0, 8004fe0 <_svfiprintf_r+0xb4>
 8004fd0:	4a4b      	ldr	r2, [pc, #300]	; (8005100 <_svfiprintf_r+0x1d4>)
 8004fd2:	1a80      	subs	r0, r0, r2
 8004fd4:	fa06 f000 	lsl.w	r0, r6, r0
 8004fd8:	4318      	orrs	r0, r3
 8004fda:	9004      	str	r0, [sp, #16]
 8004fdc:	463c      	mov	r4, r7
 8004fde:	e7ef      	b.n	8004fc0 <_svfiprintf_r+0x94>
 8004fe0:	06d9      	lsls	r1, r3, #27
 8004fe2:	bf44      	itt	mi
 8004fe4:	2220      	movmi	r2, #32
 8004fe6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004fea:	071a      	lsls	r2, r3, #28
 8004fec:	bf44      	itt	mi
 8004fee:	222b      	movmi	r2, #43	; 0x2b
 8004ff0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004ff4:	7822      	ldrb	r2, [r4, #0]
 8004ff6:	2a2a      	cmp	r2, #42	; 0x2a
 8004ff8:	d003      	beq.n	8005002 <_svfiprintf_r+0xd6>
 8004ffa:	9a07      	ldr	r2, [sp, #28]
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	200a      	movs	r0, #10
 8005000:	e00b      	b.n	800501a <_svfiprintf_r+0xee>
 8005002:	9a03      	ldr	r2, [sp, #12]
 8005004:	1d11      	adds	r1, r2, #4
 8005006:	6812      	ldr	r2, [r2, #0]
 8005008:	9103      	str	r1, [sp, #12]
 800500a:	2a00      	cmp	r2, #0
 800500c:	da10      	bge.n	8005030 <_svfiprintf_r+0x104>
 800500e:	4252      	negs	r2, r2
 8005010:	f043 0002 	orr.w	r0, r3, #2
 8005014:	9207      	str	r2, [sp, #28]
 8005016:	9004      	str	r0, [sp, #16]
 8005018:	e00b      	b.n	8005032 <_svfiprintf_r+0x106>
 800501a:	4627      	mov	r7, r4
 800501c:	3401      	adds	r4, #1
 800501e:	783b      	ldrb	r3, [r7, #0]
 8005020:	3b30      	subs	r3, #48	; 0x30
 8005022:	2b09      	cmp	r3, #9
 8005024:	d803      	bhi.n	800502e <_svfiprintf_r+0x102>
 8005026:	fb00 3202 	mla	r2, r0, r2, r3
 800502a:	2101      	movs	r1, #1
 800502c:	e7f5      	b.n	800501a <_svfiprintf_r+0xee>
 800502e:	b101      	cbz	r1, 8005032 <_svfiprintf_r+0x106>
 8005030:	9207      	str	r2, [sp, #28]
 8005032:	783b      	ldrb	r3, [r7, #0]
 8005034:	2b2e      	cmp	r3, #46	; 0x2e
 8005036:	d11e      	bne.n	8005076 <_svfiprintf_r+0x14a>
 8005038:	787b      	ldrb	r3, [r7, #1]
 800503a:	2b2a      	cmp	r3, #42	; 0x2a
 800503c:	d10a      	bne.n	8005054 <_svfiprintf_r+0x128>
 800503e:	9b03      	ldr	r3, [sp, #12]
 8005040:	1d1a      	adds	r2, r3, #4
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	9203      	str	r2, [sp, #12]
 8005046:	2b00      	cmp	r3, #0
 8005048:	bfb8      	it	lt
 800504a:	f04f 33ff 	movlt.w	r3, #4294967295
 800504e:	3702      	adds	r7, #2
 8005050:	9305      	str	r3, [sp, #20]
 8005052:	e010      	b.n	8005076 <_svfiprintf_r+0x14a>
 8005054:	2300      	movs	r3, #0
 8005056:	9305      	str	r3, [sp, #20]
 8005058:	1c78      	adds	r0, r7, #1
 800505a:	4619      	mov	r1, r3
 800505c:	240a      	movs	r4, #10
 800505e:	4607      	mov	r7, r0
 8005060:	3001      	adds	r0, #1
 8005062:	783a      	ldrb	r2, [r7, #0]
 8005064:	3a30      	subs	r2, #48	; 0x30
 8005066:	2a09      	cmp	r2, #9
 8005068:	d803      	bhi.n	8005072 <_svfiprintf_r+0x146>
 800506a:	fb04 2101 	mla	r1, r4, r1, r2
 800506e:	2301      	movs	r3, #1
 8005070:	e7f5      	b.n	800505e <_svfiprintf_r+0x132>
 8005072:	b103      	cbz	r3, 8005076 <_svfiprintf_r+0x14a>
 8005074:	9105      	str	r1, [sp, #20]
 8005076:	2203      	movs	r2, #3
 8005078:	7839      	ldrb	r1, [r7, #0]
 800507a:	4822      	ldr	r0, [pc, #136]	; (8005104 <_svfiprintf_r+0x1d8>)
 800507c:	f7fb f8d0 	bl	8000220 <memchr>
 8005080:	b140      	cbz	r0, 8005094 <_svfiprintf_r+0x168>
 8005082:	2340      	movs	r3, #64	; 0x40
 8005084:	ebcb 0000 	rsb	r0, fp, r0
 8005088:	fa03 f000 	lsl.w	r0, r3, r0
 800508c:	9b04      	ldr	r3, [sp, #16]
 800508e:	4318      	orrs	r0, r3
 8005090:	9004      	str	r0, [sp, #16]
 8005092:	3701      	adds	r7, #1
 8005094:	7839      	ldrb	r1, [r7, #0]
 8005096:	481c      	ldr	r0, [pc, #112]	; (8005108 <_svfiprintf_r+0x1dc>)
 8005098:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800509c:	2206      	movs	r2, #6
 800509e:	1c7e      	adds	r6, r7, #1
 80050a0:	f7fb f8be 	bl	8000220 <memchr>
 80050a4:	b188      	cbz	r0, 80050ca <_svfiprintf_r+0x19e>
 80050a6:	4b19      	ldr	r3, [pc, #100]	; (800510c <_svfiprintf_r+0x1e0>)
 80050a8:	b933      	cbnz	r3, 80050b8 <_svfiprintf_r+0x18c>
 80050aa:	9b03      	ldr	r3, [sp, #12]
 80050ac:	3307      	adds	r3, #7
 80050ae:	f023 0307 	bic.w	r3, r3, #7
 80050b2:	3308      	adds	r3, #8
 80050b4:	9303      	str	r3, [sp, #12]
 80050b6:	e014      	b.n	80050e2 <_svfiprintf_r+0x1b6>
 80050b8:	ab03      	add	r3, sp, #12
 80050ba:	9300      	str	r3, [sp, #0]
 80050bc:	462a      	mov	r2, r5
 80050be:	4b14      	ldr	r3, [pc, #80]	; (8005110 <_svfiprintf_r+0x1e4>)
 80050c0:	a904      	add	r1, sp, #16
 80050c2:	4640      	mov	r0, r8
 80050c4:	f3af 8000 	nop.w
 80050c8:	e007      	b.n	80050da <_svfiprintf_r+0x1ae>
 80050ca:	ab03      	add	r3, sp, #12
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	462a      	mov	r2, r5
 80050d0:	4b0f      	ldr	r3, [pc, #60]	; (8005110 <_svfiprintf_r+0x1e4>)
 80050d2:	a904      	add	r1, sp, #16
 80050d4:	4640      	mov	r0, r8
 80050d6:	f000 f9d9 	bl	800548c <_printf_i>
 80050da:	f1b0 3fff 	cmp.w	r0, #4294967295
 80050de:	4682      	mov	sl, r0
 80050e0:	d003      	beq.n	80050ea <_svfiprintf_r+0x1be>
 80050e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050e4:	4453      	add	r3, sl
 80050e6:	9309      	str	r3, [sp, #36]	; 0x24
 80050e8:	e742      	b.n	8004f70 <_svfiprintf_r+0x44>
 80050ea:	89ab      	ldrh	r3, [r5, #12]
 80050ec:	065b      	lsls	r3, r3, #25
 80050ee:	d401      	bmi.n	80050f4 <_svfiprintf_r+0x1c8>
 80050f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050f2:	e001      	b.n	80050f8 <_svfiprintf_r+0x1cc>
 80050f4:	f04f 30ff 	mov.w	r0, #4294967295
 80050f8:	b01d      	add	sp, #116	; 0x74
 80050fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050fe:	bf00      	nop
 8005100:	08005a54 	.word	0x08005a54
 8005104:	08005a5a 	.word	0x08005a5a
 8005108:	08005a5e 	.word	0x08005a5e
 800510c:	00000000 	.word	0x00000000
 8005110:	08004e79 	.word	0x08004e79

08005114 <__sfputc_r>:
 8005114:	6893      	ldr	r3, [r2, #8]
 8005116:	3b01      	subs	r3, #1
 8005118:	2b00      	cmp	r3, #0
 800511a:	b410      	push	{r4}
 800511c:	6093      	str	r3, [r2, #8]
 800511e:	da09      	bge.n	8005134 <__sfputc_r+0x20>
 8005120:	6994      	ldr	r4, [r2, #24]
 8005122:	42a3      	cmp	r3, r4
 8005124:	db02      	blt.n	800512c <__sfputc_r+0x18>
 8005126:	b2cb      	uxtb	r3, r1
 8005128:	2b0a      	cmp	r3, #10
 800512a:	d103      	bne.n	8005134 <__sfputc_r+0x20>
 800512c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005130:	f7ff bc02 	b.w	8004938 <__swbuf_r>
 8005134:	6813      	ldr	r3, [r2, #0]
 8005136:	1c58      	adds	r0, r3, #1
 8005138:	6010      	str	r0, [r2, #0]
 800513a:	7019      	strb	r1, [r3, #0]
 800513c:	b2c8      	uxtb	r0, r1
 800513e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005142:	4770      	bx	lr

08005144 <__sfputs_r>:
 8005144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005146:	4606      	mov	r6, r0
 8005148:	460f      	mov	r7, r1
 800514a:	4614      	mov	r4, r2
 800514c:	18d5      	adds	r5, r2, r3
 800514e:	42ac      	cmp	r4, r5
 8005150:	d008      	beq.n	8005164 <__sfputs_r+0x20>
 8005152:	463a      	mov	r2, r7
 8005154:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005158:	4630      	mov	r0, r6
 800515a:	f7ff ffdb 	bl	8005114 <__sfputc_r>
 800515e:	1c43      	adds	r3, r0, #1
 8005160:	d1f5      	bne.n	800514e <__sfputs_r+0xa>
 8005162:	e000      	b.n	8005166 <__sfputs_r+0x22>
 8005164:	2000      	movs	r0, #0
 8005166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005168 <_vfiprintf_r>:
 8005168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800516c:	b09d      	sub	sp, #116	; 0x74
 800516e:	460c      	mov	r4, r1
 8005170:	4617      	mov	r7, r2
 8005172:	9303      	str	r3, [sp, #12]
 8005174:	4606      	mov	r6, r0
 8005176:	b118      	cbz	r0, 8005180 <_vfiprintf_r+0x18>
 8005178:	6983      	ldr	r3, [r0, #24]
 800517a:	b90b      	cbnz	r3, 8005180 <_vfiprintf_r+0x18>
 800517c:	f7ff fd90 	bl	8004ca0 <__sinit>
 8005180:	4b7f      	ldr	r3, [pc, #508]	; (8005380 <_vfiprintf_r+0x218>)
 8005182:	429c      	cmp	r4, r3
 8005184:	d101      	bne.n	800518a <_vfiprintf_r+0x22>
 8005186:	6874      	ldr	r4, [r6, #4]
 8005188:	e008      	b.n	800519c <_vfiprintf_r+0x34>
 800518a:	4b7e      	ldr	r3, [pc, #504]	; (8005384 <_vfiprintf_r+0x21c>)
 800518c:	429c      	cmp	r4, r3
 800518e:	d101      	bne.n	8005194 <_vfiprintf_r+0x2c>
 8005190:	68b4      	ldr	r4, [r6, #8]
 8005192:	e003      	b.n	800519c <_vfiprintf_r+0x34>
 8005194:	4b7c      	ldr	r3, [pc, #496]	; (8005388 <_vfiprintf_r+0x220>)
 8005196:	429c      	cmp	r4, r3
 8005198:	bf08      	it	eq
 800519a:	68f4      	ldreq	r4, [r6, #12]
 800519c:	89a3      	ldrh	r3, [r4, #12]
 800519e:	0718      	lsls	r0, r3, #28
 80051a0:	d50c      	bpl.n	80051bc <_vfiprintf_r+0x54>
 80051a2:	6923      	ldr	r3, [r4, #16]
 80051a4:	b153      	cbz	r3, 80051bc <_vfiprintf_r+0x54>
 80051a6:	2300      	movs	r3, #0
 80051a8:	9309      	str	r3, [sp, #36]	; 0x24
 80051aa:	2320      	movs	r3, #32
 80051ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051b0:	2330      	movs	r3, #48	; 0x30
 80051b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051b6:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 800538c <_vfiprintf_r+0x224>
 80051ba:	e044      	b.n	8005246 <_vfiprintf_r+0xde>
 80051bc:	4621      	mov	r1, r4
 80051be:	4630      	mov	r0, r6
 80051c0:	f7ff fc0e 	bl	80049e0 <__swsetup_r>
 80051c4:	2800      	cmp	r0, #0
 80051c6:	d0ee      	beq.n	80051a6 <_vfiprintf_r+0x3e>
 80051c8:	f04f 30ff 	mov.w	r0, #4294967295
 80051cc:	e0d5      	b.n	800537a <_vfiprintf_r+0x212>
 80051ce:	9a03      	ldr	r2, [sp, #12]
 80051d0:	1d11      	adds	r1, r2, #4
 80051d2:	6812      	ldr	r2, [r2, #0]
 80051d4:	9103      	str	r1, [sp, #12]
 80051d6:	2a00      	cmp	r2, #0
 80051d8:	f280 808c 	bge.w	80052f4 <_vfiprintf_r+0x18c>
 80051dc:	4252      	negs	r2, r2
 80051de:	f043 0002 	orr.w	r0, r3, #2
 80051e2:	9207      	str	r2, [sp, #28]
 80051e4:	9004      	str	r0, [sp, #16]
 80051e6:	f898 3000 	ldrb.w	r3, [r8]
 80051ea:	2b2e      	cmp	r3, #46	; 0x2e
 80051ec:	f000 8084 	beq.w	80052f8 <_vfiprintf_r+0x190>
 80051f0:	2203      	movs	r2, #3
 80051f2:	f898 1000 	ldrb.w	r1, [r8]
 80051f6:	4865      	ldr	r0, [pc, #404]	; (800538c <_vfiprintf_r+0x224>)
 80051f8:	f7fb f812 	bl	8000220 <memchr>
 80051fc:	b148      	cbz	r0, 8005212 <_vfiprintf_r+0xaa>
 80051fe:	2340      	movs	r3, #64	; 0x40
 8005200:	ebcb 0000 	rsb	r0, fp, r0
 8005204:	fa03 f000 	lsl.w	r0, r3, r0
 8005208:	9b04      	ldr	r3, [sp, #16]
 800520a:	4318      	orrs	r0, r3
 800520c:	9004      	str	r0, [sp, #16]
 800520e:	f108 0801 	add.w	r8, r8, #1
 8005212:	f898 1000 	ldrb.w	r1, [r8]
 8005216:	485e      	ldr	r0, [pc, #376]	; (8005390 <_vfiprintf_r+0x228>)
 8005218:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800521c:	2206      	movs	r2, #6
 800521e:	f108 0701 	add.w	r7, r8, #1
 8005222:	f7fa fffd 	bl	8000220 <memchr>
 8005226:	2800      	cmp	r0, #0
 8005228:	f000 8095 	beq.w	8005356 <_vfiprintf_r+0x1ee>
 800522c:	4b59      	ldr	r3, [pc, #356]	; (8005394 <_vfiprintf_r+0x22c>)
 800522e:	2b00      	cmp	r3, #0
 8005230:	f040 8088 	bne.w	8005344 <_vfiprintf_r+0x1dc>
 8005234:	9b03      	ldr	r3, [sp, #12]
 8005236:	3307      	adds	r3, #7
 8005238:	f023 0307 	bic.w	r3, r3, #7
 800523c:	3308      	adds	r3, #8
 800523e:	9303      	str	r3, [sp, #12]
 8005240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005242:	4453      	add	r3, sl
 8005244:	9309      	str	r3, [sp, #36]	; 0x24
 8005246:	46b8      	mov	r8, r7
 8005248:	4645      	mov	r5, r8
 800524a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800524e:	b91b      	cbnz	r3, 8005258 <_vfiprintf_r+0xf0>
 8005250:	ebb8 0907 	subs.w	r9, r8, r7
 8005254:	d00f      	beq.n	8005276 <_vfiprintf_r+0x10e>
 8005256:	e003      	b.n	8005260 <_vfiprintf_r+0xf8>
 8005258:	2b25      	cmp	r3, #37	; 0x25
 800525a:	d0f9      	beq.n	8005250 <_vfiprintf_r+0xe8>
 800525c:	46a8      	mov	r8, r5
 800525e:	e7f3      	b.n	8005248 <_vfiprintf_r+0xe0>
 8005260:	464b      	mov	r3, r9
 8005262:	463a      	mov	r2, r7
 8005264:	4621      	mov	r1, r4
 8005266:	4630      	mov	r0, r6
 8005268:	f7ff ff6c 	bl	8005144 <__sfputs_r>
 800526c:	3001      	adds	r0, #1
 800526e:	d07f      	beq.n	8005370 <_vfiprintf_r+0x208>
 8005270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005272:	444b      	add	r3, r9
 8005274:	9309      	str	r3, [sp, #36]	; 0x24
 8005276:	f898 3000 	ldrb.w	r3, [r8]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d078      	beq.n	8005370 <_vfiprintf_r+0x208>
 800527e:	2300      	movs	r3, #0
 8005280:	f04f 32ff 	mov.w	r2, #4294967295
 8005284:	9304      	str	r3, [sp, #16]
 8005286:	9307      	str	r3, [sp, #28]
 8005288:	9205      	str	r2, [sp, #20]
 800528a:	9306      	str	r3, [sp, #24]
 800528c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005290:	931a      	str	r3, [sp, #104]	; 0x68
 8005292:	2701      	movs	r7, #1
 8005294:	2205      	movs	r2, #5
 8005296:	7829      	ldrb	r1, [r5, #0]
 8005298:	483f      	ldr	r0, [pc, #252]	; (8005398 <_vfiprintf_r+0x230>)
 800529a:	f7fa ffc1 	bl	8000220 <memchr>
 800529e:	f105 0801 	add.w	r8, r5, #1
 80052a2:	9b04      	ldr	r3, [sp, #16]
 80052a4:	b138      	cbz	r0, 80052b6 <_vfiprintf_r+0x14e>
 80052a6:	4a3c      	ldr	r2, [pc, #240]	; (8005398 <_vfiprintf_r+0x230>)
 80052a8:	1a80      	subs	r0, r0, r2
 80052aa:	fa07 f000 	lsl.w	r0, r7, r0
 80052ae:	4318      	orrs	r0, r3
 80052b0:	9004      	str	r0, [sp, #16]
 80052b2:	4645      	mov	r5, r8
 80052b4:	e7ee      	b.n	8005294 <_vfiprintf_r+0x12c>
 80052b6:	06d9      	lsls	r1, r3, #27
 80052b8:	bf44      	itt	mi
 80052ba:	2220      	movmi	r2, #32
 80052bc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80052c0:	071a      	lsls	r2, r3, #28
 80052c2:	bf44      	itt	mi
 80052c4:	222b      	movmi	r2, #43	; 0x2b
 80052c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80052ca:	782a      	ldrb	r2, [r5, #0]
 80052cc:	2a2a      	cmp	r2, #42	; 0x2a
 80052ce:	f43f af7e 	beq.w	80051ce <_vfiprintf_r+0x66>
 80052d2:	9a07      	ldr	r2, [sp, #28]
 80052d4:	2100      	movs	r1, #0
 80052d6:	200a      	movs	r0, #10
 80052d8:	46a8      	mov	r8, r5
 80052da:	3501      	adds	r5, #1
 80052dc:	f898 3000 	ldrb.w	r3, [r8]
 80052e0:	3b30      	subs	r3, #48	; 0x30
 80052e2:	2b09      	cmp	r3, #9
 80052e4:	d803      	bhi.n	80052ee <_vfiprintf_r+0x186>
 80052e6:	fb00 3202 	mla	r2, r0, r2, r3
 80052ea:	2101      	movs	r1, #1
 80052ec:	e7f4      	b.n	80052d8 <_vfiprintf_r+0x170>
 80052ee:	2900      	cmp	r1, #0
 80052f0:	f43f af79 	beq.w	80051e6 <_vfiprintf_r+0x7e>
 80052f4:	9207      	str	r2, [sp, #28]
 80052f6:	e776      	b.n	80051e6 <_vfiprintf_r+0x7e>
 80052f8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80052fc:	2b2a      	cmp	r3, #42	; 0x2a
 80052fe:	d10b      	bne.n	8005318 <_vfiprintf_r+0x1b0>
 8005300:	9b03      	ldr	r3, [sp, #12]
 8005302:	1d1a      	adds	r2, r3, #4
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	9203      	str	r2, [sp, #12]
 8005308:	2b00      	cmp	r3, #0
 800530a:	bfb8      	it	lt
 800530c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005310:	f108 0802 	add.w	r8, r8, #2
 8005314:	9305      	str	r3, [sp, #20]
 8005316:	e76b      	b.n	80051f0 <_vfiprintf_r+0x88>
 8005318:	2300      	movs	r3, #0
 800531a:	9305      	str	r3, [sp, #20]
 800531c:	f108 0001 	add.w	r0, r8, #1
 8005320:	4619      	mov	r1, r3
 8005322:	250a      	movs	r5, #10
 8005324:	4680      	mov	r8, r0
 8005326:	3001      	adds	r0, #1
 8005328:	f898 2000 	ldrb.w	r2, [r8]
 800532c:	3a30      	subs	r2, #48	; 0x30
 800532e:	2a09      	cmp	r2, #9
 8005330:	d803      	bhi.n	800533a <_vfiprintf_r+0x1d2>
 8005332:	fb05 2101 	mla	r1, r5, r1, r2
 8005336:	2301      	movs	r3, #1
 8005338:	e7f4      	b.n	8005324 <_vfiprintf_r+0x1bc>
 800533a:	2b00      	cmp	r3, #0
 800533c:	f43f af58 	beq.w	80051f0 <_vfiprintf_r+0x88>
 8005340:	9105      	str	r1, [sp, #20]
 8005342:	e755      	b.n	80051f0 <_vfiprintf_r+0x88>
 8005344:	ab03      	add	r3, sp, #12
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	4622      	mov	r2, r4
 800534a:	4b14      	ldr	r3, [pc, #80]	; (800539c <_vfiprintf_r+0x234>)
 800534c:	a904      	add	r1, sp, #16
 800534e:	4630      	mov	r0, r6
 8005350:	f3af 8000 	nop.w
 8005354:	e007      	b.n	8005366 <_vfiprintf_r+0x1fe>
 8005356:	ab03      	add	r3, sp, #12
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	4622      	mov	r2, r4
 800535c:	4b0f      	ldr	r3, [pc, #60]	; (800539c <_vfiprintf_r+0x234>)
 800535e:	a904      	add	r1, sp, #16
 8005360:	4630      	mov	r0, r6
 8005362:	f000 f893 	bl	800548c <_printf_i>
 8005366:	f1b0 3fff 	cmp.w	r0, #4294967295
 800536a:	4682      	mov	sl, r0
 800536c:	f47f af68 	bne.w	8005240 <_vfiprintf_r+0xd8>
 8005370:	89a3      	ldrh	r3, [r4, #12]
 8005372:	065b      	lsls	r3, r3, #25
 8005374:	f53f af28 	bmi.w	80051c8 <_vfiprintf_r+0x60>
 8005378:	9809      	ldr	r0, [sp, #36]	; 0x24
 800537a:	b01d      	add	sp, #116	; 0x74
 800537c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005380:	080059f4 	.word	0x080059f4
 8005384:	08005a14 	.word	0x08005a14
 8005388:	08005a34 	.word	0x08005a34
 800538c:	08005a5a 	.word	0x08005a5a
 8005390:	08005a5e 	.word	0x08005a5e
 8005394:	00000000 	.word	0x00000000
 8005398:	08005a54 	.word	0x08005a54
 800539c:	08005145 	.word	0x08005145

080053a0 <_printf_common>:
 80053a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053a4:	4691      	mov	r9, r2
 80053a6:	461f      	mov	r7, r3
 80053a8:	690a      	ldr	r2, [r1, #16]
 80053aa:	688b      	ldr	r3, [r1, #8]
 80053ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053b0:	4293      	cmp	r3, r2
 80053b2:	bfb8      	it	lt
 80053b4:	4613      	movlt	r3, r2
 80053b6:	f8c9 3000 	str.w	r3, [r9]
 80053ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053be:	4606      	mov	r6, r0
 80053c0:	460c      	mov	r4, r1
 80053c2:	b112      	cbz	r2, 80053ca <_printf_common+0x2a>
 80053c4:	3301      	adds	r3, #1
 80053c6:	f8c9 3000 	str.w	r3, [r9]
 80053ca:	6823      	ldr	r3, [r4, #0]
 80053cc:	0699      	lsls	r1, r3, #26
 80053ce:	bf42      	ittt	mi
 80053d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80053d4:	3302      	addmi	r3, #2
 80053d6:	f8c9 3000 	strmi.w	r3, [r9]
 80053da:	6825      	ldr	r5, [r4, #0]
 80053dc:	f015 0506 	ands.w	r5, r5, #6
 80053e0:	d110      	bne.n	8005404 <_printf_common+0x64>
 80053e2:	f104 0a19 	add.w	sl, r4, #25
 80053e6:	e007      	b.n	80053f8 <_printf_common+0x58>
 80053e8:	2301      	movs	r3, #1
 80053ea:	4652      	mov	r2, sl
 80053ec:	4639      	mov	r1, r7
 80053ee:	4630      	mov	r0, r6
 80053f0:	47c0      	blx	r8
 80053f2:	3001      	adds	r0, #1
 80053f4:	d01a      	beq.n	800542c <_printf_common+0x8c>
 80053f6:	3501      	adds	r5, #1
 80053f8:	68e3      	ldr	r3, [r4, #12]
 80053fa:	f8d9 2000 	ldr.w	r2, [r9]
 80053fe:	1a9b      	subs	r3, r3, r2
 8005400:	429d      	cmp	r5, r3
 8005402:	dbf1      	blt.n	80053e8 <_printf_common+0x48>
 8005404:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005408:	6822      	ldr	r2, [r4, #0]
 800540a:	3300      	adds	r3, #0
 800540c:	bf18      	it	ne
 800540e:	2301      	movne	r3, #1
 8005410:	0692      	lsls	r2, r2, #26
 8005412:	d50f      	bpl.n	8005434 <_printf_common+0x94>
 8005414:	18e1      	adds	r1, r4, r3
 8005416:	1c5a      	adds	r2, r3, #1
 8005418:	2030      	movs	r0, #48	; 0x30
 800541a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800541e:	4422      	add	r2, r4
 8005420:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005424:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005428:	3302      	adds	r3, #2
 800542a:	e003      	b.n	8005434 <_printf_common+0x94>
 800542c:	f04f 30ff 	mov.w	r0, #4294967295
 8005430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005434:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005438:	4639      	mov	r1, r7
 800543a:	4630      	mov	r0, r6
 800543c:	47c0      	blx	r8
 800543e:	3001      	adds	r0, #1
 8005440:	d0f4      	beq.n	800542c <_printf_common+0x8c>
 8005442:	6822      	ldr	r2, [r4, #0]
 8005444:	f8d9 5000 	ldr.w	r5, [r9]
 8005448:	68e3      	ldr	r3, [r4, #12]
 800544a:	f002 0206 	and.w	r2, r2, #6
 800544e:	2a04      	cmp	r2, #4
 8005450:	bf08      	it	eq
 8005452:	1b5d      	subeq	r5, r3, r5
 8005454:	6922      	ldr	r2, [r4, #16]
 8005456:	68a3      	ldr	r3, [r4, #8]
 8005458:	bf0c      	ite	eq
 800545a:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800545e:	2500      	movne	r5, #0
 8005460:	4293      	cmp	r3, r2
 8005462:	bfc4      	itt	gt
 8005464:	1a9b      	subgt	r3, r3, r2
 8005466:	18ed      	addgt	r5, r5, r3
 8005468:	f04f 0900 	mov.w	r9, #0
 800546c:	341a      	adds	r4, #26
 800546e:	454d      	cmp	r5, r9
 8005470:	d009      	beq.n	8005486 <_printf_common+0xe6>
 8005472:	2301      	movs	r3, #1
 8005474:	4622      	mov	r2, r4
 8005476:	4639      	mov	r1, r7
 8005478:	4630      	mov	r0, r6
 800547a:	47c0      	blx	r8
 800547c:	3001      	adds	r0, #1
 800547e:	d0d5      	beq.n	800542c <_printf_common+0x8c>
 8005480:	f109 0901 	add.w	r9, r9, #1
 8005484:	e7f3      	b.n	800546e <_printf_common+0xce>
 8005486:	2000      	movs	r0, #0
 8005488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800548c <_printf_i>:
 800548c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005490:	4617      	mov	r7, r2
 8005492:	7e0a      	ldrb	r2, [r1, #24]
 8005494:	b085      	sub	sp, #20
 8005496:	2a6e      	cmp	r2, #110	; 0x6e
 8005498:	4698      	mov	r8, r3
 800549a:	4606      	mov	r6, r0
 800549c:	460c      	mov	r4, r1
 800549e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80054a0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80054a4:	f000 80ae 	beq.w	8005604 <_printf_i+0x178>
 80054a8:	d811      	bhi.n	80054ce <_printf_i+0x42>
 80054aa:	2a63      	cmp	r2, #99	; 0x63
 80054ac:	d022      	beq.n	80054f4 <_printf_i+0x68>
 80054ae:	d809      	bhi.n	80054c4 <_printf_i+0x38>
 80054b0:	2a00      	cmp	r2, #0
 80054b2:	f000 80bb 	beq.w	800562c <_printf_i+0x1a0>
 80054b6:	2a58      	cmp	r2, #88	; 0x58
 80054b8:	f040 80ca 	bne.w	8005650 <_printf_i+0x1c4>
 80054bc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80054c0:	4983      	ldr	r1, [pc, #524]	; (80056d0 <_printf_i+0x244>)
 80054c2:	e055      	b.n	8005570 <_printf_i+0xe4>
 80054c4:	2a64      	cmp	r2, #100	; 0x64
 80054c6:	d01e      	beq.n	8005506 <_printf_i+0x7a>
 80054c8:	2a69      	cmp	r2, #105	; 0x69
 80054ca:	d01c      	beq.n	8005506 <_printf_i+0x7a>
 80054cc:	e0c0      	b.n	8005650 <_printf_i+0x1c4>
 80054ce:	2a73      	cmp	r2, #115	; 0x73
 80054d0:	f000 80b0 	beq.w	8005634 <_printf_i+0x1a8>
 80054d4:	d809      	bhi.n	80054ea <_printf_i+0x5e>
 80054d6:	2a6f      	cmp	r2, #111	; 0x6f
 80054d8:	d02e      	beq.n	8005538 <_printf_i+0xac>
 80054da:	2a70      	cmp	r2, #112	; 0x70
 80054dc:	f040 80b8 	bne.w	8005650 <_printf_i+0x1c4>
 80054e0:	680a      	ldr	r2, [r1, #0]
 80054e2:	f042 0220 	orr.w	r2, r2, #32
 80054e6:	600a      	str	r2, [r1, #0]
 80054e8:	e03e      	b.n	8005568 <_printf_i+0xdc>
 80054ea:	2a75      	cmp	r2, #117	; 0x75
 80054ec:	d024      	beq.n	8005538 <_printf_i+0xac>
 80054ee:	2a78      	cmp	r2, #120	; 0x78
 80054f0:	d03a      	beq.n	8005568 <_printf_i+0xdc>
 80054f2:	e0ad      	b.n	8005650 <_printf_i+0x1c4>
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80054fa:	1d11      	adds	r1, r2, #4
 80054fc:	6019      	str	r1, [r3, #0]
 80054fe:	6813      	ldr	r3, [r2, #0]
 8005500:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005504:	e0a8      	b.n	8005658 <_printf_i+0x1cc>
 8005506:	6821      	ldr	r1, [r4, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800550e:	d002      	beq.n	8005516 <_printf_i+0x8a>
 8005510:	1d11      	adds	r1, r2, #4
 8005512:	6019      	str	r1, [r3, #0]
 8005514:	e008      	b.n	8005528 <_printf_i+0x9c>
 8005516:	f011 0f40 	tst.w	r1, #64	; 0x40
 800551a:	f102 0104 	add.w	r1, r2, #4
 800551e:	6019      	str	r1, [r3, #0]
 8005520:	d002      	beq.n	8005528 <_printf_i+0x9c>
 8005522:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005526:	e000      	b.n	800552a <_printf_i+0x9e>
 8005528:	6813      	ldr	r3, [r2, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	da3c      	bge.n	80055a8 <_printf_i+0x11c>
 800552e:	222d      	movs	r2, #45	; 0x2d
 8005530:	425b      	negs	r3, r3
 8005532:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005536:	e037      	b.n	80055a8 <_printf_i+0x11c>
 8005538:	6821      	ldr	r1, [r4, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005540:	d002      	beq.n	8005548 <_printf_i+0xbc>
 8005542:	1d11      	adds	r1, r2, #4
 8005544:	6019      	str	r1, [r3, #0]
 8005546:	e007      	b.n	8005558 <_printf_i+0xcc>
 8005548:	f011 0f40 	tst.w	r1, #64	; 0x40
 800554c:	f102 0104 	add.w	r1, r2, #4
 8005550:	6019      	str	r1, [r3, #0]
 8005552:	d001      	beq.n	8005558 <_printf_i+0xcc>
 8005554:	8813      	ldrh	r3, [r2, #0]
 8005556:	e000      	b.n	800555a <_printf_i+0xce>
 8005558:	6813      	ldr	r3, [r2, #0]
 800555a:	7e22      	ldrb	r2, [r4, #24]
 800555c:	495c      	ldr	r1, [pc, #368]	; (80056d0 <_printf_i+0x244>)
 800555e:	2a6f      	cmp	r2, #111	; 0x6f
 8005560:	bf14      	ite	ne
 8005562:	220a      	movne	r2, #10
 8005564:	2208      	moveq	r2, #8
 8005566:	e01b      	b.n	80055a0 <_printf_i+0x114>
 8005568:	2278      	movs	r2, #120	; 0x78
 800556a:	495a      	ldr	r1, [pc, #360]	; (80056d4 <_printf_i+0x248>)
 800556c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005570:	6822      	ldr	r2, [r4, #0]
 8005572:	6818      	ldr	r0, [r3, #0]
 8005574:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005578:	f100 0504 	add.w	r5, r0, #4
 800557c:	601d      	str	r5, [r3, #0]
 800557e:	d103      	bne.n	8005588 <_printf_i+0xfc>
 8005580:	0655      	lsls	r5, r2, #25
 8005582:	d501      	bpl.n	8005588 <_printf_i+0xfc>
 8005584:	8803      	ldrh	r3, [r0, #0]
 8005586:	e000      	b.n	800558a <_printf_i+0xfe>
 8005588:	6803      	ldr	r3, [r0, #0]
 800558a:	07d0      	lsls	r0, r2, #31
 800558c:	bf44      	itt	mi
 800558e:	f042 0220 	orrmi.w	r2, r2, #32
 8005592:	6022      	strmi	r2, [r4, #0]
 8005594:	b91b      	cbnz	r3, 800559e <_printf_i+0x112>
 8005596:	6822      	ldr	r2, [r4, #0]
 8005598:	f022 0220 	bic.w	r2, r2, #32
 800559c:	6022      	str	r2, [r4, #0]
 800559e:	2210      	movs	r2, #16
 80055a0:	2000      	movs	r0, #0
 80055a2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80055a6:	e001      	b.n	80055ac <_printf_i+0x120>
 80055a8:	4949      	ldr	r1, [pc, #292]	; (80056d0 <_printf_i+0x244>)
 80055aa:	220a      	movs	r2, #10
 80055ac:	6865      	ldr	r5, [r4, #4]
 80055ae:	60a5      	str	r5, [r4, #8]
 80055b0:	2d00      	cmp	r5, #0
 80055b2:	db08      	blt.n	80055c6 <_printf_i+0x13a>
 80055b4:	6820      	ldr	r0, [r4, #0]
 80055b6:	f020 0004 	bic.w	r0, r0, #4
 80055ba:	6020      	str	r0, [r4, #0]
 80055bc:	b92b      	cbnz	r3, 80055ca <_printf_i+0x13e>
 80055be:	2d00      	cmp	r5, #0
 80055c0:	d17d      	bne.n	80056be <_printf_i+0x232>
 80055c2:	4675      	mov	r5, lr
 80055c4:	e00c      	b.n	80055e0 <_printf_i+0x154>
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d079      	beq.n	80056be <_printf_i+0x232>
 80055ca:	4675      	mov	r5, lr
 80055cc:	fbb3 f0f2 	udiv	r0, r3, r2
 80055d0:	fb02 3310 	mls	r3, r2, r0, r3
 80055d4:	5ccb      	ldrb	r3, [r1, r3]
 80055d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80055da:	4603      	mov	r3, r0
 80055dc:	2800      	cmp	r0, #0
 80055de:	d1f5      	bne.n	80055cc <_printf_i+0x140>
 80055e0:	2a08      	cmp	r2, #8
 80055e2:	d10b      	bne.n	80055fc <_printf_i+0x170>
 80055e4:	6823      	ldr	r3, [r4, #0]
 80055e6:	07da      	lsls	r2, r3, #31
 80055e8:	d508      	bpl.n	80055fc <_printf_i+0x170>
 80055ea:	6923      	ldr	r3, [r4, #16]
 80055ec:	6862      	ldr	r2, [r4, #4]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	bfde      	ittt	le
 80055f2:	2330      	movle	r3, #48	; 0x30
 80055f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055fc:	ebc5 030e 	rsb	r3, r5, lr
 8005600:	6123      	str	r3, [r4, #16]
 8005602:	e02e      	b.n	8005662 <_printf_i+0x1d6>
 8005604:	6808      	ldr	r0, [r1, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	6949      	ldr	r1, [r1, #20]
 800560a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800560e:	d003      	beq.n	8005618 <_printf_i+0x18c>
 8005610:	1d10      	adds	r0, r2, #4
 8005612:	6018      	str	r0, [r3, #0]
 8005614:	6813      	ldr	r3, [r2, #0]
 8005616:	e008      	b.n	800562a <_printf_i+0x19e>
 8005618:	f010 0f40 	tst.w	r0, #64	; 0x40
 800561c:	f102 0004 	add.w	r0, r2, #4
 8005620:	6018      	str	r0, [r3, #0]
 8005622:	6813      	ldr	r3, [r2, #0]
 8005624:	d001      	beq.n	800562a <_printf_i+0x19e>
 8005626:	8019      	strh	r1, [r3, #0]
 8005628:	e000      	b.n	800562c <_printf_i+0x1a0>
 800562a:	6019      	str	r1, [r3, #0]
 800562c:	2300      	movs	r3, #0
 800562e:	6123      	str	r3, [r4, #16]
 8005630:	4675      	mov	r5, lr
 8005632:	e016      	b.n	8005662 <_printf_i+0x1d6>
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	1d11      	adds	r1, r2, #4
 8005638:	6019      	str	r1, [r3, #0]
 800563a:	6815      	ldr	r5, [r2, #0]
 800563c:	6862      	ldr	r2, [r4, #4]
 800563e:	2100      	movs	r1, #0
 8005640:	4628      	mov	r0, r5
 8005642:	f7fa fded 	bl	8000220 <memchr>
 8005646:	b108      	cbz	r0, 800564c <_printf_i+0x1c0>
 8005648:	1b40      	subs	r0, r0, r5
 800564a:	6060      	str	r0, [r4, #4]
 800564c:	6863      	ldr	r3, [r4, #4]
 800564e:	e004      	b.n	800565a <_printf_i+0x1ce>
 8005650:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005654:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005658:	2301      	movs	r3, #1
 800565a:	6123      	str	r3, [r4, #16]
 800565c:	2300      	movs	r3, #0
 800565e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005662:	f8cd 8000 	str.w	r8, [sp]
 8005666:	463b      	mov	r3, r7
 8005668:	aa03      	add	r2, sp, #12
 800566a:	4621      	mov	r1, r4
 800566c:	4630      	mov	r0, r6
 800566e:	f7ff fe97 	bl	80053a0 <_printf_common>
 8005672:	3001      	adds	r0, #1
 8005674:	d102      	bne.n	800567c <_printf_i+0x1f0>
 8005676:	f04f 30ff 	mov.w	r0, #4294967295
 800567a:	e026      	b.n	80056ca <_printf_i+0x23e>
 800567c:	6923      	ldr	r3, [r4, #16]
 800567e:	462a      	mov	r2, r5
 8005680:	4639      	mov	r1, r7
 8005682:	4630      	mov	r0, r6
 8005684:	47c0      	blx	r8
 8005686:	3001      	adds	r0, #1
 8005688:	d0f5      	beq.n	8005676 <_printf_i+0x1ea>
 800568a:	6823      	ldr	r3, [r4, #0]
 800568c:	079b      	lsls	r3, r3, #30
 800568e:	d510      	bpl.n	80056b2 <_printf_i+0x226>
 8005690:	2500      	movs	r5, #0
 8005692:	f104 0919 	add.w	r9, r4, #25
 8005696:	e007      	b.n	80056a8 <_printf_i+0x21c>
 8005698:	2301      	movs	r3, #1
 800569a:	464a      	mov	r2, r9
 800569c:	4639      	mov	r1, r7
 800569e:	4630      	mov	r0, r6
 80056a0:	47c0      	blx	r8
 80056a2:	3001      	adds	r0, #1
 80056a4:	d0e7      	beq.n	8005676 <_printf_i+0x1ea>
 80056a6:	3501      	adds	r5, #1
 80056a8:	68e3      	ldr	r3, [r4, #12]
 80056aa:	9a03      	ldr	r2, [sp, #12]
 80056ac:	1a9b      	subs	r3, r3, r2
 80056ae:	429d      	cmp	r5, r3
 80056b0:	dbf2      	blt.n	8005698 <_printf_i+0x20c>
 80056b2:	68e0      	ldr	r0, [r4, #12]
 80056b4:	9b03      	ldr	r3, [sp, #12]
 80056b6:	4298      	cmp	r0, r3
 80056b8:	bfb8      	it	lt
 80056ba:	4618      	movlt	r0, r3
 80056bc:	e005      	b.n	80056ca <_printf_i+0x23e>
 80056be:	780b      	ldrb	r3, [r1, #0]
 80056c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056c8:	e78a      	b.n	80055e0 <_printf_i+0x154>
 80056ca:	b005      	add	sp, #20
 80056cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80056d0:	08005a65 	.word	0x08005a65
 80056d4:	08005a76 	.word	0x08005a76

080056d8 <__sread>:
 80056d8:	b510      	push	{r4, lr}
 80056da:	460c      	mov	r4, r1
 80056dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056e0:	f000 f8d6 	bl	8005890 <_read_r>
 80056e4:	2800      	cmp	r0, #0
 80056e6:	bfab      	itete	ge
 80056e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80056ea:	89a3      	ldrhlt	r3, [r4, #12]
 80056ec:	181b      	addge	r3, r3, r0
 80056ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80056f2:	bfac      	ite	ge
 80056f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80056f6:	81a3      	strhlt	r3, [r4, #12]
 80056f8:	bd10      	pop	{r4, pc}

080056fa <__swrite>:
 80056fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056fe:	461f      	mov	r7, r3
 8005700:	898b      	ldrh	r3, [r1, #12]
 8005702:	05db      	lsls	r3, r3, #23
 8005704:	4605      	mov	r5, r0
 8005706:	460c      	mov	r4, r1
 8005708:	4616      	mov	r6, r2
 800570a:	d505      	bpl.n	8005718 <__swrite+0x1e>
 800570c:	2302      	movs	r3, #2
 800570e:	2200      	movs	r2, #0
 8005710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005714:	f000 f868 	bl	80057e8 <_lseek_r>
 8005718:	89a3      	ldrh	r3, [r4, #12]
 800571a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800571e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005722:	81a3      	strh	r3, [r4, #12]
 8005724:	4632      	mov	r2, r6
 8005726:	463b      	mov	r3, r7
 8005728:	4628      	mov	r0, r5
 800572a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800572e:	f000 b817 	b.w	8005760 <_write_r>

08005732 <__sseek>:
 8005732:	b510      	push	{r4, lr}
 8005734:	460c      	mov	r4, r1
 8005736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800573a:	f000 f855 	bl	80057e8 <_lseek_r>
 800573e:	1c43      	adds	r3, r0, #1
 8005740:	89a3      	ldrh	r3, [r4, #12]
 8005742:	bf15      	itete	ne
 8005744:	6560      	strne	r0, [r4, #84]	; 0x54
 8005746:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800574a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800574e:	81a3      	strheq	r3, [r4, #12]
 8005750:	bf18      	it	ne
 8005752:	81a3      	strhne	r3, [r4, #12]
 8005754:	bd10      	pop	{r4, pc}

08005756 <__sclose>:
 8005756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800575a:	f000 b813 	b.w	8005784 <_close_r>
	...

08005760 <_write_r>:
 8005760:	b538      	push	{r3, r4, r5, lr}
 8005762:	4c07      	ldr	r4, [pc, #28]	; (8005780 <_write_r+0x20>)
 8005764:	4605      	mov	r5, r0
 8005766:	4608      	mov	r0, r1
 8005768:	4611      	mov	r1, r2
 800576a:	2200      	movs	r2, #0
 800576c:	6022      	str	r2, [r4, #0]
 800576e:	461a      	mov	r2, r3
 8005770:	f7fe fe8a 	bl	8004488 <_write>
 8005774:	1c43      	adds	r3, r0, #1
 8005776:	d102      	bne.n	800577e <_write_r+0x1e>
 8005778:	6823      	ldr	r3, [r4, #0]
 800577a:	b103      	cbz	r3, 800577e <_write_r+0x1e>
 800577c:	602b      	str	r3, [r5, #0]
 800577e:	bd38      	pop	{r3, r4, r5, pc}
 8005780:	20000b84 	.word	0x20000b84

08005784 <_close_r>:
 8005784:	b538      	push	{r3, r4, r5, lr}
 8005786:	4c06      	ldr	r4, [pc, #24]	; (80057a0 <_close_r+0x1c>)
 8005788:	2300      	movs	r3, #0
 800578a:	4605      	mov	r5, r0
 800578c:	4608      	mov	r0, r1
 800578e:	6023      	str	r3, [r4, #0]
 8005790:	f7fe febc 	bl	800450c <_close>
 8005794:	1c43      	adds	r3, r0, #1
 8005796:	d102      	bne.n	800579e <_close_r+0x1a>
 8005798:	6823      	ldr	r3, [r4, #0]
 800579a:	b103      	cbz	r3, 800579e <_close_r+0x1a>
 800579c:	602b      	str	r3, [r5, #0]
 800579e:	bd38      	pop	{r3, r4, r5, pc}
 80057a0:	20000b84 	.word	0x20000b84

080057a4 <_fstat_r>:
 80057a4:	b538      	push	{r3, r4, r5, lr}
 80057a6:	4c07      	ldr	r4, [pc, #28]	; (80057c4 <_fstat_r+0x20>)
 80057a8:	2300      	movs	r3, #0
 80057aa:	4605      	mov	r5, r0
 80057ac:	4608      	mov	r0, r1
 80057ae:	4611      	mov	r1, r2
 80057b0:	6023      	str	r3, [r4, #0]
 80057b2:	f7fe febd 	bl	8004530 <_fstat>
 80057b6:	1c43      	adds	r3, r0, #1
 80057b8:	d102      	bne.n	80057c0 <_fstat_r+0x1c>
 80057ba:	6823      	ldr	r3, [r4, #0]
 80057bc:	b103      	cbz	r3, 80057c0 <_fstat_r+0x1c>
 80057be:	602b      	str	r3, [r5, #0]
 80057c0:	bd38      	pop	{r3, r4, r5, pc}
 80057c2:	bf00      	nop
 80057c4:	20000b84 	.word	0x20000b84

080057c8 <_isatty_r>:
 80057c8:	b538      	push	{r3, r4, r5, lr}
 80057ca:	4c06      	ldr	r4, [pc, #24]	; (80057e4 <_isatty_r+0x1c>)
 80057cc:	2300      	movs	r3, #0
 80057ce:	4605      	mov	r5, r0
 80057d0:	4608      	mov	r0, r1
 80057d2:	6023      	str	r3, [r4, #0]
 80057d4:	f7fe febe 	bl	8004554 <_isatty>
 80057d8:	1c43      	adds	r3, r0, #1
 80057da:	d102      	bne.n	80057e2 <_isatty_r+0x1a>
 80057dc:	6823      	ldr	r3, [r4, #0]
 80057de:	b103      	cbz	r3, 80057e2 <_isatty_r+0x1a>
 80057e0:	602b      	str	r3, [r5, #0]
 80057e2:	bd38      	pop	{r3, r4, r5, pc}
 80057e4:	20000b84 	.word	0x20000b84

080057e8 <_lseek_r>:
 80057e8:	b538      	push	{r3, r4, r5, lr}
 80057ea:	4c07      	ldr	r4, [pc, #28]	; (8005808 <_lseek_r+0x20>)
 80057ec:	4605      	mov	r5, r0
 80057ee:	4608      	mov	r0, r1
 80057f0:	4611      	mov	r1, r2
 80057f2:	2200      	movs	r2, #0
 80057f4:	6022      	str	r2, [r4, #0]
 80057f6:	461a      	mov	r2, r3
 80057f8:	f7fe febc 	bl	8004574 <_lseek>
 80057fc:	1c43      	adds	r3, r0, #1
 80057fe:	d102      	bne.n	8005806 <_lseek_r+0x1e>
 8005800:	6823      	ldr	r3, [r4, #0]
 8005802:	b103      	cbz	r3, 8005806 <_lseek_r+0x1e>
 8005804:	602b      	str	r3, [r5, #0]
 8005806:	bd38      	pop	{r3, r4, r5, pc}
 8005808:	20000b84 	.word	0x20000b84

0800580c <memmove>:
 800580c:	4288      	cmp	r0, r1
 800580e:	b510      	push	{r4, lr}
 8005810:	eb01 0302 	add.w	r3, r1, r2
 8005814:	d801      	bhi.n	800581a <memmove+0xe>
 8005816:	1e42      	subs	r2, r0, #1
 8005818:	e00b      	b.n	8005832 <memmove+0x26>
 800581a:	4298      	cmp	r0, r3
 800581c:	d2fb      	bcs.n	8005816 <memmove+0xa>
 800581e:	1881      	adds	r1, r0, r2
 8005820:	1ad2      	subs	r2, r2, r3
 8005822:	42d3      	cmn	r3, r2
 8005824:	d004      	beq.n	8005830 <memmove+0x24>
 8005826:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800582a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800582e:	e7f8      	b.n	8005822 <memmove+0x16>
 8005830:	bd10      	pop	{r4, pc}
 8005832:	4299      	cmp	r1, r3
 8005834:	d004      	beq.n	8005840 <memmove+0x34>
 8005836:	f811 4b01 	ldrb.w	r4, [r1], #1
 800583a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800583e:	e7f8      	b.n	8005832 <memmove+0x26>
 8005840:	bd10      	pop	{r4, pc}

08005842 <_realloc_r>:
 8005842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005844:	4607      	mov	r7, r0
 8005846:	4615      	mov	r5, r2
 8005848:	460e      	mov	r6, r1
 800584a:	b921      	cbnz	r1, 8005856 <_realloc_r+0x14>
 800584c:	4611      	mov	r1, r2
 800584e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005852:	f7fe bf65 	b.w	8004720 <_malloc_r>
 8005856:	b91a      	cbnz	r2, 8005860 <_realloc_r+0x1e>
 8005858:	f7fe ff14 	bl	8004684 <_free_r>
 800585c:	4628      	mov	r0, r5
 800585e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005860:	f000 f828 	bl	80058b4 <_malloc_usable_size_r>
 8005864:	4285      	cmp	r5, r0
 8005866:	d90e      	bls.n	8005886 <_realloc_r+0x44>
 8005868:	4629      	mov	r1, r5
 800586a:	4638      	mov	r0, r7
 800586c:	f7fe ff58 	bl	8004720 <_malloc_r>
 8005870:	4604      	mov	r4, r0
 8005872:	b150      	cbz	r0, 800588a <_realloc_r+0x48>
 8005874:	4631      	mov	r1, r6
 8005876:	462a      	mov	r2, r5
 8005878:	f7fe fef0 	bl	800465c <memcpy>
 800587c:	4631      	mov	r1, r6
 800587e:	4638      	mov	r0, r7
 8005880:	f7fe ff00 	bl	8004684 <_free_r>
 8005884:	e001      	b.n	800588a <_realloc_r+0x48>
 8005886:	4630      	mov	r0, r6
 8005888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800588a:	4620      	mov	r0, r4
 800588c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005890 <_read_r>:
 8005890:	b538      	push	{r3, r4, r5, lr}
 8005892:	4c07      	ldr	r4, [pc, #28]	; (80058b0 <_read_r+0x20>)
 8005894:	4605      	mov	r5, r0
 8005896:	4608      	mov	r0, r1
 8005898:	4611      	mov	r1, r2
 800589a:	2200      	movs	r2, #0
 800589c:	6022      	str	r2, [r4, #0]
 800589e:	461a      	mov	r2, r3
 80058a0:	f7fe fe7c 	bl	800459c <_read>
 80058a4:	1c43      	adds	r3, r0, #1
 80058a6:	d102      	bne.n	80058ae <_read_r+0x1e>
 80058a8:	6823      	ldr	r3, [r4, #0]
 80058aa:	b103      	cbz	r3, 80058ae <_read_r+0x1e>
 80058ac:	602b      	str	r3, [r5, #0]
 80058ae:	bd38      	pop	{r3, r4, r5, pc}
 80058b0:	20000b84 	.word	0x20000b84

080058b4 <_malloc_usable_size_r>:
 80058b4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80058b8:	2800      	cmp	r0, #0
 80058ba:	bfbe      	ittt	lt
 80058bc:	1809      	addlt	r1, r1, r0
 80058be:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 80058c2:	18c0      	addlt	r0, r0, r3
 80058c4:	3804      	subs	r0, #4
 80058c6:	4770      	bx	lr

080058c8 <_init>:
 80058c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ca:	bf00      	nop
 80058cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ce:	bc08      	pop	{r3}
 80058d0:	469e      	mov	lr, r3
 80058d2:	4770      	bx	lr

080058d4 <_fini>:
 80058d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058d6:	bf00      	nop
 80058d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058da:	bc08      	pop	{r3}
 80058dc:	469e      	mov	lr, r3
 80058de:	4770      	bx	lr
