
C:\Users\emon1\Atollic\TrueSTUDIO\ARM_workspace_7.1.2\Vulture\Debug\Vulture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f54  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08005124  08005124  00015124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  08005264  08005264  00015264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800526c  0800526c  0001526c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000c0  20000000  08005270  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002a7c  200000c0  08005330  000200c0  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20002b3c  08005330  00022b3c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
  9 .debug_info   00010c2a  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000228a  00000000  00000000  00030d1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000fd8  00000000  00000000  00032fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000eb0  00000000  00000000  00033f80  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000073ae  00000000  00000000  00034e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00009565  00000000  00000000  0003c1de  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  00045743  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00004a5c  00000000  00000000  000457c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c0 	.word	0x200000c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800510c 	.word	0x0800510c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000c4 	.word	0x200000c4
 800020c:	0800510c 	.word	0x0800510c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <vApplicationStackOverflowHook>:

/**
  Dummy implementation of the callback function vApplicationStackOverflowHook().
*/
#if (configCHECK_FOR_STACK_OVERFLOW > 0)
__WEAK void vApplicationStackOverflowHook (TaskHandle_t xTask, signed char *pcTaskName) {
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
  (void)xTask;
  (void)pcTaskName;
}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop

080002d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
 80002de:	60f8      	str	r0, [r7, #12]
 80002e0:	60b9      	str	r1, [r7, #8]
 80002e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	4a07      	ldr	r2, [pc, #28]	; (8000304 <vApplicationGetIdleTaskMemory+0x2c>)
 80002e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	4a06      	ldr	r2, [pc, #24]	; (8000308 <vApplicationGetIdleTaskMemory+0x30>)
 80002ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	2280      	movs	r2, #128	; 0x80
 80002f4:	601a      	str	r2, [r3, #0]
}
 80002f6:	bf00      	nop
 80002f8:	3714      	adds	r7, #20
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	200000dc 	.word	0x200000dc
 8000308:	20000138 	.word	0x20000138

0800030c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
 8000312:	60f8      	str	r0, [r7, #12]
 8000314:	60b9      	str	r1, [r7, #8]
 8000316:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	4a07      	ldr	r2, [pc, #28]	; (8000338 <vApplicationGetTimerTaskMemory+0x2c>)
 800031c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800031e:	68bb      	ldr	r3, [r7, #8]
 8000320:	4a06      	ldr	r2, [pc, #24]	; (800033c <vApplicationGetTimerTaskMemory+0x30>)
 8000322:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	2250      	movs	r2, #80	; 0x50
 8000328:	601a      	str	r2, [r3, #0]
}
 800032a:	bf00      	nop
 800032c:	3714      	adds	r7, #20
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	20000338 	.word	0x20000338
 800033c:	20000394 	.word	0x20000394

08000340 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000340:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000378 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000344:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000346:	e003      	b.n	8000350 <LoopCopyDataInit>

08000348 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000348:	4b0c      	ldr	r3, [pc, #48]	; (800037c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800034a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800034c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800034e:	3104      	adds	r1, #4

08000350 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000350:	480b      	ldr	r0, [pc, #44]	; (8000380 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000352:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000354:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000356:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000358:	d3f6      	bcc.n	8000348 <CopyDataInit>
  ldr  r2, =_sbss
 800035a:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800035c:	e002      	b.n	8000364 <LoopFillZerobss>

0800035e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800035e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000360:	f842 3b04 	str.w	r3, [r2], #4

08000364 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000364:	4b09      	ldr	r3, [pc, #36]	; (800038c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000366:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000368:	d3f9      	bcc.n	800035e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800036a:	f000 fdcd 	bl	8000f08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800036e:	f003 fd69 	bl	8003e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000372:	f003 fc4d 	bl	8003c10 <main>
  bx  lr    
 8000376:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000378:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 800037c:	08005270 	.word	0x08005270
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000380:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000384:	200000c0 	.word	0x200000c0
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000388:	200000c0 	.word	0x200000c0
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800038c:	20002b3c 	.word	0x20002b3c

08000390 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000390:	e7fe      	b.n	8000390 <ADC_IRQHandler>
	...

08000394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  return uwTick;
 8000398:	4b03      	ldr	r3, [pc, #12]	; (80003a8 <HAL_GetTick+0x14>)
 800039a:	681b      	ldr	r3, [r3, #0]
}
 800039c:	4618      	mov	r0, r3
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	20002b34 	.word	0x20002b34

080003ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b089      	sub	sp, #36	; 0x24
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
 80003b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80003b6:	2300      	movs	r3, #0
 80003b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80003ba:	2300      	movs	r3, #0
 80003bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80003be:	2300      	movs	r3, #0
 80003c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80003c2:	2300      	movs	r3, #0
 80003c4:	61fb      	str	r3, [r7, #28]
 80003c6:	e165      	b.n	8000694 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 80003c8:	2201      	movs	r2, #1
 80003ca:	69fb      	ldr	r3, [r7, #28]
 80003cc:	fa02 f303 	lsl.w	r3, r2, r3
 80003d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003d2:	683b      	ldr	r3, [r7, #0]
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	697b      	ldr	r3, [r7, #20]
 80003d8:	4013      	ands	r3, r2
 80003da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80003dc:	693a      	ldr	r2, [r7, #16]
 80003de:	697b      	ldr	r3, [r7, #20]
 80003e0:	429a      	cmp	r2, r3
 80003e2:	f040 8154 	bne.w	800068e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	685b      	ldr	r3, [r3, #4]
 80003ea:	2b02      	cmp	r3, #2
 80003ec:	d003      	beq.n	80003f6 <HAL_GPIO_Init+0x4a>
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	685b      	ldr	r3, [r3, #4]
 80003f2:	2b12      	cmp	r3, #18
 80003f4:	d123      	bne.n	800043e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80003f6:	69fb      	ldr	r3, [r7, #28]
 80003f8:	08da      	lsrs	r2, r3, #3
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	3208      	adds	r2, #8
 80003fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000404:	69fb      	ldr	r3, [r7, #28]
 8000406:	f003 0307 	and.w	r3, r3, #7
 800040a:	009b      	lsls	r3, r3, #2
 800040c:	220f      	movs	r2, #15
 800040e:	fa02 f303 	lsl.w	r3, r2, r3
 8000412:	43db      	mvns	r3, r3
 8000414:	69ba      	ldr	r2, [r7, #24]
 8000416:	4013      	ands	r3, r2
 8000418:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800041a:	683b      	ldr	r3, [r7, #0]
 800041c:	691a      	ldr	r2, [r3, #16]
 800041e:	69fb      	ldr	r3, [r7, #28]
 8000420:	f003 0307 	and.w	r3, r3, #7
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	fa02 f303 	lsl.w	r3, r2, r3
 800042a:	69ba      	ldr	r2, [r7, #24]
 800042c:	4313      	orrs	r3, r2
 800042e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000430:	69fb      	ldr	r3, [r7, #28]
 8000432:	08da      	lsrs	r2, r3, #3
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	3208      	adds	r2, #8
 8000438:	69b9      	ldr	r1, [r7, #24]
 800043a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000444:	69fb      	ldr	r3, [r7, #28]
 8000446:	005b      	lsls	r3, r3, #1
 8000448:	2203      	movs	r2, #3
 800044a:	fa02 f303 	lsl.w	r3, r2, r3
 800044e:	43db      	mvns	r3, r3
 8000450:	69ba      	ldr	r2, [r7, #24]
 8000452:	4013      	ands	r3, r2
 8000454:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	685b      	ldr	r3, [r3, #4]
 800045a:	f003 0203 	and.w	r2, r3, #3
 800045e:	69fb      	ldr	r3, [r7, #28]
 8000460:	005b      	lsls	r3, r3, #1
 8000462:	fa02 f303 	lsl.w	r3, r2, r3
 8000466:	69ba      	ldr	r2, [r7, #24]
 8000468:	4313      	orrs	r3, r2
 800046a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	69ba      	ldr	r2, [r7, #24]
 8000470:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	685b      	ldr	r3, [r3, #4]
 8000476:	2b01      	cmp	r3, #1
 8000478:	d00b      	beq.n	8000492 <HAL_GPIO_Init+0xe6>
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	685b      	ldr	r3, [r3, #4]
 800047e:	2b02      	cmp	r3, #2
 8000480:	d007      	beq.n	8000492 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	685b      	ldr	r3, [r3, #4]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000486:	2b11      	cmp	r3, #17
 8000488:	d003      	beq.n	8000492 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	685b      	ldr	r3, [r3, #4]
 800048e:	2b12      	cmp	r3, #18
 8000490:	d130      	bne.n	80004f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	689b      	ldr	r3, [r3, #8]
 8000496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000498:	69fb      	ldr	r3, [r7, #28]
 800049a:	005b      	lsls	r3, r3, #1
 800049c:	2203      	movs	r2, #3
 800049e:	fa02 f303 	lsl.w	r3, r2, r3
 80004a2:	43db      	mvns	r3, r3
 80004a4:	69ba      	ldr	r2, [r7, #24]
 80004a6:	4013      	ands	r3, r2
 80004a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	68da      	ldr	r2, [r3, #12]
 80004ae:	69fb      	ldr	r3, [r7, #28]
 80004b0:	005b      	lsls	r3, r3, #1
 80004b2:	fa02 f303 	lsl.w	r3, r2, r3
 80004b6:	69ba      	ldr	r2, [r7, #24]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	69ba      	ldr	r2, [r7, #24]
 80004c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	685b      	ldr	r3, [r3, #4]
 80004c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80004c8:	2201      	movs	r2, #1
 80004ca:	69fb      	ldr	r3, [r7, #28]
 80004cc:	fa02 f303 	lsl.w	r3, r2, r3
 80004d0:	43db      	mvns	r3, r3
 80004d2:	69ba      	ldr	r2, [r7, #24]
 80004d4:	4013      	ands	r3, r2
 80004d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	091b      	lsrs	r3, r3, #4
 80004de:	f003 0201 	and.w	r2, r3, #1
 80004e2:	69fb      	ldr	r3, [r7, #28]
 80004e4:	fa02 f303 	lsl.w	r3, r2, r3
 80004e8:	69ba      	ldr	r2, [r7, #24]
 80004ea:	4313      	orrs	r3, r2
 80004ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	69ba      	ldr	r2, [r7, #24]
 80004f2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	68db      	ldr	r3, [r3, #12]
 80004f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80004fa:	69fb      	ldr	r3, [r7, #28]
 80004fc:	005b      	lsls	r3, r3, #1
 80004fe:	2203      	movs	r2, #3
 8000500:	fa02 f303 	lsl.w	r3, r2, r3
 8000504:	43db      	mvns	r3, r3
 8000506:	69ba      	ldr	r2, [r7, #24]
 8000508:	4013      	ands	r3, r2
 800050a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	689a      	ldr	r2, [r3, #8]
 8000510:	69fb      	ldr	r3, [r7, #28]
 8000512:	005b      	lsls	r3, r3, #1
 8000514:	fa02 f303 	lsl.w	r3, r2, r3
 8000518:	69ba      	ldr	r2, [r7, #24]
 800051a:	4313      	orrs	r3, r2
 800051c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	69ba      	ldr	r2, [r7, #24]
 8000522:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800052c:	2b00      	cmp	r3, #0
 800052e:	f000 80ae 	beq.w	800068e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	4a5c      	ldr	r2, [pc, #368]	; (80006a8 <HAL_GPIO_Init+0x2fc>)
 8000538:	4b5b      	ldr	r3, [pc, #364]	; (80006a8 <HAL_GPIO_Init+0x2fc>)
 800053a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800053c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000540:	6453      	str	r3, [r2, #68]	; 0x44
 8000542:	4b59      	ldr	r3, [pc, #356]	; (80006a8 <HAL_GPIO_Init+0x2fc>)
 8000544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800054e:	4a57      	ldr	r2, [pc, #348]	; (80006ac <HAL_GPIO_Init+0x300>)
 8000550:	69fb      	ldr	r3, [r7, #28]
 8000552:	089b      	lsrs	r3, r3, #2
 8000554:	3302      	adds	r3, #2
 8000556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800055a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800055c:	69fb      	ldr	r3, [r7, #28]
 800055e:	f003 0303 	and.w	r3, r3, #3
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	220f      	movs	r2, #15
 8000566:	fa02 f303 	lsl.w	r3, r2, r3
 800056a:	43db      	mvns	r3, r3
 800056c:	69ba      	ldr	r2, [r7, #24]
 800056e:	4013      	ands	r3, r2
 8000570:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4a4e      	ldr	r2, [pc, #312]	; (80006b0 <HAL_GPIO_Init+0x304>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d025      	beq.n	80005c6 <HAL_GPIO_Init+0x21a>
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4a4d      	ldr	r2, [pc, #308]	; (80006b4 <HAL_GPIO_Init+0x308>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d01f      	beq.n	80005c2 <HAL_GPIO_Init+0x216>
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4a4c      	ldr	r2, [pc, #304]	; (80006b8 <HAL_GPIO_Init+0x30c>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d019      	beq.n	80005be <HAL_GPIO_Init+0x212>
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4a4b      	ldr	r2, [pc, #300]	; (80006bc <HAL_GPIO_Init+0x310>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d013      	beq.n	80005ba <HAL_GPIO_Init+0x20e>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4a4a      	ldr	r2, [pc, #296]	; (80006c0 <HAL_GPIO_Init+0x314>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d00d      	beq.n	80005b6 <HAL_GPIO_Init+0x20a>
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a49      	ldr	r2, [pc, #292]	; (80006c4 <HAL_GPIO_Init+0x318>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d007      	beq.n	80005b2 <HAL_GPIO_Init+0x206>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4a48      	ldr	r2, [pc, #288]	; (80006c8 <HAL_GPIO_Init+0x31c>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d101      	bne.n	80005ae <HAL_GPIO_Init+0x202>
 80005aa:	2306      	movs	r3, #6
 80005ac:	e00c      	b.n	80005c8 <HAL_GPIO_Init+0x21c>
 80005ae:	2307      	movs	r3, #7
 80005b0:	e00a      	b.n	80005c8 <HAL_GPIO_Init+0x21c>
 80005b2:	2305      	movs	r3, #5
 80005b4:	e008      	b.n	80005c8 <HAL_GPIO_Init+0x21c>
 80005b6:	2304      	movs	r3, #4
 80005b8:	e006      	b.n	80005c8 <HAL_GPIO_Init+0x21c>
 80005ba:	2303      	movs	r3, #3
 80005bc:	e004      	b.n	80005c8 <HAL_GPIO_Init+0x21c>
 80005be:	2302      	movs	r3, #2
 80005c0:	e002      	b.n	80005c8 <HAL_GPIO_Init+0x21c>
 80005c2:	2301      	movs	r3, #1
 80005c4:	e000      	b.n	80005c8 <HAL_GPIO_Init+0x21c>
 80005c6:	2300      	movs	r3, #0
 80005c8:	69fa      	ldr	r2, [r7, #28]
 80005ca:	f002 0203 	and.w	r2, r2, #3
 80005ce:	0092      	lsls	r2, r2, #2
 80005d0:	4093      	lsls	r3, r2
 80005d2:	69ba      	ldr	r2, [r7, #24]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80005d8:	4934      	ldr	r1, [pc, #208]	; (80006ac <HAL_GPIO_Init+0x300>)
 80005da:	69fb      	ldr	r3, [r7, #28]
 80005dc:	089b      	lsrs	r3, r3, #2
 80005de:	3302      	adds	r3, #2
 80005e0:	69ba      	ldr	r2, [r7, #24]
 80005e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80005e6:	4b39      	ldr	r3, [pc, #228]	; (80006cc <HAL_GPIO_Init+0x320>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80005ec:	693b      	ldr	r3, [r7, #16]
 80005ee:	43db      	mvns	r3, r3
 80005f0:	69ba      	ldr	r2, [r7, #24]
 80005f2:	4013      	ands	r3, r2
 80005f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	685b      	ldr	r3, [r3, #4]
 80005fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d003      	beq.n	800060a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000602:	69ba      	ldr	r2, [r7, #24]
 8000604:	693b      	ldr	r3, [r7, #16]
 8000606:	4313      	orrs	r3, r2
 8000608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800060a:	4a30      	ldr	r2, [pc, #192]	; (80006cc <HAL_GPIO_Init+0x320>)
 800060c:	69bb      	ldr	r3, [r7, #24]
 800060e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000610:	4b2e      	ldr	r3, [pc, #184]	; (80006cc <HAL_GPIO_Init+0x320>)
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	43db      	mvns	r3, r3
 800061a:	69ba      	ldr	r2, [r7, #24]
 800061c:	4013      	ands	r3, r2
 800061e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000628:	2b00      	cmp	r3, #0
 800062a:	d003      	beq.n	8000634 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800062c:	69ba      	ldr	r2, [r7, #24]
 800062e:	693b      	ldr	r3, [r7, #16]
 8000630:	4313      	orrs	r3, r2
 8000632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000634:	4a25      	ldr	r2, [pc, #148]	; (80006cc <HAL_GPIO_Init+0x320>)
 8000636:	69bb      	ldr	r3, [r7, #24]
 8000638:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800063a:	4b24      	ldr	r3, [pc, #144]	; (80006cc <HAL_GPIO_Init+0x320>)
 800063c:	689b      	ldr	r3, [r3, #8]
 800063e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000640:	693b      	ldr	r3, [r7, #16]
 8000642:	43db      	mvns	r3, r3
 8000644:	69ba      	ldr	r2, [r7, #24]
 8000646:	4013      	ands	r3, r2
 8000648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	685b      	ldr	r3, [r3, #4]
 800064e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000652:	2b00      	cmp	r3, #0
 8000654:	d003      	beq.n	800065e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000656:	69ba      	ldr	r2, [r7, #24]
 8000658:	693b      	ldr	r3, [r7, #16]
 800065a:	4313      	orrs	r3, r2
 800065c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800065e:	4a1b      	ldr	r2, [pc, #108]	; (80006cc <HAL_GPIO_Init+0x320>)
 8000660:	69bb      	ldr	r3, [r7, #24]
 8000662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000664:	4b19      	ldr	r3, [pc, #100]	; (80006cc <HAL_GPIO_Init+0x320>)
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800066a:	693b      	ldr	r3, [r7, #16]
 800066c:	43db      	mvns	r3, r3
 800066e:	69ba      	ldr	r2, [r7, #24]
 8000670:	4013      	ands	r3, r2
 8000672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800067c:	2b00      	cmp	r3, #0
 800067e:	d003      	beq.n	8000688 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000680:	69ba      	ldr	r2, [r7, #24]
 8000682:	693b      	ldr	r3, [r7, #16]
 8000684:	4313      	orrs	r3, r2
 8000686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000688:	4a10      	ldr	r2, [pc, #64]	; (80006cc <HAL_GPIO_Init+0x320>)
 800068a:	69bb      	ldr	r3, [r7, #24]
 800068c:	60d3      	str	r3, [r2, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800068e:	69fb      	ldr	r3, [r7, #28]
 8000690:	3301      	adds	r3, #1
 8000692:	61fb      	str	r3, [r7, #28]
 8000694:	69fb      	ldr	r3, [r7, #28]
 8000696:	2b0f      	cmp	r3, #15
 8000698:	f67f ae96 	bls.w	80003c8 <HAL_GPIO_Init+0x1c>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 800069c:	bf00      	nop
 800069e:	3724      	adds	r7, #36	; 0x24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40013800 	.word	0x40013800
 80006b0:	40020000 	.word	0x40020000
 80006b4:	40020400 	.word	0x40020400
 80006b8:	40020800 	.word	0x40020800
 80006bc:	40020c00 	.word	0x40020c00
 80006c0:	40021000 	.word	0x40021000
 80006c4:	40021400 	.word	0x40021400
 80006c8:	40021800 	.word	0x40021800
 80006cc:	40013c00 	.word	0x40013c00

080006d0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b087      	sub	sp, #28
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80006da:	2300      	movs	r3, #0
 80006dc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]
 80006ea:	e0c8      	b.n	800087e <HAL_GPIO_DeInit+0x1ae>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 80006ec:	2201      	movs	r2, #1
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	fa02 f303 	lsl.w	r3, r2, r3
 80006f4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80006f6:	683a      	ldr	r2, [r7, #0]
 80006f8:	693b      	ldr	r3, [r7, #16]
 80006fa:	4013      	ands	r3, r2
 80006fc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80006fe:	68fa      	ldr	r2, [r7, #12]
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	429a      	cmp	r2, r3
 8000704:	f040 80b8 	bne.w	8000878 <HAL_GPIO_DeInit+0x1a8>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	2103      	movs	r1, #3
 8000712:	fa01 f303 	lsl.w	r3, r1, r3
 8000716:	43db      	mvns	r3, r3
 8000718:	401a      	ands	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	08da      	lsrs	r2, r3, #3
 8000722:	697b      	ldr	r3, [r7, #20]
 8000724:	08d9      	lsrs	r1, r3, #3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	3108      	adds	r1, #8
 800072a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	f003 0307 	and.w	r3, r3, #7
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	200f      	movs	r0, #15
 8000738:	fa00 f303 	lsl.w	r3, r0, r3
 800073c:	43db      	mvns	r3, r3
 800073e:	4019      	ands	r1, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	3208      	adds	r2, #8
 8000744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	689a      	ldr	r2, [r3, #8]
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	2103      	movs	r1, #3
 8000752:	fa01 f303 	lsl.w	r3, r1, r3
 8000756:	43db      	mvns	r3, r3
 8000758:	401a      	ands	r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	685a      	ldr	r2, [r3, #4]
 8000762:	2101      	movs	r1, #1
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	fa01 f303 	lsl.w	r3, r1, r3
 800076a:	43db      	mvns	r3, r3
 800076c:	401a      	ands	r2, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	68da      	ldr	r2, [r3, #12]
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	2103      	movs	r1, #3
 800077c:	fa01 f303 	lsl.w	r3, r1, r3
 8000780:	43db      	mvns	r3, r3
 8000782:	401a      	ands	r2, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	60da      	str	r2, [r3, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8000788:	4a42      	ldr	r2, [pc, #264]	; (8000894 <HAL_GPIO_DeInit+0x1c4>)
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	089b      	lsrs	r3, r3, #2
 800078e:	3302      	adds	r3, #2
 8000790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000794:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	f003 0303 	and.w	r3, r3, #3
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	220f      	movs	r2, #15
 80007a0:	fa02 f303 	lsl.w	r3, r2, r3
 80007a4:	68ba      	ldr	r2, [r7, #8]
 80007a6:	4013      	ands	r3, r2
 80007a8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4a3a      	ldr	r2, [pc, #232]	; (8000898 <HAL_GPIO_DeInit+0x1c8>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d025      	beq.n	80007fe <HAL_GPIO_DeInit+0x12e>
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4a39      	ldr	r2, [pc, #228]	; (800089c <HAL_GPIO_DeInit+0x1cc>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d01f      	beq.n	80007fa <HAL_GPIO_DeInit+0x12a>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4a38      	ldr	r2, [pc, #224]	; (80008a0 <HAL_GPIO_DeInit+0x1d0>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d019      	beq.n	80007f6 <HAL_GPIO_DeInit+0x126>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4a37      	ldr	r2, [pc, #220]	; (80008a4 <HAL_GPIO_DeInit+0x1d4>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d013      	beq.n	80007f2 <HAL_GPIO_DeInit+0x122>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4a36      	ldr	r2, [pc, #216]	; (80008a8 <HAL_GPIO_DeInit+0x1d8>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d00d      	beq.n	80007ee <HAL_GPIO_DeInit+0x11e>
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4a35      	ldr	r2, [pc, #212]	; (80008ac <HAL_GPIO_DeInit+0x1dc>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d007      	beq.n	80007ea <HAL_GPIO_DeInit+0x11a>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4a34      	ldr	r2, [pc, #208]	; (80008b0 <HAL_GPIO_DeInit+0x1e0>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d101      	bne.n	80007e6 <HAL_GPIO_DeInit+0x116>
 80007e2:	2306      	movs	r3, #6
 80007e4:	e00c      	b.n	8000800 <HAL_GPIO_DeInit+0x130>
 80007e6:	2307      	movs	r3, #7
 80007e8:	e00a      	b.n	8000800 <HAL_GPIO_DeInit+0x130>
 80007ea:	2305      	movs	r3, #5
 80007ec:	e008      	b.n	8000800 <HAL_GPIO_DeInit+0x130>
 80007ee:	2304      	movs	r3, #4
 80007f0:	e006      	b.n	8000800 <HAL_GPIO_DeInit+0x130>
 80007f2:	2303      	movs	r3, #3
 80007f4:	e004      	b.n	8000800 <HAL_GPIO_DeInit+0x130>
 80007f6:	2302      	movs	r3, #2
 80007f8:	e002      	b.n	8000800 <HAL_GPIO_DeInit+0x130>
 80007fa:	2301      	movs	r3, #1
 80007fc:	e000      	b.n	8000800 <HAL_GPIO_DeInit+0x130>
 80007fe:	2300      	movs	r3, #0
 8000800:	697a      	ldr	r2, [r7, #20]
 8000802:	f002 0203 	and.w	r2, r2, #3
 8000806:	0092      	lsls	r2, r2, #2
 8000808:	fa03 f202 	lsl.w	r2, r3, r2
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	429a      	cmp	r2, r3
 8000810:	d132      	bne.n	8000878 <HAL_GPIO_DeInit+0x1a8>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0FU) << (4U * (position & 0x03U));
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	f003 0303 	and.w	r3, r3, #3
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	220f      	movs	r2, #15
 800081c:	fa02 f303 	lsl.w	r3, r2, r3
 8000820:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8000822:	481c      	ldr	r0, [pc, #112]	; (8000894 <HAL_GPIO_DeInit+0x1c4>)
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	089b      	lsrs	r3, r3, #2
 8000828:	491a      	ldr	r1, [pc, #104]	; (8000894 <HAL_GPIO_DeInit+0x1c4>)
 800082a:	697a      	ldr	r2, [r7, #20]
 800082c:	0892      	lsrs	r2, r2, #2
 800082e:	3202      	adds	r2, #2
 8000830:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8000834:	68ba      	ldr	r2, [r7, #8]
 8000836:	43d2      	mvns	r2, r2
 8000838:	400a      	ands	r2, r1
 800083a:	3302      	adds	r3, #2
 800083c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8000840:	491c      	ldr	r1, [pc, #112]	; (80008b4 <HAL_GPIO_DeInit+0x1e4>)
 8000842:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <HAL_GPIO_DeInit+0x1e4>)
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	43db      	mvns	r3, r3
 800084a:	4013      	ands	r3, r2
 800084c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800084e:	4919      	ldr	r1, [pc, #100]	; (80008b4 <HAL_GPIO_DeInit+0x1e4>)
 8000850:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <HAL_GPIO_DeInit+0x1e4>)
 8000852:	685a      	ldr	r2, [r3, #4]
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	43db      	mvns	r3, r3
 8000858:	4013      	ands	r3, r2
 800085a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800085c:	4915      	ldr	r1, [pc, #84]	; (80008b4 <HAL_GPIO_DeInit+0x1e4>)
 800085e:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <HAL_GPIO_DeInit+0x1e4>)
 8000860:	689a      	ldr	r2, [r3, #8]
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	43db      	mvns	r3, r3
 8000866:	4013      	ands	r3, r2
 8000868:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800086a:	4912      	ldr	r1, [pc, #72]	; (80008b4 <HAL_GPIO_DeInit+0x1e4>)
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <HAL_GPIO_DeInit+0x1e4>)
 800086e:	68da      	ldr	r2, [r3, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	43db      	mvns	r3, r3
 8000874:	4013      	ands	r3, r2
 8000876:	60cb      	str	r3, [r1, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	3301      	adds	r3, #1
 800087c:	617b      	str	r3, [r7, #20]
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	2b0f      	cmp	r3, #15
 8000882:	f67f af33 	bls.w	80006ec <HAL_GPIO_DeInit+0x1c>
        EXTI->RTSR &= ~((uint32_t)iocurrent);
        EXTI->FTSR &= ~((uint32_t)iocurrent);
      }
    }
  }
}
 8000886:	bf00      	nop
 8000888:	371c      	adds	r7, #28
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40013800 	.word	0x40013800
 8000898:	40020000 	.word	0x40020000
 800089c:	40020400 	.word	0x40020400
 80008a0:	40020800 	.word	0x40020800
 80008a4:	40020c00 	.word	0x40020c00
 80008a8:	40021000 	.word	0x40021000
 80008ac:	40021400 	.word	0x40021400
 80008b0:	40021800 	.word	0x40021800
 80008b4:	40013c00 	.word	0x40013c00

080008b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	460b      	mov	r3, r1
 80008c2:	807b      	strh	r3, [r7, #2]
 80008c4:	4613      	mov	r3, r2
 80008c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008c8:	787b      	ldrb	r3, [r7, #1]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d003      	beq.n	80008d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80008ce:	887a      	ldrh	r2, [r7, #2]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80008d4:	e003      	b.n	80008de <HAL_GPIO_WritePin+0x26>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80008d6:	887b      	ldrh	r3, [r7, #2]
 80008d8:	041a      	lsls	r2, r3, #16
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	619a      	str	r2, [r3, #24]
  }
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d101      	bne.n	80008fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
 80008fc:	e05c      	b.n	80009b8 <HAL_SPI_Init+0xcc>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000904:	b2db      	uxtb	r3, r3
 8000906:	2b00      	cmp	r3, #0
 8000908:	d106      	bne.n	8000918 <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2200      	movs	r2, #0
 800090e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f000 f854 	bl	80009c0 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2202      	movs	r2, #2
 800091c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	6812      	ldr	r2, [r2, #0]
 8000928:	6812      	ldr	r2, [r2, #0]
 800092a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800092e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	6851      	ldr	r1, [r2, #4]
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	6892      	ldr	r2, [r2, #8]
 800093c:	4311      	orrs	r1, r2
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	68d2      	ldr	r2, [r2, #12]
 8000942:	4311      	orrs	r1, r2
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	6912      	ldr	r2, [r2, #16]
 8000948:	4311      	orrs	r1, r2
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	6952      	ldr	r2, [r2, #20]
 800094e:	4311      	orrs	r1, r2
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	6992      	ldr	r2, [r2, #24]
 8000954:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000958:	4311      	orrs	r1, r2
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	69d2      	ldr	r2, [r2, #28]
 800095e:	4311      	orrs	r1, r2
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	6a12      	ldr	r2, [r2, #32]
 8000964:	4311      	orrs	r1, r2
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800096a:	430a      	orrs	r2, r1
 800096c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	6992      	ldr	r2, [r2, #24]
 8000976:	0c12      	lsrs	r2, r2, #16
 8000978:	f002 0104 	and.w	r1, r2, #4
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000980:	430a      	orrs	r2, r1
 8000982:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800098c:	d104      	bne.n	8000998 <HAL_SPI_Init+0xac>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000996:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	6812      	ldr	r2, [r2, #0]
 80009a0:	69d2      	ldr	r2, [r2, #28]
 80009a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009a6:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2200      	movs	r2, #0
 80009ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2201      	movs	r2, #1
 80009b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80009b6:	2300      	movs	r3, #0
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
  */
}
 80009c8:	bf00      	nop
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent and received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08e      	sub	sp, #56	; 0x38
 80009d8:	af02      	add	r7, sp, #8
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
 80009e0:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
 80009e6:	2300      	movs	r3, #0
 80009e8:	623b      	str	r3, [r7, #32]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
 80009ea:	2300      	movs	r3, #0
 80009ec:	837b      	strh	r3, [r7, #26]
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 80009f2:	2301      	movs	r3, #1
 80009f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef errorcode = HAL_OK;
 80009f6:	2300      	movs	r3, #0
 80009f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d101      	bne.n	8000a0a <HAL_SPI_TransmitReceive+0x36>
 8000a06:	2302      	movs	r3, #2
 8000a08:	e1f1      	b.n	8000dee <HAL_SPI_TransmitReceive+0x41a>
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8000a12:	f7ff fcbf 	bl	8000394 <HAL_GetTick>
 8000a16:	61f8      	str	r0, [r7, #28]
  
  tmp  = hspi->State;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  tmp1 = hspi->Init.Mode;
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	623b      	str	r3, [r7, #32]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8000a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d00e      	beq.n	8000a4c <HAL_SPI_TransmitReceive+0x78>
 8000a2e:	6a3b      	ldr	r3, [r7, #32]
 8000a30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000a34:	d106      	bne.n	8000a44 <HAL_SPI_TransmitReceive+0x70>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	689b      	ldr	r3, [r3, #8]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d102      	bne.n	8000a44 <HAL_SPI_TransmitReceive+0x70>
 8000a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a40:	2b04      	cmp	r3, #4
 8000a42:	d003      	beq.n	8000a4c <HAL_SPI_TransmitReceive+0x78>
  {
    errorcode = HAL_BUSY;
 8000a44:	2302      	movs	r3, #2
 8000a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8000a4a:	e1c6      	b.n	8000dda <HAL_SPI_TransmitReceive+0x406>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d005      	beq.n	8000a5e <HAL_SPI_TransmitReceive+0x8a>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d002      	beq.n	8000a5e <HAL_SPI_TransmitReceive+0x8a>
 8000a58:	887b      	ldrh	r3, [r7, #2]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d103      	bne.n	8000a66 <HAL_SPI_TransmitReceive+0x92>
  {
    errorcode = HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8000a64:	e1b9      	b.n	8000dda <HAL_SPI_TransmitReceive+0x406>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d103      	bne.n	8000a7a <HAL_SPI_TransmitReceive+0xa6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	2205      	movs	r2, #5
 8000a76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	887a      	ldrh	r2, [r7, #2]
 8000a8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	887a      	ldrh	r2, [r7, #2]
 8000a90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	68ba      	ldr	r2, [r7, #8]
 8000a96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	887a      	ldrh	r2, [r7, #2]
 8000a9c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	887a      	ldrh	r2, [r7, #2]
 8000aa2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	2200      	movs	r2, #0
 8000aae:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ab4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ab8:	d110      	bne.n	8000adc <HAL_SPI_TransmitReceive+0x108>
  {
    SPI_RESET_CRC(hspi);
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	6819      	ldr	r1, [r3, #0]
 8000ac4:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8000ac8:	400b      	ands	r3, r1
 8000aca:	6013      	str	r3, [r2, #0]
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	68fa      	ldr	r2, [r7, #12]
 8000ad2:	6812      	ldr	r2, [r2, #0]
 8000ad4:	6812      	ldr	r2, [r2, #0]
 8000ad6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000ada:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d107      	bne.n	8000afa <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	6812      	ldr	r2, [r2, #0]
 8000af2:	6812      	ldr	r2, [r2, #0]
 8000af4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000af8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	68db      	ldr	r3, [r3, #12]
 8000afe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b02:	f040 8084 	bne.w	8000c0e <HAL_SPI_TransmitReceive+0x23a>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d004      	beq.n	8000b18 <HAL_SPI_TransmitReceive+0x144>
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d16f      	bne.n	8000bf8 <HAL_SPI_TransmitReceive+0x224>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	68ba      	ldr	r2, [r7, #8]
 8000b1e:	8812      	ldrh	r2, [r2, #0]
 8000b20:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	3302      	adds	r3, #2
 8000b26:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	b29a      	uxth	r2, r3
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000b36:	e05f      	b.n	8000bf8 <HAL_SPI_TransmitReceive+0x224>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8000b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d02e      	beq.n	8000b9c <HAL_SPI_TransmitReceive+0x1c8>
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d029      	beq.n	8000b9c <HAL_SPI_TransmitReceive+0x1c8>
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	f003 0302 	and.w	r3, r3, #2
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d022      	beq.n	8000b9c <HAL_SPI_TransmitReceive+0x1c8>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	68ba      	ldr	r2, [r7, #8]
 8000b5c:	8812      	ldrh	r2, [r2, #0]
 8000b5e:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	3302      	adds	r3, #2
 8000b64:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d10c      	bne.n	8000b9c <HAL_SPI_TransmitReceive+0x1c8>
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b8a:	d107      	bne.n	8000b9c <HAL_SPI_TransmitReceive+0x1c8>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	68fa      	ldr	r2, [r7, #12]
 8000b92:	6812      	ldr	r2, [r2, #0]
 8000b94:	6812      	ldr	r2, [r2, #0]
 8000b96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000b9a:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d018      	beq.n	8000bd8 <HAL_SPI_TransmitReceive+0x204>
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	f003 0301 	and.w	r3, r3, #1
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d011      	beq.n	8000bd8 <HAL_SPI_TransmitReceive+0x204>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	68db      	ldr	r3, [r3, #12]
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3302      	adds	r3, #2
 8000bc4:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	3b01      	subs	r3, #1
 8000bce:	b29a      	uxth	r2, r3
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8000bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bde:	d00b      	beq.n	8000bf8 <HAL_SPI_TransmitReceive+0x224>
 8000be0:	f7ff fbd8 	bl	8000394 <HAL_GetTick>
 8000be4:	4602      	mov	r2, r0
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	1ad2      	subs	r2, r2, r3
 8000bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d303      	bcc.n	8000bf8 <HAL_SPI_TransmitReceive+0x224>
      {
        errorcode = HAL_TIMEOUT;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8000bf6:	e0f0      	b.n	8000dda <HAL_SPI_TransmitReceive+0x406>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
      pTxData += sizeof(uint16_t);
      hspi->TxXferCount--;
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d19a      	bne.n	8000b38 <HAL_SPI_TransmitReceive+0x164>
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d195      	bne.n	8000b38 <HAL_SPI_TransmitReceive+0x164>
 8000c0c:	e083      	b.n	8000d16 <HAL_SPI_TransmitReceive+0x342>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d004      	beq.n	8000c20 <HAL_SPI_TransmitReceive+0x24c>
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d170      	bne.n	8000d02 <HAL_SPI_TransmitReceive+0x32e>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	330c      	adds	r3, #12
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	7812      	ldrb	r2, [r2, #0]
 8000c2a:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000c40:	e05f      	b.n	8000d02 <HAL_SPI_TransmitReceive+0x32e>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8000c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d02f      	beq.n	8000ca8 <HAL_SPI_TransmitReceive+0x2d4>
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d02a      	beq.n	8000ca8 <HAL_SPI_TransmitReceive+0x2d4>
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	f003 0302 	and.w	r3, r3, #2
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d023      	beq.n	8000ca8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f103 020c 	add.w	r2, r3, #12
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	1c59      	adds	r1, r3, #1
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d10c      	bne.n	8000ca8 <HAL_SPI_TransmitReceive+0x2d4>
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c96:	d107      	bne.n	8000ca8 <HAL_SPI_TransmitReceive+0x2d4>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	68fa      	ldr	r2, [r7, #12]
 8000c9e:	6812      	ldr	r2, [r2, #0]
 8000ca0:	6812      	ldr	r2, [r2, #0]
 8000ca2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ca6:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d017      	beq.n	8000ce2 <HAL_SPI_TransmitReceive+0x30e>
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d010      	beq.n	8000ce2 <HAL_SPI_TransmitReceive+0x30e>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	1c5a      	adds	r2, r3, #1
 8000cc4:	607a      	str	r2, [r7, #4]
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	6812      	ldr	r2, [r2, #0]
 8000cca:	68d2      	ldr	r2, [r2, #12]
 8000ccc:	b2d2      	uxtb	r2, r2
 8000cce:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8000ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce8:	d00b      	beq.n	8000d02 <HAL_SPI_TransmitReceive+0x32e>
 8000cea:	f7ff fb53 	bl	8000394 <HAL_GetTick>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	1ad2      	subs	r2, r2, r3
 8000cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d303      	bcc.n	8000d02 <HAL_SPI_TransmitReceive+0x32e>
      {
        errorcode = HAL_TIMEOUT;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8000d00:	e06b      	b.n	8000dda <HAL_SPI_TransmitReceive+0x406>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
      pTxData += sizeof(uint8_t);
      hspi->TxXferCount--;
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d19a      	bne.n	8000c42 <HAL_SPI_TransmitReceive+0x26e>
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d195      	bne.n	8000c42 <HAL_SPI_TransmitReceive+0x26e>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d1e:	d11a      	bne.n	8000d56 <HAL_SPI_TransmitReceive+0x382>
  {
    /* Wait until TXE flag */
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	9300      	str	r3, [sp, #0]
 8000d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d26:	2201      	movs	r2, #1
 8000d28:	2101      	movs	r1, #1
 8000d2a:	68f8      	ldr	r0, [r7, #12]
 8000d2c:	f000 f864 	bl	8000df8 <SPI_WaitFlagStateUntilTimeout>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d009      	beq.n	8000d4a <HAL_SPI_TransmitReceive+0x376>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d3a:	f043 0202 	orr.w	r2, r3, #2
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8000d42:	2303      	movs	r3, #3
 8000d44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 8000d48:	e047      	b.n	8000dda <HAL_SPI_TransmitReceive+0x406>
    }
    /* Read CRC */
    tmpreg1 = hspi->Instance->DR;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	837b      	strh	r3, [r7, #26]
    /* To avoid GCC warning */
    UNUSED(tmpreg1);
 8000d54:	8b7b      	ldrh	r3, [r7, #26]
  }

  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	f003 0310 	and.w	r3, r3, #16
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d00d      	beq.n	8000d80 <HAL_SPI_TransmitReceive+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d68:	f043 0202 	orr.w	r2, r3, #2
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8000d78:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d86:	2201      	movs	r2, #1
 8000d88:	2102      	movs	r1, #2
 8000d8a:	68f8      	ldr	r0, [r7, #12]
 8000d8c:	f000 f834 	bl	8000df8 <SPI_WaitFlagStateUntilTimeout>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d003      	beq.n	8000d9e <HAL_SPI_TransmitReceive+0x3ca>
  {
    errorcode = HAL_TIMEOUT;
 8000d96:	2303      	movs	r3, #3
 8000d98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8000d9c:	e01d      	b.n	8000dda <HAL_SPI_TransmitReceive+0x406>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8000d9e:	69fa      	ldr	r2, [r7, #28]
 8000da0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000da2:	68f8      	ldr	r0, [r7, #12]
 8000da4:	f000 f892 	bl	8000ecc <SPI_CheckFlag_BSY>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d006      	beq.n	8000dbc <HAL_SPI_TransmitReceive+0x3e8>
  {
    errorcode = HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	2220      	movs	r2, #32
 8000db8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8000dba:	e00e      	b.n	8000dda <HAL_SPI_TransmitReceive+0x406>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d10a      	bne.n	8000dda <HAL_SPI_TransmitReceive+0x406>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	697b      	ldr	r3, [r7, #20]
  }
  
error :
  hspi->State = HAL_SPI_STATE_READY;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	2201      	movs	r2, #1
 8000dde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	2200      	movs	r2, #0
 8000de6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8000dea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3730      	adds	r7, #48	; 0x30
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop

08000df8 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
 8000e04:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000e06:	e04d      	b.n	8000ea4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e0e:	d049      	beq.n	8000ea4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d007      	beq.n	8000e26 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8000e16:	f7ff fabd 	bl	8000394 <HAL_GetTick>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	1ad2      	subs	r2, r2, r3
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d33e      	bcc.n	8000ea4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	6812      	ldr	r2, [r2, #0]
 8000e2e:	6852      	ldr	r2, [r2, #4]
 8000e30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000e34:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000e3e:	d111      	bne.n	8000e64 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e48:	d004      	beq.n	8000e54 <SPI_WaitFlagStateUntilTimeout+0x5c>
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e52:	d107      	bne.n	8000e64 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	68fa      	ldr	r2, [r7, #12]
 8000e5a:	6812      	ldr	r2, [r2, #0]
 8000e5c:	6812      	ldr	r2, [r2, #0]
 8000e5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e6c:	d110      	bne.n	8000e90 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	6819      	ldr	r1, [r3, #0]
 8000e78:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8000e7c:	400b      	ands	r3, r1
 8000e7e:	6013      	str	r3, [r2, #0]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	68fa      	ldr	r2, [r7, #12]
 8000e86:	6812      	ldr	r2, [r2, #0]
 8000e88:	6812      	ldr	r2, [r2, #0]
 8000e8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e8e:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	2201      	movs	r2, #1
 8000e94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	e00e      	b.n	8000ec2 <SPI_WaitFlagStateUntilTimeout+0xca>
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	689a      	ldr	r2, [r3, #8]
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	401a      	ands	r2, r3
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d101      	bne.n	8000eb8 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	e000      	b.n	8000eba <SPI_WaitFlagStateUntilTimeout+0xc2>
 8000eb8:	2200      	movs	r2, #0
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d1a3      	bne.n	8000e08 <SPI_WaitFlagStateUntilTimeout+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop

08000ecc <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af02      	add	r7, sp, #8
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2180      	movs	r1, #128	; 0x80
 8000ee2:	68f8      	ldr	r0, [r7, #12]
 8000ee4:	f7ff ff88 	bl	8000df8 <SPI_WaitFlagStateUntilTimeout>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d007      	beq.n	8000efe <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ef2:	f043 0220 	orr.w	r2, r3, #32
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8000efa:	2303      	movs	r3, #3
 8000efc:	e000      	b.n	8000f00 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 8000efe:	2300      	movs	r3, #0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f0c:	4a16      	ldr	r2, [pc, #88]	; (8000f68 <SystemInit+0x60>)
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <SystemInit+0x60>)
 8000f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000f1c:	4a13      	ldr	r2, [pc, #76]	; (8000f6c <SystemInit+0x64>)
 8000f1e:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <SystemInit+0x64>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f043 0301 	orr.w	r3, r3, #1
 8000f26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f28:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <SystemInit+0x64>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000f2e:	4a0f      	ldr	r2, [pc, #60]	; (8000f6c <SystemInit+0x64>)
 8000f30:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <SystemInit+0x64>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000f38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f3c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <SystemInit+0x64>)
 8000f40:	4a0b      	ldr	r2, [pc, #44]	; (8000f70 <SystemInit+0x68>)
 8000f42:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000f44:	4a09      	ldr	r2, [pc, #36]	; (8000f6c <SystemInit+0x64>)
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <SystemInit+0x64>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f4e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <SystemInit+0x64>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f56:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <SystemInit+0x60>)
 8000f58:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f5c:	609a      	str	r2, [r3, #8]
#endif
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000ed00 	.word	0xe000ed00
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	24003010 	.word	0x24003010

08000f74 <SysTick_Handler>:
extern void xPortSysTickHandler (void);

/*
  SysTick handler implementation that also clears overflow flag.
*/
void SysTick_Handler (void) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8000f78:	4b02      	ldr	r3, [pc, #8]	; (8000f84 <SysTick_Handler+0x10>)
 8000f7a:	681b      	ldr	r3, [r3, #0]

  /* Call tick handler */
  xPortSysTickHandler();
 8000f7c:	f000 fb3c 	bl	80015f8 <xPortSysTickHandler>
}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	e000e010 	.word	0xe000e010

08000f88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8000f94:	f001 f8e6 	bl	8002164 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000f98:	4b40      	ldr	r3, [pc, #256]	; (800109c <pvPortMalloc+0x114>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d101      	bne.n	8000fa4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8000fa0:	f000 f8c0 	bl	8001124 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000fa4:	4b3e      	ldr	r3, [pc, #248]	; (80010a0 <pvPortMalloc+0x118>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4013      	ands	r3, r2
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d16d      	bne.n	800108c <pvPortMalloc+0x104>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00d      	beq.n	8000fd2 <pvPortMalloc+0x4a>
			{
				xWantedSize += xHeapStructSize;
 8000fb6:	2208      	movs	r2, #8
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4413      	add	r3, r2
 8000fbc:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f003 0307 	and.w	r3, r3, #7
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d004      	beq.n	8000fd2 <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f023 0307 	bic.w	r3, r3, #7
 8000fce:	3308      	adds	r3, #8
 8000fd0:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d059      	beq.n	800108c <pvPortMalloc+0x104>
 8000fd8:	4b32      	ldr	r3, [pc, #200]	; (80010a4 <pvPortMalloc+0x11c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d854      	bhi.n	800108c <pvPortMalloc+0x104>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000fe2:	4b31      	ldr	r3, [pc, #196]	; (80010a8 <pvPortMalloc+0x120>)
 8000fe4:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8000fe6:	4b30      	ldr	r3, [pc, #192]	; (80010a8 <pvPortMalloc+0x120>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000fec:	e004      	b.n	8000ff8 <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	617b      	str	r3, [r7, #20]
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	685a      	ldr	r2, [r3, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d203      	bcs.n	800100a <pvPortMalloc+0x82>
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1f1      	bne.n	8000fee <pvPortMalloc+0x66>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800100a:	4b24      	ldr	r3, [pc, #144]	; (800109c <pvPortMalloc+0x114>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	429a      	cmp	r2, r3
 8001012:	d03b      	beq.n	800108c <pvPortMalloc+0x104>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2208      	movs	r2, #8
 800101a:	4413      	add	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	685a      	ldr	r2, [r3, #4]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	1ad2      	subs	r2, r2, r3
 800102e:	2308      	movs	r3, #8
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	429a      	cmp	r2, r3
 8001034:	d90f      	bls.n	8001056 <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4413      	add	r3, r2
 800103c:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	1ad2      	subs	r2, r2, r3
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001050:	68b8      	ldr	r0, [r7, #8]
 8001052:	f000 f8c9 	bl	80011e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <pvPortMalloc+0x11c>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	4a10      	ldr	r2, [pc, #64]	; (80010a4 <pvPortMalloc+0x11c>)
 8001062:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <pvPortMalloc+0x11c>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b10      	ldr	r3, [pc, #64]	; (80010ac <pvPortMalloc+0x124>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	429a      	cmp	r2, r3
 800106e:	d203      	bcs.n	8001078 <pvPortMalloc+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <pvPortMalloc+0x11c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a0d      	ldr	r2, [pc, #52]	; (80010ac <pvPortMalloc+0x124>)
 8001076:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <pvPortMalloc+0x118>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	431a      	orrs	r2, r3
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800108c:	f001 f878 	bl	8002180 <xTaskResumeAll>
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 8001090:	68fb      	ldr	r3, [r7, #12]
}
 8001092:	4618      	mov	r0, r3
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	200024dc 	.word	0x200024dc
 80010a0:	200024e8 	.word	0x200024e8
 80010a4:	200024e0 	.word	0x200024e0
 80010a8:	200024d4 	.word	0x200024d4
 80010ac:	200024e4 	.word	0x200024e4

080010b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d027      	beq.n	8001112 <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80010c2:	2308      	movs	r3, #8
 80010c4:	425b      	negs	r3, r3
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	4413      	add	r3, r2
 80010ca:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	685a      	ldr	r2, [r3, #4]
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <vPortFree+0x6c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4013      	ands	r3, r2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d019      	beq.n	8001112 <vPortFree+0x62>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d115      	bne.n	8001112 <vPortFree+0x62>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	685a      	ldr	r2, [r3, #4]
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <vPortFree+0x6c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	401a      	ands	r2, r3
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80010f6:	f001 f835 	bl	8002164 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	4b08      	ldr	r3, [pc, #32]	; (8001120 <vPortFree+0x70>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4413      	add	r3, r2
 8001104:	4a06      	ldr	r2, [pc, #24]	; (8001120 <vPortFree+0x70>)
 8001106:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001108:	68b8      	ldr	r0, [r7, #8]
 800110a:	f000 f86d 	bl	80011e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800110e:	f001 f837 	bl	8002180 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200024e8 	.word	0x200024e8
 8001120:	200024e0 	.word	0x200024e0

08001124 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800112e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001130:	4b27      	ldr	r3, [pc, #156]	; (80011d0 <prvHeapInit+0xac>)
 8001132:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	2b00      	cmp	r3, #0
 800113c:	d00c      	beq.n	8001158 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	3307      	adds	r3, #7
 8001142:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f023 0307 	bic.w	r3, r3, #7
 800114a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800114c:	68ba      	ldr	r2, [r7, #8]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	4a1f      	ldr	r2, [pc, #124]	; (80011d0 <prvHeapInit+0xac>)
 8001154:	4413      	add	r3, r2
 8001156:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800115c:	4a1d      	ldr	r2, [pc, #116]	; (80011d4 <prvHeapInit+0xb0>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001162:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <prvHeapInit+0xb0>)
 8001164:	2200      	movs	r2, #0
 8001166:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	4413      	add	r3, r2
 800116e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001170:	2208      	movs	r2, #8
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	1a9b      	subs	r3, r3, r2
 8001176:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f023 0307 	bic.w	r3, r3, #7
 800117e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4a15      	ldr	r2, [pc, #84]	; (80011d8 <prvHeapInit+0xb4>)
 8001184:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001186:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <prvHeapInit+0xb4>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2200      	movs	r2, #0
 800118c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800118e:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <prvHeapInit+0xb4>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	68fa      	ldr	r2, [r7, #12]
 800119e:	1ad2      	subs	r2, r2, r3
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <prvHeapInit+0xb4>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <prvHeapInit+0xb8>)
 80011b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	4a09      	ldr	r2, [pc, #36]	; (80011e0 <prvHeapInit+0xbc>)
 80011ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <prvHeapInit+0xc0>)
 80011be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80011c2:	601a      	str	r2, [r3, #0]
}
 80011c4:	bf00      	nop
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	200004d4 	.word	0x200004d4
 80011d4:	200024d4 	.word	0x200024d4
 80011d8:	200024dc 	.word	0x200024dc
 80011dc:	200024e4 	.word	0x200024e4
 80011e0:	200024e0 	.word	0x200024e0
 80011e4:	200024e8 	.word	0x200024e8

080011e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80011f0:	4b28      	ldr	r3, [pc, #160]	; (8001294 <prvInsertBlockIntoFreeList+0xac>)
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	e002      	b.n	80011fc <prvInsertBlockIntoFreeList+0x14>
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	429a      	cmp	r2, r3
 8001204:	d3f7      	bcc.n	80011f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	441a      	add	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	429a      	cmp	r2, r3
 8001216:	d108      	bne.n	800122a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	441a      	add	r2, r3
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	441a      	add	r2, r3
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	429a      	cmp	r2, r3
 800123c:	d118      	bne.n	8001270 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <prvInsertBlockIntoFreeList+0xb0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	429a      	cmp	r2, r3
 8001248:	d00d      	beq.n	8001266 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	441a      	add	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	e008      	b.n	8001278 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001266:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <prvInsertBlockIntoFreeList+0xb0>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	e003      	b.n	8001278 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001278:	68fa      	ldr	r2, [r7, #12]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	429a      	cmp	r2, r3
 800127e:	d002      	beq.n	8001286 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001286:	bf00      	nop
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	200024d4 	.word	0x200024d4
 8001298:	200024dc 	.word	0x200024dc

0800129c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f103 0208 	add.w	r2, r3, #8
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f04f 32ff 	mov.w	r2, #4294967295
 80012b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f103 0208 	add.w	r2, r3, #8
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f103 0208 	add.w	r2, r3, #8
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop

080012f8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	689a      	ldr	r2, [r3, #8]
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	1c5a      	adds	r2, r3, #1
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	601a      	str	r2, [r3, #0]
}
 8001334:	bf00      	nop
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001356:	d103      	bne.n	8001360 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	e00c      	b.n	800137a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3308      	adds	r3, #8
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	e002      	b.n	800136e <vListInsert+0x2e>
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	429a      	cmp	r2, r3
 8001378:	d9f6      	bls.n	8001368 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	685a      	ldr	r2, [r3, #4]
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	68fa      	ldr	r2, [r7, #12]
 800138e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	1c5a      	adds	r2, r3, #1
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	601a      	str	r2, [r3, #0]
}
 80013a6:	bf00      	nop
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop

080013b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	6892      	ldr	r2, [r2, #8]
 80013ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	6852      	ldr	r2, [r2, #4]
 80013d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	685a      	ldr	r2, [r3, #4]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d103      	bne.n	80013e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	1e5a      	subs	r2, r3, #1
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	3b04      	subs	r3, #4
 8001418:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001420:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	3b04      	subs	r3, #4
 8001426:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	f023 0201 	bic.w	r2, r3, #1
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	3b04      	subs	r3, #4
 8001436:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001438:	4a0c      	ldr	r2, [pc, #48]	; (800146c <pxPortInitialiseStack+0x64>)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	3b14      	subs	r3, #20
 8001442:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	3b04      	subs	r3, #4
 800144e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f06f 0202 	mvn.w	r2, #2
 8001456:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	3b20      	subs	r3, #32
 800145c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800145e:	68fb      	ldr	r3, [r7, #12]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	08001471 	.word	0x08001471

08001470 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001476:	f04f 0310 	mov.w	r3, #16
 800147a:	f383 8811 	msr	BASEPRI, r3
 800147e:	f3bf 8f6f 	isb	sy
 8001482:	f3bf 8f4f 	dsb	sy
 8001486:	607b      	str	r3, [r7, #4]

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	for( ;; );
 8001488:	e7fe      	b.n	8001488 <prvTaskExitError+0x18>
 800148a:	bf00      	nop
 800148c:	0000      	movs	r0, r0
	...

08001490 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001490:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <pxCurrentTCBConst2>)
 8001492:	6819      	ldr	r1, [r3, #0]
 8001494:	6808      	ldr	r0, [r1, #0]
 8001496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800149a:	f380 8809 	msr	PSP, r0
 800149e:	f3bf 8f6f 	isb	sy
 80014a2:	f04f 0000 	mov.w	r0, #0
 80014a6:	f380 8811 	msr	BASEPRI, r0
 80014aa:	4770      	bx	lr
 80014ac:	f3af 8000 	nop.w

080014b0 <pxCurrentTCBConst2>:
 80014b0:	200024ec 	.word	0x200024ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80014b4:	bf00      	nop
 80014b6:	bf00      	nop

080014b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80014b8:	4806      	ldr	r0, [pc, #24]	; (80014d4 <prvPortStartFirstTask+0x1c>)
 80014ba:	6800      	ldr	r0, [r0, #0]
 80014bc:	6800      	ldr	r0, [r0, #0]
 80014be:	f380 8808 	msr	MSP, r0
 80014c2:	b662      	cpsie	i
 80014c4:	b661      	cpsie	f
 80014c6:	f3bf 8f4f 	dsb	sy
 80014ca:	f3bf 8f6f 	isb	sy
 80014ce:	df00      	svc	0
 80014d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80014d2:	bf00      	nop
 80014d4:	e000ed08 	.word	0xe000ed08

080014d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80014dc:	4a0f      	ldr	r2, [pc, #60]	; (800151c <xPortStartScheduler+0x44>)
 80014de:	4b0f      	ldr	r3, [pc, #60]	; (800151c <xPortStartScheduler+0x44>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80014e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80014e8:	4a0c      	ldr	r2, [pc, #48]	; (800151c <xPortStartScheduler+0x44>)
 80014ea:	4b0c      	ldr	r3, [pc, #48]	; (800151c <xPortStartScheduler+0x44>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80014f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80014f4:	f000 f8a0 	bl	8001638 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80014f8:	4b09      	ldr	r3, [pc, #36]	; (8001520 <xPortStartScheduler+0x48>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80014fe:	f000 f8b7 	bl	8001670 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001502:	4a08      	ldr	r2, [pc, #32]	; (8001524 <xPortStartScheduler+0x4c>)
 8001504:	4b07      	ldr	r3, [pc, #28]	; (8001524 <xPortStartScheduler+0x4c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800150c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800150e:	f7ff ffd3 	bl	80014b8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8001512:	f7ff ffad 	bl	8001470 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	bd80      	pop	{r7, pc}
 800151c:	e000ed20 	.word	0xe000ed20
 8001520:	20000008 	.word	0x20000008
 8001524:	e000ef34 	.word	0xe000ef34

08001528 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	f04f 0310 	mov.w	r3, #16
 8001532:	f383 8811 	msr	BASEPRI, r3
 8001536:	f3bf 8f6f 	isb	sy
 800153a:	f3bf 8f4f 	dsb	sy
 800153e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <vPortEnterCritical+0x30>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	3301      	adds	r3, #1
 8001546:	4a04      	ldr	r2, [pc, #16]	; (8001558 <vPortEnterCritical+0x30>)
 8001548:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	20000008 	.word	0x20000008

0800155c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 8001562:	4b0a      	ldr	r3, [pc, #40]	; (800158c <vPortExitCritical+0x30>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	3b01      	subs	r3, #1
 8001568:	4a08      	ldr	r2, [pc, #32]	; (800158c <vPortExitCritical+0x30>)
 800156a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800156c:	4b07      	ldr	r3, [pc, #28]	; (800158c <vPortExitCritical+0x30>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d104      	bne.n	800157e <vPortExitCritical+0x22>
 8001574:	2300      	movs	r3, #0
 8001576:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000008 	.word	0x20000008

08001590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001590:	f3ef 8009 	mrs	r0, PSP
 8001594:	f3bf 8f6f 	isb	sy
 8001598:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <pxCurrentTCBConst>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	f01e 0f10 	tst.w	lr, #16
 80015a0:	bf08      	it	eq
 80015a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80015a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015aa:	6010      	str	r0, [r2, #0]
 80015ac:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80015b0:	f04f 0010 	mov.w	r0, #16
 80015b4:	f380 8811 	msr	BASEPRI, r0
 80015b8:	f3bf 8f4f 	dsb	sy
 80015bc:	f3bf 8f6f 	isb	sy
 80015c0:	f000 ff2a 	bl	8002418 <vTaskSwitchContext>
 80015c4:	f04f 0000 	mov.w	r0, #0
 80015c8:	f380 8811 	msr	BASEPRI, r0
 80015cc:	bc08      	pop	{r3}
 80015ce:	6819      	ldr	r1, [r3, #0]
 80015d0:	6808      	ldr	r0, [r1, #0]
 80015d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015d6:	f01e 0f10 	tst.w	lr, #16
 80015da:	bf08      	it	eq
 80015dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80015e0:	f380 8809 	msr	PSP, r0
 80015e4:	f3bf 8f6f 	isb	sy
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	f3af 8000 	nop.w

080015f0 <pxCurrentTCBConst>:
 80015f0:	200024ec 	.word	0x200024ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80015f4:	bf00      	nop
 80015f6:	bf00      	nop

080015f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80015fe:	f04f 0310 	mov.w	r3, #16
 8001602:	f383 8811 	msr	BASEPRI, r3
 8001606:	f3bf 8f6f 	isb	sy
 800160a:	f3bf 8f4f 	dsb	sy
 800160e:	603b      	str	r3, [r7, #0]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001610:	f000 fe54 	bl	80022bc <xTaskIncrementTick>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <xPortSysTickHandler+0x3c>)
 800161c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	2300      	movs	r3, #0
 8001624:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	e000ed04 	.word	0xe000ed04

08001638 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800163c:	4a08      	ldr	r2, [pc, #32]	; (8001660 <vPortSetupTimerInterrupt+0x28>)
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <vPortSetupTimerInterrupt+0x2c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4909      	ldr	r1, [pc, #36]	; (8001668 <vPortSetupTimerInterrupt+0x30>)
 8001644:	fba1 1303 	umull	r1, r3, r1, r3
 8001648:	099b      	lsrs	r3, r3, #6
 800164a:	3b01      	subs	r3, #1
 800164c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800164e:	4b07      	ldr	r3, [pc, #28]	; (800166c <vPortSetupTimerInterrupt+0x34>)
 8001650:	2207      	movs	r2, #7
 8001652:	601a      	str	r2, [r3, #0]
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000e014 	.word	0xe000e014
 8001664:	20000004 	.word	0x20000004
 8001668:	10624dd3 	.word	0x10624dd3
 800166c:	e000e010 	.word	0xe000e010

08001670 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001670:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001680 <vPortEnableVFP+0x10>
 8001674:	6801      	ldr	r1, [r0, #0]
 8001676:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800167a:	6001      	str	r1, [r0, #0]
 800167c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800167e:	bf00      	nop
 8001680:	e000ed88 	.word	0xe000ed88

08001684 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 8001692:	f7ff ff49 	bl	8001528 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800169e:	68f9      	ldr	r1, [r7, #12]
 80016a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80016a2:	fb01 f303 	mul.w	r3, r1, r3
 80016a6:	441a      	add	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2200      	movs	r2, #0
 80016b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016c2:	3b01      	subs	r3, #1
 80016c4:	68f9      	ldr	r1, [r7, #12]
 80016c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80016c8:	fb01 f303 	mul.w	r3, r1, r3
 80016cc:	441a      	add	r2, r3
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	22ff      	movs	r2, #255	; 0xff
 80016d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	22ff      	movs	r2, #255	; 0xff
 80016de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d114      	bne.n	8001712 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d01a      	beq.n	8001726 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	3310      	adds	r3, #16
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 ff37 	bl	8002568 <xTaskRemoveFromEventList>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d012      	beq.n	8001726 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <xQueueGenericReset+0xb0>)
 8001702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	f3bf 8f4f 	dsb	sy
 800170c:	f3bf 8f6f 	isb	sy
 8001710:	e009      	b.n	8001726 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	3310      	adds	r3, #16
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fdc0 	bl	800129c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	3324      	adds	r3, #36	; 0x24
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fdbb 	bl	800129c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001726:	f7ff ff19 	bl	800155c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800172a:	2301      	movs	r3, #1
}
 800172c:	4618      	mov	r0, r3
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	e000ed04 	.word	0xe000ed04

08001738 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af02      	add	r7, sp, #8
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
 8001744:	603b      	str	r3, [r7, #0]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d00d      	beq.n	800176c <xQueueGenericCreateStatic+0x34>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001758:	f897 2020 	ldrb.w	r2, [r7, #32]
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	4613      	mov	r3, r2
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	68b9      	ldr	r1, [r7, #8]
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	f000 f806 	bl	8001778 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 800176c:	697b      	ldr	r3, [r7, #20]
	}
 800176e:	4618      	mov	r0, r3
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop

08001778 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
 8001784:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d103      	bne.n	8001794 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	e002      	b.n	800179a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80017a6:	2101      	movs	r1, #1
 80017a8:	69b8      	ldr	r0, [r7, #24]
 80017aa:	f7ff ff6b 	bl	8001684 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	78fa      	ldrb	r2, [r7, #3]
 80017b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop

080017c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08a      	sub	sp, #40	; 0x28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
 80017cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80017ce:	2300      	movs	r3, #0
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	623b      	str	r3, [r7, #32]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80017d6:	f7ff fea7 	bl	8001528 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80017da:	6a3b      	ldr	r3, [r7, #32]
 80017dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017de:	6a3b      	ldr	r3, [r7, #32]
 80017e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d302      	bcc.n	80017ec <xQueueGenericSend+0x2c>
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d129      	bne.n	8001840 <xQueueGenericSend+0x80>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	68b9      	ldr	r1, [r7, #8]
 80017f0:	6a38      	ldr	r0, [r7, #32]
 80017f2:	f000 f9bf 	bl	8001b74 <prvCopyDataToQueue>
 80017f6:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80017f8:	6a3b      	ldr	r3, [r7, #32]
 80017fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d010      	beq.n	8001822 <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001800:	6a3b      	ldr	r3, [r7, #32]
 8001802:	3324      	adds	r3, #36	; 0x24
 8001804:	4618      	mov	r0, r3
 8001806:	f000 feaf 	bl	8002568 <xTaskRemoveFromEventList>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d013      	beq.n	8001838 <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001810:	4b3f      	ldr	r3, [pc, #252]	; (8001910 <xQueueGenericSend+0x150>)
 8001812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	f3bf 8f4f 	dsb	sy
 800181c:	f3bf 8f6f 	isb	sy
 8001820:	e00a      	b.n	8001838 <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d007      	beq.n	8001838 <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001828:	4b39      	ldr	r3, [pc, #228]	; (8001910 <xQueueGenericSend+0x150>)
 800182a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	f3bf 8f4f 	dsb	sy
 8001834:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001838:	f7ff fe90 	bl	800155c <vPortExitCritical>
				return pdPASS;
 800183c:	2301      	movs	r3, #1
 800183e:	e063      	b.n	8001908 <xQueueGenericSend+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d103      	bne.n	800184e <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001846:	f7ff fe89 	bl	800155c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800184a:	2300      	movs	r3, #0
 800184c:	e05c      	b.n	8001908 <xQueueGenericSend+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	2b00      	cmp	r3, #0
 8001852:	d106      	bne.n	8001862 <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	4618      	mov	r0, r3
 800185a:	f000 fedb 	bl	8002614 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800185e:	2301      	movs	r3, #1
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001862:	f7ff fe7b 	bl	800155c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001866:	f000 fc7d 	bl	8002164 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800186a:	f7ff fe5d 	bl	8001528 <vPortEnterCritical>
 800186e:	6a3b      	ldr	r3, [r7, #32]
 8001870:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001874:	b25b      	sxtb	r3, r3
 8001876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800187a:	d103      	bne.n	8001884 <xQueueGenericSend+0xc4>
 800187c:	6a3b      	ldr	r3, [r7, #32]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001884:	6a3b      	ldr	r3, [r7, #32]
 8001886:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800188a:	b25b      	sxtb	r3, r3
 800188c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001890:	d103      	bne.n	800189a <xQueueGenericSend+0xda>
 8001892:	6a3b      	ldr	r3, [r7, #32]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800189a:	f7ff fe5f 	bl	800155c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800189e:	1d3a      	adds	r2, r7, #4
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4611      	mov	r1, r2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 feca 	bl	8002640 <xTaskCheckForTimeOut>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d124      	bne.n	80018fc <xQueueGenericSend+0x13c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80018b2:	6a38      	ldr	r0, [r7, #32]
 80018b4:	f000 fa56 	bl	8001d64 <prvIsQueueFull>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d018      	beq.n	80018f0 <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80018be:	6a3b      	ldr	r3, [r7, #32]
 80018c0:	3310      	adds	r3, #16
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	4611      	mov	r1, r2
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 fe1a 	bl	8002500 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80018cc:	6a38      	ldr	r0, [r7, #32]
 80018ce:	f000 f9e1 	bl	8001c94 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80018d2:	f000 fc55 	bl	8002180 <xTaskResumeAll>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f47f af7c 	bne.w	80017d6 <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
 80018de:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <xQueueGenericSend+0x150>)
 80018e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	f3bf 8f4f 	dsb	sy
 80018ea:	f3bf 8f6f 	isb	sy
 80018ee:	e772      	b.n	80017d6 <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80018f0:	6a38      	ldr	r0, [r7, #32]
 80018f2:	f000 f9cf 	bl	8001c94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80018f6:	f000 fc43 	bl	8002180 <xTaskResumeAll>
 80018fa:	e76c      	b.n	80017d6 <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80018fc:	6a38      	ldr	r0, [r7, #32]
 80018fe:	f000 f9c9 	bl	8001c94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001902:	f000 fc3d 	bl	8002180 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001906:	2300      	movs	r3, #0
		}
	}
}
 8001908:	4618      	mov	r0, r3
 800190a:	3728      	adds	r7, #40	; 0x28
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	e000ed04 	.word	0xe000ed04

08001914 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08c      	sub	sp, #48	; 0x30
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
 8001920:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	62bb      	str	r3, [r7, #40]	; 0x28

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001926:	f3ef 8211 	mrs	r2, BASEPRI
 800192a:	f04f 0310 	mov.w	r3, #16
 800192e:	f383 8811 	msr	BASEPRI, r3
 8001932:	f3bf 8f6f 	isb	sy
 8001936:	f3bf 8f4f 	dsb	sy
 800193a:	61ba      	str	r2, [r7, #24]
 800193c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800193e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001940:	623b      	str	r3, [r7, #32]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800194a:	429a      	cmp	r2, r3
 800194c:	d302      	bcc.n	8001954 <xQueueGenericSendFromISR+0x40>
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	2b02      	cmp	r3, #2
 8001952:	d12a      	bne.n	80019aa <xQueueGenericSendFromISR+0x96>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001956:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800195a:	77fb      	strb	r3, [r7, #31]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	68b9      	ldr	r1, [r7, #8]
 8001960:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001962:	f000 f907 	bl	8001b74 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001966:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800196a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800196e:	d112      	bne.n	8001996 <xQueueGenericSendFromISR+0x82>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001974:	2b00      	cmp	r3, #0
 8001976:	d015      	beq.n	80019a4 <xQueueGenericSendFromISR+0x90>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800197a:	3324      	adds	r3, #36	; 0x24
 800197c:	4618      	mov	r0, r3
 800197e:	f000 fdf3 	bl	8002568 <xTaskRemoveFromEventList>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d00d      	beq.n	80019a4 <xQueueGenericSendFromISR+0x90>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d00a      	beq.n	80019a4 <xQueueGenericSendFromISR+0x90>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	e006      	b.n	80019a4 <xQueueGenericSendFromISR+0x90>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001996:	7ffb      	ldrb	r3, [r7, #31]
 8001998:	3301      	adds	r3, #1
 800199a:	b2db      	uxtb	r3, r3
 800199c:	b25a      	sxtb	r2, r3
 800199e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80019a4:	2301      	movs	r3, #1
 80019a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
 80019a8:	e001      	b.n	80019ae <xQueueGenericSendFromISR+0x9a>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019ae:	6a3b      	ldr	r3, [r7, #32]
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80019b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3730      	adds	r7, #48	; 0x30
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop

080019c4 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08a      	sub	sp, #40	; 0x28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
 80019d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	623b      	str	r3, [r7, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80019da:	f7ff fda5 	bl	8001528 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80019de:	6a3b      	ldr	r3, [r7, #32]
 80019e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e2:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d046      	beq.n	8001a78 <xQueueGenericReceive+0xb4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80019ea:	6a3b      	ldr	r3, [r7, #32]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80019f0:	68b9      	ldr	r1, [r7, #8]
 80019f2:	6a38      	ldr	r0, [r7, #32]
 80019f4:	f000 f928 	bl	8001c48 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d121      	bne.n	8001a42 <xQueueGenericReceive+0x7e>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	1e5a      	subs	r2, r3, #1
 8001a02:	6a3b      	ldr	r3, [r7, #32]
 8001a04:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001a06:	6a3b      	ldr	r3, [r7, #32]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d104      	bne.n	8001a18 <xQueueGenericReceive+0x54>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8001a0e:	f001 f807 	bl	8002a20 <pvTaskIncrementMutexHeldCount>
 8001a12:	4602      	mov	r2, r0
 8001a14:	6a3b      	ldr	r3, [r7, #32]
 8001a16:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001a18:	6a3b      	ldr	r3, [r7, #32]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d027      	beq.n	8001a70 <xQueueGenericReceive+0xac>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001a20:	6a3b      	ldr	r3, [r7, #32]
 8001a22:	3310      	adds	r3, #16
 8001a24:	4618      	mov	r0, r3
 8001a26:	f000 fd9f 	bl	8002568 <xTaskRemoveFromEventList>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d01f      	beq.n	8001a70 <xQueueGenericReceive+0xac>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8001a30:	4b4f      	ldr	r3, [pc, #316]	; (8001b70 <xQueueGenericReceive+0x1ac>)
 8001a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	f3bf 8f4f 	dsb	sy
 8001a3c:	f3bf 8f6f 	isb	sy
 8001a40:	e016      	b.n	8001a70 <xQueueGenericReceive+0xac>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8001a42:	6a3b      	ldr	r3, [r7, #32]
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001a48:	6a3b      	ldr	r3, [r7, #32]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d00f      	beq.n	8001a70 <xQueueGenericReceive+0xac>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001a50:	6a3b      	ldr	r3, [r7, #32]
 8001a52:	3324      	adds	r3, #36	; 0x24
 8001a54:	4618      	mov	r0, r3
 8001a56:	f000 fd87 	bl	8002568 <xTaskRemoveFromEventList>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d007      	beq.n	8001a70 <xQueueGenericReceive+0xac>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8001a60:	4b43      	ldr	r3, [pc, #268]	; (8001b70 <xQueueGenericReceive+0x1ac>)
 8001a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	f3bf 8f4f 	dsb	sy
 8001a6c:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8001a70:	f7ff fd74 	bl	800155c <vPortExitCritical>
				return pdPASS;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e077      	b.n	8001b68 <xQueueGenericReceive+0x1a4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d103      	bne.n	8001a86 <xQueueGenericReceive+0xc2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001a7e:	f7ff fd6d 	bl	800155c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001a82:	2300      	movs	r3, #0
 8001a84:	e070      	b.n	8001b68 <xQueueGenericReceive+0x1a4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d106      	bne.n	8001a9a <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001a8c:	f107 0310 	add.w	r3, r7, #16
 8001a90:	4618      	mov	r0, r3
 8001a92:	f000 fdbf 	bl	8002614 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001a96:	2301      	movs	r3, #1
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001a9a:	f7ff fd5f 	bl	800155c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001a9e:	f000 fb61 	bl	8002164 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001aa2:	f7ff fd41 	bl	8001528 <vPortEnterCritical>
 8001aa6:	6a3b      	ldr	r3, [r7, #32]
 8001aa8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001aac:	b25b      	sxtb	r3, r3
 8001aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab2:	d103      	bne.n	8001abc <xQueueGenericReceive+0xf8>
 8001ab4:	6a3b      	ldr	r3, [r7, #32]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001abc:	6a3b      	ldr	r3, [r7, #32]
 8001abe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ac2:	b25b      	sxtb	r3, r3
 8001ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac8:	d103      	bne.n	8001ad2 <xQueueGenericReceive+0x10e>
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ad2:	f7ff fd43 	bl	800155c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001ad6:	1d3a      	adds	r2, r7, #4
 8001ad8:	f107 0310 	add.w	r3, r7, #16
 8001adc:	4611      	mov	r1, r2
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 fdae 	bl	8002640 <xTaskCheckForTimeOut>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d131      	bne.n	8001b4e <xQueueGenericReceive+0x18a>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001aea:	6a38      	ldr	r0, [r7, #32]
 8001aec:	f000 f924 	bl	8001d38 <prvIsQueueEmpty>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d025      	beq.n	8001b42 <xQueueGenericReceive+0x17e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001af6:	6a3b      	ldr	r3, [r7, #32]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d108      	bne.n	8001b10 <xQueueGenericReceive+0x14c>
					{
						taskENTER_CRITICAL();
 8001afe:	f7ff fd13 	bl	8001528 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8001b02:	6a3b      	ldr	r3, [r7, #32]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 fee0 	bl	80028cc <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8001b0c:	f7ff fd26 	bl	800155c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001b10:	6a3b      	ldr	r3, [r7, #32]
 8001b12:	3324      	adds	r3, #36	; 0x24
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	4611      	mov	r1, r2
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f000 fcf1 	bl	8002500 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001b1e:	6a38      	ldr	r0, [r7, #32]
 8001b20:	f000 f8b8 	bl	8001c94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001b24:	f000 fb2c 	bl	8002180 <xTaskResumeAll>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f47f af55 	bne.w	80019da <xQueueGenericReceive+0x16>
				{
					portYIELD_WITHIN_API();
 8001b30:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <xQueueGenericReceive+0x1ac>)
 8001b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	f3bf 8f4f 	dsb	sy
 8001b3c:	f3bf 8f6f 	isb	sy
 8001b40:	e74b      	b.n	80019da <xQueueGenericReceive+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001b42:	6a38      	ldr	r0, [r7, #32]
 8001b44:	f000 f8a6 	bl	8001c94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001b48:	f000 fb1a 	bl	8002180 <xTaskResumeAll>
 8001b4c:	e745      	b.n	80019da <xQueueGenericReceive+0x16>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8001b4e:	6a38      	ldr	r0, [r7, #32]
 8001b50:	f000 f8a0 	bl	8001c94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001b54:	f000 fb14 	bl	8002180 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001b58:	6a38      	ldr	r0, [r7, #32]
 8001b5a:	f000 f8ed 	bl	8001d38 <prvIsQueueEmpty>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f43f af3a 	beq.w	80019da <xQueueGenericReceive+0x16>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001b66:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3728      	adds	r7, #40	; 0x28
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	e000ed04 	.word	0xe000ed04

08001b74 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d10d      	bne.n	8001bae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d14d      	bne.n	8001c36 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f000 fef2 	bl	8002988 <xTaskPriorityDisinherit>
 8001ba4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	e043      	b.n	8001c36 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d119      	bne.n	8001be8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6898      	ldr	r0, [r3, #8]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	68b9      	ldr	r1, [r7, #8]
 8001bc0:	f002 f96e 	bl	8003ea0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bcc:	441a      	add	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d32b      	bcc.n	8001c36 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	e026      	b.n	8001c36 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	68d8      	ldr	r0, [r3, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	68b9      	ldr	r1, [r7, #8]
 8001bf4:	f002 f954 	bl	8003ea0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	68da      	ldr	r2, [r3, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c00:	425b      	negs	r3, r3
 8001c02:	441a      	add	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	68da      	ldr	r2, [r3, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d207      	bcs.n	8001c24 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	425b      	negs	r3, r3
 8001c1e:	441a      	add	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d105      	bne.n	8001c36 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d002      	beq.n	8001c36 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1c5a      	adds	r2, r3, #1
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8001c3e:	697b      	ldr	r3, [r7, #20]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d018      	beq.n	8001c8c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	441a      	add	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68da      	ldr	r2, [r3, #12]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d303      	bcc.n	8001c7c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68d9      	ldr	r1, [r3, #12]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	461a      	mov	r2, r3
 8001c86:	6838      	ldr	r0, [r7, #0]
 8001c88:	f002 f90a 	bl	8003ea0 <memcpy>
	}
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001c9c:	f7ff fc44 	bl	8001528 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ca6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001ca8:	e011      	b.n	8001cce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d012      	beq.n	8001cd8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3324      	adds	r3, #36	; 0x24
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 fc56 	bl	8002568 <xTaskRemoveFromEventList>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001cc2:	f000 fd01 	bl	80026c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	73fb      	strb	r3, [r7, #15]
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	dce9      	bgt.n	8001caa <prvUnlockQueue+0x16>
 8001cd6:	e000      	b.n	8001cda <prvUnlockQueue+0x46>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
 8001cd8:	bf00      	nop
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	22ff      	movs	r2, #255	; 0xff
 8001cde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001ce2:	f7ff fc3b 	bl	800155c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001ce6:	f7ff fc1f 	bl	8001528 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cf0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001cf2:	e011      	b.n	8001d18 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d012      	beq.n	8001d22 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3310      	adds	r3, #16
 8001d00:	4618      	mov	r0, r3
 8001d02:	f000 fc31 	bl	8002568 <xTaskRemoveFromEventList>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001d0c:	f000 fcdc 	bl	80026c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001d10:	7bbb      	ldrb	r3, [r7, #14]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	73bb      	strb	r3, [r7, #14]
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001d18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	dce9      	bgt.n	8001cf4 <prvUnlockQueue+0x60>
 8001d20:	e000      	b.n	8001d24 <prvUnlockQueue+0x90>

				--cRxLock;
			}
			else
			{
				break;
 8001d22:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	22ff      	movs	r2, #255	; 0xff
 8001d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001d2c:	f7ff fc16 	bl	800155c <vPortExitCritical>
}
 8001d30:	bf00      	nop
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001d40:	f7ff fbf2 	bl	8001528 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d102      	bne.n	8001d52 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	e001      	b.n	8001d56 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001d56:	f7ff fc01 	bl	800155c <vPortExitCritical>

	return xReturn;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001d6c:	f7ff fbdc 	bl	8001528 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d102      	bne.n	8001d82 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	e001      	b.n	8001d86 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001d86:	f7ff fbe9 	bl	800155c <vPortExitCritical>

	return xReturn;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001da4:	f7ff fbc0 	bl	8001528 <vPortEnterCritical>
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001dae:	b25b      	sxtb	r3, r3
 8001db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db4:	d103      	bne.n	8001dbe <vQueueWaitForMessageRestricted+0x2a>
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001dc4:	b25b      	sxtb	r3, r3
 8001dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dca:	d103      	bne.n	8001dd4 <vQueueWaitForMessageRestricted+0x40>
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001dd4:	f7ff fbc2 	bl	800155c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d106      	bne.n	8001dee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	3324      	adds	r3, #36	; 0x24
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	68b9      	ldr	r1, [r7, #8]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f000 fb9f 	bl	800252c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001dee:	6978      	ldr	r0, [r7, #20]
 8001df0:	f7ff ff50 	bl	8001c94 <prvUnlockQueue>
	}
 8001df4:	bf00      	nop
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08a      	sub	sp, #40	; 0x28
 8001e00:	af04      	add	r7, sp, #16
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
 8001e08:	603b      	str	r3, [r7, #0]
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
		configASSERT( pxTaskBuffer != NULL );

		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d01e      	beq.n	8001e4e <xTaskCreateStatic+0x52>
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d01b      	beq.n	8001e4e <xTaskCreateStatic+0x52>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e18:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e1e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	2202      	movs	r2, #2
 8001e24:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001e28:	2300      	movs	r3, #0
 8001e2a:	9303      	str	r3, [sp, #12]
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	9302      	str	r3, [sp, #8]
 8001e30:	f107 0310 	add.w	r3, r7, #16
 8001e34:	9301      	str	r3, [sp, #4]
 8001e36:	6a3b      	ldr	r3, [r7, #32]
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	68b9      	ldr	r1, [r7, #8]
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f000 f851 	bl	8001ee8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001e46:	6978      	ldr	r0, [r7, #20]
 8001e48:	f000 f8c6 	bl	8001fd8 <prvAddNewTaskToReadyList>
 8001e4c:	e001      	b.n	8001e52 <xTaskCreateStatic+0x56>
		}
		else
		{
			xReturn = NULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	613b      	str	r3, [r7, #16]
		}

		return xReturn;
 8001e52:	693b      	ldr	r3, [r7, #16]
	}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08c      	sub	sp, #48	; 0x30
 8001e60:	af04      	add	r7, sp, #16
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	603b      	str	r3, [r7, #0]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e6c:	88fb      	ldrh	r3, [r7, #6]
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff f889 	bl	8000f88 <pvPortMalloc>
 8001e76:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00e      	beq.n	8001e9c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001e7e:	205c      	movs	r0, #92	; 0x5c
 8001e80:	f7ff f882 	bl	8000f88 <pvPortMalloc>
 8001e84:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	631a      	str	r2, [r3, #48]	; 0x30
 8001e92:	e005      	b.n	8001ea0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001e94:	6978      	ldr	r0, [r7, #20]
 8001e96:	f7ff f90b 	bl	80010b0 <vPortFree>
 8001e9a:	e001      	b.n	8001ea0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d017      	beq.n	8001ed6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001eae:	88fa      	ldrh	r2, [r7, #6]
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	9303      	str	r3, [sp, #12]
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	9302      	str	r3, [sp, #8]
 8001eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eba:	9301      	str	r3, [sp, #4]
 8001ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	68b9      	ldr	r1, [r7, #8]
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f000 f80f 	bl	8001ee8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001eca:	69f8      	ldr	r0, [r7, #28]
 8001ecc:	f000 f884 	bl	8001fd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	61bb      	str	r3, [r7, #24]
 8001ed4:	e002      	b.n	8001edc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eda:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001edc:	69bb      	ldr	r3, [r7, #24]
	}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3720      	adds	r7, #32
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop

08001ee8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
 8001ef4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	461a      	mov	r2, r3
 8001f00:	21a5      	movs	r1, #165	; 0xa5
 8001f02:	f001 ffd8 	bl	8003eb6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001f10:	3b01      	subs	r3, #1
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	f023 0307 	bic.w	r3, r3, #7
 8001f1e:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]
 8001f24:	e012      	b.n	8001f4c <prvInitialiseNewTask+0x64>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	7819      	ldrb	r1, [r3, #0]
 8001f2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	4413      	add	r3, r2
 8001f34:	3334      	adds	r3, #52	; 0x34
 8001f36:	460a      	mov	r2, r1
 8001f38:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	4413      	add	r3, r2
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d006      	beq.n	8001f54 <prvInitialiseNewTask+0x6c>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	2b0f      	cmp	r3, #15
 8001f50:	d9e9      	bls.n	8001f26 <prvInitialiseNewTask+0x3e>
 8001f52:	e000      	b.n	8001f56 <prvInitialiseNewTask+0x6e>
		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
		{
			break;
 8001f54:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001f5e:	6a3b      	ldr	r3, [r7, #32]
 8001f60:	2b37      	cmp	r3, #55	; 0x37
 8001f62:	d901      	bls.n	8001f68 <prvInitialiseNewTask+0x80>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001f64:	2337      	movs	r3, #55	; 0x37
 8001f66:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f6a:	6a3a      	ldr	r2, [r7, #32]
 8001f6c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f70:	6a3a      	ldr	r2, [r7, #32]
 8001f72:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8001f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f76:	2200      	movs	r2, #0
 8001f78:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff f9ac 	bl	80012dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f86:	3318      	adds	r3, #24
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff f9a7 	bl	80012dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f94:	6a3b      	ldr	r3, [r7, #32]
 8001f96:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8001f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fa2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	68f9      	ldr	r1, [r7, #12]
 8001fb6:	6938      	ldr	r0, [r7, #16]
 8001fb8:	f7ff fa26 	bl	8001408 <pxPortInitialiseStack>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d002      	beq.n	8001fce <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fcc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001fce:	bf00      	nop
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop

08001fd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001fe0:	f7ff faa2 	bl	8001528 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001fe4:	4b2d      	ldr	r3, [pc, #180]	; (800209c <prvAddNewTaskToReadyList+0xc4>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	4a2c      	ldr	r2, [pc, #176]	; (800209c <prvAddNewTaskToReadyList+0xc4>)
 8001fec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001fee:	4b2c      	ldr	r3, [pc, #176]	; (80020a0 <prvAddNewTaskToReadyList+0xc8>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d109      	bne.n	800200a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001ff6:	4a2a      	ldr	r2, [pc, #168]	; (80020a0 <prvAddNewTaskToReadyList+0xc8>)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001ffc:	4b27      	ldr	r3, [pc, #156]	; (800209c <prvAddNewTaskToReadyList+0xc4>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d110      	bne.n	8002026 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002004:	f000 fb84 	bl	8002710 <prvInitialiseTaskLists>
 8002008:	e00d      	b.n	8002026 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800200a:	4b26      	ldr	r3, [pc, #152]	; (80020a4 <prvAddNewTaskToReadyList+0xcc>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d109      	bne.n	8002026 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002012:	4b23      	ldr	r3, [pc, #140]	; (80020a0 <prvAddNewTaskToReadyList+0xc8>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201c:	429a      	cmp	r2, r3
 800201e:	d802      	bhi.n	8002026 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002020:	4a1f      	ldr	r2, [pc, #124]	; (80020a0 <prvAddNewTaskToReadyList+0xc8>)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002026:	4b20      	ldr	r3, [pc, #128]	; (80020a8 <prvAddNewTaskToReadyList+0xd0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	3301      	adds	r3, #1
 800202c:	4a1e      	ldr	r2, [pc, #120]	; (80020a8 <prvAddNewTaskToReadyList+0xd0>)
 800202e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002030:	4b1d      	ldr	r3, [pc, #116]	; (80020a8 <prvAddNewTaskToReadyList+0xd0>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800203c:	4b1b      	ldr	r3, [pc, #108]	; (80020ac <prvAddNewTaskToReadyList+0xd4>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d903      	bls.n	800204c <prvAddNewTaskToReadyList+0x74>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002048:	4a18      	ldr	r2, [pc, #96]	; (80020ac <prvAddNewTaskToReadyList+0xd4>)
 800204a:	6013      	str	r3, [r2, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4a15      	ldr	r2, [pc, #84]	; (80020b0 <prvAddNewTaskToReadyList+0xd8>)
 800205a:	441a      	add	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3304      	adds	r3, #4
 8002060:	4619      	mov	r1, r3
 8002062:	4610      	mov	r0, r2
 8002064:	f7ff f948 	bl	80012f8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002068:	f7ff fa78 	bl	800155c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800206c:	4b0d      	ldr	r3, [pc, #52]	; (80020a4 <prvAddNewTaskToReadyList+0xcc>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00e      	beq.n	8002092 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002074:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <prvAddNewTaskToReadyList+0xc8>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207e:	429a      	cmp	r2, r3
 8002080:	d207      	bcs.n	8002092 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002082:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <prvAddNewTaskToReadyList+0xdc>)
 8002084:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	f3bf 8f4f 	dsb	sy
 800208e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	200029c0 	.word	0x200029c0
 80020a0:	200024ec 	.word	0x200024ec
 80020a4:	200029cc 	.word	0x200029cc
 80020a8:	200029dc 	.word	0x200029dc
 80020ac:	200029c8 	.word	0x200029c8
 80020b0:	200024f0 	.word	0x200024f0
 80020b4:	e000ed04 	.word	0xe000ed04

080020b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08a      	sub	sp, #40	; 0x28
 80020bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80020c6:	1d3a      	adds	r2, r7, #4
 80020c8:	f107 0108 	add.w	r1, r7, #8
 80020cc:	f107 030c 	add.w	r3, r7, #12
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe f901 	bl	80002d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	9202      	str	r2, [sp, #8]
 80020de:	9301      	str	r3, [sp, #4]
 80020e0:	2300      	movs	r3, #0
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	2300      	movs	r3, #0
 80020e6:	460a      	mov	r2, r1
 80020e8:	4918      	ldr	r1, [pc, #96]	; (800214c <vTaskStartScheduler+0x94>)
 80020ea:	4819      	ldr	r0, [pc, #100]	; (8002150 <vTaskStartScheduler+0x98>)
 80020ec:	f7ff fe86 	bl	8001dfc <xTaskCreateStatic>
 80020f0:	4602      	mov	r2, r0
 80020f2:	4b18      	ldr	r3, [pc, #96]	; (8002154 <vTaskStartScheduler+0x9c>)
 80020f4:	601a      	str	r2, [r3, #0]
												( void * ) NULL,
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80020f6:	4b17      	ldr	r3, [pc, #92]	; (8002154 <vTaskStartScheduler+0x9c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d002      	beq.n	8002104 <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
 80020fe:	2301      	movs	r3, #1
 8002100:	617b      	str	r3, [r7, #20]
 8002102:	e001      	b.n	8002108 <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d102      	bne.n	8002114 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 800210e:	f000 fcef 	bl	8002af0 <xTimerCreateTimerTask>
 8002112:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d114      	bne.n	8002144 <vTaskStartScheduler+0x8c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800211a:	f04f 0310 	mov.w	r3, #16
 800211e:	f383 8811 	msr	BASEPRI, r3
 8002122:	f3bf 8f6f 	isb	sy
 8002126:	f3bf 8f4f 	dsb	sy
 800212a:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800212c:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <vTaskStartScheduler+0xa0>)
 800212e:	f04f 32ff 	mov.w	r2, #4294967295
 8002132:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002134:	4b09      	ldr	r3, [pc, #36]	; (800215c <vTaskStartScheduler+0xa4>)
 8002136:	2201      	movs	r2, #1
 8002138:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800213a:	4b09      	ldr	r3, [pc, #36]	; (8002160 <vTaskStartScheduler+0xa8>)
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002140:	f7ff f9ca 	bl	80014d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002144:	bf00      	nop
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	08005124 	.word	0x08005124
 8002150:	080026e1 	.word	0x080026e1
 8002154:	200029e4 	.word	0x200029e4
 8002158:	200029e0 	.word	0x200029e0
 800215c:	200029cc 	.word	0x200029cc
 8002160:	200029c4 	.word	0x200029c4

08002164 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002168:	4b04      	ldr	r3, [pc, #16]	; (800217c <vTaskSuspendAll+0x18>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	3301      	adds	r3, #1
 800216e:	4a03      	ldr	r2, [pc, #12]	; (800217c <vTaskSuspendAll+0x18>)
 8002170:	6013      	str	r3, [r2, #0]
}
 8002172:	bf00      	nop
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	200029e8 	.word	0x200029e8

08002180 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800218a:	2300      	movs	r3, #0
 800218c:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800218e:	f7ff f9cb 	bl	8001528 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002192:	4b39      	ldr	r3, [pc, #228]	; (8002278 <xTaskResumeAll+0xf8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	3b01      	subs	r3, #1
 8002198:	4a37      	ldr	r2, [pc, #220]	; (8002278 <xTaskResumeAll+0xf8>)
 800219a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800219c:	4b36      	ldr	r3, [pc, #216]	; (8002278 <xTaskResumeAll+0xf8>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d162      	bne.n	800226a <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80021a4:	4b35      	ldr	r3, [pc, #212]	; (800227c <xTaskResumeAll+0xfc>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d05e      	beq.n	800226a <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80021ac:	e02f      	b.n	800220e <xTaskResumeAll+0x8e>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80021ae:	4b34      	ldr	r3, [pc, #208]	; (8002280 <xTaskResumeAll+0x100>)
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	3318      	adds	r3, #24
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff f8fa 	bl	80013b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	3304      	adds	r3, #4
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff f8f5 	bl	80013b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ce:	4b2d      	ldr	r3, [pc, #180]	; (8002284 <xTaskResumeAll+0x104>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d903      	bls.n	80021de <xTaskResumeAll+0x5e>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021da:	4a2a      	ldr	r2, [pc, #168]	; (8002284 <xTaskResumeAll+0x104>)
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4a27      	ldr	r2, [pc, #156]	; (8002288 <xTaskResumeAll+0x108>)
 80021ec:	441a      	add	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	3304      	adds	r3, #4
 80021f2:	4619      	mov	r1, r3
 80021f4:	4610      	mov	r0, r2
 80021f6:	f7ff f87f 	bl	80012f8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021fe:	4b23      	ldr	r3, [pc, #140]	; (800228c <xTaskResumeAll+0x10c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002204:	429a      	cmp	r2, r3
 8002206:	d302      	bcc.n	800220e <xTaskResumeAll+0x8e>
					{
						xYieldPending = pdTRUE;
 8002208:	4b21      	ldr	r3, [pc, #132]	; (8002290 <xTaskResumeAll+0x110>)
 800220a:	2201      	movs	r2, #1
 800220c:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800220e:	4b1c      	ldr	r3, [pc, #112]	; (8002280 <xTaskResumeAll+0x100>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1cb      	bne.n	80021ae <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <xTaskResumeAll+0xa0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800221c:	f000 fb12 	bl	8002844 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002220:	4b1c      	ldr	r3, [pc, #112]	; (8002294 <xTaskResumeAll+0x114>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d010      	beq.n	800224e <xTaskResumeAll+0xce>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800222c:	f000 f846 	bl	80022bc <xTaskIncrementTick>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d002      	beq.n	800223c <xTaskResumeAll+0xbc>
							{
								xYieldPending = pdTRUE;
 8002236:	4b16      	ldr	r3, [pc, #88]	; (8002290 <xTaskResumeAll+0x110>)
 8002238:	2201      	movs	r2, #1
 800223a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3b01      	subs	r3, #1
 8002240:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1f1      	bne.n	800222c <xTaskResumeAll+0xac>

						uxPendedTicks = 0;
 8002248:	4b12      	ldr	r3, [pc, #72]	; (8002294 <xTaskResumeAll+0x114>)
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800224e:	4b10      	ldr	r3, [pc, #64]	; (8002290 <xTaskResumeAll+0x110>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d009      	beq.n	800226a <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002256:	2301      	movs	r3, #1
 8002258:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800225a:	4b0f      	ldr	r3, [pc, #60]	; (8002298 <xTaskResumeAll+0x118>)
 800225c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	f3bf 8f4f 	dsb	sy
 8002266:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800226a:	f7ff f977 	bl	800155c <vPortExitCritical>

	return xAlreadyYielded;
 800226e:	68bb      	ldr	r3, [r7, #8]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	200029e8 	.word	0x200029e8
 800227c:	200029c0 	.word	0x200029c0
 8002280:	20002980 	.word	0x20002980
 8002284:	200029c8 	.word	0x200029c8
 8002288:	200024f0 	.word	0x200024f0
 800228c:	200024ec 	.word	0x200024ec
 8002290:	200029d4 	.word	0x200029d4
 8002294:	200029d0 	.word	0x200029d0
 8002298:	e000ed04 	.word	0xe000ed04

0800229c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80022a2:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <xTaskGetTickCount+0x1c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80022a8:	687b      	ldr	r3, [r7, #4]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	200029c4 	.word	0x200029c4

080022bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022c6:	4b49      	ldr	r3, [pc, #292]	; (80023ec <xTaskIncrementTick+0x130>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d17d      	bne.n	80023ca <xTaskIncrementTick+0x10e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80022ce:	4b48      	ldr	r3, [pc, #288]	; (80023f0 <xTaskIncrementTick+0x134>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	3301      	adds	r3, #1
 80022d4:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80022d6:	4a46      	ldr	r2, [pc, #280]	; (80023f0 <xTaskIncrementTick+0x134>)
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d110      	bne.n	8002304 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 80022e2:	4b44      	ldr	r3, [pc, #272]	; (80023f4 <xTaskIncrementTick+0x138>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	4b43      	ldr	r3, [pc, #268]	; (80023f8 <xTaskIncrementTick+0x13c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a41      	ldr	r2, [pc, #260]	; (80023f4 <xTaskIncrementTick+0x138>)
 80022ee:	6013      	str	r3, [r2, #0]
 80022f0:	4a41      	ldr	r2, [pc, #260]	; (80023f8 <xTaskIncrementTick+0x13c>)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	4b41      	ldr	r3, [pc, #260]	; (80023fc <xTaskIncrementTick+0x140>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	3301      	adds	r3, #1
 80022fc:	4a3f      	ldr	r2, [pc, #252]	; (80023fc <xTaskIncrementTick+0x140>)
 80022fe:	6013      	str	r3, [r2, #0]
 8002300:	f000 faa0 	bl	8002844 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002304:	4b3e      	ldr	r3, [pc, #248]	; (8002400 <xTaskIncrementTick+0x144>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	429a      	cmp	r2, r3
 800230c:	d34e      	bcc.n	80023ac <xTaskIncrementTick+0xf0>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800230e:	4b39      	ldr	r3, [pc, #228]	; (80023f4 <xTaskIncrementTick+0x138>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <xTaskIncrementTick+0x60>
 8002318:	2301      	movs	r3, #1
 800231a:	e000      	b.n	800231e <xTaskIncrementTick+0x62>
 800231c:	2300      	movs	r3, #0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d004      	beq.n	800232c <xTaskIncrementTick+0x70>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002322:	4b37      	ldr	r3, [pc, #220]	; (8002400 <xTaskIncrementTick+0x144>)
 8002324:	f04f 32ff 	mov.w	r2, #4294967295
 8002328:	601a      	str	r2, [r3, #0]
					break;
 800232a:	e03f      	b.n	80023ac <xTaskIncrementTick+0xf0>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800232c:	4b31      	ldr	r3, [pc, #196]	; (80023f4 <xTaskIncrementTick+0x138>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	429a      	cmp	r2, r3
 8002342:	d203      	bcs.n	800234c <xTaskIncrementTick+0x90>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002344:	4a2e      	ldr	r2, [pc, #184]	; (8002400 <xTaskIncrementTick+0x144>)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6013      	str	r3, [r2, #0]
						break;
 800234a:	e02f      	b.n	80023ac <xTaskIncrementTick+0xf0>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	3304      	adds	r3, #4
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff f82f 	bl	80013b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235a:	2b00      	cmp	r3, #0
 800235c:	d004      	beq.n	8002368 <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	3318      	adds	r3, #24
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff f826 	bl	80013b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800236c:	4b25      	ldr	r3, [pc, #148]	; (8002404 <xTaskIncrementTick+0x148>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	429a      	cmp	r2, r3
 8002372:	d903      	bls.n	800237c <xTaskIncrementTick+0xc0>
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002378:	4a22      	ldr	r2, [pc, #136]	; (8002404 <xTaskIncrementTick+0x148>)
 800237a:	6013      	str	r3, [r2, #0]
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002380:	4613      	mov	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4a1f      	ldr	r2, [pc, #124]	; (8002408 <xTaskIncrementTick+0x14c>)
 800238a:	441a      	add	r2, r3
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	3304      	adds	r3, #4
 8002390:	4619      	mov	r1, r3
 8002392:	4610      	mov	r0, r2
 8002394:	f7fe ffb0 	bl	80012f8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800239c:	4b1b      	ldr	r3, [pc, #108]	; (800240c <xTaskIncrementTick+0x150>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d3b3      	bcc.n	800230e <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 80023a6:	2301      	movs	r3, #1
 80023a8:	617b      	str	r3, [r7, #20]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
 80023aa:	e7b0      	b.n	800230e <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80023ac:	4b17      	ldr	r3, [pc, #92]	; (800240c <xTaskIncrementTick+0x150>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b2:	4915      	ldr	r1, [pc, #84]	; (8002408 <xTaskIncrementTick+0x14c>)
 80023b4:	4613      	mov	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d907      	bls.n	80023d4 <xTaskIncrementTick+0x118>
			{
				xSwitchRequired = pdTRUE;
 80023c4:	2301      	movs	r3, #1
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	e004      	b.n	80023d4 <xTaskIncrementTick+0x118>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80023ca:	4b11      	ldr	r3, [pc, #68]	; (8002410 <xTaskIncrementTick+0x154>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	3301      	adds	r3, #1
 80023d0:	4a0f      	ldr	r2, [pc, #60]	; (8002410 <xTaskIncrementTick+0x154>)
 80023d2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80023d4:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <xTaskIncrementTick+0x158>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <xTaskIncrementTick+0x124>
		{
			xSwitchRequired = pdTRUE;
 80023dc:	2301      	movs	r3, #1
 80023de:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80023e0:	697b      	ldr	r3, [r7, #20]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	200029e8 	.word	0x200029e8
 80023f0:	200029c4 	.word	0x200029c4
 80023f4:	20002978 	.word	0x20002978
 80023f8:	2000297c 	.word	0x2000297c
 80023fc:	200029d8 	.word	0x200029d8
 8002400:	200029e0 	.word	0x200029e0
 8002404:	200029c8 	.word	0x200029c8
 8002408:	200024f0 	.word	0x200024f0
 800240c:	200024ec 	.word	0x200024ec
 8002410:	200029d0 	.word	0x200029d0
 8002414:	200029d4 	.word	0x200029d4

08002418 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800241e:	4b33      	ldr	r3, [pc, #204]	; (80024ec <vTaskSwitchContext+0xd4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002426:	4b32      	ldr	r3, [pc, #200]	; (80024f0 <vTaskSwitchContext+0xd8>)
 8002428:	2201      	movs	r2, #1
 800242a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800242c:	e05a      	b.n	80024e4 <vTaskSwitchContext+0xcc>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 800242e:	4b30      	ldr	r3, [pc, #192]	; (80024f0 <vTaskSwitchContext+0xd8>)
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
 8002434:	4b2f      	ldr	r3, [pc, #188]	; (80024f4 <vTaskSwitchContext+0xdc>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	60bb      	str	r3, [r7, #8]
 800243c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8002440:	607b      	str	r3, [r7, #4]
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	429a      	cmp	r2, r3
 800244a:	d111      	bne.n	8002470 <vTaskSwitchContext+0x58>
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	3304      	adds	r3, #4
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	429a      	cmp	r2, r3
 8002456:	d10b      	bne.n	8002470 <vTaskSwitchContext+0x58>
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	3308      	adds	r3, #8
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	429a      	cmp	r2, r3
 8002462:	d105      	bne.n	8002470 <vTaskSwitchContext+0x58>
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	330c      	adds	r3, #12
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	429a      	cmp	r2, r3
 800246e:	d008      	beq.n	8002482 <vTaskSwitchContext+0x6a>
 8002470:	4b20      	ldr	r3, [pc, #128]	; (80024f4 <vTaskSwitchContext+0xdc>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	4b1f      	ldr	r3, [pc, #124]	; (80024f4 <vTaskSwitchContext+0xdc>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	3334      	adds	r3, #52	; 0x34
 800247a:	4619      	mov	r1, r3
 800247c:	4610      	mov	r0, r2
 800247e:	f7fd ff1f 	bl	80002c0 <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002482:	4b1d      	ldr	r3, [pc, #116]	; (80024f8 <vTaskSwitchContext+0xe0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	e002      	b.n	8002490 <vTaskSwitchContext+0x78>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	3b01      	subs	r3, #1
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	491a      	ldr	r1, [pc, #104]	; (80024fc <vTaskSwitchContext+0xe4>)
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	4613      	mov	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0f2      	beq.n	800248a <vTaskSwitchContext+0x72>
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4a13      	ldr	r2, [pc, #76]	; (80024fc <vTaskSwitchContext+0xe4>)
 80024b0:	4413      	add	r3, r2
 80024b2:	603b      	str	r3, [r7, #0]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	3308      	adds	r3, #8
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d104      	bne.n	80024d4 <vTaskSwitchContext+0xbc>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	605a      	str	r2, [r3, #4]
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	4a06      	ldr	r2, [pc, #24]	; (80024f4 <vTaskSwitchContext+0xdc>)
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	4a06      	ldr	r2, [pc, #24]	; (80024f8 <vTaskSwitchContext+0xe0>)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6013      	str	r3, [r2, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80024e4:	bf00      	nop
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	200029e8 	.word	0x200029e8
 80024f0:	200029d4 	.word	0x200029d4
 80024f4:	200024ec 	.word	0x200024ec
 80024f8:	200029c8 	.word	0x200029c8
 80024fc:	200024f0 	.word	0x200024f0

08002500 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800250a:	4b07      	ldr	r3, [pc, #28]	; (8002528 <vTaskPlaceOnEventList+0x28>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	3318      	adds	r3, #24
 8002510:	4619      	mov	r1, r3
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7fe ff14 	bl	8001340 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002518:	2101      	movs	r1, #1
 800251a:	6838      	ldr	r0, [r7, #0]
 800251c:	f000 fa94 	bl	8002a48 <prvAddCurrentTaskToDelayedList>
}
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	200024ec 	.word	0x200024ec

0800252c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002538:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <vTaskPlaceOnEventListRestricted+0x38>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	3318      	adds	r3, #24
 800253e:	4619      	mov	r1, r3
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f7fe fed9 	bl	80012f8 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d002      	beq.n	8002552 <vTaskPlaceOnEventListRestricted+0x26>
		{
			xTicksToWait = portMAX_DELAY;
 800254c:	f04f 33ff 	mov.w	r3, #4294967295
 8002550:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	68b8      	ldr	r0, [r7, #8]
 8002556:	f000 fa77 	bl	8002a48 <prvAddCurrentTaskToDelayedList>
	}
 800255a:	bf00      	nop
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	200024ec 	.word	0x200024ec

08002568 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	3318      	adds	r3, #24
 800257c:	4618      	mov	r0, r3
 800257e:	f7fe ff19 	bl	80013b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002582:	4b1e      	ldr	r3, [pc, #120]	; (80025fc <xTaskRemoveFromEventList+0x94>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d11d      	bne.n	80025c6 <xTaskRemoveFromEventList+0x5e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	3304      	adds	r3, #4
 800258e:	4618      	mov	r0, r3
 8002590:	f7fe ff10 	bl	80013b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002598:	4b19      	ldr	r3, [pc, #100]	; (8002600 <xTaskRemoveFromEventList+0x98>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d903      	bls.n	80025a8 <xTaskRemoveFromEventList+0x40>
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a4:	4a16      	ldr	r2, [pc, #88]	; (8002600 <xTaskRemoveFromEventList+0x98>)
 80025a6:	6013      	str	r3, [r2, #0]
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ac:	4613      	mov	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4a13      	ldr	r2, [pc, #76]	; (8002604 <xTaskRemoveFromEventList+0x9c>)
 80025b6:	441a      	add	r2, r3
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	3304      	adds	r3, #4
 80025bc:	4619      	mov	r1, r3
 80025be:	4610      	mov	r0, r2
 80025c0:	f7fe fe9a 	bl	80012f8 <vListInsertEnd>
 80025c4:	e005      	b.n	80025d2 <xTaskRemoveFromEventList+0x6a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	3318      	adds	r3, #24
 80025ca:	4619      	mov	r1, r3
 80025cc:	480e      	ldr	r0, [pc, #56]	; (8002608 <xTaskRemoveFromEventList+0xa0>)
 80025ce:	f7fe fe93 	bl	80012f8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025d6:	4b0d      	ldr	r3, [pc, #52]	; (800260c <xTaskRemoveFromEventList+0xa4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025dc:	429a      	cmp	r2, r3
 80025de:	d905      	bls.n	80025ec <xTaskRemoveFromEventList+0x84>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80025e0:	2301      	movs	r3, #1
 80025e2:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80025e4:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <xTaskRemoveFromEventList+0xa8>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	e001      	b.n	80025f0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		xReturn = pdFALSE;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80025f0:	68fb      	ldr	r3, [r7, #12]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	200029e8 	.word	0x200029e8
 8002600:	200029c8 	.word	0x200029c8
 8002604:	200024f0 	.word	0x200024f0
 8002608:	20002980 	.word	0x20002980
 800260c:	200024ec 	.word	0x200024ec
 8002610:	200029d4 	.word	0x200029d4

08002614 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800261c:	4b06      	ldr	r3, [pc, #24]	; (8002638 <vTaskSetTimeOutState+0x24>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002624:	4b05      	ldr	r3, [pc, #20]	; (800263c <vTaskSetTimeOutState+0x28>)
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	605a      	str	r2, [r3, #4]
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	200029d8 	.word	0x200029d8
 800263c:	200029c4 	.word	0x200029c4

08002640 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 800264a:	f7fe ff6d 	bl	8001528 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800264e:	4b1c      	ldr	r3, [pc, #112]	; (80026c0 <xTaskCheckForTimeOut+0x80>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265c:	d102      	bne.n	8002664 <xTaskCheckForTimeOut+0x24>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800265e:	2300      	movs	r3, #0
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	e026      	b.n	80026b2 <xTaskCheckForTimeOut+0x72>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	4b16      	ldr	r3, [pc, #88]	; (80026c4 <xTaskCheckForTimeOut+0x84>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	429a      	cmp	r2, r3
 800266e:	d007      	beq.n	8002680 <xTaskCheckForTimeOut+0x40>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	429a      	cmp	r2, r3
 8002678:	d802      	bhi.n	8002680 <xTaskCheckForTimeOut+0x40>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800267a:	2301      	movs	r3, #1
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	e018      	b.n	80026b2 <xTaskCheckForTimeOut+0x72>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	1ad2      	subs	r2, r2, r3
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	429a      	cmp	r2, r3
 800268e:	d20e      	bcs.n	80026ae <xTaskCheckForTimeOut+0x6e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6859      	ldr	r1, [r3, #4]
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	1acb      	subs	r3, r1, r3
 800269c:	441a      	add	r2, r3
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff ffb6 	bl	8002614 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80026a8:	2300      	movs	r3, #0
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	e001      	b.n	80026b2 <xTaskCheckForTimeOut+0x72>
		}
		else
		{
			xReturn = pdTRUE;
 80026ae:	2301      	movs	r3, #1
 80026b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80026b2:	f7fe ff53 	bl	800155c <vPortExitCritical>

	return xReturn;
 80026b6:	68fb      	ldr	r3, [r7, #12]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	200029c4 	.word	0x200029c4
 80026c4:	200029d8 	.word	0x200029d8

080026c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80026cc:	4b03      	ldr	r3, [pc, #12]	; (80026dc <vTaskMissedYield+0x14>)
 80026ce:	2201      	movs	r2, #1
 80026d0:	601a      	str	r2, [r3, #0]
}
 80026d2:	bf00      	nop
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	200029d4 	.word	0x200029d4

080026e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80026e8:	f000 f852 	bl	8002790 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80026ec:	4b06      	ldr	r3, [pc, #24]	; (8002708 <prvIdleTask+0x28>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d9f9      	bls.n	80026e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80026f4:	4b05      	ldr	r3, [pc, #20]	; (800270c <prvIdleTask+0x2c>)
 80026f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	f3bf 8f4f 	dsb	sy
 8002700:	f3bf 8f6f 	isb	sy
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8002704:	e7f0      	b.n	80026e8 <prvIdleTask+0x8>
 8002706:	bf00      	nop
 8002708:	200024f0 	.word	0x200024f0
 800270c:	e000ed04 	.word	0xe000ed04

08002710 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002716:	2300      	movs	r3, #0
 8002718:	607b      	str	r3, [r7, #4]
 800271a:	e00c      	b.n	8002736 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	4613      	mov	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4a12      	ldr	r2, [pc, #72]	; (8002770 <prvInitialiseTaskLists+0x60>)
 8002728:	4413      	add	r3, r2
 800272a:	4618      	mov	r0, r3
 800272c:	f7fe fdb6 	bl	800129c <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3301      	adds	r3, #1
 8002734:	607b      	str	r3, [r7, #4]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b37      	cmp	r3, #55	; 0x37
 800273a:	d9ef      	bls.n	800271c <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 800273c:	480d      	ldr	r0, [pc, #52]	; (8002774 <prvInitialiseTaskLists+0x64>)
 800273e:	f7fe fdad 	bl	800129c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002742:	480d      	ldr	r0, [pc, #52]	; (8002778 <prvInitialiseTaskLists+0x68>)
 8002744:	f7fe fdaa 	bl	800129c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002748:	480c      	ldr	r0, [pc, #48]	; (800277c <prvInitialiseTaskLists+0x6c>)
 800274a:	f7fe fda7 	bl	800129c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800274e:	480c      	ldr	r0, [pc, #48]	; (8002780 <prvInitialiseTaskLists+0x70>)
 8002750:	f7fe fda4 	bl	800129c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002754:	480b      	ldr	r0, [pc, #44]	; (8002784 <prvInitialiseTaskLists+0x74>)
 8002756:	f7fe fda1 	bl	800129c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800275a:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <prvInitialiseTaskLists+0x78>)
 800275c:	4a05      	ldr	r2, [pc, #20]	; (8002774 <prvInitialiseTaskLists+0x64>)
 800275e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002760:	4b0a      	ldr	r3, [pc, #40]	; (800278c <prvInitialiseTaskLists+0x7c>)
 8002762:	4a05      	ldr	r2, [pc, #20]	; (8002778 <prvInitialiseTaskLists+0x68>)
 8002764:	601a      	str	r2, [r3, #0]
}
 8002766:	bf00      	nop
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	200024f0 	.word	0x200024f0
 8002774:	20002950 	.word	0x20002950
 8002778:	20002964 	.word	0x20002964
 800277c:	20002980 	.word	0x20002980
 8002780:	20002994 	.word	0x20002994
 8002784:	200029ac 	.word	0x200029ac
 8002788:	20002978 	.word	0x20002978
 800278c:	2000297c 	.word	0x2000297c

08002790 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002796:	e028      	b.n	80027ea <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8002798:	f7ff fce4 	bl	8002164 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800279c:	4b17      	ldr	r3, [pc, #92]	; (80027fc <prvCheckTasksWaitingTermination+0x6c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	bf0c      	ite	eq
 80027a4:	2301      	moveq	r3, #1
 80027a6:	2300      	movne	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 80027ac:	f7ff fce8 	bl	8002180 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d119      	bne.n	80027ea <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 80027b6:	f7fe feb7 	bl	8001528 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80027ba:	4b10      	ldr	r3, [pc, #64]	; (80027fc <prvCheckTasksWaitingTermination+0x6c>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	3304      	adds	r3, #4
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fe fdf4 	bl	80013b4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80027cc:	4b0c      	ldr	r3, [pc, #48]	; (8002800 <prvCheckTasksWaitingTermination+0x70>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	3b01      	subs	r3, #1
 80027d2:	4a0b      	ldr	r2, [pc, #44]	; (8002800 <prvCheckTasksWaitingTermination+0x70>)
 80027d4:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80027d6:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <prvCheckTasksWaitingTermination+0x74>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	3b01      	subs	r3, #1
 80027dc:	4a09      	ldr	r2, [pc, #36]	; (8002804 <prvCheckTasksWaitingTermination+0x74>)
 80027de:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 80027e0:	f7fe febc 	bl	800155c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 80027e4:	6838      	ldr	r0, [r7, #0]
 80027e6:	f000 f80f 	bl	8002808 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80027ea:	4b06      	ldr	r3, [pc, #24]	; (8002804 <prvCheckTasksWaitingTermination+0x74>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1d2      	bne.n	8002798 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20002994 	.word	0x20002994
 8002800:	200029c0 	.word	0x200029c0
 8002804:	200029a8 	.word	0x200029a8

08002808 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002816:	2b00      	cmp	r3, #0
 8002818:	d108      	bne.n	800282c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	4618      	mov	r0, r3
 8002820:	f7fe fc46 	bl	80010b0 <vPortFree>
				vPortFree( pxTCB );
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f7fe fc43 	bl	80010b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800282a:	e007      	b.n	800283c <prvDeleteTCB+0x34>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002832:	2b01      	cmp	r3, #1
 8002834:	d102      	bne.n	800283c <prvDeleteTCB+0x34>
			{
				/* Only the stack was statically allocated, so the TCB is the
				only memory that must be freed. */
				vPortFree( pxTCB );
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7fe fc3a 	bl	80010b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800283c:	bf00      	nop
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800284a:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <prvResetNextTaskUnblockTime+0x44>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <prvResetNextTaskUnblockTime+0x14>
 8002854:	2301      	movs	r3, #1
 8002856:	e000      	b.n	800285a <prvResetNextTaskUnblockTime+0x16>
 8002858:	2300      	movs	r3, #0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d004      	beq.n	8002868 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800285e:	4b0b      	ldr	r3, [pc, #44]	; (800288c <prvResetNextTaskUnblockTime+0x48>)
 8002860:	f04f 32ff 	mov.w	r2, #4294967295
 8002864:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002866:	e008      	b.n	800287a <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002868:	4b07      	ldr	r3, [pc, #28]	; (8002888 <prvResetNextTaskUnblockTime+0x44>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	4a05      	ldr	r2, [pc, #20]	; (800288c <prvResetNextTaskUnblockTime+0x48>)
 8002878:	6013      	str	r3, [r2, #0]
	}
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	20002978 	.word	0x20002978
 800288c:	200029e0 	.word	0x200029e0

08002890 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002896:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <xTaskGetSchedulerState+0x34>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d102      	bne.n	80028a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800289e:	2301      	movs	r3, #1
 80028a0:	607b      	str	r3, [r7, #4]
 80028a2:	e008      	b.n	80028b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028a4:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <xTaskGetSchedulerState+0x38>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d102      	bne.n	80028b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80028ac:	2302      	movs	r3, #2
 80028ae:	607b      	str	r3, [r7, #4]
 80028b0:	e001      	b.n	80028b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80028b2:	2300      	movs	r3, #0
 80028b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80028b6:	687b      	ldr	r3, [r7, #4]
	}
 80028b8:	4618      	mov	r0, r3
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	200029cc 	.word	0x200029cc
 80028c8:	200029e8 	.word	0x200029e8

080028cc <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d04a      	beq.n	8002974 <vTaskPriorityInherit+0xa8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e2:	4b26      	ldr	r3, [pc, #152]	; (800297c <vTaskPriorityInherit+0xb0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d243      	bcs.n	8002974 <vTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	db06      	blt.n	8002902 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028f4:	4b21      	ldr	r3, [pc, #132]	; (800297c <vTaskPriorityInherit+0xb0>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6959      	ldr	r1, [r3, #20]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800290a:	4613      	mov	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4a1b      	ldr	r2, [pc, #108]	; (8002980 <vTaskPriorityInherit+0xb4>)
 8002914:	4413      	add	r3, r2
 8002916:	4299      	cmp	r1, r3
 8002918:	d101      	bne.n	800291e <vTaskPriorityInherit+0x52>
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <vTaskPriorityInherit+0x54>
 800291e:	2300      	movs	r3, #0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d022      	beq.n	800296a <vTaskPriorityInherit+0x9e>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	3304      	adds	r3, #4
 8002928:	4618      	mov	r0, r3
 800292a:	f7fe fd43 	bl	80013b4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800292e:	4b13      	ldr	r3, [pc, #76]	; (800297c <vTaskPriorityInherit+0xb0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800293c:	4b11      	ldr	r3, [pc, #68]	; (8002984 <vTaskPriorityInherit+0xb8>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d903      	bls.n	800294c <vTaskPriorityInherit+0x80>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002948:	4a0e      	ldr	r2, [pc, #56]	; (8002984 <vTaskPriorityInherit+0xb8>)
 800294a:	6013      	str	r3, [r2, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002950:	4613      	mov	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4a09      	ldr	r2, [pc, #36]	; (8002980 <vTaskPriorityInherit+0xb4>)
 800295a:	441a      	add	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	3304      	adds	r3, #4
 8002960:	4619      	mov	r1, r3
 8002962:	4610      	mov	r0, r2
 8002964:	f7fe fcc8 	bl	80012f8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002968:	e004      	b.n	8002974 <vTaskPriorityInherit+0xa8>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800296a:	4b04      	ldr	r3, [pc, #16]	; (800297c <vTaskPriorityInherit+0xb0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002974:	bf00      	nop
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	200024ec 	.word	0x200024ec
 8002980:	200024f0 	.word	0x200024f0
 8002984:	200029c8 	.word	0x200029c8

08002988 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8002994:	2300      	movs	r3, #0
 8002996:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d037      	beq.n	8002a0e <xTaskPriorityDisinherit+0x86>
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029a2:	1e5a      	subs	r2, r3, #1
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d02c      	beq.n	8002a0e <xTaskPriorityDisinherit+0x86>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d128      	bne.n	8002a0e <xTaskPriorityDisinherit+0x86>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	3304      	adds	r3, #4
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fe fcf7 	bl	80013b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029de:	4b0e      	ldr	r3, [pc, #56]	; (8002a18 <xTaskPriorityDisinherit+0x90>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d903      	bls.n	80029ee <xTaskPriorityDisinherit+0x66>
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ea:	4a0b      	ldr	r2, [pc, #44]	; (8002a18 <xTaskPriorityDisinherit+0x90>)
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f2:	4613      	mov	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4a08      	ldr	r2, [pc, #32]	; (8002a1c <xTaskPriorityDisinherit+0x94>)
 80029fc:	441a      	add	r2, r3
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	3304      	adds	r3, #4
 8002a02:	4619      	mov	r1, r3
 8002a04:	4610      	mov	r0, r2
 8002a06:	f7fe fc77 	bl	80012f8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
	}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	200029c8 	.word	0x200029c8
 8002a1c:	200024f0 	.word	0x200024f0

08002a20 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8002a24:	4b07      	ldr	r3, [pc, #28]	; (8002a44 <pvTaskIncrementMutexHeldCount+0x24>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d004      	beq.n	8002a36 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8002a2c:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <pvTaskIncrementMutexHeldCount+0x24>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a32:	3201      	adds	r2, #1
 8002a34:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8002a36:	4b03      	ldr	r3, [pc, #12]	; (8002a44 <pvTaskIncrementMutexHeldCount+0x24>)
 8002a38:	681b      	ldr	r3, [r3, #0]
	}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	200024ec 	.word	0x200024ec

08002a48 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002a52:	4b21      	ldr	r3, [pc, #132]	; (8002ad8 <prvAddCurrentTaskToDelayedList+0x90>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002a58:	4b20      	ldr	r3, [pc, #128]	; (8002adc <prvAddCurrentTaskToDelayedList+0x94>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fe fca8 	bl	80013b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6a:	d10a      	bne.n	8002a82 <prvAddCurrentTaskToDelayedList+0x3a>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d007      	beq.n	8002a82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a72:	4b1a      	ldr	r3, [pc, #104]	; (8002adc <prvAddCurrentTaskToDelayedList+0x94>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	3304      	adds	r3, #4
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4819      	ldr	r0, [pc, #100]	; (8002ae0 <prvAddCurrentTaskToDelayedList+0x98>)
 8002a7c:	f7fe fc3c 	bl	80012f8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002a80:	e026      	b.n	8002ad0 <prvAddCurrentTaskToDelayedList+0x88>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4413      	add	r3, r2
 8002a88:	60bb      	str	r3, [r7, #8]

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002a8a:	4b14      	ldr	r3, [pc, #80]	; (8002adc <prvAddCurrentTaskToDelayedList+0x94>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	605a      	str	r2, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d209      	bcs.n	8002aae <prvAddCurrentTaskToDelayedList+0x66>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a9a:	4b12      	ldr	r3, [pc, #72]	; (8002ae4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	4b0f      	ldr	r3, [pc, #60]	; (8002adc <prvAddCurrentTaskToDelayedList+0x94>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	f7fe fc4a 	bl	8001340 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002aac:	e010      	b.n	8002ad0 <prvAddCurrentTaskToDelayedList+0x88>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002aae:	4b0e      	ldr	r3, [pc, #56]	; (8002ae8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	4b0a      	ldr	r3, [pc, #40]	; (8002adc <prvAddCurrentTaskToDelayedList+0x94>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4610      	mov	r0, r2
 8002abc:	f7fe fc40 	bl	8001340 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8002ac0:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <prvAddCurrentTaskToDelayedList+0xa4>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68ba      	ldr	r2, [r7, #8]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d202      	bcs.n	8002ad0 <prvAddCurrentTaskToDelayedList+0x88>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8002aca:	4a08      	ldr	r2, [pc, #32]	; (8002aec <prvAddCurrentTaskToDelayedList+0xa4>)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	6013      	str	r3, [r2, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002ad0:	bf00      	nop
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	200029c4 	.word	0x200029c4
 8002adc:	200024ec 	.word	0x200024ec
 8002ae0:	200029ac 	.word	0x200029ac
 8002ae4:	2000297c 	.word	0x2000297c
 8002ae8:	20002978 	.word	0x20002978
 8002aec:	200029e0 	.word	0x200029e0

08002af0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b088      	sub	sp, #32
 8002af4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002afa:	f000 fa69 	bl	8002fd0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002afe:	4b15      	ldr	r3, [pc, #84]	; (8002b54 <xTimerCreateTimerTask+0x64>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d020      	beq.n	8002b48 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8002b06:	2300      	movs	r3, #0
 8002b08:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002b0e:	463a      	mov	r2, r7
 8002b10:	1d39      	adds	r1, r7, #4
 8002b12:	f107 0308 	add.w	r3, r7, #8
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fd fbf8 	bl	800030c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8002b1c:	6839      	ldr	r1, [r7, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	9202      	str	r2, [sp, #8]
 8002b24:	9301      	str	r3, [sp, #4]
 8002b26:	2328      	movs	r3, #40	; 0x28
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	460a      	mov	r2, r1
 8002b2e:	490a      	ldr	r1, [pc, #40]	; (8002b58 <xTimerCreateTimerTask+0x68>)
 8002b30:	480a      	ldr	r0, [pc, #40]	; (8002b5c <xTimerCreateTimerTask+0x6c>)
 8002b32:	f7ff f963 	bl	8001dfc <xTaskCreateStatic>
 8002b36:	4602      	mov	r2, r0
 8002b38:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <xTimerCreateTimerTask+0x70>)
 8002b3a:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8002b3c:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <xTimerCreateTimerTask+0x70>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8002b44:	2301      	movs	r3, #1
 8002b46:	60fb      	str	r3, [r7, #12]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
 8002b48:	68fb      	ldr	r3, [r7, #12]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20002a1c 	.word	0x20002a1c
 8002b58:	0800512c 	.word	0x0800512c
 8002b5c:	08002c49 	.word	0x08002c49
 8002b60:	20002a20 	.word	0x20002a20

08002b64 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08a      	sub	sp, #40	; 0x28
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002b76:	4b1a      	ldr	r3, [pc, #104]	; (8002be0 <xTimerGenericCommand+0x7c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d02a      	beq.n	8002bd4 <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	2b05      	cmp	r3, #5
 8002b8e:	dc18      	bgt.n	8002bc2 <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002b90:	f7ff fe7e 	bl	8002890 <xTaskGetSchedulerState>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d109      	bne.n	8002bae <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002b9a:	4b11      	ldr	r3, [pc, #68]	; (8002be0 <xTimerGenericCommand+0x7c>)
 8002b9c:	6818      	ldr	r0, [r3, #0]
 8002b9e:	f107 0114 	add.w	r1, r7, #20
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ba6:	f7fe fe0b 	bl	80017c0 <xQueueGenericSend>
 8002baa:	6278      	str	r0, [r7, #36]	; 0x24
 8002bac:	e012      	b.n	8002bd4 <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002bae:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <xTimerGenericCommand+0x7c>)
 8002bb0:	6818      	ldr	r0, [r3, #0]
 8002bb2:	f107 0114 	add.w	r1, r7, #20
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f7fe fe01 	bl	80017c0 <xQueueGenericSend>
 8002bbe:	6278      	str	r0, [r7, #36]	; 0x24
 8002bc0:	e008      	b.n	8002bd4 <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002bc2:	4b07      	ldr	r3, [pc, #28]	; (8002be0 <xTimerGenericCommand+0x7c>)
 8002bc4:	6818      	ldr	r0, [r3, #0]
 8002bc6:	f107 0114 	add.w	r1, r7, #20
 8002bca:	2300      	movs	r3, #0
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	f7fe fea1 	bl	8001914 <xQueueGenericSendFromISR>
 8002bd2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3728      	adds	r7, #40	; 0x28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	20002a1c 	.word	0x20002a1c

08002be4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af02      	add	r7, sp, #8
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002bee:	4b15      	ldr	r3, [pc, #84]	; (8002c44 <prvProcessExpiredTimer+0x60>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fe fbd9 	bl	80013b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d114      	bne.n	8002c34 <prvProcessExpiredTimer+0x50>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	699a      	ldr	r2, [r3, #24]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	18d1      	adds	r1, r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 f8ba 	bl	8002d90 <prvInsertTimerInActiveList>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d008      	beq.n	8002c34 <prvProcessExpiredTimer+0x50>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002c22:	2300      	movs	r3, #0
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	2300      	movs	r3, #0
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f7ff ff99 	bl	8002b64 <xTimerGenericCommand>
 8002c32:	60b8      	str	r0, [r7, #8]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	4798      	blx	r3
}
 8002c3c:	bf00      	nop
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	20002a14 	.word	0x20002a14

08002c48 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002c50:	f107 0308 	add.w	r3, r7, #8
 8002c54:	4618      	mov	r0, r3
 8002c56:	f000 f857 	bl	8002d08 <prvGetNextExpireTime>
 8002c5a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	4619      	mov	r1, r3
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 f803 	bl	8002c6c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002c66:	f000 f8d5 	bl	8002e14 <prvProcessReceivedCommands>
	}
 8002c6a:	e7f1      	b.n	8002c50 <prvTimerTask+0x8>

08002c6c <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002c76:	f7ff fa75 	bl	8002164 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002c7a:	f107 0308 	add.w	r3, r7, #8
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f000 f866 	bl	8002d50 <prvSampleTimeNow>
 8002c84:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d130      	bne.n	8002cee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10a      	bne.n	8002ca8 <prvProcessTimerOrBlockTask+0x3c>
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d806      	bhi.n	8002ca8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002c9a:	f7ff fa71 	bl	8002180 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002c9e:	68f9      	ldr	r1, [r7, #12]
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f7ff ff9f 	bl	8002be4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002ca6:	e024      	b.n	8002cf2 <prvProcessTimerOrBlockTask+0x86>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d008      	beq.n	8002cc0 <prvProcessTimerOrBlockTask+0x54>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002cae:	4b13      	ldr	r3, [pc, #76]	; (8002cfc <prvProcessTimerOrBlockTask+0x90>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	bf0c      	ite	eq
 8002cb8:	2301      	moveq	r3, #1
 8002cba:	2300      	movne	r3, #0
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	603b      	str	r3, [r7, #0]
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002cc0:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <prvProcessTimerOrBlockTask+0x94>)
 8002cc2:	6818      	ldr	r0, [r3, #0]
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	4619      	mov	r1, r3
 8002cce:	f7ff f861 	bl	8001d94 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 8002cd2:	f7ff fa55 	bl	8002180 <xTaskResumeAll>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10a      	bne.n	8002cf2 <prvProcessTimerOrBlockTask+0x86>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 8002cdc:	4b09      	ldr	r3, [pc, #36]	; (8002d04 <prvProcessTimerOrBlockTask+0x98>)
 8002cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	f3bf 8f4f 	dsb	sy
 8002ce8:	f3bf 8f6f 	isb	sy
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002cec:	e001      	b.n	8002cf2 <prvProcessTimerOrBlockTask+0x86>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 8002cee:	f7ff fa47 	bl	8002180 <xTaskResumeAll>
		}
	}
}
 8002cf2:	bf00      	nop
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20002a18 	.word	0x20002a18
 8002d00:	20002a1c 	.word	0x20002a1c
 8002d04:	e000ed04 	.word	0xe000ed04

08002d08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002d10:	4b0e      	ldr	r3, [pc, #56]	; (8002d4c <prvGetNextExpireTime+0x44>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	bf0c      	ite	eq
 8002d1a:	2301      	moveq	r3, #1
 8002d1c:	2300      	movne	r3, #0
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	461a      	mov	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d105      	bne.n	8002d3a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002d2e:	4b07      	ldr	r3, [pc, #28]	; (8002d4c <prvGetNextExpireTime+0x44>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	e001      	b.n	8002d3e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	20002a14 	.word	0x20002a14

08002d50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002d58:	f7ff faa0 	bl	800229c <xTaskGetTickCount>
 8002d5c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002d5e:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <prvSampleTimeNow+0x3c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d205      	bcs.n	8002d74 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002d68:	f000 f8de 	bl	8002f28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	e002      	b.n	8002d7a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002d7a:	4a04      	ldr	r2, [pc, #16]	; (8002d8c <prvSampleTimeNow+0x3c>)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002d80:	68fb      	ldr	r3, [r7, #12]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	20002a24 	.word	0x20002a24

08002d90 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
 8002d9c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d812      	bhi.n	8002ddc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	1ad2      	subs	r2, r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d302      	bcc.n	8002dca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	e01b      	b.n	8002e02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002dca:	4b10      	ldr	r3, [pc, #64]	; (8002e0c <prvInsertTimerInActiveList+0x7c>)
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	f7fe fab3 	bl	8001340 <vListInsert>
 8002dda:	e012      	b.n	8002e02 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d206      	bcs.n	8002df2 <prvInsertTimerInActiveList+0x62>
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d302      	bcc.n	8002df2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002dec:	2301      	movs	r3, #1
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	e007      	b.n	8002e02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002df2:	4b07      	ldr	r3, [pc, #28]	; (8002e10 <prvInsertTimerInActiveList+0x80>)
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	3304      	adds	r3, #4
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	f7fe fa9f 	bl	8001340 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002e02:	697b      	ldr	r3, [r7, #20]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	20002a18 	.word	0x20002a18
 8002e10:	20002a14 	.word	0x20002a14

08002e14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b08c      	sub	sp, #48	; 0x30
 8002e18:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002e1a:	e073      	b.n	8002f04 <prvProcessReceivedCommands+0xf0>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	da0b      	bge.n	8002e3a <prvProcessReceivedCommands+0x26>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8002e22:	f107 0308 	add.w	r3, r7, #8
 8002e26:	3304      	adds	r3, #4
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e30:	6850      	ldr	r0, [r2, #4]
 8002e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e34:	6892      	ldr	r2, [r2, #8]
 8002e36:	4611      	mov	r1, r2
 8002e38:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	db61      	blt.n	8002f04 <prvProcessReceivedCommands+0xf0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d004      	beq.n	8002e56 <prvProcessReceivedCommands+0x42>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	3304      	adds	r3, #4
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7fe faaf 	bl	80013b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002e56:	1d3b      	adds	r3, r7, #4
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff ff79 	bl	8002d50 <prvSampleTimeNow>
 8002e5e:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2b09      	cmp	r3, #9
 8002e64:	d84d      	bhi.n	8002f02 <prvProcessReceivedCommands+0xee>
 8002e66:	a201      	add	r2, pc, #4	; (adr r2, 8002e6c <prvProcessReceivedCommands+0x58>)
 8002e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6c:	08002e95 	.word	0x08002e95
 8002e70:	08002e95 	.word	0x08002e95
 8002e74:	08002e95 	.word	0x08002e95
 8002e78:	08002f05 	.word	0x08002f05
 8002e7c:	08002ed7 	.word	0x08002ed7
 8002e80:	08002ef1 	.word	0x08002ef1
 8002e84:	08002e95 	.word	0x08002e95
 8002e88:	08002e95 	.word	0x08002e95
 8002e8c:	08002f05 	.word	0x08002f05
 8002e90:	08002ed7 	.word	0x08002ed7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	18d1      	adds	r1, r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	69fa      	ldr	r2, [r7, #28]
 8002ea0:	6a38      	ldr	r0, [r7, #32]
 8002ea2:	f7ff ff75 	bl	8002d90 <prvInsertTimerInActiveList>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d02b      	beq.n	8002f04 <prvProcessReceivedCommands+0xf0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	6a38      	ldr	r0, [r7, #32]
 8002eb2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002eb4:	6a3b      	ldr	r3, [r7, #32]
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d123      	bne.n	8002f04 <prvProcessReceivedCommands+0xf0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	441a      	add	r2, r3
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	2300      	movs	r3, #0
 8002eca:	2100      	movs	r1, #0
 8002ecc:	6a38      	ldr	r0, [r7, #32]
 8002ece:	f7ff fe49 	bl	8002b64 <xTimerGenericCommand>
 8002ed2:	61b8      	str	r0, [r7, #24]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 8002ed4:	e016      	b.n	8002f04 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	619a      	str	r2, [r3, #24]
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	699a      	ldr	r2, [r3, #24]
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	18d1      	adds	r1, r2, r3
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	69fa      	ldr	r2, [r7, #28]
 8002ee8:	6a38      	ldr	r0, [r7, #32]
 8002eea:	f7ff ff51 	bl	8002d90 <prvInsertTimerInActiveList>
					break;
 8002eee:	e009      	b.n	8002f04 <prvProcessReceivedCommands+0xf0>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8002ef0:	6a3b      	ldr	r3, [r7, #32]
 8002ef2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d104      	bne.n	8002f04 <prvProcessReceivedCommands+0xf0>
						{
							vPortFree( pxTimer );
 8002efa:	6a38      	ldr	r0, [r7, #32]
 8002efc:	f7fe f8d8 	bl	80010b0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002f00:	e000      	b.n	8002f04 <prvProcessReceivedCommands+0xf0>

				default	:
					/* Don't expect to get here. */
					break;
 8002f02:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002f04:	4b07      	ldr	r3, [pc, #28]	; (8002f24 <prvProcessReceivedCommands+0x110>)
 8002f06:	6818      	ldr	r0, [r3, #0]
 8002f08:	f107 0108 	add.w	r1, r7, #8
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f7fe fd58 	bl	80019c4 <xQueueGenericReceive>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d180      	bne.n	8002e1c <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
 8002f1a:	bf00      	nop
 8002f1c:	3728      	adds	r7, #40	; 0x28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20002a1c 	.word	0x20002a1c

08002f28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002f2e:	e037      	b.n	8002fa0 <prvSwitchTimerLists+0x78>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002f30:	4b25      	ldr	r3, [pc, #148]	; (8002fc8 <prvSwitchTimerLists+0xa0>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002f3a:	4b23      	ldr	r3, [pc, #140]	; (8002fc8 <prvSwitchTimerLists+0xa0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	3304      	adds	r3, #4
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7fe fa33 	bl	80013b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	6938      	ldr	r0, [r7, #16]
 8002f54:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d120      	bne.n	8002fa0 <prvSwitchTimerLists+0x78>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	699a      	ldr	r2, [r3, #24]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	4413      	add	r3, r2
 8002f66:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d90e      	bls.n	8002f8e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002f7c:	4b12      	ldr	r3, [pc, #72]	; (8002fc8 <prvSwitchTimerLists+0xa0>)
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	3304      	adds	r3, #4
 8002f84:	4619      	mov	r1, r3
 8002f86:	4610      	mov	r0, r2
 8002f88:	f7fe f9da 	bl	8001340 <vListInsert>
 8002f8c:	e008      	b.n	8002fa0 <prvSwitchTimerLists+0x78>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002f8e:	2300      	movs	r3, #0
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	2300      	movs	r3, #0
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	2100      	movs	r1, #0
 8002f98:	6938      	ldr	r0, [r7, #16]
 8002f9a:	f7ff fde3 	bl	8002b64 <xTimerGenericCommand>
 8002f9e:	60b8      	str	r0, [r7, #8]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002fa0:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <prvSwitchTimerLists+0xa0>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1c2      	bne.n	8002f30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002faa:	4b07      	ldr	r3, [pc, #28]	; (8002fc8 <prvSwitchTimerLists+0xa0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8002fb0:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <prvSwitchTimerLists+0xa4>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a04      	ldr	r2, [pc, #16]	; (8002fc8 <prvSwitchTimerLists+0xa0>)
 8002fb6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002fb8:	4a04      	ldr	r2, [pc, #16]	; (8002fcc <prvSwitchTimerLists+0xa4>)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6013      	str	r3, [r2, #0]
}
 8002fbe:	bf00      	nop
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	20002a14 	.word	0x20002a14
 8002fcc:	20002a18 	.word	0x20002a18

08002fd0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002fd6:	f7fe faa7 	bl	8001528 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002fda:	4b10      	ldr	r3, [pc, #64]	; (800301c <prvCheckForValidListAndQueue+0x4c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d116      	bne.n	8003010 <prvCheckForValidListAndQueue+0x40>
		{
			vListInitialise( &xActiveTimerList1 );
 8002fe2:	480f      	ldr	r0, [pc, #60]	; (8003020 <prvCheckForValidListAndQueue+0x50>)
 8002fe4:	f7fe f95a 	bl	800129c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002fe8:	480e      	ldr	r0, [pc, #56]	; (8003024 <prvCheckForValidListAndQueue+0x54>)
 8002fea:	f7fe f957 	bl	800129c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002fee:	4b0e      	ldr	r3, [pc, #56]	; (8003028 <prvCheckForValidListAndQueue+0x58>)
 8002ff0:	4a0b      	ldr	r2, [pc, #44]	; (8003020 <prvCheckForValidListAndQueue+0x50>)
 8002ff2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002ff4:	4b0d      	ldr	r3, [pc, #52]	; (800302c <prvCheckForValidListAndQueue+0x5c>)
 8002ff6:	4a0b      	ldr	r2, [pc, #44]	; (8003024 <prvCheckForValidListAndQueue+0x54>)
 8002ff8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue;
				static uint8_t ucStaticTimerQueueStorage[ configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ];

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	4b0c      	ldr	r3, [pc, #48]	; (8003030 <prvCheckForValidListAndQueue+0x60>)
 8003000:	4a0c      	ldr	r2, [pc, #48]	; (8003034 <prvCheckForValidListAndQueue+0x64>)
 8003002:	2110      	movs	r1, #16
 8003004:	2005      	movs	r0, #5
 8003006:	f7fe fb97 	bl	8001738 <xQueueGenericCreateStatic>
 800300a:	4602      	mov	r2, r0
 800300c:	4b03      	ldr	r3, [pc, #12]	; (800301c <prvCheckForValidListAndQueue+0x4c>)
 800300e:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003010:	f7fe faa4 	bl	800155c <vPortExitCritical>
}
 8003014:	bf00      	nop
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	20002a1c 	.word	0x20002a1c
 8003020:	200029ec 	.word	0x200029ec
 8003024:	20002a00 	.word	0x20002a00
 8003028:	20002a14 	.word	0x20002a14
 800302c:	20002a18 	.word	0x20002a18
 8003030:	20002a78 	.word	0x20002a78
 8003034:	20002a28 	.word	0x20002a28

08003038 <_ZN7LoRaHALC1Ev>:
 *      Author: emon1
 */

#include "LoRaHAL.h"

LoRaHAL::LoRaHAL() {
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4618      	mov	r0, r3
 8003044:	f000 f8d4 	bl	80031f0 <_ZN8LoRaPortC1Ev>
 8003048:	4a03      	ldr	r2, [pc, #12]	; (8003058 <_ZN7LoRaHALC1Ev+0x20>)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4618      	mov	r0, r3
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	08005190 	.word	0x08005190

0800305c <_ZN7LoRaHALD1Ev>:

LoRaHAL::~LoRaHAL() {
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	4a08      	ldr	r2, [pc, #32]	; (8003088 <_ZN7LoRaHALD1Ev+0x2c>)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4618      	mov	r0, r3
 800306e:	f000 f90d 	bl	800328c <_ZN8LoRaPortD1Ev>
	// TODO Auto-generated destructor stub
}
 8003072:	2300      	movs	r3, #0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d002      	beq.n	800307e <_ZN7LoRaHALD1Ev+0x22>
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 fed2 	bl	8003e22 <_ZdlPv>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4618      	mov	r0, r3
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	08005190 	.word	0x08005190

0800308c <_ZN7LoRaHALD0Ev>:
LoRaHAL::LoRaHAL() {
	// TODO Auto-generated constructor stub

}

LoRaHAL::~LoRaHAL() {
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7ff ffe1 	bl	800305c <_ZN7LoRaHALD1Ev>
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 fec1 	bl	8003e22 <_ZdlPv>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4618      	mov	r0, r3
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop

080030ac <_ZN7LoRaHAL8antSwSetEb>:
}
void LoRaHAL::antSwDeInit(void){
	GPIO_DeInit(PIN_TX);
	GPIO_DeInit(PIN_RX);
}
void LoRaHAL::antSwSet(bool txrx){
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	460b      	mov	r3, r1
 80030b6:	70fb      	strb	r3, [r7, #3]
	if(txrx){
 80030b8:	78fb      	ldrb	r3, [r7, #3]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00c      	beq.n	80030d8 <_ZN7LoRaHAL8antSwSetEb+0x2c>
		GPIO_SetValue(PIN_TX,1);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	2102      	movs	r1, #2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f000 f971 	bl	80033ac <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb>
		GPIO_SetValue(PIN_RX,0);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	2103      	movs	r1, #3
 80030d0:	4618      	mov	r0, r3
 80030d2:	f000 f96b 	bl	80033ac <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb>
	}
	else{
		GPIO_SetValue(PIN_TX,0);
		GPIO_SetValue(PIN_RX,1);
	}
}
 80030d6:	e00b      	b.n	80030f0 <_ZN7LoRaHAL8antSwSetEb+0x44>
	if(txrx){
		GPIO_SetValue(PIN_TX,1);
		GPIO_SetValue(PIN_RX,0);
	}
	else{
		GPIO_SetValue(PIN_TX,0);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	2102      	movs	r1, #2
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 f964 	bl	80033ac <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb>
		GPIO_SetValue(PIN_RX,1);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	2103      	movs	r1, #3
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 f95e 	bl	80033ac <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb>
	}
}
 80030f0:	bf00      	nop
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <_ZN7LoRaHAL5ResetEv>:

void LoRaHAL::Reset(){
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
	GPIO_Init(PIN_RESET);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2101      	movs	r1, #1
 8003104:	4618      	mov	r0, r3
 8003106:	f000 f8e5 	bl	80032d4 <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE>
	GPIO_SetValue(PIN_RESET,1);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	2101      	movs	r1, #1
 8003110:	4618      	mov	r0, r3
 8003112:	f000 f94b 	bl	80033ac <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb>
	delayMs(1);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2101      	movs	r1, #1
 800311a:	4618      	mov	r0, r3
 800311c:	f000 fa32 	bl	8003584 <_ZN8LoRaPort7delayMsEj>
	GPIO_SetValue(PIN_RESET,0);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	2101      	movs	r1, #1
 8003126:	4618      	mov	r0, r3
 8003128:	f000 f940 	bl	80033ac <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb>
	GPIO_DeInit(PIN_RESET);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2101      	movs	r1, #1
 8003130:	4618      	mov	r0, r3
 8003132:	f000 f909 	bl	8003348 <_ZN8LoRaPort11GPIO_DeInitENS_10LoRaGPIO_tE>
	delayMs(6);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2106      	movs	r1, #6
 800313a:	4618      	mov	r0, r3
 800313c:	f000 fa22 	bl	8003584 <_ZN8LoRaPort7delayMsEj>
}
 8003140:	bf00      	nop
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <_ZN7LoRaHAL5WriteEhh>:

void LoRaHAL::Write(uint8_t addr, uint8_t data){
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	460b      	mov	r3, r1
 8003152:	70fb      	strb	r3, [r7, #3]
 8003154:	4613      	mov	r3, r2
 8003156:	70bb      	strb	r3, [r7, #2]
    uint8_t address = addr | (1<<7);
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800315e:	b2db      	uxtb	r3, r3
 8003160:	73fb      	strb	r3, [r7, #15]
    GPIO_SetValue(PIN_NSS,0);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	2100      	movs	r1, #0
 8003168:	4618      	mov	r0, r3
 800316a:	f000 f91f 	bl	80033ac <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb>
    SPI_TranscieveBuffer(&address, 1);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f107 010f 	add.w	r1, r7, #15
 8003174:	2201      	movs	r2, #1
 8003176:	4618      	mov	r0, r3
 8003178:	f000 f9ec 	bl	8003554 <_ZN8LoRaPort20SPI_TranscieveBufferEPhj>
    SPI_TranscieveBuffer(&data, 1);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	1cb9      	adds	r1, r7, #2
 8003180:	2201      	movs	r2, #1
 8003182:	4618      	mov	r0, r3
 8003184:	f000 f9e6 	bl	8003554 <_ZN8LoRaPort20SPI_TranscieveBufferEPhj>
    GPIO_SetValue(PIN_NSS,1);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	2100      	movs	r1, #0
 800318e:	4618      	mov	r0, r3
 8003190:	f000 f90c 	bl	80033ac <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb>
}
 8003194:	bf00      	nop
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <_ZN7LoRaHAL4ReadEh>:
uint8_t LoRaHAL::Read(uint8_t addr){
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	460b      	mov	r3, r1
 80031a6:	70fb      	strb	r3, [r7, #3]
    uint8_t address = addr& ~(1<<7);
 80031a8:	78fb      	ldrb	r3, [r7, #3]
 80031aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	73fb      	strb	r3, [r7, #15]
    uint8_t data;
    GPIO_SetValue(PIN_NSS,0);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	2100      	movs	r1, #0
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 f8f7 	bl	80033ac <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb>
    SPI_TranscieveBuffer(&address, 1);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f107 010f 	add.w	r1, r7, #15
 80031c4:	2201      	movs	r2, #1
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 f9c4 	bl	8003554 <_ZN8LoRaPort20SPI_TranscieveBufferEPhj>
    SPI_TranscieveBuffer(&data, 1);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f107 010e 	add.w	r1, r7, #14
 80031d2:	2201      	movs	r2, #1
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 f9bd 	bl	8003554 <_ZN8LoRaPort20SPI_TranscieveBufferEPhj>
    GPIO_SetValue(PIN_NSS,1);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	2100      	movs	r1, #0
 80031e0:	4618      	mov	r0, r3
 80031e2:	f000 f8e3 	bl	80033ac <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb>
    return data;
 80031e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <_ZN8LoRaPortC1Ev>:
static GPIO_InitTypeDef LoRa_RESET_PIN_Struct = {LoRa_RESET_PIN,GPIO_MODE_OUTPUT_PP,GPIO_PULLUP,GPIO_SPEED_FREQ_HIGH,};
static GPIO_InitTypeDef LoRa_TX_PIN_Struct = {LoRa_TX_PIN,GPIO_MODE_OUTPUT_PP,GPIO_PULLUP,GPIO_SPEED_FREQ_HIGH,};
static GPIO_InitTypeDef LoRa_RX_PIN_Struct = {LoRa_RX_PIN,GPIO_MODE_OUTPUT_PP,GPIO_PULLUP,GPIO_SPEED_FREQ_HIGH,};


LoRaPort::LoRaPort() {
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	4a22      	ldr	r2, [pc, #136]	; (8003284 <_ZN8LoRaPortC1Ev+0x94>)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	/* Enable GPIOA clock */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80031fe:	2300      	movs	r3, #0
 8003200:	617b      	str	r3, [r7, #20]
 8003202:	4a21      	ldr	r2, [pc, #132]	; (8003288 <_ZN8LoRaPortC1Ev+0x98>)
 8003204:	4b20      	ldr	r3, [pc, #128]	; (8003288 <_ZN8LoRaPortC1Ev+0x98>)
 8003206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	6313      	str	r3, [r2, #48]	; 0x30
 800320e:	4b1e      	ldr	r3, [pc, #120]	; (8003288 <_ZN8LoRaPortC1Ev+0x98>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	617b      	str	r3, [r7, #20]
 8003218:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800321a:	2300      	movs	r3, #0
 800321c:	613b      	str	r3, [r7, #16]
 800321e:	4a1a      	ldr	r2, [pc, #104]	; (8003288 <_ZN8LoRaPortC1Ev+0x98>)
 8003220:	4b19      	ldr	r3, [pc, #100]	; (8003288 <_ZN8LoRaPortC1Ev+0x98>)
 8003222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003224:	f043 0302 	orr.w	r3, r3, #2
 8003228:	6313      	str	r3, [r2, #48]	; 0x30
 800322a:	4b17      	ldr	r3, [pc, #92]	; (8003288 <_ZN8LoRaPortC1Ev+0x98>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	613b      	str	r3, [r7, #16]
 8003234:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003236:	2300      	movs	r3, #0
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	4a13      	ldr	r2, [pc, #76]	; (8003288 <_ZN8LoRaPortC1Ev+0x98>)
 800323c:	4b12      	ldr	r3, [pc, #72]	; (8003288 <_ZN8LoRaPortC1Ev+0x98>)
 800323e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003240:	f043 0304 	orr.w	r3, r3, #4
 8003244:	6313      	str	r3, [r2, #48]	; 0x30
 8003246:	4b10      	ldr	r3, [pc, #64]	; (8003288 <_ZN8LoRaPortC1Ev+0x98>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	f003 0304 	and.w	r3, r3, #4
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	68fb      	ldr	r3, [r7, #12]

	SPI_Init();
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f8e8 	bl	8003428 <_ZN8LoRaPort8SPI_InitEv>

	GPIO_Init(PIN_NSS);
 8003258:	2100      	movs	r1, #0
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f83a 	bl	80032d4 <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE>
	GPIO_Init(PIN_RESET);
 8003260:	2101      	movs	r1, #1
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f836 	bl	80032d4 <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE>
	GPIO_Init(PIN_TX);
 8003268:	2102      	movs	r1, #2
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f832 	bl	80032d4 <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE>
	GPIO_Init(PIN_RX);
 8003270:	2103      	movs	r1, #3
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f82e 	bl	80032d4 <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE>
}
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4618      	mov	r0, r3
 800327c:	3718      	adds	r7, #24
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	080051a0 	.word	0x080051a0
 8003288:	40023800 	.word	0x40023800

0800328c <_ZN8LoRaPortD1Ev>:

LoRaPort::~LoRaPort() {
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	4a06      	ldr	r2, [pc, #24]	; (80032b0 <_ZN8LoRaPortD1Ev+0x24>)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800329a:	2300      	movs	r3, #0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d002      	beq.n	80032a6 <_ZN8LoRaPortD1Ev+0x1a>
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 fdbe 	bl	8003e22 <_ZdlPv>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4618      	mov	r0, r3
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	080051a0 	.word	0x080051a0

080032b4 <_ZN8LoRaPortD0Ev>:
	GPIO_Init(PIN_RESET);
	GPIO_Init(PIN_TX);
	GPIO_Init(PIN_RX);
}

LoRaPort::~LoRaPort() {
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7ff ffe5 	bl	800328c <_ZN8LoRaPortD1Ev>
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fdad 	bl	8003e22 <_ZdlPv>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop

080032d4 <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE>:

void LoRaPort::GPIO_Init(LoRaPort::LoRaGPIO_t pin){
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	460b      	mov	r3, r1
 80032de:	70fb      	strb	r3, [r7, #3]
	switch(pin){
 80032e0:	78fb      	ldrb	r3, [r7, #3]
 80032e2:	2b03      	cmp	r3, #3
 80032e4:	d81e      	bhi.n	8003324 <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE+0x50>
 80032e6:	a201      	add	r2, pc, #4	; (adr r2, 80032ec <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE+0x18>)
 80032e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ec:	080032fd 	.word	0x080032fd
 80032f0:	08003307 	.word	0x08003307
 80032f4:	08003311 	.word	0x08003311
 80032f8:	0800331b 	.word	0x0800331b
	case PIN_NSS 	: HAL_GPIO_Init(LoRa_NSS_PORT, &LoRa_NSS_PIN_Struct); break;
 80032fc:	490c      	ldr	r1, [pc, #48]	; (8003330 <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE+0x5c>)
 80032fe:	480d      	ldr	r0, [pc, #52]	; (8003334 <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE+0x60>)
 8003300:	f7fd f854 	bl	80003ac <HAL_GPIO_Init>
 8003304:	e00f      	b.n	8003326 <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE+0x52>
	case PIN_RESET 	: HAL_GPIO_Init(LoRa_RESET_PORT, &LoRa_RESET_PIN_Struct); break;
 8003306:	490c      	ldr	r1, [pc, #48]	; (8003338 <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE+0x64>)
 8003308:	480c      	ldr	r0, [pc, #48]	; (800333c <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE+0x68>)
 800330a:	f7fd f84f 	bl	80003ac <HAL_GPIO_Init>
 800330e:	e00a      	b.n	8003326 <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE+0x52>
	case PIN_TX 	: HAL_GPIO_Init(LoRa_TX_PORT, &LoRa_TX_PIN_Struct); break;
 8003310:	490b      	ldr	r1, [pc, #44]	; (8003340 <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE+0x6c>)
 8003312:	4808      	ldr	r0, [pc, #32]	; (8003334 <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE+0x60>)
 8003314:	f7fd f84a 	bl	80003ac <HAL_GPIO_Init>
 8003318:	e005      	b.n	8003326 <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE+0x52>
	case PIN_RX 	: HAL_GPIO_Init(LoRa_RX_PORT, &LoRa_RX_PIN_Struct); break;
 800331a:	490a      	ldr	r1, [pc, #40]	; (8003344 <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE+0x70>)
 800331c:	4805      	ldr	r0, [pc, #20]	; (8003334 <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE+0x60>)
 800331e:	f7fd f845 	bl	80003ac <HAL_GPIO_Init>
 8003322:	e000      	b.n	8003326 <_ZN8LoRaPort9GPIO_InitENS_10LoRaGPIO_tE+0x52>
	default			: break;
 8003324:	bf00      	nop
	}
}
 8003326:	bf00      	nop
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	2000000c 	.word	0x2000000c
 8003334:	40020400 	.word	0x40020400
 8003338:	20000020 	.word	0x20000020
 800333c:	40020800 	.word	0x40020800
 8003340:	20000034 	.word	0x20000034
 8003344:	20000048 	.word	0x20000048

08003348 <_ZN8LoRaPort11GPIO_DeInitENS_10LoRaGPIO_tE>:
void LoRaPort::GPIO_DeInit(LoRaPort::LoRaGPIO_t pin){
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	460b      	mov	r3, r1
 8003352:	70fb      	strb	r3, [r7, #3]
	switch(pin){
 8003354:	78fb      	ldrb	r3, [r7, #3]
 8003356:	2b03      	cmp	r3, #3
 8003358:	d81e      	bhi.n	8003398 <_ZN8LoRaPort11GPIO_DeInitENS_10LoRaGPIO_tE+0x50>
 800335a:	a201      	add	r2, pc, #4	; (adr r2, 8003360 <_ZN8LoRaPort11GPIO_DeInitENS_10LoRaGPIO_tE+0x18>)
 800335c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003360:	08003371 	.word	0x08003371
 8003364:	0800337b 	.word	0x0800337b
 8003368:	08003385 	.word	0x08003385
 800336c:	0800338f 	.word	0x0800338f
	case PIN_NSS 	: HAL_GPIO_DeInit(LoRa_NSS_PORT, LoRa_NSS_PIN); break;
 8003370:	2140      	movs	r1, #64	; 0x40
 8003372:	480c      	ldr	r0, [pc, #48]	; (80033a4 <_ZN8LoRaPort11GPIO_DeInitENS_10LoRaGPIO_tE+0x5c>)
 8003374:	f7fd f9ac 	bl	80006d0 <HAL_GPIO_DeInit>
 8003378:	e00f      	b.n	800339a <_ZN8LoRaPort11GPIO_DeInitENS_10LoRaGPIO_tE+0x52>
	case PIN_RESET 	: HAL_GPIO_DeInit(LoRa_RESET_PORT, LoRa_RESET_PIN); break;
 800337a:	2180      	movs	r1, #128	; 0x80
 800337c:	480a      	ldr	r0, [pc, #40]	; (80033a8 <_ZN8LoRaPort11GPIO_DeInitENS_10LoRaGPIO_tE+0x60>)
 800337e:	f7fd f9a7 	bl	80006d0 <HAL_GPIO_DeInit>
 8003382:	e00a      	b.n	800339a <_ZN8LoRaPort11GPIO_DeInitENS_10LoRaGPIO_tE+0x52>
	case PIN_TX 	: HAL_GPIO_DeInit(LoRa_TX_PORT, LoRa_RESET_PIN); break;
 8003384:	2180      	movs	r1, #128	; 0x80
 8003386:	4807      	ldr	r0, [pc, #28]	; (80033a4 <_ZN8LoRaPort11GPIO_DeInitENS_10LoRaGPIO_tE+0x5c>)
 8003388:	f7fd f9a2 	bl	80006d0 <HAL_GPIO_DeInit>
 800338c:	e005      	b.n	800339a <_ZN8LoRaPort11GPIO_DeInitENS_10LoRaGPIO_tE+0x52>
	case PIN_RX 	: HAL_GPIO_DeInit(LoRa_RX_PORT, LoRa_RESET_PIN); break;
 800338e:	2180      	movs	r1, #128	; 0x80
 8003390:	4804      	ldr	r0, [pc, #16]	; (80033a4 <_ZN8LoRaPort11GPIO_DeInitENS_10LoRaGPIO_tE+0x5c>)
 8003392:	f7fd f99d 	bl	80006d0 <HAL_GPIO_DeInit>
 8003396:	e000      	b.n	800339a <_ZN8LoRaPort11GPIO_DeInitENS_10LoRaGPIO_tE+0x52>
	default			: break;
 8003398:	bf00      	nop
	}
}
 800339a:	bf00      	nop
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40020400 	.word	0x40020400
 80033a8:	40020800 	.word	0x40020800

080033ac <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb>:
void LoRaPort::GPIO_SetValue(LoRaPort::LoRaGPIO_t pin, bool value){
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	70fb      	strb	r3, [r7, #3]
 80033b8:	4613      	mov	r3, r2
 80033ba:	70bb      	strb	r3, [r7, #2]
	switch(pin){
 80033bc:	78fb      	ldrb	r3, [r7, #3]
 80033be:	2b03      	cmp	r3, #3
 80033c0:	d828      	bhi.n	8003414 <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb+0x68>
 80033c2:	a201      	add	r2, pc, #4	; (adr r2, 80033c8 <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb+0x1c>)
 80033c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c8:	080033d9 	.word	0x080033d9
 80033cc:	080033e7 	.word	0x080033e7
 80033d0:	080033f5 	.word	0x080033f5
 80033d4:	08003405 	.word	0x08003405
	case PIN_NSS 	: HAL_GPIO_WritePin(LoRa_NSS_PORT, LoRa_NSS_PIN, (GPIO_PinState)value); break;
 80033d8:	78bb      	ldrb	r3, [r7, #2]
 80033da:	461a      	mov	r2, r3
 80033dc:	2140      	movs	r1, #64	; 0x40
 80033de:	4810      	ldr	r0, [pc, #64]	; (8003420 <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb+0x74>)
 80033e0:	f7fd fa6a 	bl	80008b8 <HAL_GPIO_WritePin>
 80033e4:	e017      	b.n	8003416 <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb+0x6a>
	case PIN_RESET 	: HAL_GPIO_WritePin(LoRa_RESET_PORT, LoRa_RESET_PIN, (GPIO_PinState)value); break;
 80033e6:	78bb      	ldrb	r3, [r7, #2]
 80033e8:	461a      	mov	r2, r3
 80033ea:	2180      	movs	r1, #128	; 0x80
 80033ec:	480d      	ldr	r0, [pc, #52]	; (8003424 <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb+0x78>)
 80033ee:	f7fd fa63 	bl	80008b8 <HAL_GPIO_WritePin>
 80033f2:	e010      	b.n	8003416 <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb+0x6a>
	case PIN_TX 	: HAL_GPIO_WritePin(LoRa_TX_PORT, LoRa_TX_PIN, (GPIO_PinState)value); break;
 80033f4:	78bb      	ldrb	r3, [r7, #2]
 80033f6:	461a      	mov	r2, r3
 80033f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033fc:	4808      	ldr	r0, [pc, #32]	; (8003420 <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb+0x74>)
 80033fe:	f7fd fa5b 	bl	80008b8 <HAL_GPIO_WritePin>
 8003402:	e008      	b.n	8003416 <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb+0x6a>
	case PIN_RX 	: HAL_GPIO_WritePin(LoRa_RX_PORT, LoRa_RX_PIN, (GPIO_PinState)value); break;
 8003404:	78bb      	ldrb	r3, [r7, #2]
 8003406:	461a      	mov	r2, r3
 8003408:	f44f 7180 	mov.w	r1, #256	; 0x100
 800340c:	4804      	ldr	r0, [pc, #16]	; (8003420 <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb+0x74>)
 800340e:	f7fd fa53 	bl	80008b8 <HAL_GPIO_WritePin>
 8003412:	e000      	b.n	8003416 <_ZN8LoRaPort13GPIO_SetValueENS_10LoRaGPIO_tEb+0x6a>
	default			: break;
 8003414:	bf00      	nop
	}
}
 8003416:	bf00      	nop
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	40020400 	.word	0x40020400
 8003424:	40020800 	.word	0x40020800

08003428 <_ZN8LoRaPort8SPI_InitEv>:
	case PIN_RX 	: return HAL_GPIO_ReadPin(LoRa_RX_PORT, LoRa_RX_PIN); break;
	default			: break;
	}
}

void LoRaPort::SPI_Init(void){
 8003428:	b580      	push	{r7, lr}
 800342a:	b08c      	sub	sp, #48	; 0x30
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub

	/*##-1- Configure the SPI peripheral #######################################*/
	/* Set the SPI parameters */
	LoRa_SpiHandle.Instance               = SPIx;
 8003430:	4b44      	ldr	r3, [pc, #272]	; (8003544 <_ZN8LoRaPort8SPI_InitEv+0x11c>)
 8003432:	4a45      	ldr	r2, [pc, #276]	; (8003548 <_ZN8LoRaPort8SPI_InitEv+0x120>)
 8003434:	601a      	str	r2, [r3, #0]
	LoRa_SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003436:	4b43      	ldr	r3, [pc, #268]	; (8003544 <_ZN8LoRaPort8SPI_InitEv+0x11c>)
 8003438:	2220      	movs	r2, #32
 800343a:	61da      	str	r2, [r3, #28]
	LoRa_SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 800343c:	4b41      	ldr	r3, [pc, #260]	; (8003544 <_ZN8LoRaPort8SPI_InitEv+0x11c>)
 800343e:	2200      	movs	r2, #0
 8003440:	609a      	str	r2, [r3, #8]
	LoRa_SpiHandle.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8003442:	4b40      	ldr	r3, [pc, #256]	; (8003544 <_ZN8LoRaPort8SPI_InitEv+0x11c>)
 8003444:	2200      	movs	r2, #0
 8003446:	615a      	str	r2, [r3, #20]
	LoRa_SpiHandle.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8003448:	4b3e      	ldr	r3, [pc, #248]	; (8003544 <_ZN8LoRaPort8SPI_InitEv+0x11c>)
 800344a:	2200      	movs	r2, #0
 800344c:	611a      	str	r2, [r3, #16]
	LoRa_SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 800344e:	4b3d      	ldr	r3, [pc, #244]	; (8003544 <_ZN8LoRaPort8SPI_InitEv+0x11c>)
 8003450:	2200      	movs	r2, #0
 8003452:	60da      	str	r2, [r3, #12]
	LoRa_SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8003454:	4b3b      	ldr	r3, [pc, #236]	; (8003544 <_ZN8LoRaPort8SPI_InitEv+0x11c>)
 8003456:	2200      	movs	r2, #0
 8003458:	621a      	str	r2, [r3, #32]
	LoRa_SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLE;
 800345a:	4b3a      	ldr	r3, [pc, #232]	; (8003544 <_ZN8LoRaPort8SPI_InitEv+0x11c>)
 800345c:	2200      	movs	r2, #0
 800345e:	625a      	str	r2, [r3, #36]	; 0x24
	LoRa_SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8003460:	4b38      	ldr	r3, [pc, #224]	; (8003544 <_ZN8LoRaPort8SPI_InitEv+0x11c>)
 8003462:	2200      	movs	r2, #0
 8003464:	629a      	str	r2, [r3, #40]	; 0x28
	LoRa_SpiHandle.Init.CRCPolynomial     = 7;
 8003466:	4b37      	ldr	r3, [pc, #220]	; (8003544 <_ZN8LoRaPort8SPI_InitEv+0x11c>)
 8003468:	2207      	movs	r2, #7
 800346a:	62da      	str	r2, [r3, #44]	; 0x2c
	//nrf24l01p_SpiHandle.Init.CRCLength         = SPI_CRC_LENGTH_8BIT;
	LoRa_SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 800346c:	4b35      	ldr	r3, [pc, #212]	; (8003544 <_ZN8LoRaPort8SPI_InitEv+0x11c>)
 800346e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003472:	619a      	str	r2, [r3, #24]
	//nrf24l01p_SpiHandle.Init.NSSPMode          = SPI_NSS_PULSE_DISABLE;

	LoRa_SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8003474:	4b33      	ldr	r3, [pc, #204]	; (8003544 <_ZN8LoRaPort8SPI_InitEv+0x11c>)
 8003476:	f44f 7282 	mov.w	r2, #260	; 0x104
 800347a:	605a      	str	r2, [r3, #4]
	GPIO_InitTypeDef  GPIO_InitStruct;

	/*##-1- Enable peripherals and GPIO Clocks #################################*/
	/* Enable GPIO TX/RX clock */
	SPIx_SCK_GPIO_CLK_ENABLE();
 800347c:	2300      	movs	r3, #0
 800347e:	61bb      	str	r3, [r7, #24]
 8003480:	4a32      	ldr	r2, [pc, #200]	; (800354c <_ZN8LoRaPort8SPI_InitEv+0x124>)
 8003482:	4b32      	ldr	r3, [pc, #200]	; (800354c <_ZN8LoRaPort8SPI_InitEv+0x124>)
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	f043 0301 	orr.w	r3, r3, #1
 800348a:	6313      	str	r3, [r2, #48]	; 0x30
 800348c:	4b2f      	ldr	r3, [pc, #188]	; (800354c <_ZN8LoRaPort8SPI_InitEv+0x124>)
 800348e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	61bb      	str	r3, [r7, #24]
 8003496:	69bb      	ldr	r3, [r7, #24]
	SPIx_MISO_GPIO_CLK_ENABLE();
 8003498:	2300      	movs	r3, #0
 800349a:	617b      	str	r3, [r7, #20]
 800349c:	4a2b      	ldr	r2, [pc, #172]	; (800354c <_ZN8LoRaPort8SPI_InitEv+0x124>)
 800349e:	4b2b      	ldr	r3, [pc, #172]	; (800354c <_ZN8LoRaPort8SPI_InitEv+0x124>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	f043 0301 	orr.w	r3, r3, #1
 80034a6:	6313      	str	r3, [r2, #48]	; 0x30
 80034a8:	4b28      	ldr	r3, [pc, #160]	; (800354c <_ZN8LoRaPort8SPI_InitEv+0x124>)
 80034aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	617b      	str	r3, [r7, #20]
 80034b2:	697b      	ldr	r3, [r7, #20]
	SPIx_MOSI_GPIO_CLK_ENABLE();
 80034b4:	2300      	movs	r3, #0
 80034b6:	613b      	str	r3, [r7, #16]
 80034b8:	4a24      	ldr	r2, [pc, #144]	; (800354c <_ZN8LoRaPort8SPI_InitEv+0x124>)
 80034ba:	4b24      	ldr	r3, [pc, #144]	; (800354c <_ZN8LoRaPort8SPI_InitEv+0x124>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	f043 0301 	orr.w	r3, r3, #1
 80034c2:	6313      	str	r3, [r2, #48]	; 0x30
 80034c4:	4b21      	ldr	r3, [pc, #132]	; (800354c <_ZN8LoRaPort8SPI_InitEv+0x124>)
 80034c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	693b      	ldr	r3, [r7, #16]
	/* Enable SPI clock */
	SPIx_CLK_ENABLE();
 80034d0:	2300      	movs	r3, #0
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	4a1d      	ldr	r2, [pc, #116]	; (800354c <_ZN8LoRaPort8SPI_InitEv+0x124>)
 80034d6:	4b1d      	ldr	r3, [pc, #116]	; (800354c <_ZN8LoRaPort8SPI_InitEv+0x124>)
 80034d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034de:	6453      	str	r3, [r2, #68]	; 0x44
 80034e0:	4b1a      	ldr	r3, [pc, #104]	; (800354c <_ZN8LoRaPort8SPI_InitEv+0x124>)
 80034e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	68fb      	ldr	r3, [r7, #12]

	/*##-2- Configure peripheral GPIO ##########################################*/
	/* SPI SCK GPIO pin configuration  */
	GPIO_InitStruct.Pin       = SPIx_SCK_PIN;
 80034ec:	2320      	movs	r3, #32
 80034ee:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80034f0:	2302      	movs	r3, #2
 80034f2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 80034f4:	2302      	movs	r3, #2
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 80034f8:	2302      	movs	r3, #2
 80034fa:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 80034fc:	2305      	movs	r3, #5
 80034fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8003500:	f107 031c 	add.w	r3, r7, #28
 8003504:	4619      	mov	r1, r3
 8003506:	4812      	ldr	r0, [pc, #72]	; (8003550 <_ZN8LoRaPort8SPI_InitEv+0x128>)
 8003508:	f7fc ff50 	bl	80003ac <HAL_GPIO_Init>

	/* SPI MISO GPIO pin configuration  */
	GPIO_InitStruct.Pin = SPIx_MISO_PIN;
 800350c:	2340      	movs	r3, #64	; 0x40
 800350e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Alternate = SPIx_MISO_AF;
 8003510:	2305      	movs	r3, #5
 8003512:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003514:	f107 031c 	add.w	r3, r7, #28
 8003518:	4619      	mov	r1, r3
 800351a:	480d      	ldr	r0, [pc, #52]	; (8003550 <_ZN8LoRaPort8SPI_InitEv+0x128>)
 800351c:	f7fc ff46 	bl	80003ac <HAL_GPIO_Init>

	/* SPI MOSI GPIO pin configuration  */
	GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 8003520:	2380      	movs	r3, #128	; 0x80
 8003522:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Alternate = SPIx_MOSI_AF;
 8003524:	2305      	movs	r3, #5
 8003526:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003528:	f107 031c 	add.w	r3, r7, #28
 800352c:	4619      	mov	r1, r3
 800352e:	4808      	ldr	r0, [pc, #32]	; (8003550 <_ZN8LoRaPort8SPI_InitEv+0x128>)
 8003530:	f7fc ff3c 	bl	80003ac <HAL_GPIO_Init>

	HAL_SPI_Init(&LoRa_SpiHandle);
 8003534:	4803      	ldr	r0, [pc, #12]	; (8003544 <_ZN8LoRaPort8SPI_InitEv+0x11c>)
 8003536:	f7fd f9d9 	bl	80008ec <HAL_SPI_Init>
}
 800353a:	bf00      	nop
 800353c:	3730      	adds	r7, #48	; 0x30
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	20002ac8 	.word	0x20002ac8
 8003548:	40013000 	.word	0x40013000
 800354c:	40023800 	.word	0x40023800
 8003550:	40020000 	.word	0x40020000

08003554 <_ZN8LoRaPort20SPI_TranscieveBufferEPhj>:
void LoRaPort::SPI_TranscieveBuffer( uint8_t *dataInOut, unsigned int size ){
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af02      	add	r7, sp, #8
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
	HAL_SPI_TransmitReceive(&LoRa_SpiHandle, dataInOut, dataInOut, size,1000);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	b29a      	uxth	r2, r3
 8003564:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	4613      	mov	r3, r2
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	68b9      	ldr	r1, [r7, #8]
 8003570:	4803      	ldr	r0, [pc, #12]	; (8003580 <_ZN8LoRaPort20SPI_TranscieveBufferEPhj+0x2c>)
 8003572:	f7fd fa2f 	bl	80009d4 <HAL_SPI_TransmitReceive>
}
 8003576:	bf00      	nop
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	20002ac8 	.word	0x20002ac8

08003584 <_ZN8LoRaPort7delayMsEj>:

}
void LoRaPort::delayUs(unsigned int us){
	asm("nop");
}
void LoRaPort::delayMs(unsigned int ms){
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
	asm("nop");
 800358e:	bf00      	nop
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <_ZN6SX1272C1Ev>:
 *      Author: emon1
 */

#include "SX1272.h"

SX1272::SX1272() {
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 f836 	bl	8003618 <_ZN12SX1272DriverC1Ev>
 80035ac:	4a05      	ldr	r2, [pc, #20]	; (80035c4 <_ZN6SX1272C1Ev+0x28>)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	settings.Modem = MODEM_FSK;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	711a      	strb	r2, [r3, #4]
}
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4618      	mov	r0, r3
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	080051b0 	.word	0x080051b0

080035c8 <_ZN6SX1272D1Ev>:

SX1272::~SX1272() {
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	4a08      	ldr	r2, [pc, #32]	; (80035f4 <_ZN6SX1272D1Ev+0x2c>)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4618      	mov	r0, r3
 80035da:	f000 f82f 	bl	800363c <_ZN12SX1272DriverD1Ev>
	// TODO Auto-generated destructor stub
}
 80035de:	2300      	movs	r3, #0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d002      	beq.n	80035ea <_ZN6SX1272D1Ev+0x22>
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 fc1c 	bl	8003e22 <_ZdlPv>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4618      	mov	r0, r3
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	080051b0 	.word	0x080051b0

080035f8 <_ZN6SX1272D0Ev>:
SX1272::SX1272() {
	// TODO Auto-generated constructor stub
	settings.Modem = MODEM_FSK;
}

SX1272::~SX1272() {
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f7ff ffe1 	bl	80035c8 <_ZN6SX1272D1Ev>
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 fc0b 	bl	8003e22 <_ZdlPv>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4618      	mov	r0, r3
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop

08003618 <_ZN12SX1272DriverC1Ev>:
 *      Author: emon1
 */

#include "SX1272Driver.h"

SX1272Driver::SX1272Driver() {
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff fd08 	bl	8003038 <_ZN7LoRaHALC1Ev>
 8003628:	4a03      	ldr	r2, [pc, #12]	; (8003638 <_ZN12SX1272DriverC1Ev+0x20>)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4618      	mov	r0, r3
 8003632:	3708      	adds	r7, #8
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	080051c0 	.word	0x080051c0

0800363c <_ZN12SX1272DriverD1Ev>:

SX1272Driver::~SX1272Driver() {
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	4a08      	ldr	r2, [pc, #32]	; (8003668 <_ZN12SX1272DriverD1Ev+0x2c>)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4618      	mov	r0, r3
 800364e:	f7ff fd05 	bl	800305c <_ZN7LoRaHALD1Ev>
	// TODO Auto-generated destructor stub
}
 8003652:	2300      	movs	r3, #0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <_ZN12SX1272DriverD1Ev+0x22>
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 fbe2 	bl	8003e22 <_ZdlPv>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4618      	mov	r0, r3
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	080051c0 	.word	0x080051c0

0800366c <_ZN12SX1272DriverD0Ev>:
SX1272Driver::SX1272Driver() {
	// TODO Auto-generated constructor stub

}

SX1272Driver::~SX1272Driver() {
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7ff ffe1 	bl	800363c <_ZN12SX1272DriverD1Ev>
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 fbd1 	bl	8003e22 <_ZdlPv>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4618      	mov	r0, r3
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop

0800368c <_ZN12SX1272Driver8SetModemENS_13RadioModems_tE>:


void SX1272Driver::SetModem(RadioModems_t modem){
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	460b      	mov	r3, r1
 8003696:	70fb      	strb	r3, [r7, #3]
    if(modem == MODEM_FSK){
 8003698:	78fb      	ldrb	r3, [r7, #3]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d108      	bne.n	80036b0 <_ZN12SX1272Driver8SetModemENS_13RadioModems_tE+0x24>
        FskMode(FSK_OpMode_Sleep);
 800369e:	2100      	movs	r1, #0
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f8d1 	bl	8003848 <_ZN12SX1272Driver7FskModeE12FSK_OpMode_t>
        LongRangeMode(SX1272_LongRangeMode_FSK);
 80036a6:	2100      	movs	r1, #0
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f831 	bl	8003710 <_ZN12SX1272Driver13LongRangeModeE22SX1272_LongRangeMode_t>
 80036ae:	e00a      	b.n	80036c6 <_ZN12SX1272Driver8SetModemENS_13RadioModems_tE+0x3a>
    }
    else if(modem == MODEM_LORA){
 80036b0:	78fb      	ldrb	r3, [r7, #3]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d107      	bne.n	80036c6 <_ZN12SX1272Driver8SetModemENS_13RadioModems_tE+0x3a>
        LoRaOpMode(LoRa_OpMode_SLEEP);
 80036b6:	2180      	movs	r1, #128	; 0x80
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f941 	bl	8003940 <_ZN12SX1272Driver10LoRaOpModeE13LoRa_OpMode_t>
        LongRangeMode(SX1272_LongRangeMode_LoRa);
 80036be:	2180      	movs	r1, #128	; 0x80
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f825 	bl	8003710 <_ZN12SX1272Driver13LongRangeModeE22SX1272_LongRangeMode_t>
    }
    settings.Modem = modem;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	78fa      	ldrb	r2, [r7, #3]
 80036ca:	711a      	strb	r2, [r3, #4]
}
 80036cc:	bf00      	nop
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <_ZN12SX1272Driver9WriteFifoEPhh>:

void SX1272Driver::WriteFifo( uint8_t *buffer, uint8_t size )
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	4613      	mov	r3, r2
 80036e0:	71fb      	strb	r3, [r7, #7]
    int i;
    for(i=0;i<size;i++){
 80036e2:	2300      	movs	r3, #0
 80036e4:	617b      	str	r3, [r7, #20]
 80036e6:	79fa      	ldrb	r2, [r7, #7]
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	dd0c      	ble.n	8003708 <_ZN12SX1272Driver9WriteFifoEPhh+0x34>
        Write(0, buffer[i]);
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	4413      	add	r3, r2
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	461a      	mov	r2, r3
 80036fa:	2100      	movs	r1, #0
 80036fc:	f7ff fd24 	bl	8003148 <_ZN7LoRaHAL5WriteEhh>
}

void SX1272Driver::WriteFifo( uint8_t *buffer, uint8_t size )
{
    int i;
    for(i=0;i<size;i++){
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	3301      	adds	r3, #1
 8003704:	617b      	str	r3, [r7, #20]
 8003706:	e7ee      	b.n	80036e6 <_ZN12SX1272Driver9WriteFifoEPhh+0x12>
        Write(0, buffer[i]);
    }
}
 8003708:	bf00      	nop
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <_ZN12SX1272Driver13LongRangeModeE22SX1272_LongRangeMode_t>:
    for(i=0;i<size;i++){
        buffer[i] = Read(0);
    }
}

void SX1272Driver::LongRangeMode(SX1272_LongRangeMode_t mode){
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	460b      	mov	r3, r1
 800371a:	70fb      	strb	r3, [r7, #3]
	Write( REG_COMMON_OPMODE, mode );
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	78fa      	ldrb	r2, [r7, #3]
 8003720:	2101      	movs	r1, #1
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff fd10 	bl	8003148 <_ZN7LoRaHAL5WriteEhh>
}
 8003728:	bf00      	nop
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <_ZN12SX1272Driver3FrfEm>:
void SX1272Driver::Frf(uint32_t freq){
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
	Write( REG_COMMON_FRFMSB, (freq>>16));
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	0c1b      	lsrs	r3, r3, #16
 8003740:	b2db      	uxtb	r3, r3
 8003742:	461a      	mov	r2, r3
 8003744:	2106      	movs	r1, #6
 8003746:	f7ff fcff 	bl	8003148 <_ZN7LoRaHAL5WriteEhh>
	Write( REG_COMMON_FRFMID, (freq>>8) );
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	0a1b      	lsrs	r3, r3, #8
 8003750:	b2db      	uxtb	r3, r3
 8003752:	461a      	mov	r2, r3
 8003754:	2107      	movs	r1, #7
 8003756:	f7ff fcf7 	bl	8003148 <_ZN7LoRaHAL5WriteEhh>
	Write( REG_COMMON_FRFLSB, (freq>>0) );
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	2108      	movs	r1, #8
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff fcf0 	bl	8003148 <_ZN7LoRaHAL5WriteEhh>
}
 8003768:	bf00      	nop
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <_ZN12SX1272Driver8PaConfigE17SX1272_PaSelect_th>:
void SX1272Driver::PaConfig(SX1272_PaSelect_t PAsel, uint8_t outputPower){
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	70fb      	strb	r3, [r7, #3]
 800377c:	4613      	mov	r3, r2
 800377e:	70bb      	strb	r3, [r7, #2]
	uint8_t temp = (PAsel<<SX1272_PaConfig_PaSelect_bp) |
 8003780:	78fb      	ldrb	r3, [r7, #3]
 8003782:	01db      	lsls	r3, r3, #7
			((outputPower<<SX1272_PaConfig_OutputPower_gp)&SX1272_PaConfig_OutputPower_gm);
 8003784:	b25a      	sxtb	r2, r3
 8003786:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800378a:	f003 030f 	and.w	r3, r3, #15
 800378e:	b25b      	sxtb	r3, r3
 8003790:	4313      	orrs	r3, r2
 8003792:	b25b      	sxtb	r3, r3
 8003794:	73fb      	strb	r3, [r7, #15]
	Write( REG_COMMON_PACONFIG,temp );
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	7bfa      	ldrb	r2, [r7, #15]
 800379a:	2109      	movs	r1, #9
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff fcd3 	bl	8003148 <_ZN7LoRaHAL5WriteEhh>
}
 80037a2:	bf00      	nop
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop

080037ac <_ZN12SX1272Driver6PaRampEb15SX1272_PaRamp_t>:
void SX1272Driver::PaRamp(bool LowPnTxPllOff , SX1272_PaRamp_t PaRamp){
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	460b      	mov	r3, r1
 80037b6:	70fb      	strb	r3, [r7, #3]
 80037b8:	4613      	mov	r3, r2
 80037ba:	70bb      	strb	r3, [r7, #2]
	uint8_t temp = (LowPnTxPllOff<<SX1272_PaRamp_LowPnTxPllOff_bp )|
 80037bc:	78fb      	ldrb	r3, [r7, #3]
 80037be:	011b      	lsls	r3, r3, #4
			((PaRamp<<SX1272_PaRamp_PaRamp_gp)&SX1272_PaRamp_PaRamp_gm);
 80037c0:	b25a      	sxtb	r2, r3
 80037c2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	b25b      	sxtb	r3, r3
 80037cc:	4313      	orrs	r3, r2
 80037ce:	b25b      	sxtb	r3, r3
 80037d0:	73fb      	strb	r3, [r7, #15]
	Write( REG_COMMON_PARAMP,temp );
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	7bfa      	ldrb	r2, [r7, #15]
 80037d6:	210a      	movs	r1, #10
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff fcb5 	bl	8003148 <_ZN7LoRaHAL5WriteEhh>
}
 80037de:	bf00      	nop
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop

080037e8 <_ZN12SX1272Driver3OCPEbh>:
void SX1272Driver::OCP(bool ocpOn, uint8_t trim){
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	460b      	mov	r3, r1
 80037f2:	70fb      	strb	r3, [r7, #3]
 80037f4:	4613      	mov	r3, r2
 80037f6:	70bb      	strb	r3, [r7, #2]
	uint8_t temp = (ocpOn<<SX1272_Ocp_OcpOn_bp) | (trim<<SX1272_Ocp_OcpTrim_gp);
 80037f8:	78fb      	ldrb	r3, [r7, #3]
 80037fa:	015b      	lsls	r3, r3, #5
 80037fc:	b25a      	sxtb	r2, r3
 80037fe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003802:	4313      	orrs	r3, r2
 8003804:	b25b      	sxtb	r3, r3
 8003806:	73fb      	strb	r3, [r7, #15]
	Write( REG_COMMON_OCP,temp );
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	7bfa      	ldrb	r2, [r7, #15]
 800380c:	210b      	movs	r1, #11
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff fc9a 	bl	8003148 <_ZN7LoRaHAL5WriteEhh>
}
 8003814:	bf00      	nop
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <_ZN12SX1272Driver3LNAE16SX1272_LnaGain_t17SX1272_LnaBoost_t>:
void SX1272Driver::LNA(SX1272_LnaGain_t gain, SX1272_LnaBoost_t boostOn){
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	70fb      	strb	r3, [r7, #3]
 8003828:	4613      	mov	r3, r2
 800382a:	70bb      	strb	r3, [r7, #2]
	uint8_t temp = gain | boostOn;
 800382c:	78fa      	ldrb	r2, [r7, #3]
 800382e:	78bb      	ldrb	r3, [r7, #2]
 8003830:	4313      	orrs	r3, r2
 8003832:	73fb      	strb	r3, [r7, #15]
	Write( REG_COMMON_LNA,temp );
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	7bfa      	ldrb	r2, [r7, #15]
 8003838:	210c      	movs	r1, #12
 800383a:	4618      	mov	r0, r3
 800383c:	f7ff fc84 	bl	8003148 <_ZN7LoRaHAL5WriteEhh>
}
 8003840:	bf00      	nop
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <_ZN12SX1272Driver7FskModeE12FSK_OpMode_t>:
	uint8_t temp =  Read(REG_COMMON_OPMODE);
	temp &= ~FSK_OpMode_ModulationShaping_gm;
	temp |= sel<<FSK_OpMode_ModulationShaping_gp;
	Write( REG_COMMON_OPMODE, temp );
}
void SX1272Driver::FskMode(FSK_OpMode_t sel){
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	460b      	mov	r3, r1
 8003852:	70fb      	strb	r3, [r7, #3]
	uint8_t temp =  Read(REG_COMMON_OPMODE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2101      	movs	r1, #1
 8003858:	4618      	mov	r0, r3
 800385a:	f7ff fc9f 	bl	800319c <_ZN7LoRaHAL4ReadEh>
 800385e:	4603      	mov	r3, r0
 8003860:	73fb      	strb	r3, [r7, #15]
	temp &= ~FSK_OpMode_Mode_gm;
 8003862:	7bfb      	ldrb	r3, [r7, #15]
 8003864:	f023 0307 	bic.w	r3, r3, #7
 8003868:	73fb      	strb	r3, [r7, #15]
	temp |= sel<<FSK_OpMode_Mode_gp;
 800386a:	7bfa      	ldrb	r2, [r7, #15]
 800386c:	78fb      	ldrb	r3, [r7, #3]
 800386e:	4313      	orrs	r3, r2
 8003870:	73fb      	strb	r3, [r7, #15]
	Write( REG_COMMON_OPMODE, temp );
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	7bfa      	ldrb	r2, [r7, #15]
 8003876:	2101      	movs	r1, #1
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff fc65 	bl	8003148 <_ZN7LoRaHAL5WriteEhh>
}
 800387e:	bf00      	nop
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop

08003888 <_ZN12SX1272Driver14FskNodeAddressEh>:
	temp |= (val>>8);
	Write( REG_FSK_PACKETCONFIG2, temp);
	Write( REG_FSK_PAYLOADLENGTH, (val>>0));
    Write(REG_COMMON_OPMODE, original_opmode);
}
void SX1272Driver::FskNodeAddress(uint8_t val){
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	70fb      	strb	r3, [r7, #3]
    uint8_t original_opmode = Read(REG_COMMON_OPMODE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2101      	movs	r1, #1
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff fc7f 	bl	800319c <_ZN7LoRaHAL4ReadEh>
 800389e:	4603      	mov	r3, r0
 80038a0:	73fb      	strb	r3, [r7, #15]
    if(settings.Modem == MODEM_FSK){
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	791b      	ldrb	r3, [r3, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d104      	bne.n	80038b4 <_ZN12SX1272Driver14FskNodeAddressEh+0x2c>
        FskMode(FSK_OpMode_Stdby);
 80038aa:	2101      	movs	r1, #1
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7ff ffcb 	bl	8003848 <_ZN12SX1272Driver7FskModeE12FSK_OpMode_t>
 80038b2:	e007      	b.n	80038c4 <_ZN12SX1272Driver14FskNodeAddressEh+0x3c>
    }
    else if(settings.Modem == MODEM_LORA){
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	791b      	ldrb	r3, [r3, #4]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d103      	bne.n	80038c4 <_ZN12SX1272Driver14FskNodeAddressEh+0x3c>
        LoRaOpMode(LoRa_OpMode_STDBY_FskRegAccess);
 80038bc:	21c1      	movs	r1, #193	; 0xc1
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f83e 	bl	8003940 <_ZN12SX1272Driver10LoRaOpModeE13LoRa_OpMode_t>
    }
    Write(REG_FSK_NODEADRS,val);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	78fa      	ldrb	r2, [r7, #3]
 80038c8:	2133      	movs	r1, #51	; 0x33
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff fc3c 	bl	8003148 <_ZN7LoRaHAL5WriteEhh>
    Write(REG_COMMON_OPMODE, original_opmode);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	7bfa      	ldrb	r2, [r7, #15]
 80038d4:	2101      	movs	r1, #1
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff fc36 	bl	8003148 <_ZN7LoRaHAL5WriteEhh>
}
 80038dc:	bf00      	nop
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <_ZN12SX1272Driver19FskBroadcastAddressEh>:
void SX1272Driver::FskBroadcastAddress(uint8_t val){
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	460b      	mov	r3, r1
 80038ee:	70fb      	strb	r3, [r7, #3]
    uint8_t original_opmode = Read(REG_COMMON_OPMODE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2101      	movs	r1, #1
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff fc51 	bl	800319c <_ZN7LoRaHAL4ReadEh>
 80038fa:	4603      	mov	r3, r0
 80038fc:	73fb      	strb	r3, [r7, #15]
    if(settings.Modem == MODEM_FSK){
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	791b      	ldrb	r3, [r3, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d104      	bne.n	8003910 <_ZN12SX1272Driver19FskBroadcastAddressEh+0x2c>
        FskMode(FSK_OpMode_Stdby);
 8003906:	2101      	movs	r1, #1
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7ff ff9d 	bl	8003848 <_ZN12SX1272Driver7FskModeE12FSK_OpMode_t>
 800390e:	e007      	b.n	8003920 <_ZN12SX1272Driver19FskBroadcastAddressEh+0x3c>
    }
    else if(settings.Modem == MODEM_LORA){
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	791b      	ldrb	r3, [r3, #4]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d103      	bne.n	8003920 <_ZN12SX1272Driver19FskBroadcastAddressEh+0x3c>
        LoRaOpMode(LoRa_OpMode_STDBY_FskRegAccess);
 8003918:	21c1      	movs	r1, #193	; 0xc1
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f810 	bl	8003940 <_ZN12SX1272Driver10LoRaOpModeE13LoRa_OpMode_t>
    }
    Write(REG_FSK_BROADCASTADRS,val);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	78fa      	ldrb	r2, [r7, #3]
 8003924:	2134      	movs	r1, #52	; 0x34
 8003926:	4618      	mov	r0, r3
 8003928:	f7ff fc0e 	bl	8003148 <_ZN7LoRaHAL5WriteEhh>
    Write(REG_COMMON_OPMODE, original_opmode);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	7bfa      	ldrb	r2, [r7, #15]
 8003930:	2101      	movs	r1, #1
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff fc08 	bl	8003148 <_ZN7LoRaHAL5WriteEhh>
}
 8003938:	bf00      	nop
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <_ZN12SX1272Driver10LoRaOpModeE13LoRa_OpMode_t>:
			Write(REG_FSK_IRQFLAGS2, temp);
		}
	}
}

void SX1272Driver::LoRaOpMode(LoRa_OpMode_t mode){
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	460b      	mov	r3, r1
 800394a:	70fb      	strb	r3, [r7, #3]
    Write( REG_COMMON_OPMODE, mode);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	78fa      	ldrb	r2, [r7, #3]
 8003950:	2101      	movs	r1, #1
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff fbf8 	bl	8003148 <_ZN7LoRaHAL5WriteEhh>
}
 8003958:	bf00      	nop
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <_ZN12SX1272Driver20LoRaWriteFifoAddrPtrEh>:
void SX1272Driver::LoRaWriteFifoAddrPtr(uint8_t addr){
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	460b      	mov	r3, r1
 800396a:	70fb      	strb	r3, [r7, #3]
	Write( REG_LORA_FIFOADDRPTR, addr);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	78fa      	ldrb	r2, [r7, #3]
 8003970:	210d      	movs	r1, #13
 8003972:	4618      	mov	r0, r3
 8003974:	f7ff fbe8 	bl	8003148 <_ZN7LoRaHAL5WriteEhh>
}
 8003978:	bf00      	nop
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <_ZN12SX1272Driver12LoRaIrqFlagsE15LoRa_IrqFlags_t>:
	return Read( REG_LORA_FIFORXCURRENTADDR);
}
void SX1272Driver::LoRaIrqFlagsMask(uint8_t mask){
	Write( REG_LORA_IRQFLAGSMASK, mask);
}
bool SX1272Driver::LoRaIrqFlags(LoRa_IrqFlags_t flag){
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	460b      	mov	r3, r1
 800398a:	70fb      	strb	r3, [r7, #3]
	uint8_t temp = Read (REG_LORA_IRQFLAGS);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2112      	movs	r1, #18
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff fc03 	bl	800319c <_ZN7LoRaHAL4ReadEh>
 8003996:	4603      	mov	r3, r0
 8003998:	73fb      	strb	r3, [r7, #15]
	if ((temp & flag)!= 0) return 1;
 800399a:	7bfa      	ldrb	r2, [r7, #15]
 800399c:	78fb      	ldrb	r3, [r7, #3]
 800399e:	4013      	ands	r3, r2
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <_ZN12SX1272Driver12LoRaIrqFlagsE15LoRa_IrqFlags_t+0x2a>
 80039a6:	2301      	movs	r3, #1
 80039a8:	e000      	b.n	80039ac <_ZN12SX1272Driver12LoRaIrqFlagsE15LoRa_IrqFlags_t+0x2c>
	else return 0;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <_ZN12SX1272Driver15LoRaModemConfigE14LoRa_ModemBw_t22LoRa_ModemCodingRate_tbbb27LoRa_ModemSpreadingFactor_tbb>:
		bool RxPayloadCrcOn,
		bool LowDataRateOptimize,
		LoRa_ModemSpreadingFactor_t spreadingfactor,
		bool txContinuousMode,
		bool ArcAutoOn
		){
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	4608      	mov	r0, r1
 80039be:	4611      	mov	r1, r2
 80039c0:	461a      	mov	r2, r3
 80039c2:	4603      	mov	r3, r0
 80039c4:	70fb      	strb	r3, [r7, #3]
 80039c6:	460b      	mov	r3, r1
 80039c8:	70bb      	strb	r3, [r7, #2]
 80039ca:	4613      	mov	r3, r2
 80039cc:	707b      	strb	r3, [r7, #1]

	uint8_t config1 = bandwidth |
			codingRate |
			(implicitHeaderModeOn<<LoRa_ModemConfig1_ImplicitHeaderModeOn_bp) |
			(RxPayloadCrcOn<<LoRa_ModemConfig1_RxPayloadCrcOn_bp) |
			(LowDataRateOptimize<<LoRa_ModemConfig1_LowDataRateOptimize_bp);
 80039ce:	78fa      	ldrb	r2, [r7, #3]
 80039d0:	78bb      	ldrb	r3, [r7, #2]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	b25a      	sxtb	r2, r3
		bool ArcAutoOn
		){

	uint8_t config1 = bandwidth |
			codingRate |
			(implicitHeaderModeOn<<LoRa_ModemConfig1_ImplicitHeaderModeOn_bp) |
 80039d8:	787b      	ldrb	r3, [r7, #1]
 80039da:	009b      	lsls	r3, r3, #2
			(RxPayloadCrcOn<<LoRa_ModemConfig1_RxPayloadCrcOn_bp) |
			(LowDataRateOptimize<<LoRa_ModemConfig1_LowDataRateOptimize_bp);
 80039dc:	b25b      	sxtb	r3, r3
 80039de:	4313      	orrs	r3, r2
 80039e0:	b25a      	sxtb	r2, r3
		){

	uint8_t config1 = bandwidth |
			codingRate |
			(implicitHeaderModeOn<<LoRa_ModemConfig1_ImplicitHeaderModeOn_bp) |
			(RxPayloadCrcOn<<LoRa_ModemConfig1_RxPayloadCrcOn_bp) |
 80039e2:	7e3b      	ldrb	r3, [r7, #24]
 80039e4:	005b      	lsls	r3, r3, #1
			(LowDataRateOptimize<<LoRa_ModemConfig1_LowDataRateOptimize_bp);
 80039e6:	b25b      	sxtb	r3, r3
 80039e8:	4313      	orrs	r3, r2
 80039ea:	b25a      	sxtb	r2, r3
 80039ec:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	b25b      	sxtb	r3, r3
 80039f4:	73fb      	strb	r3, [r7, #15]

	uint8_t config2 = spreadingfactor |
			(txContinuousMode<<LoRa_ModemConfig2_TxContMode_bp) |
 80039f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80039fa:	00db      	lsls	r3, r3, #3
			(ArcAutoOn<<LoRa_ModemConfig2_ArcAutoOn_bp);
 80039fc:	b25a      	sxtb	r2, r3
 80039fe:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	b25a      	sxtb	r2, r3
 8003a06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	b25b      	sxtb	r3, r3
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	b25b      	sxtb	r3, r3
 8003a12:	73bb      	strb	r3, [r7, #14]

	Write (REG_LORA_MODEMCONFIG1, config1);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	7bfa      	ldrb	r2, [r7, #15]
 8003a18:	211d      	movs	r1, #29
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7ff fb94 	bl	8003148 <_ZN7LoRaHAL5WriteEhh>
	Write (REG_LORA_MODEMCONFIG2, config2);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	7bba      	ldrb	r2, [r7, #14]
 8003a24:	211e      	movs	r1, #30
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff fb8e 	bl	8003148 <_ZN7LoRaHAL5WriteEhh>
}
 8003a2c:	bf00      	nop
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <_ZN12SX1272Driver17LoRaPayloadLengthEh>:
}
void SX1272Driver::LoRaPreambleLength(uint16_t len){
	Write (REG_LORA_PREAMBLEMSB, (len>>8)&0xFF);
	Write (REG_LORA_PREAMBLELSB, (len>>0)&0xFF);
}
void SX1272Driver::LoRaPayloadLength(uint8_t len){
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	70fb      	strb	r3, [r7, #3]
	Write (REG_LORA_PAYLOADLENGTH, len);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	78fa      	ldrb	r2, [r7, #3]
 8003a44:	2122      	movs	r1, #34	; 0x22
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7ff fb7e 	bl	8003148 <_ZN7LoRaHAL5WriteEhh>
}
 8003a4c:	bf00      	nop
 8003a4e:	3708      	adds	r7, #8
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <_Z13sx1272_threadPv>:
#define TX_NODE 1
#define RX_NODE 0


void sx1272_thread(void * ptr)
{
 8003a54:	b5b0      	push	{r4, r5, r7, lr}
 8003a56:	b094      	sub	sp, #80	; 0x50
 8003a58:	af06      	add	r7, sp, #24
 8003a5a:	6078      	str	r0, [r7, #4]

    printf("starting up system\r\n");
 8003a5c:	4865      	ldr	r0, [pc, #404]	; (8003bf4 <_Z13sx1272_threadPv+0x1a0>)
 8003a5e:	f000 fb51 	bl	8004104 <puts>
    myRadio.Reset();
 8003a62:	4865      	ldr	r0, [pc, #404]	; (8003bf8 <_Z13sx1272_threadPv+0x1a4>)
 8003a64:	f7ff fb48 	bl	80030f8 <_ZN7LoRaHAL5ResetEv>


    myRadio.SetModem(SX1272::MODEM_LORA );
 8003a68:	2101      	movs	r1, #1
 8003a6a:	4863      	ldr	r0, [pc, #396]	; (8003bf8 <_Z13sx1272_threadPv+0x1a4>)
 8003a6c:	f7ff fe0e 	bl	800368c <_ZN12SX1272Driver8SetModemENS_13RadioModems_tE>
    myRadio.LoRaOpMode(LoRa_OpMode_STDBY);
 8003a70:	2181      	movs	r1, #129	; 0x81
 8003a72:	4861      	ldr	r0, [pc, #388]	; (8003bf8 <_Z13sx1272_threadPv+0x1a4>)
 8003a74:	f7ff ff64 	bl	8003940 <_ZN12SX1272Driver10LoRaOpModeE13LoRa_OpMode_t>
                    1,
                    1,
					LoRa_ModemSpreadingFactor_4096chipsPerSymbol,
                    0,
                    1
                    );
 8003a78:	2301      	movs	r3, #1
 8003a7a:	9304      	str	r3, [sp, #16]
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	9303      	str	r3, [sp, #12]
 8003a80:	23c0      	movs	r3, #192	; 0xc0
 8003a82:	9302      	str	r3, [sp, #8]
 8003a84:	2301      	movs	r3, #1
 8003a86:	9301      	str	r3, [sp, #4]
 8003a88:	2301      	movs	r3, #1
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	2208      	movs	r2, #8
 8003a90:	2180      	movs	r1, #128	; 0x80
 8003a92:	4859      	ldr	r0, [pc, #356]	; (8003bf8 <_Z13sx1272_threadPv+0x1a4>)
 8003a94:	f7ff ff8e 	bl	80039b4 <_ZN12SX1272Driver15LoRaModemConfigE14LoRa_ModemBw_t22LoRa_ModemCodingRate_tbbb27LoRa_ModemSpreadingFactor_tbb>
    myRadio.Frf(0xD84CCC);
 8003a98:	4958      	ldr	r1, [pc, #352]	; (8003bfc <_Z13sx1272_threadPv+0x1a8>)
 8003a9a:	4857      	ldr	r0, [pc, #348]	; (8003bf8 <_Z13sx1272_threadPv+0x1a4>)
 8003a9c:	f7ff fe48 	bl	8003730 <_ZN12SX1272Driver3FrfEm>
    myRadio.PaConfig(SX1272_PaSelect_PA_BOOST_pin, 0x07);
 8003aa0:	2207      	movs	r2, #7
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	4854      	ldr	r0, [pc, #336]	; (8003bf8 <_Z13sx1272_threadPv+0x1a4>)
 8003aa6:	f7ff fe63 	bl	8003770 <_ZN12SX1272Driver8PaConfigE17SX1272_PaSelect_th>
    myRadio.PaRamp(0 , SX1272_PaRamp_40us);
 8003aaa:	2209      	movs	r2, #9
 8003aac:	2100      	movs	r1, #0
 8003aae:	4852      	ldr	r0, [pc, #328]	; (8003bf8 <_Z13sx1272_threadPv+0x1a4>)
 8003ab0:	f7ff fe7c 	bl	80037ac <_ZN12SX1272Driver6PaRampEb15SX1272_PaRamp_t>
    myRadio.OCP(1, 0x1B);
 8003ab4:	221b      	movs	r2, #27
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	484f      	ldr	r0, [pc, #316]	; (8003bf8 <_Z13sx1272_threadPv+0x1a4>)
 8003aba:	f7ff fe95 	bl	80037e8 <_ZN12SX1272Driver3OCPEbh>
    myRadio.LNA(SX1272_LnaGain_G1, SX1272_LnaBoost_BoostOn)    ;
 8003abe:	2203      	movs	r2, #3
 8003ac0:	2120      	movs	r1, #32
 8003ac2:	484d      	ldr	r0, [pc, #308]	; (8003bf8 <_Z13sx1272_threadPv+0x1a4>)
 8003ac4:	f7ff feaa 	bl	800381c <_ZN12SX1272Driver3LNAE16SX1272_LnaGain_t17SX1272_LnaBoost_t>
    myRadio.LoRaWriteFifoAddrPtr(0);
 8003ac8:	2100      	movs	r1, #0
 8003aca:	484b      	ldr	r0, [pc, #300]	; (8003bf8 <_Z13sx1272_threadPv+0x1a4>)
 8003acc:	f7ff ff48 	bl	8003960 <_ZN12SX1272Driver20LoRaWriteFifoAddrPtrEh>
    myRadio.FskNodeAddress(3);
 8003ad0:	2103      	movs	r1, #3
 8003ad2:	4849      	ldr	r0, [pc, #292]	; (8003bf8 <_Z13sx1272_threadPv+0x1a4>)
 8003ad4:	f7ff fed8 	bl	8003888 <_ZN12SX1272Driver14FskNodeAddressEh>
    myRadio.FskBroadcastAddress(0);
 8003ad8:	2100      	movs	r1, #0
 8003ada:	4847      	ldr	r0, [pc, #284]	; (8003bf8 <_Z13sx1272_threadPv+0x1a4>)
 8003adc:	f7ff ff02 	bl	80038e4 <_ZN12SX1272Driver19FskBroadcastAddressEh>

    myRadio.LoRaPayloadLength(255);
 8003ae0:	21ff      	movs	r1, #255	; 0xff
 8003ae2:	4845      	ldr	r0, [pc, #276]	; (8003bf8 <_Z13sx1272_threadPv+0x1a4>)
 8003ae4:	f7ff ffa6 	bl	8003a34 <_ZN12SX1272Driver17LoRaPayloadLengthEh>

    int i;
    int x;
    for(i=1;i<0x3F;i++){
 8003ae8:	2301      	movs	r3, #1
 8003aea:	637b      	str	r3, [r7, #52]	; 0x34
 8003aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aee:	2b3e      	cmp	r3, #62	; 0x3e
 8003af0:	dc10      	bgt.n	8003b14 <_Z13sx1272_threadPv+0xc0>
        x = myRadio.Read(i);
 8003af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	4619      	mov	r1, r3
 8003af8:	483f      	ldr	r0, [pc, #252]	; (8003bf8 <_Z13sx1272_threadPv+0x1a4>)
 8003afa:	f7ff fb4f 	bl	800319c <_ZN7LoRaHAL4ReadEh>
 8003afe:	4603      	mov	r3, r0
 8003b00:	62fb      	str	r3, [r7, #44]	; 0x2c
        printf("%x : %x\r\n", i, x);
 8003b02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b04:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003b06:	483e      	ldr	r0, [pc, #248]	; (8003c00 <_Z13sx1272_threadPv+0x1ac>)
 8003b08:	f000 fa8a 	bl	8004020 <iprintf>

    myRadio.LoRaPayloadLength(255);

    int i;
    int x;
    for(i=1;i<0x3F;i++){
 8003b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b0e:	3301      	adds	r3, #1
 8003b10:	637b      	str	r3, [r7, #52]	; 0x34
 8003b12:	e7eb      	b.n	8003aec <_Z13sx1272_threadPv+0x98>
        x = myRadio.Read(i);
        printf("%x : %x\r\n", i, x);
    }

    char myname[] = "the way you shake it";
 8003b14:	4b3b      	ldr	r3, [pc, #236]	; (8003c04 <_Z13sx1272_threadPv+0x1b0>)
 8003b16:	f107 040c 	add.w	r4, r7, #12
 8003b1a:	461d      	mov	r5, r3
 8003b1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b20:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003b24:	6020      	str	r0, [r4, #0]
 8003b26:	3404      	adds	r4, #4
 8003b28:	7021      	strb	r1, [r4, #0]

    myRadio.Write( REG_LORA_IRQFLAGS, 0xFF);
 8003b2a:	22ff      	movs	r2, #255	; 0xff
 8003b2c:	2112      	movs	r1, #18
 8003b2e:	4832      	ldr	r0, [pc, #200]	; (8003bf8 <_Z13sx1272_threadPv+0x1a4>)
 8003b30:	f7ff fb0a 	bl	8003148 <_ZN7LoRaHAL5WriteEhh>
    int n=0;
 8003b34:	2300      	movs	r3, #0
 8003b36:	62bb      	str	r3, [r7, #40]	; 0x28
    int count = 0;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	633b      	str	r3, [r7, #48]	; 0x30

	#if (TX_NODE == 1)
		myRadio.FskNodeAddress(3);
 8003b3c:	2103      	movs	r1, #3
 8003b3e:	482e      	ldr	r0, [pc, #184]	; (8003bf8 <_Z13sx1272_threadPv+0x1a4>)
 8003b40:	f7ff fea2 	bl	8003888 <_ZN12SX1272Driver14FskNodeAddressEh>
		myRadio.antSwSet(1);
 8003b44:	2101      	movs	r1, #1
 8003b46:	482c      	ldr	r0, [pc, #176]	; (8003bf8 <_Z13sx1272_threadPv+0x1a4>)
 8003b48:	f7ff fab0 	bl	80030ac <_ZN7LoRaHAL8antSwSetEb>
	#if (RX_NODE == 1)
		myRadio.FskNodeAddress(8);
		myRadio.antSwSet(0);
	#endif

	myRadio.delayMs(1000);
 8003b4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003b50:	4829      	ldr	r0, [pc, #164]	; (8003bf8 <_Z13sx1272_threadPv+0x1a4>)
 8003b52:	f7ff fd17 	bl	8003584 <_ZN8LoRaPort7delayMsEj>

	while (1)
	{
#if (TX_NODE == 1)
        //TX
        sprintf(myname, "count : %d", count++);
 8003b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b58:	1c5a      	adds	r2, r3, #1
 8003b5a:	633a      	str	r2, [r7, #48]	; 0x30
 8003b5c:	f107 000c 	add.w	r0, r7, #12
 8003b60:	461a      	mov	r2, r3
 8003b62:	4929      	ldr	r1, [pc, #164]	; (8003c08 <_Z13sx1272_threadPv+0x1b4>)
 8003b64:	f000 fae6 	bl	8004134 <siprintf>
        myRadio.LoRaOpMode(LoRa_OpMode_STDBY);
 8003b68:	2181      	movs	r1, #129	; 0x81
 8003b6a:	4823      	ldr	r0, [pc, #140]	; (8003bf8 <_Z13sx1272_threadPv+0x1a4>)
 8003b6c:	f7ff fee8 	bl	8003940 <_ZN12SX1272Driver10LoRaOpModeE13LoRa_OpMode_t>
        myRadio.LoRaWriteFifoAddrPtr(0x80);
 8003b70:	2180      	movs	r1, #128	; 0x80
 8003b72:	4821      	ldr	r0, [pc, #132]	; (8003bf8 <_Z13sx1272_threadPv+0x1a4>)
 8003b74:	f7ff fef4 	bl	8003960 <_ZN12SX1272Driver20LoRaWriteFifoAddrPtrEh>
        myRadio.Write(0, strlen(myname) + 1);
 8003b78:	f107 030c 	add.w	r3, r7, #12
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7fc fb47 	bl	8000210 <strlen>
 8003b82:	4603      	mov	r3, r0
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	3301      	adds	r3, #1
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	481a      	ldr	r0, [pc, #104]	; (8003bf8 <_Z13sx1272_threadPv+0x1a4>)
 8003b90:	f7ff fada 	bl	8003148 <_ZN7LoRaHAL5WriteEhh>
        myRadio.WriteFifo((uint8_t*)myname, strlen(myname) );
 8003b94:	f107 030c 	add.w	r3, r7, #12
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7fc fb39 	bl	8000210 <strlen>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	f107 030c 	add.w	r3, r7, #12
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	4813      	ldr	r0, [pc, #76]	; (8003bf8 <_Z13sx1272_threadPv+0x1a4>)
 8003baa:	f7ff fd93 	bl	80036d4 <_ZN12SX1272Driver9WriteFifoEPhh>
        int addr = myRadio.Read( REG_LORA_FIFOADDRPTR);
 8003bae:	210d      	movs	r1, #13
 8003bb0:	4811      	ldr	r0, [pc, #68]	; (8003bf8 <_Z13sx1272_threadPv+0x1a4>)
 8003bb2:	f7ff faf3 	bl	800319c <_ZN7LoRaHAL4ReadEh>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	627b      	str	r3, [r7, #36]	; 0x24
        myRadio.LoRaOpMode(LoRa_OpMode_TX);
 8003bba:	2183      	movs	r1, #131	; 0x83
 8003bbc:	480e      	ldr	r0, [pc, #56]	; (8003bf8 <_Z13sx1272_threadPv+0x1a4>)
 8003bbe:	f7ff febf 	bl	8003940 <_ZN12SX1272Driver10LoRaOpModeE13LoRa_OpMode_t>

        while(myRadio.LoRaIrqFlags(LoRa_IrqFlags_TxDone) == 0);
 8003bc2:	2108      	movs	r1, #8
 8003bc4:	480c      	ldr	r0, [pc, #48]	; (8003bf8 <_Z13sx1272_threadPv+0x1a4>)
 8003bc6:	f7ff fedb 	bl	8003980 <_ZN12SX1272Driver12LoRaIrqFlagsE15LoRa_IrqFlags_t>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	f083 0301 	eor.w	r3, r3, #1
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d000      	beq.n	8003bd8 <_Z13sx1272_threadPv+0x184>
 8003bd6:	e7f4      	b.n	8003bc2 <_Z13sx1272_threadPv+0x16e>
        printf("sent\r\n");
 8003bd8:	480c      	ldr	r0, [pc, #48]	; (8003c0c <_Z13sx1272_threadPv+0x1b8>)
 8003bda:	f000 fa93 	bl	8004104 <puts>

        myRadio.LoRaOpMode(LoRa_OpMode_STDBY);
 8003bde:	2181      	movs	r1, #129	; 0x81
 8003be0:	4805      	ldr	r0, [pc, #20]	; (8003bf8 <_Z13sx1272_threadPv+0x1a4>)
 8003be2:	f7ff fead 	bl	8003940 <_ZN12SX1272Driver10LoRaOpModeE13LoRa_OpMode_t>
        myRadio.Write( REG_LORA_IRQFLAGS, 0xFF);
 8003be6:	22ff      	movs	r2, #255	; 0xff
 8003be8:	2112      	movs	r1, #18
 8003bea:	4803      	ldr	r0, [pc, #12]	; (8003bf8 <_Z13sx1272_threadPv+0x1a4>)
 8003bec:	f7ff faac 	bl	8003148 <_ZN7LoRaHAL5WriteEhh>
		myRadio.antSwSet(0);
	#endif

	myRadio.delayMs(1000);

	while (1)
 8003bf0:	e7b1      	b.n	8003b56 <_Z13sx1272_threadPv+0x102>
 8003bf2:	bf00      	nop
 8003bf4:	08005134 	.word	0x08005134
 8003bf8:	20002b20 	.word	0x20002b20
 8003bfc:	00d84ccc 	.word	0x00d84ccc
 8003c00:	08005148 	.word	0x08005148
 8003c04:	08005168 	.word	0x08005168
 8003c08:	08005154 	.word	0x08005154
 8003c0c:	08005160 	.word	0x08005160

08003c10 <main>:
}


/* main function */
int main(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af02      	add	r7, sp, #8
  // example: tid_name = osThreadCreate (osThread(name), NULL);
  osKernelStart ();                     // start thread execution
#endif

  //xTaskCreate(nrf24l01p_thread,( const char * ) "t_gpio",configMINIMAL_STACK_SIZE*2,NULL,tskIDLE_PRIORITY+1 ,NULL );
  xTaskCreate(sx1272_thread,( const char * ) "t_gpio",configMINIMAL_STACK_SIZE*2,NULL,tskIDLE_PRIORITY+1 ,NULL );
 8003c16:	2300      	movs	r3, #0
 8003c18:	9301      	str	r3, [sp, #4]
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	2300      	movs	r3, #0
 8003c20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c24:	4903      	ldr	r1, [pc, #12]	; (8003c34 <main+0x24>)
 8003c26:	4804      	ldr	r0, [pc, #16]	; (8003c38 <main+0x28>)
 8003c28:	f7fe f918 	bl	8001e5c <xTaskCreate>

  vTaskStartScheduler();
 8003c2c:	f7fe fa44 	bl	80020b8 <vTaskStartScheduler>
  /* Infinite loop */
  while (1)
 8003c30:	e7fe      	b.n	8003c30 <main+0x20>
 8003c32:	bf00      	nop
 8003c34:	08005180 	.word	0x08005180
 8003c38:	08003a55 	.word	0x08003a55

08003c3c <_Z41__static_initialization_and_destruction_0ii>:
static void Error_Handler(void)
{
  while(1)
  {
  }
}
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d10c      	bne.n	8003c66 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d107      	bne.n	8003c66 <_Z41__static_initialization_and_destruction_0ii+0x2a>
void SystemClock_Config(void);
static void Error_Handler(void);

//LCD03 lcd(LCD03::LCD03_SERIAL,LCD03::LCD03_20_4,LCD03::LCD03_I2C_ADDRESS_0xc8);
//NRF24L01p *Radio;
SX1272 myRadio;
 8003c56:	4806      	ldr	r0, [pc, #24]	; (8003c70 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003c58:	f7ff fca0 	bl	800359c <_ZN6SX1272C1Ev>
 8003c5c:	4a05      	ldr	r2, [pc, #20]	; (8003c74 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8003c5e:	4906      	ldr	r1, [pc, #24]	; (8003c78 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003c60:	4803      	ldr	r0, [pc, #12]	; (8003c70 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003c62:	f000 f8d9 	bl	8003e18 <__aeabi_atexit>
static void Error_Handler(void)
{
  while(1)
  {
  }
}
 8003c66:	bf00      	nop
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	20002b20 	.word	0x20002b20
 8003c74:	20000000 	.word	0x20000000
 8003c78:	080035c9 	.word	0x080035c9

08003c7c <_GLOBAL__sub_I_myRadio>:
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003c84:	2001      	movs	r0, #1
 8003c86:	f7ff ffd9 	bl	8003c3c <_Z41__static_initialization_and_destruction_0ii>
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003c94:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c98:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d013      	beq.n	8003ccc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003ca4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003ca8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003cac:	f003 0301 	and.w	r3, r3, #1
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00b      	beq.n	8003ccc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003cb4:	e000      	b.n	8003cb8 <ITM_SendChar+0x2c>
    {
      __NOP();
 8003cb6:	bf00      	nop
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003cb8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0f9      	beq.n	8003cb6 <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003cc2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	b2d2      	uxtb	r2, r2
 8003cca:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003ccc:	687b      	ldr	r3, [r7, #4]
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop

08003cdc <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	/* return len; */
	int i;
	for(i=0;i<len;i++){
 8003ce8:	2300      	movs	r3, #0
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	e009      	b.n	8003d02 <_write+0x26>
		ITM_SendChar(*ptr++);
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	1c5a      	adds	r2, r3, #1
 8003cf2:	60ba      	str	r2, [r7, #8]
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7ff ffc8 	bl	8003c8c <ITM_SendChar>
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
	/* Implement your write code here, this is used by puts and printf for example */
	/* return len; */
	int i;
	for(i=0;i<len;i++){
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	617b      	str	r3, [r7, #20]
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	dbf1      	blt.n	8003cee <_write+0x12>
		ITM_SendChar(*ptr++);
	}
	errno = ENOSYS;
 8003d0a:	4b04      	ldr	r3, [pc, #16]	; (8003d1c <_write+0x40>)
 8003d0c:	2258      	movs	r2, #88	; 0x58
 8003d0e:	601a      	str	r2, [r3, #0]
	return len;
 8003d10:	687b      	ldr	r3, [r7, #4]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3718      	adds	r7, #24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	20002b38 	.word	0x20002b38

08003d20 <_sbrk>:

void * _sbrk(int32_t incr)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8003d28:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <_sbrk+0x38>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d102      	bne.n	8003d36 <_sbrk+0x16>
		heap_end = & end;
 8003d30:	4b09      	ldr	r3, [pc, #36]	; (8003d58 <_sbrk+0x38>)
 8003d32:	4a0a      	ldr	r2, [pc, #40]	; (8003d5c <_sbrk+0x3c>)
 8003d34:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 8003d36:	4b08      	ldr	r3, [pc, #32]	; (8003d58 <_sbrk+0x38>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 8003d3c:	4b06      	ldr	r3, [pc, #24]	; (8003d58 <_sbrk+0x38>)
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4413      	add	r3, r2
 8003d44:	4a04      	ldr	r2, [pc, #16]	; (8003d58 <_sbrk+0x38>)
 8003d46:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 8003d48:	68fb      	ldr	r3, [r7, #12]
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	20002b28 	.word	0x20002b28
 8003d5c:	20002b40 	.word	0x20002b40

08003d60 <_close>:

int _close(int32_t file)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8003d68:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <_close+0x20>)
 8003d6a:	2258      	movs	r2, #88	; 0x58
 8003d6c:	601a      	str	r2, [r3, #0]
	return -1;
 8003d6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	20002b38 	.word	0x20002b38

08003d84 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 8003d8e:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <_fstat+0x20>)
 8003d90:	2258      	movs	r2, #88	; 0x58
 8003d92:	601a      	str	r2, [r3, #0]
	return -1;
 8003d94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	20002b38 	.word	0x20002b38

08003da8 <_isatty>:

int _isatty(int32_t file)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8003db0:	4b04      	ldr	r3, [pc, #16]	; (8003dc4 <_isatty+0x1c>)
 8003db2:	2258      	movs	r2, #88	; 0x58
 8003db4:	601a      	str	r2, [r3, #0]
	return 0;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	20002b38 	.word	0x20002b38

08003dc8 <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8003dd4:	4b05      	ldr	r3, [pc, #20]	; (8003dec <_lseek+0x24>)
 8003dd6:	2258      	movs	r2, #88	; 0x58
 8003dd8:	601a      	str	r2, [r3, #0]
	return -1;
 8003dda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3714      	adds	r7, #20
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	20002b38 	.word	0x20002b38

08003df0 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8003dfc:	4b05      	ldr	r3, [pc, #20]	; (8003e14 <_read+0x24>)
 8003dfe:	2258      	movs	r2, #88	; 0x58
 8003e00:	601a      	str	r2, [r3, #0]
	return -1;
 8003e02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	20002b38 	.word	0x20002b38

08003e18 <__aeabi_atexit>:
 8003e18:	460b      	mov	r3, r1
 8003e1a:	4601      	mov	r1, r0
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 b803 	b.w	8003e28 <__cxa_atexit>

08003e22 <_ZdlPv>:
 8003e22:	f000 b835 	b.w	8003e90 <free>
	...

08003e28 <__cxa_atexit>:
 8003e28:	b510      	push	{r4, lr}
 8003e2a:	4c05      	ldr	r4, [pc, #20]	; (8003e40 <__cxa_atexit+0x18>)
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	b12c      	cbz	r4, 8003e3c <__cxa_atexit+0x14>
 8003e30:	460a      	mov	r2, r1
 8003e32:	4601      	mov	r1, r0
 8003e34:	2002      	movs	r0, #2
 8003e36:	f3af 8000 	nop.w
 8003e3a:	bd10      	pop	{r4, pc}
 8003e3c:	4620      	mov	r0, r4
 8003e3e:	bd10      	pop	{r4, pc}
 8003e40:	00000000 	.word	0x00000000

08003e44 <__libc_init_array>:
 8003e44:	b570      	push	{r4, r5, r6, lr}
 8003e46:	4b0e      	ldr	r3, [pc, #56]	; (8003e80 <__libc_init_array+0x3c>)
 8003e48:	4c0e      	ldr	r4, [pc, #56]	; (8003e84 <__libc_init_array+0x40>)
 8003e4a:	1ae4      	subs	r4, r4, r3
 8003e4c:	10a4      	asrs	r4, r4, #2
 8003e4e:	2500      	movs	r5, #0
 8003e50:	461e      	mov	r6, r3
 8003e52:	42a5      	cmp	r5, r4
 8003e54:	d004      	beq.n	8003e60 <__libc_init_array+0x1c>
 8003e56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e5a:	4798      	blx	r3
 8003e5c:	3501      	adds	r5, #1
 8003e5e:	e7f8      	b.n	8003e52 <__libc_init_array+0xe>
 8003e60:	f001 f954 	bl	800510c <_init>
 8003e64:	4c08      	ldr	r4, [pc, #32]	; (8003e88 <__libc_init_array+0x44>)
 8003e66:	4b09      	ldr	r3, [pc, #36]	; (8003e8c <__libc_init_array+0x48>)
 8003e68:	1ae4      	subs	r4, r4, r3
 8003e6a:	10a4      	asrs	r4, r4, #2
 8003e6c:	2500      	movs	r5, #0
 8003e6e:	461e      	mov	r6, r3
 8003e70:	42a5      	cmp	r5, r4
 8003e72:	d004      	beq.n	8003e7e <__libc_init_array+0x3a>
 8003e74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e78:	4798      	blx	r3
 8003e7a:	3501      	adds	r5, #1
 8003e7c:	e7f8      	b.n	8003e70 <__libc_init_array+0x2c>
 8003e7e:	bd70      	pop	{r4, r5, r6, pc}
 8003e80:	08005264 	.word	0x08005264
 8003e84:	08005264 	.word	0x08005264
 8003e88:	0800526c 	.word	0x0800526c
 8003e8c:	08005264 	.word	0x08005264

08003e90 <free>:
 8003e90:	4b02      	ldr	r3, [pc, #8]	; (8003e9c <free+0xc>)
 8003e92:	4601      	mov	r1, r0
 8003e94:	6818      	ldr	r0, [r3, #0]
 8003e96:	f000 b817 	b.w	8003ec8 <_free_r>
 8003e9a:	bf00      	nop
 8003e9c:	200000bc 	.word	0x200000bc

08003ea0 <memcpy>:
 8003ea0:	b510      	push	{r4, lr}
 8003ea2:	1e43      	subs	r3, r0, #1
 8003ea4:	440a      	add	r2, r1
 8003ea6:	4291      	cmp	r1, r2
 8003ea8:	d004      	beq.n	8003eb4 <memcpy+0x14>
 8003eaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003eae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003eb2:	e7f8      	b.n	8003ea6 <memcpy+0x6>
 8003eb4:	bd10      	pop	{r4, pc}

08003eb6 <memset>:
 8003eb6:	4402      	add	r2, r0
 8003eb8:	4603      	mov	r3, r0
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d002      	beq.n	8003ec4 <memset+0xe>
 8003ebe:	f803 1b01 	strb.w	r1, [r3], #1
 8003ec2:	e7fa      	b.n	8003eba <memset+0x4>
 8003ec4:	4770      	bx	lr
	...

08003ec8 <_free_r>:
 8003ec8:	b538      	push	{r3, r4, r5, lr}
 8003eca:	4605      	mov	r5, r0
 8003ecc:	2900      	cmp	r1, #0
 8003ece:	d046      	beq.n	8003f5e <_free_r+0x96>
 8003ed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ed4:	1f0c      	subs	r4, r1, #4
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	bfb8      	it	lt
 8003eda:	18e4      	addlt	r4, r4, r3
 8003edc:	f000 fbec 	bl	80046b8 <__malloc_lock>
 8003ee0:	4a1f      	ldr	r2, [pc, #124]	; (8003f60 <_free_r+0x98>)
 8003ee2:	6813      	ldr	r3, [r2, #0]
 8003ee4:	4611      	mov	r1, r2
 8003ee6:	b913      	cbnz	r3, 8003eee <_free_r+0x26>
 8003ee8:	6063      	str	r3, [r4, #4]
 8003eea:	6014      	str	r4, [r2, #0]
 8003eec:	e032      	b.n	8003f54 <_free_r+0x8c>
 8003eee:	42a3      	cmp	r3, r4
 8003ef0:	d90e      	bls.n	8003f10 <_free_r+0x48>
 8003ef2:	6822      	ldr	r2, [r4, #0]
 8003ef4:	18a0      	adds	r0, r4, r2
 8003ef6:	4283      	cmp	r3, r0
 8003ef8:	bf04      	itt	eq
 8003efa:	6818      	ldreq	r0, [r3, #0]
 8003efc:	685b      	ldreq	r3, [r3, #4]
 8003efe:	6063      	str	r3, [r4, #4]
 8003f00:	bf04      	itt	eq
 8003f02:	1812      	addeq	r2, r2, r0
 8003f04:	6022      	streq	r2, [r4, #0]
 8003f06:	600c      	str	r4, [r1, #0]
 8003f08:	e024      	b.n	8003f54 <_free_r+0x8c>
 8003f0a:	42a2      	cmp	r2, r4
 8003f0c:	d803      	bhi.n	8003f16 <_free_r+0x4e>
 8003f0e:	4613      	mov	r3, r2
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	2a00      	cmp	r2, #0
 8003f14:	d1f9      	bne.n	8003f0a <_free_r+0x42>
 8003f16:	6818      	ldr	r0, [r3, #0]
 8003f18:	1819      	adds	r1, r3, r0
 8003f1a:	42a1      	cmp	r1, r4
 8003f1c:	d10b      	bne.n	8003f36 <_free_r+0x6e>
 8003f1e:	6821      	ldr	r1, [r4, #0]
 8003f20:	4401      	add	r1, r0
 8003f22:	1858      	adds	r0, r3, r1
 8003f24:	4282      	cmp	r2, r0
 8003f26:	6019      	str	r1, [r3, #0]
 8003f28:	d114      	bne.n	8003f54 <_free_r+0x8c>
 8003f2a:	6810      	ldr	r0, [r2, #0]
 8003f2c:	6852      	ldr	r2, [r2, #4]
 8003f2e:	605a      	str	r2, [r3, #4]
 8003f30:	4401      	add	r1, r0
 8003f32:	6019      	str	r1, [r3, #0]
 8003f34:	e00e      	b.n	8003f54 <_free_r+0x8c>
 8003f36:	d902      	bls.n	8003f3e <_free_r+0x76>
 8003f38:	230c      	movs	r3, #12
 8003f3a:	602b      	str	r3, [r5, #0]
 8003f3c:	e00a      	b.n	8003f54 <_free_r+0x8c>
 8003f3e:	6821      	ldr	r1, [r4, #0]
 8003f40:	1860      	adds	r0, r4, r1
 8003f42:	4282      	cmp	r2, r0
 8003f44:	bf04      	itt	eq
 8003f46:	6810      	ldreq	r0, [r2, #0]
 8003f48:	6852      	ldreq	r2, [r2, #4]
 8003f4a:	6062      	str	r2, [r4, #4]
 8003f4c:	bf04      	itt	eq
 8003f4e:	1809      	addeq	r1, r1, r0
 8003f50:	6021      	streq	r1, [r4, #0]
 8003f52:	605c      	str	r4, [r3, #4]
 8003f54:	4628      	mov	r0, r5
 8003f56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f5a:	f000 bbae 	b.w	80046ba <__malloc_unlock>
 8003f5e:	bd38      	pop	{r3, r4, r5, pc}
 8003f60:	20002b30 	.word	0x20002b30

08003f64 <_malloc_r>:
 8003f64:	b570      	push	{r4, r5, r6, lr}
 8003f66:	1ccd      	adds	r5, r1, #3
 8003f68:	f025 0503 	bic.w	r5, r5, #3
 8003f6c:	3508      	adds	r5, #8
 8003f6e:	2d0c      	cmp	r5, #12
 8003f70:	bf38      	it	cc
 8003f72:	250c      	movcc	r5, #12
 8003f74:	2d00      	cmp	r5, #0
 8003f76:	4606      	mov	r6, r0
 8003f78:	db01      	blt.n	8003f7e <_malloc_r+0x1a>
 8003f7a:	42a9      	cmp	r1, r5
 8003f7c:	d902      	bls.n	8003f84 <_malloc_r+0x20>
 8003f7e:	230c      	movs	r3, #12
 8003f80:	6033      	str	r3, [r6, #0]
 8003f82:	e046      	b.n	8004012 <_malloc_r+0xae>
 8003f84:	f000 fb98 	bl	80046b8 <__malloc_lock>
 8003f88:	4b23      	ldr	r3, [pc, #140]	; (8004018 <_malloc_r+0xb4>)
 8003f8a:	681c      	ldr	r4, [r3, #0]
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	4621      	mov	r1, r4
 8003f90:	b1a1      	cbz	r1, 8003fbc <_malloc_r+0x58>
 8003f92:	680b      	ldr	r3, [r1, #0]
 8003f94:	1b5b      	subs	r3, r3, r5
 8003f96:	d40e      	bmi.n	8003fb6 <_malloc_r+0x52>
 8003f98:	2b0b      	cmp	r3, #11
 8003f9a:	d903      	bls.n	8003fa4 <_malloc_r+0x40>
 8003f9c:	600b      	str	r3, [r1, #0]
 8003f9e:	18cc      	adds	r4, r1, r3
 8003fa0:	50cd      	str	r5, [r1, r3]
 8003fa2:	e01e      	b.n	8003fe2 <_malloc_r+0x7e>
 8003fa4:	428c      	cmp	r4, r1
 8003fa6:	bf0d      	iteet	eq
 8003fa8:	6863      	ldreq	r3, [r4, #4]
 8003faa:	684b      	ldrne	r3, [r1, #4]
 8003fac:	6063      	strne	r3, [r4, #4]
 8003fae:	6013      	streq	r3, [r2, #0]
 8003fb0:	bf18      	it	ne
 8003fb2:	460c      	movne	r4, r1
 8003fb4:	e015      	b.n	8003fe2 <_malloc_r+0x7e>
 8003fb6:	460c      	mov	r4, r1
 8003fb8:	6849      	ldr	r1, [r1, #4]
 8003fba:	e7e9      	b.n	8003f90 <_malloc_r+0x2c>
 8003fbc:	4c17      	ldr	r4, [pc, #92]	; (800401c <_malloc_r+0xb8>)
 8003fbe:	6823      	ldr	r3, [r4, #0]
 8003fc0:	b91b      	cbnz	r3, 8003fca <_malloc_r+0x66>
 8003fc2:	4630      	mov	r0, r6
 8003fc4:	f000 f8a6 	bl	8004114 <_sbrk_r>
 8003fc8:	6020      	str	r0, [r4, #0]
 8003fca:	4629      	mov	r1, r5
 8003fcc:	4630      	mov	r0, r6
 8003fce:	f000 f8a1 	bl	8004114 <_sbrk_r>
 8003fd2:	1c43      	adds	r3, r0, #1
 8003fd4:	d018      	beq.n	8004008 <_malloc_r+0xa4>
 8003fd6:	1cc4      	adds	r4, r0, #3
 8003fd8:	f024 0403 	bic.w	r4, r4, #3
 8003fdc:	42a0      	cmp	r0, r4
 8003fde:	d10d      	bne.n	8003ffc <_malloc_r+0x98>
 8003fe0:	6025      	str	r5, [r4, #0]
 8003fe2:	4630      	mov	r0, r6
 8003fe4:	f000 fb69 	bl	80046ba <__malloc_unlock>
 8003fe8:	f104 000b 	add.w	r0, r4, #11
 8003fec:	1d23      	adds	r3, r4, #4
 8003fee:	f020 0007 	bic.w	r0, r0, #7
 8003ff2:	1ac3      	subs	r3, r0, r3
 8003ff4:	d00e      	beq.n	8004014 <_malloc_r+0xb0>
 8003ff6:	425a      	negs	r2, r3
 8003ff8:	50e2      	str	r2, [r4, r3]
 8003ffa:	bd70      	pop	{r4, r5, r6, pc}
 8003ffc:	1a21      	subs	r1, r4, r0
 8003ffe:	4630      	mov	r0, r6
 8004000:	f000 f888 	bl	8004114 <_sbrk_r>
 8004004:	3001      	adds	r0, #1
 8004006:	d1eb      	bne.n	8003fe0 <_malloc_r+0x7c>
 8004008:	230c      	movs	r3, #12
 800400a:	6033      	str	r3, [r6, #0]
 800400c:	4630      	mov	r0, r6
 800400e:	f000 fb54 	bl	80046ba <__malloc_unlock>
 8004012:	2000      	movs	r0, #0
 8004014:	bd70      	pop	{r4, r5, r6, pc}
 8004016:	bf00      	nop
 8004018:	20002b30 	.word	0x20002b30
 800401c:	20002b2c 	.word	0x20002b2c

08004020 <iprintf>:
 8004020:	b40f      	push	{r0, r1, r2, r3}
 8004022:	4b0a      	ldr	r3, [pc, #40]	; (800404c <iprintf+0x2c>)
 8004024:	b513      	push	{r0, r1, r4, lr}
 8004026:	681c      	ldr	r4, [r3, #0]
 8004028:	b124      	cbz	r4, 8004034 <iprintf+0x14>
 800402a:	69a3      	ldr	r3, [r4, #24]
 800402c:	b913      	cbnz	r3, 8004034 <iprintf+0x14>
 800402e:	4620      	mov	r0, r4
 8004030:	f000 fa58 	bl	80044e4 <__sinit>
 8004034:	ab05      	add	r3, sp, #20
 8004036:	9a04      	ldr	r2, [sp, #16]
 8004038:	68a1      	ldr	r1, [r4, #8]
 800403a:	9301      	str	r3, [sp, #4]
 800403c:	4620      	mov	r0, r4
 800403e:	f000 fcb5 	bl	80049ac <_vfiprintf_r>
 8004042:	b002      	add	sp, #8
 8004044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004048:	b004      	add	sp, #16
 800404a:	4770      	bx	lr
 800404c:	200000bc 	.word	0x200000bc

08004050 <_puts_r>:
 8004050:	b570      	push	{r4, r5, r6, lr}
 8004052:	460e      	mov	r6, r1
 8004054:	4605      	mov	r5, r0
 8004056:	b118      	cbz	r0, 8004060 <_puts_r+0x10>
 8004058:	6983      	ldr	r3, [r0, #24]
 800405a:	b90b      	cbnz	r3, 8004060 <_puts_r+0x10>
 800405c:	f000 fa42 	bl	80044e4 <__sinit>
 8004060:	69ab      	ldr	r3, [r5, #24]
 8004062:	68ac      	ldr	r4, [r5, #8]
 8004064:	b913      	cbnz	r3, 800406c <_puts_r+0x1c>
 8004066:	4628      	mov	r0, r5
 8004068:	f000 fa3c 	bl	80044e4 <__sinit>
 800406c:	4b22      	ldr	r3, [pc, #136]	; (80040f8 <_puts_r+0xa8>)
 800406e:	429c      	cmp	r4, r3
 8004070:	d101      	bne.n	8004076 <_puts_r+0x26>
 8004072:	686c      	ldr	r4, [r5, #4]
 8004074:	e008      	b.n	8004088 <_puts_r+0x38>
 8004076:	4b21      	ldr	r3, [pc, #132]	; (80040fc <_puts_r+0xac>)
 8004078:	429c      	cmp	r4, r3
 800407a:	d101      	bne.n	8004080 <_puts_r+0x30>
 800407c:	68ac      	ldr	r4, [r5, #8]
 800407e:	e003      	b.n	8004088 <_puts_r+0x38>
 8004080:	4b1f      	ldr	r3, [pc, #124]	; (8004100 <_puts_r+0xb0>)
 8004082:	429c      	cmp	r4, r3
 8004084:	bf08      	it	eq
 8004086:	68ec      	ldreq	r4, [r5, #12]
 8004088:	89a3      	ldrh	r3, [r4, #12]
 800408a:	071b      	lsls	r3, r3, #28
 800408c:	d501      	bpl.n	8004092 <_puts_r+0x42>
 800408e:	6923      	ldr	r3, [r4, #16]
 8004090:	b93b      	cbnz	r3, 80040a2 <_puts_r+0x52>
 8004092:	4621      	mov	r1, r4
 8004094:	4628      	mov	r0, r5
 8004096:	f000 f8c5 	bl	8004224 <__swsetup_r>
 800409a:	b110      	cbz	r0, 80040a2 <_puts_r+0x52>
 800409c:	f04f 30ff 	mov.w	r0, #4294967295
 80040a0:	bd70      	pop	{r4, r5, r6, pc}
 80040a2:	3e01      	subs	r6, #1
 80040a4:	68a3      	ldr	r3, [r4, #8]
 80040a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80040aa:	3b01      	subs	r3, #1
 80040ac:	60a3      	str	r3, [r4, #8]
 80040ae:	b191      	cbz	r1, 80040d6 <_puts_r+0x86>
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	da04      	bge.n	80040be <_puts_r+0x6e>
 80040b4:	69a2      	ldr	r2, [r4, #24]
 80040b6:	4293      	cmp	r3, r2
 80040b8:	db06      	blt.n	80040c8 <_puts_r+0x78>
 80040ba:	290a      	cmp	r1, #10
 80040bc:	d004      	beq.n	80040c8 <_puts_r+0x78>
 80040be:	6823      	ldr	r3, [r4, #0]
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	6022      	str	r2, [r4, #0]
 80040c4:	7019      	strb	r1, [r3, #0]
 80040c6:	e7ed      	b.n	80040a4 <_puts_r+0x54>
 80040c8:	4622      	mov	r2, r4
 80040ca:	4628      	mov	r0, r5
 80040cc:	f000 f856 	bl	800417c <__swbuf_r>
 80040d0:	3001      	adds	r0, #1
 80040d2:	d1e7      	bne.n	80040a4 <_puts_r+0x54>
 80040d4:	e7e2      	b.n	800409c <_puts_r+0x4c>
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	da08      	bge.n	80040ec <_puts_r+0x9c>
 80040da:	4622      	mov	r2, r4
 80040dc:	210a      	movs	r1, #10
 80040de:	4628      	mov	r0, r5
 80040e0:	f000 f84c 	bl	800417c <__swbuf_r>
 80040e4:	3001      	adds	r0, #1
 80040e6:	d0d9      	beq.n	800409c <_puts_r+0x4c>
 80040e8:	200a      	movs	r0, #10
 80040ea:	bd70      	pop	{r4, r5, r6, pc}
 80040ec:	6823      	ldr	r3, [r4, #0]
 80040ee:	200a      	movs	r0, #10
 80040f0:	1c5a      	adds	r2, r3, #1
 80040f2:	6022      	str	r2, [r4, #0]
 80040f4:	7018      	strb	r0, [r3, #0]
 80040f6:	bd70      	pop	{r4, r5, r6, pc}
 80040f8:	080051d0 	.word	0x080051d0
 80040fc:	080051f0 	.word	0x080051f0
 8004100:	08005210 	.word	0x08005210

08004104 <puts>:
 8004104:	4b02      	ldr	r3, [pc, #8]	; (8004110 <puts+0xc>)
 8004106:	4601      	mov	r1, r0
 8004108:	6818      	ldr	r0, [r3, #0]
 800410a:	f7ff bfa1 	b.w	8004050 <_puts_r>
 800410e:	bf00      	nop
 8004110:	200000bc 	.word	0x200000bc

08004114 <_sbrk_r>:
 8004114:	b538      	push	{r3, r4, r5, lr}
 8004116:	4c06      	ldr	r4, [pc, #24]	; (8004130 <_sbrk_r+0x1c>)
 8004118:	2300      	movs	r3, #0
 800411a:	4605      	mov	r5, r0
 800411c:	4608      	mov	r0, r1
 800411e:	6023      	str	r3, [r4, #0]
 8004120:	f7ff fdfe 	bl	8003d20 <_sbrk>
 8004124:	1c43      	adds	r3, r0, #1
 8004126:	d102      	bne.n	800412e <_sbrk_r+0x1a>
 8004128:	6823      	ldr	r3, [r4, #0]
 800412a:	b103      	cbz	r3, 800412e <_sbrk_r+0x1a>
 800412c:	602b      	str	r3, [r5, #0]
 800412e:	bd38      	pop	{r3, r4, r5, pc}
 8004130:	20002b38 	.word	0x20002b38

08004134 <siprintf>:
 8004134:	b40e      	push	{r1, r2, r3}
 8004136:	b500      	push	{lr}
 8004138:	b09c      	sub	sp, #112	; 0x70
 800413a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800413e:	ab1d      	add	r3, sp, #116	; 0x74
 8004140:	f8ad 1014 	strh.w	r1, [sp, #20]
 8004144:	9002      	str	r0, [sp, #8]
 8004146:	9006      	str	r0, [sp, #24]
 8004148:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800414c:	480a      	ldr	r0, [pc, #40]	; (8004178 <siprintf+0x44>)
 800414e:	9104      	str	r1, [sp, #16]
 8004150:	9107      	str	r1, [sp, #28]
 8004152:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004156:	f853 2b04 	ldr.w	r2, [r3], #4
 800415a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800415e:	6800      	ldr	r0, [r0, #0]
 8004160:	9301      	str	r3, [sp, #4]
 8004162:	a902      	add	r1, sp, #8
 8004164:	f000 fb04 	bl	8004770 <_svfiprintf_r>
 8004168:	9b02      	ldr	r3, [sp, #8]
 800416a:	2200      	movs	r2, #0
 800416c:	701a      	strb	r2, [r3, #0]
 800416e:	b01c      	add	sp, #112	; 0x70
 8004170:	f85d eb04 	ldr.w	lr, [sp], #4
 8004174:	b003      	add	sp, #12
 8004176:	4770      	bx	lr
 8004178:	200000bc 	.word	0x200000bc

0800417c <__swbuf_r>:
 800417c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800417e:	460f      	mov	r7, r1
 8004180:	4614      	mov	r4, r2
 8004182:	4606      	mov	r6, r0
 8004184:	b118      	cbz	r0, 800418e <__swbuf_r+0x12>
 8004186:	6983      	ldr	r3, [r0, #24]
 8004188:	b90b      	cbnz	r3, 800418e <__swbuf_r+0x12>
 800418a:	f000 f9ab 	bl	80044e4 <__sinit>
 800418e:	4b22      	ldr	r3, [pc, #136]	; (8004218 <__swbuf_r+0x9c>)
 8004190:	429c      	cmp	r4, r3
 8004192:	d101      	bne.n	8004198 <__swbuf_r+0x1c>
 8004194:	6874      	ldr	r4, [r6, #4]
 8004196:	e008      	b.n	80041aa <__swbuf_r+0x2e>
 8004198:	4b20      	ldr	r3, [pc, #128]	; (800421c <__swbuf_r+0xa0>)
 800419a:	429c      	cmp	r4, r3
 800419c:	d101      	bne.n	80041a2 <__swbuf_r+0x26>
 800419e:	68b4      	ldr	r4, [r6, #8]
 80041a0:	e003      	b.n	80041aa <__swbuf_r+0x2e>
 80041a2:	4b1f      	ldr	r3, [pc, #124]	; (8004220 <__swbuf_r+0xa4>)
 80041a4:	429c      	cmp	r4, r3
 80041a6:	bf08      	it	eq
 80041a8:	68f4      	ldreq	r4, [r6, #12]
 80041aa:	69a3      	ldr	r3, [r4, #24]
 80041ac:	60a3      	str	r3, [r4, #8]
 80041ae:	89a3      	ldrh	r3, [r4, #12]
 80041b0:	071a      	lsls	r2, r3, #28
 80041b2:	d509      	bpl.n	80041c8 <__swbuf_r+0x4c>
 80041b4:	6923      	ldr	r3, [r4, #16]
 80041b6:	b13b      	cbz	r3, 80041c8 <__swbuf_r+0x4c>
 80041b8:	6823      	ldr	r3, [r4, #0]
 80041ba:	6920      	ldr	r0, [r4, #16]
 80041bc:	1a18      	subs	r0, r3, r0
 80041be:	6963      	ldr	r3, [r4, #20]
 80041c0:	4298      	cmp	r0, r3
 80041c2:	b2fd      	uxtb	r5, r7
 80041c4:	db0f      	blt.n	80041e6 <__swbuf_r+0x6a>
 80041c6:	e008      	b.n	80041da <__swbuf_r+0x5e>
 80041c8:	4621      	mov	r1, r4
 80041ca:	4630      	mov	r0, r6
 80041cc:	f000 f82a 	bl	8004224 <__swsetup_r>
 80041d0:	2800      	cmp	r0, #0
 80041d2:	d0f1      	beq.n	80041b8 <__swbuf_r+0x3c>
 80041d4:	f04f 30ff 	mov.w	r0, #4294967295
 80041d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041da:	4621      	mov	r1, r4
 80041dc:	4630      	mov	r0, r6
 80041de:	f000 f917 	bl	8004410 <_fflush_r>
 80041e2:	2800      	cmp	r0, #0
 80041e4:	d1f6      	bne.n	80041d4 <__swbuf_r+0x58>
 80041e6:	68a3      	ldr	r3, [r4, #8]
 80041e8:	3b01      	subs	r3, #1
 80041ea:	60a3      	str	r3, [r4, #8]
 80041ec:	6823      	ldr	r3, [r4, #0]
 80041ee:	1c5a      	adds	r2, r3, #1
 80041f0:	6022      	str	r2, [r4, #0]
 80041f2:	701f      	strb	r7, [r3, #0]
 80041f4:	6962      	ldr	r2, [r4, #20]
 80041f6:	1c43      	adds	r3, r0, #1
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d004      	beq.n	8004206 <__swbuf_r+0x8a>
 80041fc:	89a3      	ldrh	r3, [r4, #12]
 80041fe:	07db      	lsls	r3, r3, #31
 8004200:	d507      	bpl.n	8004212 <__swbuf_r+0x96>
 8004202:	2d0a      	cmp	r5, #10
 8004204:	d105      	bne.n	8004212 <__swbuf_r+0x96>
 8004206:	4621      	mov	r1, r4
 8004208:	4630      	mov	r0, r6
 800420a:	f000 f901 	bl	8004410 <_fflush_r>
 800420e:	2800      	cmp	r0, #0
 8004210:	d1e0      	bne.n	80041d4 <__swbuf_r+0x58>
 8004212:	4628      	mov	r0, r5
 8004214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004216:	bf00      	nop
 8004218:	080051d0 	.word	0x080051d0
 800421c:	080051f0 	.word	0x080051f0
 8004220:	08005210 	.word	0x08005210

08004224 <__swsetup_r>:
 8004224:	4b32      	ldr	r3, [pc, #200]	; (80042f0 <__swsetup_r+0xcc>)
 8004226:	b570      	push	{r4, r5, r6, lr}
 8004228:	681d      	ldr	r5, [r3, #0]
 800422a:	4606      	mov	r6, r0
 800422c:	460c      	mov	r4, r1
 800422e:	b125      	cbz	r5, 800423a <__swsetup_r+0x16>
 8004230:	69ab      	ldr	r3, [r5, #24]
 8004232:	b913      	cbnz	r3, 800423a <__swsetup_r+0x16>
 8004234:	4628      	mov	r0, r5
 8004236:	f000 f955 	bl	80044e4 <__sinit>
 800423a:	4b2e      	ldr	r3, [pc, #184]	; (80042f4 <__swsetup_r+0xd0>)
 800423c:	429c      	cmp	r4, r3
 800423e:	d101      	bne.n	8004244 <__swsetup_r+0x20>
 8004240:	686c      	ldr	r4, [r5, #4]
 8004242:	e008      	b.n	8004256 <__swsetup_r+0x32>
 8004244:	4b2c      	ldr	r3, [pc, #176]	; (80042f8 <__swsetup_r+0xd4>)
 8004246:	429c      	cmp	r4, r3
 8004248:	d101      	bne.n	800424e <__swsetup_r+0x2a>
 800424a:	68ac      	ldr	r4, [r5, #8]
 800424c:	e003      	b.n	8004256 <__swsetup_r+0x32>
 800424e:	4b2b      	ldr	r3, [pc, #172]	; (80042fc <__swsetup_r+0xd8>)
 8004250:	429c      	cmp	r4, r3
 8004252:	bf08      	it	eq
 8004254:	68ec      	ldreq	r4, [r5, #12]
 8004256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800425a:	b29a      	uxth	r2, r3
 800425c:	0715      	lsls	r5, r2, #28
 800425e:	d41d      	bmi.n	800429c <__swsetup_r+0x78>
 8004260:	06d0      	lsls	r0, r2, #27
 8004262:	d402      	bmi.n	800426a <__swsetup_r+0x46>
 8004264:	2209      	movs	r2, #9
 8004266:	6032      	str	r2, [r6, #0]
 8004268:	e03a      	b.n	80042e0 <__swsetup_r+0xbc>
 800426a:	0751      	lsls	r1, r2, #29
 800426c:	d512      	bpl.n	8004294 <__swsetup_r+0x70>
 800426e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004270:	b141      	cbz	r1, 8004284 <__swsetup_r+0x60>
 8004272:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004276:	4299      	cmp	r1, r3
 8004278:	d002      	beq.n	8004280 <__swsetup_r+0x5c>
 800427a:	4630      	mov	r0, r6
 800427c:	f7ff fe24 	bl	8003ec8 <_free_r>
 8004280:	2300      	movs	r3, #0
 8004282:	6363      	str	r3, [r4, #52]	; 0x34
 8004284:	89a3      	ldrh	r3, [r4, #12]
 8004286:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800428a:	81a3      	strh	r3, [r4, #12]
 800428c:	2300      	movs	r3, #0
 800428e:	6063      	str	r3, [r4, #4]
 8004290:	6923      	ldr	r3, [r4, #16]
 8004292:	6023      	str	r3, [r4, #0]
 8004294:	89a3      	ldrh	r3, [r4, #12]
 8004296:	f043 0308 	orr.w	r3, r3, #8
 800429a:	81a3      	strh	r3, [r4, #12]
 800429c:	6923      	ldr	r3, [r4, #16]
 800429e:	b94b      	cbnz	r3, 80042b4 <__swsetup_r+0x90>
 80042a0:	89a3      	ldrh	r3, [r4, #12]
 80042a2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80042a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042aa:	d003      	beq.n	80042b4 <__swsetup_r+0x90>
 80042ac:	4621      	mov	r1, r4
 80042ae:	4630      	mov	r0, r6
 80042b0:	f000 f9c6 	bl	8004640 <__smakebuf_r>
 80042b4:	89a2      	ldrh	r2, [r4, #12]
 80042b6:	f012 0301 	ands.w	r3, r2, #1
 80042ba:	d005      	beq.n	80042c8 <__swsetup_r+0xa4>
 80042bc:	2300      	movs	r3, #0
 80042be:	60a3      	str	r3, [r4, #8]
 80042c0:	6963      	ldr	r3, [r4, #20]
 80042c2:	425b      	negs	r3, r3
 80042c4:	61a3      	str	r3, [r4, #24]
 80042c6:	e003      	b.n	80042d0 <__swsetup_r+0xac>
 80042c8:	0792      	lsls	r2, r2, #30
 80042ca:	bf58      	it	pl
 80042cc:	6963      	ldrpl	r3, [r4, #20]
 80042ce:	60a3      	str	r3, [r4, #8]
 80042d0:	6923      	ldr	r3, [r4, #16]
 80042d2:	b95b      	cbnz	r3, 80042ec <__swsetup_r+0xc8>
 80042d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042d8:	f003 0080 	and.w	r0, r3, #128	; 0x80
 80042dc:	b280      	uxth	r0, r0
 80042de:	b130      	cbz	r0, 80042ee <__swsetup_r+0xca>
 80042e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042e4:	81a3      	strh	r3, [r4, #12]
 80042e6:	f04f 30ff 	mov.w	r0, #4294967295
 80042ea:	bd70      	pop	{r4, r5, r6, pc}
 80042ec:	2000      	movs	r0, #0
 80042ee:	bd70      	pop	{r4, r5, r6, pc}
 80042f0:	200000bc 	.word	0x200000bc
 80042f4:	080051d0 	.word	0x080051d0
 80042f8:	080051f0 	.word	0x080051f0
 80042fc:	08005210 	.word	0x08005210

08004300 <__sflush_r>:
 8004300:	898a      	ldrh	r2, [r1, #12]
 8004302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004306:	4605      	mov	r5, r0
 8004308:	0710      	lsls	r0, r2, #28
 800430a:	460c      	mov	r4, r1
 800430c:	d459      	bmi.n	80043c2 <__sflush_r+0xc2>
 800430e:	684b      	ldr	r3, [r1, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	dc02      	bgt.n	800431a <__sflush_r+0x1a>
 8004314:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004316:	2b00      	cmp	r3, #0
 8004318:	dd17      	ble.n	800434a <__sflush_r+0x4a>
 800431a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800431c:	b1ae      	cbz	r6, 800434a <__sflush_r+0x4a>
 800431e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004322:	2300      	movs	r3, #0
 8004324:	b292      	uxth	r2, r2
 8004326:	682f      	ldr	r7, [r5, #0]
 8004328:	602b      	str	r3, [r5, #0]
 800432a:	b10a      	cbz	r2, 8004330 <__sflush_r+0x30>
 800432c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800432e:	e015      	b.n	800435c <__sflush_r+0x5c>
 8004330:	6a21      	ldr	r1, [r4, #32]
 8004332:	2301      	movs	r3, #1
 8004334:	4628      	mov	r0, r5
 8004336:	47b0      	blx	r6
 8004338:	1c41      	adds	r1, r0, #1
 800433a:	d10f      	bne.n	800435c <__sflush_r+0x5c>
 800433c:	682b      	ldr	r3, [r5, #0]
 800433e:	b16b      	cbz	r3, 800435c <__sflush_r+0x5c>
 8004340:	2b1d      	cmp	r3, #29
 8004342:	d001      	beq.n	8004348 <__sflush_r+0x48>
 8004344:	2b16      	cmp	r3, #22
 8004346:	d103      	bne.n	8004350 <__sflush_r+0x50>
 8004348:	602f      	str	r7, [r5, #0]
 800434a:	2000      	movs	r0, #0
 800434c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004350:	89a3      	ldrh	r3, [r4, #12]
 8004352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004356:	81a3      	strh	r3, [r4, #12]
 8004358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800435c:	89a3      	ldrh	r3, [r4, #12]
 800435e:	075a      	lsls	r2, r3, #29
 8004360:	d505      	bpl.n	800436e <__sflush_r+0x6e>
 8004362:	6863      	ldr	r3, [r4, #4]
 8004364:	1ac0      	subs	r0, r0, r3
 8004366:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004368:	b10b      	cbz	r3, 800436e <__sflush_r+0x6e>
 800436a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800436c:	1ac0      	subs	r0, r0, r3
 800436e:	2300      	movs	r3, #0
 8004370:	4602      	mov	r2, r0
 8004372:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004374:	6a21      	ldr	r1, [r4, #32]
 8004376:	4628      	mov	r0, r5
 8004378:	47b0      	blx	r6
 800437a:	1c43      	adds	r3, r0, #1
 800437c:	89a3      	ldrh	r3, [r4, #12]
 800437e:	d106      	bne.n	800438e <__sflush_r+0x8e>
 8004380:	6829      	ldr	r1, [r5, #0]
 8004382:	291d      	cmp	r1, #29
 8004384:	d83a      	bhi.n	80043fc <__sflush_r+0xfc>
 8004386:	4a21      	ldr	r2, [pc, #132]	; (800440c <__sflush_r+0x10c>)
 8004388:	40ca      	lsrs	r2, r1
 800438a:	07d6      	lsls	r6, r2, #31
 800438c:	d536      	bpl.n	80043fc <__sflush_r+0xfc>
 800438e:	2200      	movs	r2, #0
 8004390:	6062      	str	r2, [r4, #4]
 8004392:	04d9      	lsls	r1, r3, #19
 8004394:	6922      	ldr	r2, [r4, #16]
 8004396:	6022      	str	r2, [r4, #0]
 8004398:	d504      	bpl.n	80043a4 <__sflush_r+0xa4>
 800439a:	1c42      	adds	r2, r0, #1
 800439c:	d101      	bne.n	80043a2 <__sflush_r+0xa2>
 800439e:	682b      	ldr	r3, [r5, #0]
 80043a0:	b903      	cbnz	r3, 80043a4 <__sflush_r+0xa4>
 80043a2:	6560      	str	r0, [r4, #84]	; 0x54
 80043a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043a6:	602f      	str	r7, [r5, #0]
 80043a8:	2900      	cmp	r1, #0
 80043aa:	d0ce      	beq.n	800434a <__sflush_r+0x4a>
 80043ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043b0:	4299      	cmp	r1, r3
 80043b2:	d002      	beq.n	80043ba <__sflush_r+0xba>
 80043b4:	4628      	mov	r0, r5
 80043b6:	f7ff fd87 	bl	8003ec8 <_free_r>
 80043ba:	2000      	movs	r0, #0
 80043bc:	6360      	str	r0, [r4, #52]	; 0x34
 80043be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043c2:	690f      	ldr	r7, [r1, #16]
 80043c4:	2f00      	cmp	r7, #0
 80043c6:	d0c0      	beq.n	800434a <__sflush_r+0x4a>
 80043c8:	0793      	lsls	r3, r2, #30
 80043ca:	680e      	ldr	r6, [r1, #0]
 80043cc:	bf08      	it	eq
 80043ce:	694b      	ldreq	r3, [r1, #20]
 80043d0:	600f      	str	r7, [r1, #0]
 80043d2:	bf18      	it	ne
 80043d4:	2300      	movne	r3, #0
 80043d6:	ebc7 0806 	rsb	r8, r7, r6
 80043da:	608b      	str	r3, [r1, #8]
 80043dc:	e002      	b.n	80043e4 <__sflush_r+0xe4>
 80043de:	4407      	add	r7, r0
 80043e0:	ebc0 0808 	rsb	r8, r0, r8
 80043e4:	f1b8 0f00 	cmp.w	r8, #0
 80043e8:	ddaf      	ble.n	800434a <__sflush_r+0x4a>
 80043ea:	4643      	mov	r3, r8
 80043ec:	463a      	mov	r2, r7
 80043ee:	6a21      	ldr	r1, [r4, #32]
 80043f0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80043f2:	4628      	mov	r0, r5
 80043f4:	47b0      	blx	r6
 80043f6:	2800      	cmp	r0, #0
 80043f8:	dcf1      	bgt.n	80043de <__sflush_r+0xde>
 80043fa:	89a3      	ldrh	r3, [r4, #12]
 80043fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004400:	81a3      	strh	r3, [r4, #12]
 8004402:	f04f 30ff 	mov.w	r0, #4294967295
 8004406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800440a:	bf00      	nop
 800440c:	20400001 	.word	0x20400001

08004410 <_fflush_r>:
 8004410:	b538      	push	{r3, r4, r5, lr}
 8004412:	690b      	ldr	r3, [r1, #16]
 8004414:	4605      	mov	r5, r0
 8004416:	460c      	mov	r4, r1
 8004418:	b1db      	cbz	r3, 8004452 <_fflush_r+0x42>
 800441a:	b118      	cbz	r0, 8004424 <_fflush_r+0x14>
 800441c:	6983      	ldr	r3, [r0, #24]
 800441e:	b90b      	cbnz	r3, 8004424 <_fflush_r+0x14>
 8004420:	f000 f860 	bl	80044e4 <__sinit>
 8004424:	4b0c      	ldr	r3, [pc, #48]	; (8004458 <_fflush_r+0x48>)
 8004426:	429c      	cmp	r4, r3
 8004428:	d101      	bne.n	800442e <_fflush_r+0x1e>
 800442a:	686c      	ldr	r4, [r5, #4]
 800442c:	e008      	b.n	8004440 <_fflush_r+0x30>
 800442e:	4b0b      	ldr	r3, [pc, #44]	; (800445c <_fflush_r+0x4c>)
 8004430:	429c      	cmp	r4, r3
 8004432:	d101      	bne.n	8004438 <_fflush_r+0x28>
 8004434:	68ac      	ldr	r4, [r5, #8]
 8004436:	e003      	b.n	8004440 <_fflush_r+0x30>
 8004438:	4b09      	ldr	r3, [pc, #36]	; (8004460 <_fflush_r+0x50>)
 800443a:	429c      	cmp	r4, r3
 800443c:	bf08      	it	eq
 800443e:	68ec      	ldreq	r4, [r5, #12]
 8004440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004444:	b12b      	cbz	r3, 8004452 <_fflush_r+0x42>
 8004446:	4621      	mov	r1, r4
 8004448:	4628      	mov	r0, r5
 800444a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800444e:	f7ff bf57 	b.w	8004300 <__sflush_r>
 8004452:	2000      	movs	r0, #0
 8004454:	bd38      	pop	{r3, r4, r5, pc}
 8004456:	bf00      	nop
 8004458:	080051d0 	.word	0x080051d0
 800445c:	080051f0 	.word	0x080051f0
 8004460:	08005210 	.word	0x08005210

08004464 <_cleanup_r>:
 8004464:	4901      	ldr	r1, [pc, #4]	; (800446c <_cleanup_r+0x8>)
 8004466:	f000 b8a9 	b.w	80045bc <_fwalk_reent>
 800446a:	bf00      	nop
 800446c:	08004411 	.word	0x08004411

08004470 <std.isra.0>:
 8004470:	2300      	movs	r3, #0
 8004472:	b510      	push	{r4, lr}
 8004474:	4604      	mov	r4, r0
 8004476:	6003      	str	r3, [r0, #0]
 8004478:	6043      	str	r3, [r0, #4]
 800447a:	6083      	str	r3, [r0, #8]
 800447c:	8181      	strh	r1, [r0, #12]
 800447e:	6643      	str	r3, [r0, #100]	; 0x64
 8004480:	81c2      	strh	r2, [r0, #14]
 8004482:	6103      	str	r3, [r0, #16]
 8004484:	6143      	str	r3, [r0, #20]
 8004486:	6183      	str	r3, [r0, #24]
 8004488:	4619      	mov	r1, r3
 800448a:	2208      	movs	r2, #8
 800448c:	305c      	adds	r0, #92	; 0x5c
 800448e:	f7ff fd12 	bl	8003eb6 <memset>
 8004492:	4b05      	ldr	r3, [pc, #20]	; (80044a8 <std.isra.0+0x38>)
 8004494:	6263      	str	r3, [r4, #36]	; 0x24
 8004496:	4b05      	ldr	r3, [pc, #20]	; (80044ac <std.isra.0+0x3c>)
 8004498:	62a3      	str	r3, [r4, #40]	; 0x28
 800449a:	4b05      	ldr	r3, [pc, #20]	; (80044b0 <std.isra.0+0x40>)
 800449c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800449e:	4b05      	ldr	r3, [pc, #20]	; (80044b4 <std.isra.0+0x44>)
 80044a0:	6224      	str	r4, [r4, #32]
 80044a2:	6323      	str	r3, [r4, #48]	; 0x30
 80044a4:	bd10      	pop	{r4, pc}
 80044a6:	bf00      	nop
 80044a8:	08004f1d 	.word	0x08004f1d
 80044ac:	08004f3f 	.word	0x08004f3f
 80044b0:	08004f77 	.word	0x08004f77
 80044b4:	08004f9b 	.word	0x08004f9b

080044b8 <__sfmoreglue>:
 80044b8:	b570      	push	{r4, r5, r6, lr}
 80044ba:	2368      	movs	r3, #104	; 0x68
 80044bc:	1e4d      	subs	r5, r1, #1
 80044be:	435d      	muls	r5, r3
 80044c0:	460e      	mov	r6, r1
 80044c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80044c6:	f7ff fd4d 	bl	8003f64 <_malloc_r>
 80044ca:	4604      	mov	r4, r0
 80044cc:	b140      	cbz	r0, 80044e0 <__sfmoreglue+0x28>
 80044ce:	2100      	movs	r1, #0
 80044d0:	e880 0042 	stmia.w	r0, {r1, r6}
 80044d4:	300c      	adds	r0, #12
 80044d6:	60a0      	str	r0, [r4, #8]
 80044d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80044dc:	f7ff fceb 	bl	8003eb6 <memset>
 80044e0:	4620      	mov	r0, r4
 80044e2:	bd70      	pop	{r4, r5, r6, pc}

080044e4 <__sinit>:
 80044e4:	6983      	ldr	r3, [r0, #24]
 80044e6:	b510      	push	{r4, lr}
 80044e8:	4604      	mov	r4, r0
 80044ea:	bb33      	cbnz	r3, 800453a <__sinit+0x56>
 80044ec:	6483      	str	r3, [r0, #72]	; 0x48
 80044ee:	64c3      	str	r3, [r0, #76]	; 0x4c
 80044f0:	6503      	str	r3, [r0, #80]	; 0x50
 80044f2:	4b12      	ldr	r3, [pc, #72]	; (800453c <__sinit+0x58>)
 80044f4:	4a12      	ldr	r2, [pc, #72]	; (8004540 <__sinit+0x5c>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6282      	str	r2, [r0, #40]	; 0x28
 80044fa:	4298      	cmp	r0, r3
 80044fc:	bf04      	itt	eq
 80044fe:	2301      	moveq	r3, #1
 8004500:	6183      	streq	r3, [r0, #24]
 8004502:	f000 f81f 	bl	8004544 <__sfp>
 8004506:	6060      	str	r0, [r4, #4]
 8004508:	4620      	mov	r0, r4
 800450a:	f000 f81b 	bl	8004544 <__sfp>
 800450e:	60a0      	str	r0, [r4, #8]
 8004510:	4620      	mov	r0, r4
 8004512:	f000 f817 	bl	8004544 <__sfp>
 8004516:	2200      	movs	r2, #0
 8004518:	60e0      	str	r0, [r4, #12]
 800451a:	2104      	movs	r1, #4
 800451c:	6860      	ldr	r0, [r4, #4]
 800451e:	f7ff ffa7 	bl	8004470 <std.isra.0>
 8004522:	2201      	movs	r2, #1
 8004524:	2109      	movs	r1, #9
 8004526:	68a0      	ldr	r0, [r4, #8]
 8004528:	f7ff ffa2 	bl	8004470 <std.isra.0>
 800452c:	2202      	movs	r2, #2
 800452e:	2112      	movs	r1, #18
 8004530:	68e0      	ldr	r0, [r4, #12]
 8004532:	f7ff ff9d 	bl	8004470 <std.isra.0>
 8004536:	2301      	movs	r3, #1
 8004538:	61a3      	str	r3, [r4, #24]
 800453a:	bd10      	pop	{r4, pc}
 800453c:	080051cc 	.word	0x080051cc
 8004540:	08004465 	.word	0x08004465

08004544 <__sfp>:
 8004544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004546:	4b1c      	ldr	r3, [pc, #112]	; (80045b8 <__sfp+0x74>)
 8004548:	681e      	ldr	r6, [r3, #0]
 800454a:	69b3      	ldr	r3, [r6, #24]
 800454c:	4607      	mov	r7, r0
 800454e:	b913      	cbnz	r3, 8004556 <__sfp+0x12>
 8004550:	4630      	mov	r0, r6
 8004552:	f7ff ffc7 	bl	80044e4 <__sinit>
 8004556:	3648      	adds	r6, #72	; 0x48
 8004558:	68b4      	ldr	r4, [r6, #8]
 800455a:	6873      	ldr	r3, [r6, #4]
 800455c:	3b01      	subs	r3, #1
 800455e:	d404      	bmi.n	800456a <__sfp+0x26>
 8004560:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004564:	b17d      	cbz	r5, 8004586 <__sfp+0x42>
 8004566:	3468      	adds	r4, #104	; 0x68
 8004568:	e7f8      	b.n	800455c <__sfp+0x18>
 800456a:	6833      	ldr	r3, [r6, #0]
 800456c:	b10b      	cbz	r3, 8004572 <__sfp+0x2e>
 800456e:	6836      	ldr	r6, [r6, #0]
 8004570:	e7f2      	b.n	8004558 <__sfp+0x14>
 8004572:	2104      	movs	r1, #4
 8004574:	4638      	mov	r0, r7
 8004576:	f7ff ff9f 	bl	80044b8 <__sfmoreglue>
 800457a:	6030      	str	r0, [r6, #0]
 800457c:	2800      	cmp	r0, #0
 800457e:	d1f6      	bne.n	800456e <__sfp+0x2a>
 8004580:	230c      	movs	r3, #12
 8004582:	603b      	str	r3, [r7, #0]
 8004584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004586:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800458a:	81e3      	strh	r3, [r4, #14]
 800458c:	2301      	movs	r3, #1
 800458e:	81a3      	strh	r3, [r4, #12]
 8004590:	6665      	str	r5, [r4, #100]	; 0x64
 8004592:	6025      	str	r5, [r4, #0]
 8004594:	60a5      	str	r5, [r4, #8]
 8004596:	6065      	str	r5, [r4, #4]
 8004598:	6125      	str	r5, [r4, #16]
 800459a:	6165      	str	r5, [r4, #20]
 800459c:	61a5      	str	r5, [r4, #24]
 800459e:	2208      	movs	r2, #8
 80045a0:	4629      	mov	r1, r5
 80045a2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80045a6:	f7ff fc86 	bl	8003eb6 <memset>
 80045aa:	6365      	str	r5, [r4, #52]	; 0x34
 80045ac:	63a5      	str	r5, [r4, #56]	; 0x38
 80045ae:	64a5      	str	r5, [r4, #72]	; 0x48
 80045b0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80045b2:	4620      	mov	r0, r4
 80045b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045b6:	bf00      	nop
 80045b8:	080051cc 	.word	0x080051cc

080045bc <_fwalk_reent>:
 80045bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045c0:	4680      	mov	r8, r0
 80045c2:	4689      	mov	r9, r1
 80045c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80045c8:	2600      	movs	r6, #0
 80045ca:	b194      	cbz	r4, 80045f2 <_fwalk_reent+0x36>
 80045cc:	68a5      	ldr	r5, [r4, #8]
 80045ce:	6867      	ldr	r7, [r4, #4]
 80045d0:	3f01      	subs	r7, #1
 80045d2:	d40c      	bmi.n	80045ee <_fwalk_reent+0x32>
 80045d4:	89ab      	ldrh	r3, [r5, #12]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d907      	bls.n	80045ea <_fwalk_reent+0x2e>
 80045da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045de:	3301      	adds	r3, #1
 80045e0:	d003      	beq.n	80045ea <_fwalk_reent+0x2e>
 80045e2:	4629      	mov	r1, r5
 80045e4:	4640      	mov	r0, r8
 80045e6:	47c8      	blx	r9
 80045e8:	4306      	orrs	r6, r0
 80045ea:	3568      	adds	r5, #104	; 0x68
 80045ec:	e7f0      	b.n	80045d0 <_fwalk_reent+0x14>
 80045ee:	6824      	ldr	r4, [r4, #0]
 80045f0:	e7eb      	b.n	80045ca <_fwalk_reent+0xe>
 80045f2:	4630      	mov	r0, r6
 80045f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080045f8 <__swhatbuf_r>:
 80045f8:	b570      	push	{r4, r5, r6, lr}
 80045fa:	460e      	mov	r6, r1
 80045fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004600:	2900      	cmp	r1, #0
 8004602:	b090      	sub	sp, #64	; 0x40
 8004604:	4614      	mov	r4, r2
 8004606:	461d      	mov	r5, r3
 8004608:	da06      	bge.n	8004618 <__swhatbuf_r+0x20>
 800460a:	2300      	movs	r3, #0
 800460c:	602b      	str	r3, [r5, #0]
 800460e:	89b3      	ldrh	r3, [r6, #12]
 8004610:	061a      	lsls	r2, r3, #24
 8004612:	d50e      	bpl.n	8004632 <__swhatbuf_r+0x3a>
 8004614:	2340      	movs	r3, #64	; 0x40
 8004616:	e00e      	b.n	8004636 <__swhatbuf_r+0x3e>
 8004618:	aa01      	add	r2, sp, #4
 800461a:	f000 fce5 	bl	8004fe8 <_fstat_r>
 800461e:	2800      	cmp	r0, #0
 8004620:	dbf3      	blt.n	800460a <__swhatbuf_r+0x12>
 8004622:	9a02      	ldr	r2, [sp, #8]
 8004624:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004628:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800462c:	425a      	negs	r2, r3
 800462e:	415a      	adcs	r2, r3
 8004630:	602a      	str	r2, [r5, #0]
 8004632:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004636:	2000      	movs	r0, #0
 8004638:	6023      	str	r3, [r4, #0]
 800463a:	b010      	add	sp, #64	; 0x40
 800463c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004640 <__smakebuf_r>:
 8004640:	898b      	ldrh	r3, [r1, #12]
 8004642:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004644:	079e      	lsls	r6, r3, #30
 8004646:	4605      	mov	r5, r0
 8004648:	460c      	mov	r4, r1
 800464a:	d410      	bmi.n	800466e <__smakebuf_r+0x2e>
 800464c:	ab01      	add	r3, sp, #4
 800464e:	466a      	mov	r2, sp
 8004650:	f7ff ffd2 	bl	80045f8 <__swhatbuf_r>
 8004654:	9900      	ldr	r1, [sp, #0]
 8004656:	4606      	mov	r6, r0
 8004658:	4628      	mov	r0, r5
 800465a:	f7ff fc83 	bl	8003f64 <_malloc_r>
 800465e:	b968      	cbnz	r0, 800467c <__smakebuf_r+0x3c>
 8004660:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004664:	059a      	lsls	r2, r3, #22
 8004666:	d422      	bmi.n	80046ae <__smakebuf_r+0x6e>
 8004668:	f043 0302 	orr.w	r3, r3, #2
 800466c:	81a3      	strh	r3, [r4, #12]
 800466e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004672:	6023      	str	r3, [r4, #0]
 8004674:	6123      	str	r3, [r4, #16]
 8004676:	2301      	movs	r3, #1
 8004678:	6163      	str	r3, [r4, #20]
 800467a:	e018      	b.n	80046ae <__smakebuf_r+0x6e>
 800467c:	4b0d      	ldr	r3, [pc, #52]	; (80046b4 <__smakebuf_r+0x74>)
 800467e:	62ab      	str	r3, [r5, #40]	; 0x28
 8004680:	89a3      	ldrh	r3, [r4, #12]
 8004682:	6020      	str	r0, [r4, #0]
 8004684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004688:	81a3      	strh	r3, [r4, #12]
 800468a:	9b00      	ldr	r3, [sp, #0]
 800468c:	6163      	str	r3, [r4, #20]
 800468e:	9b01      	ldr	r3, [sp, #4]
 8004690:	6120      	str	r0, [r4, #16]
 8004692:	b14b      	cbz	r3, 80046a8 <__smakebuf_r+0x68>
 8004694:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004698:	4628      	mov	r0, r5
 800469a:	f000 fcb7 	bl	800500c <_isatty_r>
 800469e:	b118      	cbz	r0, 80046a8 <__smakebuf_r+0x68>
 80046a0:	89a3      	ldrh	r3, [r4, #12]
 80046a2:	f043 0301 	orr.w	r3, r3, #1
 80046a6:	81a3      	strh	r3, [r4, #12]
 80046a8:	89a0      	ldrh	r0, [r4, #12]
 80046aa:	4330      	orrs	r0, r6
 80046ac:	81a0      	strh	r0, [r4, #12]
 80046ae:	b002      	add	sp, #8
 80046b0:	bd70      	pop	{r4, r5, r6, pc}
 80046b2:	bf00      	nop
 80046b4:	08004465 	.word	0x08004465

080046b8 <__malloc_lock>:
 80046b8:	4770      	bx	lr

080046ba <__malloc_unlock>:
 80046ba:	4770      	bx	lr

080046bc <__ssputs_r>:
 80046bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046c0:	688e      	ldr	r6, [r1, #8]
 80046c2:	429e      	cmp	r6, r3
 80046c4:	4682      	mov	sl, r0
 80046c6:	460c      	mov	r4, r1
 80046c8:	4691      	mov	r9, r2
 80046ca:	4698      	mov	r8, r3
 80046cc:	d83e      	bhi.n	800474c <__ssputs_r+0x90>
 80046ce:	898a      	ldrh	r2, [r1, #12]
 80046d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80046d4:	d03a      	beq.n	800474c <__ssputs_r+0x90>
 80046d6:	6825      	ldr	r5, [r4, #0]
 80046d8:	6909      	ldr	r1, [r1, #16]
 80046da:	1a6f      	subs	r7, r5, r1
 80046dc:	6965      	ldr	r5, [r4, #20]
 80046de:	2302      	movs	r3, #2
 80046e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046e4:	fb95 f5f3 	sdiv	r5, r5, r3
 80046e8:	1c7b      	adds	r3, r7, #1
 80046ea:	4443      	add	r3, r8
 80046ec:	429d      	cmp	r5, r3
 80046ee:	bf38      	it	cc
 80046f0:	461d      	movcc	r5, r3
 80046f2:	0553      	lsls	r3, r2, #21
 80046f4:	d50f      	bpl.n	8004716 <__ssputs_r+0x5a>
 80046f6:	4629      	mov	r1, r5
 80046f8:	f7ff fc34 	bl	8003f64 <_malloc_r>
 80046fc:	4606      	mov	r6, r0
 80046fe:	b198      	cbz	r0, 8004728 <__ssputs_r+0x6c>
 8004700:	463a      	mov	r2, r7
 8004702:	6921      	ldr	r1, [r4, #16]
 8004704:	f7ff fbcc 	bl	8003ea0 <memcpy>
 8004708:	89a3      	ldrh	r3, [r4, #12]
 800470a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800470e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004712:	81a3      	strh	r3, [r4, #12]
 8004714:	e013      	b.n	800473e <__ssputs_r+0x82>
 8004716:	462a      	mov	r2, r5
 8004718:	f000 fcb5 	bl	8005086 <_realloc_r>
 800471c:	4606      	mov	r6, r0
 800471e:	b970      	cbnz	r0, 800473e <__ssputs_r+0x82>
 8004720:	6921      	ldr	r1, [r4, #16]
 8004722:	4650      	mov	r0, sl
 8004724:	f7ff fbd0 	bl	8003ec8 <_free_r>
 8004728:	230c      	movs	r3, #12
 800472a:	f8ca 3000 	str.w	r3, [sl]
 800472e:	89a3      	ldrh	r3, [r4, #12]
 8004730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004734:	81a3      	strh	r3, [r4, #12]
 8004736:	f04f 30ff 	mov.w	r0, #4294967295
 800473a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800473e:	6126      	str	r6, [r4, #16]
 8004740:	6165      	str	r5, [r4, #20]
 8004742:	443e      	add	r6, r7
 8004744:	1bed      	subs	r5, r5, r7
 8004746:	6026      	str	r6, [r4, #0]
 8004748:	60a5      	str	r5, [r4, #8]
 800474a:	4646      	mov	r6, r8
 800474c:	4546      	cmp	r6, r8
 800474e:	bf28      	it	cs
 8004750:	4646      	movcs	r6, r8
 8004752:	4632      	mov	r2, r6
 8004754:	4649      	mov	r1, r9
 8004756:	6820      	ldr	r0, [r4, #0]
 8004758:	f000 fc7a 	bl	8005050 <memmove>
 800475c:	68a3      	ldr	r3, [r4, #8]
 800475e:	1b9b      	subs	r3, r3, r6
 8004760:	60a3      	str	r3, [r4, #8]
 8004762:	6823      	ldr	r3, [r4, #0]
 8004764:	441e      	add	r6, r3
 8004766:	6026      	str	r6, [r4, #0]
 8004768:	2000      	movs	r0, #0
 800476a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08004770 <_svfiprintf_r>:
 8004770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004774:	b09d      	sub	sp, #116	; 0x74
 8004776:	4680      	mov	r8, r0
 8004778:	9303      	str	r3, [sp, #12]
 800477a:	898b      	ldrh	r3, [r1, #12]
 800477c:	061c      	lsls	r4, r3, #24
 800477e:	460d      	mov	r5, r1
 8004780:	4616      	mov	r6, r2
 8004782:	d50d      	bpl.n	80047a0 <_svfiprintf_r+0x30>
 8004784:	690b      	ldr	r3, [r1, #16]
 8004786:	b95b      	cbnz	r3, 80047a0 <_svfiprintf_r+0x30>
 8004788:	2140      	movs	r1, #64	; 0x40
 800478a:	f7ff fbeb 	bl	8003f64 <_malloc_r>
 800478e:	6028      	str	r0, [r5, #0]
 8004790:	6128      	str	r0, [r5, #16]
 8004792:	b918      	cbnz	r0, 800479c <_svfiprintf_r+0x2c>
 8004794:	230c      	movs	r3, #12
 8004796:	f8c8 3000 	str.w	r3, [r8]
 800479a:	e0cd      	b.n	8004938 <_svfiprintf_r+0x1c8>
 800479c:	2340      	movs	r3, #64	; 0x40
 800479e:	616b      	str	r3, [r5, #20]
 80047a0:	2300      	movs	r3, #0
 80047a2:	9309      	str	r3, [sp, #36]	; 0x24
 80047a4:	2320      	movs	r3, #32
 80047a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047aa:	f8df b19c 	ldr.w	fp, [pc, #412]	; 8004948 <_svfiprintf_r+0x1d8>
 80047ae:	2330      	movs	r3, #48	; 0x30
 80047b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047b4:	4637      	mov	r7, r6
 80047b6:	463c      	mov	r4, r7
 80047b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80047bc:	b91b      	cbnz	r3, 80047c6 <_svfiprintf_r+0x56>
 80047be:	ebb7 0906 	subs.w	r9, r7, r6
 80047c2:	d010      	beq.n	80047e6 <_svfiprintf_r+0x76>
 80047c4:	e003      	b.n	80047ce <_svfiprintf_r+0x5e>
 80047c6:	2b25      	cmp	r3, #37	; 0x25
 80047c8:	d0f9      	beq.n	80047be <_svfiprintf_r+0x4e>
 80047ca:	4627      	mov	r7, r4
 80047cc:	e7f3      	b.n	80047b6 <_svfiprintf_r+0x46>
 80047ce:	464b      	mov	r3, r9
 80047d0:	4632      	mov	r2, r6
 80047d2:	4629      	mov	r1, r5
 80047d4:	4640      	mov	r0, r8
 80047d6:	f7ff ff71 	bl	80046bc <__ssputs_r>
 80047da:	3001      	adds	r0, #1
 80047dc:	f000 80a7 	beq.w	800492e <_svfiprintf_r+0x1be>
 80047e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047e2:	444b      	add	r3, r9
 80047e4:	9309      	str	r3, [sp, #36]	; 0x24
 80047e6:	783b      	ldrb	r3, [r7, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f000 80a0 	beq.w	800492e <_svfiprintf_r+0x1be>
 80047ee:	2300      	movs	r3, #0
 80047f0:	f04f 32ff 	mov.w	r2, #4294967295
 80047f4:	9304      	str	r3, [sp, #16]
 80047f6:	9307      	str	r3, [sp, #28]
 80047f8:	9205      	str	r2, [sp, #20]
 80047fa:	9306      	str	r3, [sp, #24]
 80047fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004800:	931a      	str	r3, [sp, #104]	; 0x68
 8004802:	2601      	movs	r6, #1
 8004804:	2205      	movs	r2, #5
 8004806:	7821      	ldrb	r1, [r4, #0]
 8004808:	484e      	ldr	r0, [pc, #312]	; (8004944 <_svfiprintf_r+0x1d4>)
 800480a:	f7fb fd09 	bl	8000220 <memchr>
 800480e:	1c67      	adds	r7, r4, #1
 8004810:	9b04      	ldr	r3, [sp, #16]
 8004812:	b138      	cbz	r0, 8004824 <_svfiprintf_r+0xb4>
 8004814:	4a4b      	ldr	r2, [pc, #300]	; (8004944 <_svfiprintf_r+0x1d4>)
 8004816:	1a80      	subs	r0, r0, r2
 8004818:	fa06 f000 	lsl.w	r0, r6, r0
 800481c:	4318      	orrs	r0, r3
 800481e:	9004      	str	r0, [sp, #16]
 8004820:	463c      	mov	r4, r7
 8004822:	e7ef      	b.n	8004804 <_svfiprintf_r+0x94>
 8004824:	06d9      	lsls	r1, r3, #27
 8004826:	bf44      	itt	mi
 8004828:	2220      	movmi	r2, #32
 800482a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800482e:	071a      	lsls	r2, r3, #28
 8004830:	bf44      	itt	mi
 8004832:	222b      	movmi	r2, #43	; 0x2b
 8004834:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004838:	7822      	ldrb	r2, [r4, #0]
 800483a:	2a2a      	cmp	r2, #42	; 0x2a
 800483c:	d003      	beq.n	8004846 <_svfiprintf_r+0xd6>
 800483e:	9a07      	ldr	r2, [sp, #28]
 8004840:	2100      	movs	r1, #0
 8004842:	200a      	movs	r0, #10
 8004844:	e00b      	b.n	800485e <_svfiprintf_r+0xee>
 8004846:	9a03      	ldr	r2, [sp, #12]
 8004848:	1d11      	adds	r1, r2, #4
 800484a:	6812      	ldr	r2, [r2, #0]
 800484c:	9103      	str	r1, [sp, #12]
 800484e:	2a00      	cmp	r2, #0
 8004850:	da10      	bge.n	8004874 <_svfiprintf_r+0x104>
 8004852:	4252      	negs	r2, r2
 8004854:	f043 0002 	orr.w	r0, r3, #2
 8004858:	9207      	str	r2, [sp, #28]
 800485a:	9004      	str	r0, [sp, #16]
 800485c:	e00b      	b.n	8004876 <_svfiprintf_r+0x106>
 800485e:	4627      	mov	r7, r4
 8004860:	3401      	adds	r4, #1
 8004862:	783b      	ldrb	r3, [r7, #0]
 8004864:	3b30      	subs	r3, #48	; 0x30
 8004866:	2b09      	cmp	r3, #9
 8004868:	d803      	bhi.n	8004872 <_svfiprintf_r+0x102>
 800486a:	fb00 3202 	mla	r2, r0, r2, r3
 800486e:	2101      	movs	r1, #1
 8004870:	e7f5      	b.n	800485e <_svfiprintf_r+0xee>
 8004872:	b101      	cbz	r1, 8004876 <_svfiprintf_r+0x106>
 8004874:	9207      	str	r2, [sp, #28]
 8004876:	783b      	ldrb	r3, [r7, #0]
 8004878:	2b2e      	cmp	r3, #46	; 0x2e
 800487a:	d11e      	bne.n	80048ba <_svfiprintf_r+0x14a>
 800487c:	787b      	ldrb	r3, [r7, #1]
 800487e:	2b2a      	cmp	r3, #42	; 0x2a
 8004880:	d10a      	bne.n	8004898 <_svfiprintf_r+0x128>
 8004882:	9b03      	ldr	r3, [sp, #12]
 8004884:	1d1a      	adds	r2, r3, #4
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	9203      	str	r2, [sp, #12]
 800488a:	2b00      	cmp	r3, #0
 800488c:	bfb8      	it	lt
 800488e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004892:	3702      	adds	r7, #2
 8004894:	9305      	str	r3, [sp, #20]
 8004896:	e010      	b.n	80048ba <_svfiprintf_r+0x14a>
 8004898:	2300      	movs	r3, #0
 800489a:	9305      	str	r3, [sp, #20]
 800489c:	1c78      	adds	r0, r7, #1
 800489e:	4619      	mov	r1, r3
 80048a0:	240a      	movs	r4, #10
 80048a2:	4607      	mov	r7, r0
 80048a4:	3001      	adds	r0, #1
 80048a6:	783a      	ldrb	r2, [r7, #0]
 80048a8:	3a30      	subs	r2, #48	; 0x30
 80048aa:	2a09      	cmp	r2, #9
 80048ac:	d803      	bhi.n	80048b6 <_svfiprintf_r+0x146>
 80048ae:	fb04 2101 	mla	r1, r4, r1, r2
 80048b2:	2301      	movs	r3, #1
 80048b4:	e7f5      	b.n	80048a2 <_svfiprintf_r+0x132>
 80048b6:	b103      	cbz	r3, 80048ba <_svfiprintf_r+0x14a>
 80048b8:	9105      	str	r1, [sp, #20]
 80048ba:	2203      	movs	r2, #3
 80048bc:	7839      	ldrb	r1, [r7, #0]
 80048be:	4822      	ldr	r0, [pc, #136]	; (8004948 <_svfiprintf_r+0x1d8>)
 80048c0:	f7fb fcae 	bl	8000220 <memchr>
 80048c4:	b140      	cbz	r0, 80048d8 <_svfiprintf_r+0x168>
 80048c6:	2340      	movs	r3, #64	; 0x40
 80048c8:	ebcb 0000 	rsb	r0, fp, r0
 80048cc:	fa03 f000 	lsl.w	r0, r3, r0
 80048d0:	9b04      	ldr	r3, [sp, #16]
 80048d2:	4318      	orrs	r0, r3
 80048d4:	9004      	str	r0, [sp, #16]
 80048d6:	3701      	adds	r7, #1
 80048d8:	7839      	ldrb	r1, [r7, #0]
 80048da:	481c      	ldr	r0, [pc, #112]	; (800494c <_svfiprintf_r+0x1dc>)
 80048dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048e0:	2206      	movs	r2, #6
 80048e2:	1c7e      	adds	r6, r7, #1
 80048e4:	f7fb fc9c 	bl	8000220 <memchr>
 80048e8:	b188      	cbz	r0, 800490e <_svfiprintf_r+0x19e>
 80048ea:	4b19      	ldr	r3, [pc, #100]	; (8004950 <_svfiprintf_r+0x1e0>)
 80048ec:	b933      	cbnz	r3, 80048fc <_svfiprintf_r+0x18c>
 80048ee:	9b03      	ldr	r3, [sp, #12]
 80048f0:	3307      	adds	r3, #7
 80048f2:	f023 0307 	bic.w	r3, r3, #7
 80048f6:	3308      	adds	r3, #8
 80048f8:	9303      	str	r3, [sp, #12]
 80048fa:	e014      	b.n	8004926 <_svfiprintf_r+0x1b6>
 80048fc:	ab03      	add	r3, sp, #12
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	462a      	mov	r2, r5
 8004902:	4b14      	ldr	r3, [pc, #80]	; (8004954 <_svfiprintf_r+0x1e4>)
 8004904:	a904      	add	r1, sp, #16
 8004906:	4640      	mov	r0, r8
 8004908:	f3af 8000 	nop.w
 800490c:	e007      	b.n	800491e <_svfiprintf_r+0x1ae>
 800490e:	ab03      	add	r3, sp, #12
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	462a      	mov	r2, r5
 8004914:	4b0f      	ldr	r3, [pc, #60]	; (8004954 <_svfiprintf_r+0x1e4>)
 8004916:	a904      	add	r1, sp, #16
 8004918:	4640      	mov	r0, r8
 800491a:	f000 f9d9 	bl	8004cd0 <_printf_i>
 800491e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004922:	4682      	mov	sl, r0
 8004924:	d003      	beq.n	800492e <_svfiprintf_r+0x1be>
 8004926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004928:	4453      	add	r3, sl
 800492a:	9309      	str	r3, [sp, #36]	; 0x24
 800492c:	e742      	b.n	80047b4 <_svfiprintf_r+0x44>
 800492e:	89ab      	ldrh	r3, [r5, #12]
 8004930:	065b      	lsls	r3, r3, #25
 8004932:	d401      	bmi.n	8004938 <_svfiprintf_r+0x1c8>
 8004934:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004936:	e001      	b.n	800493c <_svfiprintf_r+0x1cc>
 8004938:	f04f 30ff 	mov.w	r0, #4294967295
 800493c:	b01d      	add	sp, #116	; 0x74
 800493e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004942:	bf00      	nop
 8004944:	08005230 	.word	0x08005230
 8004948:	08005236 	.word	0x08005236
 800494c:	0800523a 	.word	0x0800523a
 8004950:	00000000 	.word	0x00000000
 8004954:	080046bd 	.word	0x080046bd

08004958 <__sfputc_r>:
 8004958:	6893      	ldr	r3, [r2, #8]
 800495a:	3b01      	subs	r3, #1
 800495c:	2b00      	cmp	r3, #0
 800495e:	b410      	push	{r4}
 8004960:	6093      	str	r3, [r2, #8]
 8004962:	da09      	bge.n	8004978 <__sfputc_r+0x20>
 8004964:	6994      	ldr	r4, [r2, #24]
 8004966:	42a3      	cmp	r3, r4
 8004968:	db02      	blt.n	8004970 <__sfputc_r+0x18>
 800496a:	b2cb      	uxtb	r3, r1
 800496c:	2b0a      	cmp	r3, #10
 800496e:	d103      	bne.n	8004978 <__sfputc_r+0x20>
 8004970:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004974:	f7ff bc02 	b.w	800417c <__swbuf_r>
 8004978:	6813      	ldr	r3, [r2, #0]
 800497a:	1c58      	adds	r0, r3, #1
 800497c:	6010      	str	r0, [r2, #0]
 800497e:	7019      	strb	r1, [r3, #0]
 8004980:	b2c8      	uxtb	r0, r1
 8004982:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004986:	4770      	bx	lr

08004988 <__sfputs_r>:
 8004988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800498a:	4606      	mov	r6, r0
 800498c:	460f      	mov	r7, r1
 800498e:	4614      	mov	r4, r2
 8004990:	18d5      	adds	r5, r2, r3
 8004992:	42ac      	cmp	r4, r5
 8004994:	d008      	beq.n	80049a8 <__sfputs_r+0x20>
 8004996:	463a      	mov	r2, r7
 8004998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800499c:	4630      	mov	r0, r6
 800499e:	f7ff ffdb 	bl	8004958 <__sfputc_r>
 80049a2:	1c43      	adds	r3, r0, #1
 80049a4:	d1f5      	bne.n	8004992 <__sfputs_r+0xa>
 80049a6:	e000      	b.n	80049aa <__sfputs_r+0x22>
 80049a8:	2000      	movs	r0, #0
 80049aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080049ac <_vfiprintf_r>:
 80049ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049b0:	b09d      	sub	sp, #116	; 0x74
 80049b2:	460c      	mov	r4, r1
 80049b4:	4617      	mov	r7, r2
 80049b6:	9303      	str	r3, [sp, #12]
 80049b8:	4606      	mov	r6, r0
 80049ba:	b118      	cbz	r0, 80049c4 <_vfiprintf_r+0x18>
 80049bc:	6983      	ldr	r3, [r0, #24]
 80049be:	b90b      	cbnz	r3, 80049c4 <_vfiprintf_r+0x18>
 80049c0:	f7ff fd90 	bl	80044e4 <__sinit>
 80049c4:	4b7f      	ldr	r3, [pc, #508]	; (8004bc4 <_vfiprintf_r+0x218>)
 80049c6:	429c      	cmp	r4, r3
 80049c8:	d101      	bne.n	80049ce <_vfiprintf_r+0x22>
 80049ca:	6874      	ldr	r4, [r6, #4]
 80049cc:	e008      	b.n	80049e0 <_vfiprintf_r+0x34>
 80049ce:	4b7e      	ldr	r3, [pc, #504]	; (8004bc8 <_vfiprintf_r+0x21c>)
 80049d0:	429c      	cmp	r4, r3
 80049d2:	d101      	bne.n	80049d8 <_vfiprintf_r+0x2c>
 80049d4:	68b4      	ldr	r4, [r6, #8]
 80049d6:	e003      	b.n	80049e0 <_vfiprintf_r+0x34>
 80049d8:	4b7c      	ldr	r3, [pc, #496]	; (8004bcc <_vfiprintf_r+0x220>)
 80049da:	429c      	cmp	r4, r3
 80049dc:	bf08      	it	eq
 80049de:	68f4      	ldreq	r4, [r6, #12]
 80049e0:	89a3      	ldrh	r3, [r4, #12]
 80049e2:	0718      	lsls	r0, r3, #28
 80049e4:	d50c      	bpl.n	8004a00 <_vfiprintf_r+0x54>
 80049e6:	6923      	ldr	r3, [r4, #16]
 80049e8:	b153      	cbz	r3, 8004a00 <_vfiprintf_r+0x54>
 80049ea:	2300      	movs	r3, #0
 80049ec:	9309      	str	r3, [sp, #36]	; 0x24
 80049ee:	2320      	movs	r3, #32
 80049f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049f4:	2330      	movs	r3, #48	; 0x30
 80049f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049fa:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 8004bd0 <_vfiprintf_r+0x224>
 80049fe:	e044      	b.n	8004a8a <_vfiprintf_r+0xde>
 8004a00:	4621      	mov	r1, r4
 8004a02:	4630      	mov	r0, r6
 8004a04:	f7ff fc0e 	bl	8004224 <__swsetup_r>
 8004a08:	2800      	cmp	r0, #0
 8004a0a:	d0ee      	beq.n	80049ea <_vfiprintf_r+0x3e>
 8004a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a10:	e0d5      	b.n	8004bbe <_vfiprintf_r+0x212>
 8004a12:	9a03      	ldr	r2, [sp, #12]
 8004a14:	1d11      	adds	r1, r2, #4
 8004a16:	6812      	ldr	r2, [r2, #0]
 8004a18:	9103      	str	r1, [sp, #12]
 8004a1a:	2a00      	cmp	r2, #0
 8004a1c:	f280 808c 	bge.w	8004b38 <_vfiprintf_r+0x18c>
 8004a20:	4252      	negs	r2, r2
 8004a22:	f043 0002 	orr.w	r0, r3, #2
 8004a26:	9207      	str	r2, [sp, #28]
 8004a28:	9004      	str	r0, [sp, #16]
 8004a2a:	f898 3000 	ldrb.w	r3, [r8]
 8004a2e:	2b2e      	cmp	r3, #46	; 0x2e
 8004a30:	f000 8084 	beq.w	8004b3c <_vfiprintf_r+0x190>
 8004a34:	2203      	movs	r2, #3
 8004a36:	f898 1000 	ldrb.w	r1, [r8]
 8004a3a:	4865      	ldr	r0, [pc, #404]	; (8004bd0 <_vfiprintf_r+0x224>)
 8004a3c:	f7fb fbf0 	bl	8000220 <memchr>
 8004a40:	b148      	cbz	r0, 8004a56 <_vfiprintf_r+0xaa>
 8004a42:	2340      	movs	r3, #64	; 0x40
 8004a44:	ebcb 0000 	rsb	r0, fp, r0
 8004a48:	fa03 f000 	lsl.w	r0, r3, r0
 8004a4c:	9b04      	ldr	r3, [sp, #16]
 8004a4e:	4318      	orrs	r0, r3
 8004a50:	9004      	str	r0, [sp, #16]
 8004a52:	f108 0801 	add.w	r8, r8, #1
 8004a56:	f898 1000 	ldrb.w	r1, [r8]
 8004a5a:	485e      	ldr	r0, [pc, #376]	; (8004bd4 <_vfiprintf_r+0x228>)
 8004a5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a60:	2206      	movs	r2, #6
 8004a62:	f108 0701 	add.w	r7, r8, #1
 8004a66:	f7fb fbdb 	bl	8000220 <memchr>
 8004a6a:	2800      	cmp	r0, #0
 8004a6c:	f000 8095 	beq.w	8004b9a <_vfiprintf_r+0x1ee>
 8004a70:	4b59      	ldr	r3, [pc, #356]	; (8004bd8 <_vfiprintf_r+0x22c>)
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f040 8088 	bne.w	8004b88 <_vfiprintf_r+0x1dc>
 8004a78:	9b03      	ldr	r3, [sp, #12]
 8004a7a:	3307      	adds	r3, #7
 8004a7c:	f023 0307 	bic.w	r3, r3, #7
 8004a80:	3308      	adds	r3, #8
 8004a82:	9303      	str	r3, [sp, #12]
 8004a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a86:	4453      	add	r3, sl
 8004a88:	9309      	str	r3, [sp, #36]	; 0x24
 8004a8a:	46b8      	mov	r8, r7
 8004a8c:	4645      	mov	r5, r8
 8004a8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004a92:	b91b      	cbnz	r3, 8004a9c <_vfiprintf_r+0xf0>
 8004a94:	ebb8 0907 	subs.w	r9, r8, r7
 8004a98:	d00f      	beq.n	8004aba <_vfiprintf_r+0x10e>
 8004a9a:	e003      	b.n	8004aa4 <_vfiprintf_r+0xf8>
 8004a9c:	2b25      	cmp	r3, #37	; 0x25
 8004a9e:	d0f9      	beq.n	8004a94 <_vfiprintf_r+0xe8>
 8004aa0:	46a8      	mov	r8, r5
 8004aa2:	e7f3      	b.n	8004a8c <_vfiprintf_r+0xe0>
 8004aa4:	464b      	mov	r3, r9
 8004aa6:	463a      	mov	r2, r7
 8004aa8:	4621      	mov	r1, r4
 8004aaa:	4630      	mov	r0, r6
 8004aac:	f7ff ff6c 	bl	8004988 <__sfputs_r>
 8004ab0:	3001      	adds	r0, #1
 8004ab2:	d07f      	beq.n	8004bb4 <_vfiprintf_r+0x208>
 8004ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ab6:	444b      	add	r3, r9
 8004ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8004aba:	f898 3000 	ldrb.w	r3, [r8]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d078      	beq.n	8004bb4 <_vfiprintf_r+0x208>
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ac8:	9304      	str	r3, [sp, #16]
 8004aca:	9307      	str	r3, [sp, #28]
 8004acc:	9205      	str	r2, [sp, #20]
 8004ace:	9306      	str	r3, [sp, #24]
 8004ad0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ad4:	931a      	str	r3, [sp, #104]	; 0x68
 8004ad6:	2701      	movs	r7, #1
 8004ad8:	2205      	movs	r2, #5
 8004ada:	7829      	ldrb	r1, [r5, #0]
 8004adc:	483f      	ldr	r0, [pc, #252]	; (8004bdc <_vfiprintf_r+0x230>)
 8004ade:	f7fb fb9f 	bl	8000220 <memchr>
 8004ae2:	f105 0801 	add.w	r8, r5, #1
 8004ae6:	9b04      	ldr	r3, [sp, #16]
 8004ae8:	b138      	cbz	r0, 8004afa <_vfiprintf_r+0x14e>
 8004aea:	4a3c      	ldr	r2, [pc, #240]	; (8004bdc <_vfiprintf_r+0x230>)
 8004aec:	1a80      	subs	r0, r0, r2
 8004aee:	fa07 f000 	lsl.w	r0, r7, r0
 8004af2:	4318      	orrs	r0, r3
 8004af4:	9004      	str	r0, [sp, #16]
 8004af6:	4645      	mov	r5, r8
 8004af8:	e7ee      	b.n	8004ad8 <_vfiprintf_r+0x12c>
 8004afa:	06d9      	lsls	r1, r3, #27
 8004afc:	bf44      	itt	mi
 8004afe:	2220      	movmi	r2, #32
 8004b00:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004b04:	071a      	lsls	r2, r3, #28
 8004b06:	bf44      	itt	mi
 8004b08:	222b      	movmi	r2, #43	; 0x2b
 8004b0a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004b0e:	782a      	ldrb	r2, [r5, #0]
 8004b10:	2a2a      	cmp	r2, #42	; 0x2a
 8004b12:	f43f af7e 	beq.w	8004a12 <_vfiprintf_r+0x66>
 8004b16:	9a07      	ldr	r2, [sp, #28]
 8004b18:	2100      	movs	r1, #0
 8004b1a:	200a      	movs	r0, #10
 8004b1c:	46a8      	mov	r8, r5
 8004b1e:	3501      	adds	r5, #1
 8004b20:	f898 3000 	ldrb.w	r3, [r8]
 8004b24:	3b30      	subs	r3, #48	; 0x30
 8004b26:	2b09      	cmp	r3, #9
 8004b28:	d803      	bhi.n	8004b32 <_vfiprintf_r+0x186>
 8004b2a:	fb00 3202 	mla	r2, r0, r2, r3
 8004b2e:	2101      	movs	r1, #1
 8004b30:	e7f4      	b.n	8004b1c <_vfiprintf_r+0x170>
 8004b32:	2900      	cmp	r1, #0
 8004b34:	f43f af79 	beq.w	8004a2a <_vfiprintf_r+0x7e>
 8004b38:	9207      	str	r2, [sp, #28]
 8004b3a:	e776      	b.n	8004a2a <_vfiprintf_r+0x7e>
 8004b3c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004b40:	2b2a      	cmp	r3, #42	; 0x2a
 8004b42:	d10b      	bne.n	8004b5c <_vfiprintf_r+0x1b0>
 8004b44:	9b03      	ldr	r3, [sp, #12]
 8004b46:	1d1a      	adds	r2, r3, #4
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	9203      	str	r2, [sp, #12]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	bfb8      	it	lt
 8004b50:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b54:	f108 0802 	add.w	r8, r8, #2
 8004b58:	9305      	str	r3, [sp, #20]
 8004b5a:	e76b      	b.n	8004a34 <_vfiprintf_r+0x88>
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	9305      	str	r3, [sp, #20]
 8004b60:	f108 0001 	add.w	r0, r8, #1
 8004b64:	4619      	mov	r1, r3
 8004b66:	250a      	movs	r5, #10
 8004b68:	4680      	mov	r8, r0
 8004b6a:	3001      	adds	r0, #1
 8004b6c:	f898 2000 	ldrb.w	r2, [r8]
 8004b70:	3a30      	subs	r2, #48	; 0x30
 8004b72:	2a09      	cmp	r2, #9
 8004b74:	d803      	bhi.n	8004b7e <_vfiprintf_r+0x1d2>
 8004b76:	fb05 2101 	mla	r1, r5, r1, r2
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e7f4      	b.n	8004b68 <_vfiprintf_r+0x1bc>
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f43f af58 	beq.w	8004a34 <_vfiprintf_r+0x88>
 8004b84:	9105      	str	r1, [sp, #20]
 8004b86:	e755      	b.n	8004a34 <_vfiprintf_r+0x88>
 8004b88:	ab03      	add	r3, sp, #12
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	4622      	mov	r2, r4
 8004b8e:	4b14      	ldr	r3, [pc, #80]	; (8004be0 <_vfiprintf_r+0x234>)
 8004b90:	a904      	add	r1, sp, #16
 8004b92:	4630      	mov	r0, r6
 8004b94:	f3af 8000 	nop.w
 8004b98:	e007      	b.n	8004baa <_vfiprintf_r+0x1fe>
 8004b9a:	ab03      	add	r3, sp, #12
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	4622      	mov	r2, r4
 8004ba0:	4b0f      	ldr	r3, [pc, #60]	; (8004be0 <_vfiprintf_r+0x234>)
 8004ba2:	a904      	add	r1, sp, #16
 8004ba4:	4630      	mov	r0, r6
 8004ba6:	f000 f893 	bl	8004cd0 <_printf_i>
 8004baa:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004bae:	4682      	mov	sl, r0
 8004bb0:	f47f af68 	bne.w	8004a84 <_vfiprintf_r+0xd8>
 8004bb4:	89a3      	ldrh	r3, [r4, #12]
 8004bb6:	065b      	lsls	r3, r3, #25
 8004bb8:	f53f af28 	bmi.w	8004a0c <_vfiprintf_r+0x60>
 8004bbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bbe:	b01d      	add	sp, #116	; 0x74
 8004bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bc4:	080051d0 	.word	0x080051d0
 8004bc8:	080051f0 	.word	0x080051f0
 8004bcc:	08005210 	.word	0x08005210
 8004bd0:	08005236 	.word	0x08005236
 8004bd4:	0800523a 	.word	0x0800523a
 8004bd8:	00000000 	.word	0x00000000
 8004bdc:	08005230 	.word	0x08005230
 8004be0:	08004989 	.word	0x08004989

08004be4 <_printf_common>:
 8004be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004be8:	4691      	mov	r9, r2
 8004bea:	461f      	mov	r7, r3
 8004bec:	690a      	ldr	r2, [r1, #16]
 8004bee:	688b      	ldr	r3, [r1, #8]
 8004bf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	bfb8      	it	lt
 8004bf8:	4613      	movlt	r3, r2
 8004bfa:	f8c9 3000 	str.w	r3, [r9]
 8004bfe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c02:	4606      	mov	r6, r0
 8004c04:	460c      	mov	r4, r1
 8004c06:	b112      	cbz	r2, 8004c0e <_printf_common+0x2a>
 8004c08:	3301      	adds	r3, #1
 8004c0a:	f8c9 3000 	str.w	r3, [r9]
 8004c0e:	6823      	ldr	r3, [r4, #0]
 8004c10:	0699      	lsls	r1, r3, #26
 8004c12:	bf42      	ittt	mi
 8004c14:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004c18:	3302      	addmi	r3, #2
 8004c1a:	f8c9 3000 	strmi.w	r3, [r9]
 8004c1e:	6825      	ldr	r5, [r4, #0]
 8004c20:	f015 0506 	ands.w	r5, r5, #6
 8004c24:	d110      	bne.n	8004c48 <_printf_common+0x64>
 8004c26:	f104 0a19 	add.w	sl, r4, #25
 8004c2a:	e007      	b.n	8004c3c <_printf_common+0x58>
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	4652      	mov	r2, sl
 8004c30:	4639      	mov	r1, r7
 8004c32:	4630      	mov	r0, r6
 8004c34:	47c0      	blx	r8
 8004c36:	3001      	adds	r0, #1
 8004c38:	d01a      	beq.n	8004c70 <_printf_common+0x8c>
 8004c3a:	3501      	adds	r5, #1
 8004c3c:	68e3      	ldr	r3, [r4, #12]
 8004c3e:	f8d9 2000 	ldr.w	r2, [r9]
 8004c42:	1a9b      	subs	r3, r3, r2
 8004c44:	429d      	cmp	r5, r3
 8004c46:	dbf1      	blt.n	8004c2c <_printf_common+0x48>
 8004c48:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004c4c:	6822      	ldr	r2, [r4, #0]
 8004c4e:	3300      	adds	r3, #0
 8004c50:	bf18      	it	ne
 8004c52:	2301      	movne	r3, #1
 8004c54:	0692      	lsls	r2, r2, #26
 8004c56:	d50f      	bpl.n	8004c78 <_printf_common+0x94>
 8004c58:	18e1      	adds	r1, r4, r3
 8004c5a:	1c5a      	adds	r2, r3, #1
 8004c5c:	2030      	movs	r0, #48	; 0x30
 8004c5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c62:	4422      	add	r2, r4
 8004c64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c6c:	3302      	adds	r3, #2
 8004c6e:	e003      	b.n	8004c78 <_printf_common+0x94>
 8004c70:	f04f 30ff 	mov.w	r0, #4294967295
 8004c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c7c:	4639      	mov	r1, r7
 8004c7e:	4630      	mov	r0, r6
 8004c80:	47c0      	blx	r8
 8004c82:	3001      	adds	r0, #1
 8004c84:	d0f4      	beq.n	8004c70 <_printf_common+0x8c>
 8004c86:	6822      	ldr	r2, [r4, #0]
 8004c88:	f8d9 5000 	ldr.w	r5, [r9]
 8004c8c:	68e3      	ldr	r3, [r4, #12]
 8004c8e:	f002 0206 	and.w	r2, r2, #6
 8004c92:	2a04      	cmp	r2, #4
 8004c94:	bf08      	it	eq
 8004c96:	1b5d      	subeq	r5, r3, r5
 8004c98:	6922      	ldr	r2, [r4, #16]
 8004c9a:	68a3      	ldr	r3, [r4, #8]
 8004c9c:	bf0c      	ite	eq
 8004c9e:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ca2:	2500      	movne	r5, #0
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	bfc4      	itt	gt
 8004ca8:	1a9b      	subgt	r3, r3, r2
 8004caa:	18ed      	addgt	r5, r5, r3
 8004cac:	f04f 0900 	mov.w	r9, #0
 8004cb0:	341a      	adds	r4, #26
 8004cb2:	454d      	cmp	r5, r9
 8004cb4:	d009      	beq.n	8004cca <_printf_common+0xe6>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	4622      	mov	r2, r4
 8004cba:	4639      	mov	r1, r7
 8004cbc:	4630      	mov	r0, r6
 8004cbe:	47c0      	blx	r8
 8004cc0:	3001      	adds	r0, #1
 8004cc2:	d0d5      	beq.n	8004c70 <_printf_common+0x8c>
 8004cc4:	f109 0901 	add.w	r9, r9, #1
 8004cc8:	e7f3      	b.n	8004cb2 <_printf_common+0xce>
 8004cca:	2000      	movs	r0, #0
 8004ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004cd0 <_printf_i>:
 8004cd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004cd4:	4617      	mov	r7, r2
 8004cd6:	7e0a      	ldrb	r2, [r1, #24]
 8004cd8:	b085      	sub	sp, #20
 8004cda:	2a6e      	cmp	r2, #110	; 0x6e
 8004cdc:	4698      	mov	r8, r3
 8004cde:	4606      	mov	r6, r0
 8004ce0:	460c      	mov	r4, r1
 8004ce2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ce4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004ce8:	f000 80ae 	beq.w	8004e48 <_printf_i+0x178>
 8004cec:	d811      	bhi.n	8004d12 <_printf_i+0x42>
 8004cee:	2a63      	cmp	r2, #99	; 0x63
 8004cf0:	d022      	beq.n	8004d38 <_printf_i+0x68>
 8004cf2:	d809      	bhi.n	8004d08 <_printf_i+0x38>
 8004cf4:	2a00      	cmp	r2, #0
 8004cf6:	f000 80bb 	beq.w	8004e70 <_printf_i+0x1a0>
 8004cfa:	2a58      	cmp	r2, #88	; 0x58
 8004cfc:	f040 80ca 	bne.w	8004e94 <_printf_i+0x1c4>
 8004d00:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004d04:	4983      	ldr	r1, [pc, #524]	; (8004f14 <_printf_i+0x244>)
 8004d06:	e055      	b.n	8004db4 <_printf_i+0xe4>
 8004d08:	2a64      	cmp	r2, #100	; 0x64
 8004d0a:	d01e      	beq.n	8004d4a <_printf_i+0x7a>
 8004d0c:	2a69      	cmp	r2, #105	; 0x69
 8004d0e:	d01c      	beq.n	8004d4a <_printf_i+0x7a>
 8004d10:	e0c0      	b.n	8004e94 <_printf_i+0x1c4>
 8004d12:	2a73      	cmp	r2, #115	; 0x73
 8004d14:	f000 80b0 	beq.w	8004e78 <_printf_i+0x1a8>
 8004d18:	d809      	bhi.n	8004d2e <_printf_i+0x5e>
 8004d1a:	2a6f      	cmp	r2, #111	; 0x6f
 8004d1c:	d02e      	beq.n	8004d7c <_printf_i+0xac>
 8004d1e:	2a70      	cmp	r2, #112	; 0x70
 8004d20:	f040 80b8 	bne.w	8004e94 <_printf_i+0x1c4>
 8004d24:	680a      	ldr	r2, [r1, #0]
 8004d26:	f042 0220 	orr.w	r2, r2, #32
 8004d2a:	600a      	str	r2, [r1, #0]
 8004d2c:	e03e      	b.n	8004dac <_printf_i+0xdc>
 8004d2e:	2a75      	cmp	r2, #117	; 0x75
 8004d30:	d024      	beq.n	8004d7c <_printf_i+0xac>
 8004d32:	2a78      	cmp	r2, #120	; 0x78
 8004d34:	d03a      	beq.n	8004dac <_printf_i+0xdc>
 8004d36:	e0ad      	b.n	8004e94 <_printf_i+0x1c4>
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004d3e:	1d11      	adds	r1, r2, #4
 8004d40:	6019      	str	r1, [r3, #0]
 8004d42:	6813      	ldr	r3, [r2, #0]
 8004d44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d48:	e0a8      	b.n	8004e9c <_printf_i+0x1cc>
 8004d4a:	6821      	ldr	r1, [r4, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004d52:	d002      	beq.n	8004d5a <_printf_i+0x8a>
 8004d54:	1d11      	adds	r1, r2, #4
 8004d56:	6019      	str	r1, [r3, #0]
 8004d58:	e008      	b.n	8004d6c <_printf_i+0x9c>
 8004d5a:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004d5e:	f102 0104 	add.w	r1, r2, #4
 8004d62:	6019      	str	r1, [r3, #0]
 8004d64:	d002      	beq.n	8004d6c <_printf_i+0x9c>
 8004d66:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004d6a:	e000      	b.n	8004d6e <_printf_i+0x9e>
 8004d6c:	6813      	ldr	r3, [r2, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	da3c      	bge.n	8004dec <_printf_i+0x11c>
 8004d72:	222d      	movs	r2, #45	; 0x2d
 8004d74:	425b      	negs	r3, r3
 8004d76:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004d7a:	e037      	b.n	8004dec <_printf_i+0x11c>
 8004d7c:	6821      	ldr	r1, [r4, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004d84:	d002      	beq.n	8004d8c <_printf_i+0xbc>
 8004d86:	1d11      	adds	r1, r2, #4
 8004d88:	6019      	str	r1, [r3, #0]
 8004d8a:	e007      	b.n	8004d9c <_printf_i+0xcc>
 8004d8c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004d90:	f102 0104 	add.w	r1, r2, #4
 8004d94:	6019      	str	r1, [r3, #0]
 8004d96:	d001      	beq.n	8004d9c <_printf_i+0xcc>
 8004d98:	8813      	ldrh	r3, [r2, #0]
 8004d9a:	e000      	b.n	8004d9e <_printf_i+0xce>
 8004d9c:	6813      	ldr	r3, [r2, #0]
 8004d9e:	7e22      	ldrb	r2, [r4, #24]
 8004da0:	495c      	ldr	r1, [pc, #368]	; (8004f14 <_printf_i+0x244>)
 8004da2:	2a6f      	cmp	r2, #111	; 0x6f
 8004da4:	bf14      	ite	ne
 8004da6:	220a      	movne	r2, #10
 8004da8:	2208      	moveq	r2, #8
 8004daa:	e01b      	b.n	8004de4 <_printf_i+0x114>
 8004dac:	2278      	movs	r2, #120	; 0x78
 8004dae:	495a      	ldr	r1, [pc, #360]	; (8004f18 <_printf_i+0x248>)
 8004db0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004db4:	6822      	ldr	r2, [r4, #0]
 8004db6:	6818      	ldr	r0, [r3, #0]
 8004db8:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004dbc:	f100 0504 	add.w	r5, r0, #4
 8004dc0:	601d      	str	r5, [r3, #0]
 8004dc2:	d103      	bne.n	8004dcc <_printf_i+0xfc>
 8004dc4:	0655      	lsls	r5, r2, #25
 8004dc6:	d501      	bpl.n	8004dcc <_printf_i+0xfc>
 8004dc8:	8803      	ldrh	r3, [r0, #0]
 8004dca:	e000      	b.n	8004dce <_printf_i+0xfe>
 8004dcc:	6803      	ldr	r3, [r0, #0]
 8004dce:	07d0      	lsls	r0, r2, #31
 8004dd0:	bf44      	itt	mi
 8004dd2:	f042 0220 	orrmi.w	r2, r2, #32
 8004dd6:	6022      	strmi	r2, [r4, #0]
 8004dd8:	b91b      	cbnz	r3, 8004de2 <_printf_i+0x112>
 8004dda:	6822      	ldr	r2, [r4, #0]
 8004ddc:	f022 0220 	bic.w	r2, r2, #32
 8004de0:	6022      	str	r2, [r4, #0]
 8004de2:	2210      	movs	r2, #16
 8004de4:	2000      	movs	r0, #0
 8004de6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004dea:	e001      	b.n	8004df0 <_printf_i+0x120>
 8004dec:	4949      	ldr	r1, [pc, #292]	; (8004f14 <_printf_i+0x244>)
 8004dee:	220a      	movs	r2, #10
 8004df0:	6865      	ldr	r5, [r4, #4]
 8004df2:	60a5      	str	r5, [r4, #8]
 8004df4:	2d00      	cmp	r5, #0
 8004df6:	db08      	blt.n	8004e0a <_printf_i+0x13a>
 8004df8:	6820      	ldr	r0, [r4, #0]
 8004dfa:	f020 0004 	bic.w	r0, r0, #4
 8004dfe:	6020      	str	r0, [r4, #0]
 8004e00:	b92b      	cbnz	r3, 8004e0e <_printf_i+0x13e>
 8004e02:	2d00      	cmp	r5, #0
 8004e04:	d17d      	bne.n	8004f02 <_printf_i+0x232>
 8004e06:	4675      	mov	r5, lr
 8004e08:	e00c      	b.n	8004e24 <_printf_i+0x154>
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d079      	beq.n	8004f02 <_printf_i+0x232>
 8004e0e:	4675      	mov	r5, lr
 8004e10:	fbb3 f0f2 	udiv	r0, r3, r2
 8004e14:	fb02 3310 	mls	r3, r2, r0, r3
 8004e18:	5ccb      	ldrb	r3, [r1, r3]
 8004e1a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2800      	cmp	r0, #0
 8004e22:	d1f5      	bne.n	8004e10 <_printf_i+0x140>
 8004e24:	2a08      	cmp	r2, #8
 8004e26:	d10b      	bne.n	8004e40 <_printf_i+0x170>
 8004e28:	6823      	ldr	r3, [r4, #0]
 8004e2a:	07da      	lsls	r2, r3, #31
 8004e2c:	d508      	bpl.n	8004e40 <_printf_i+0x170>
 8004e2e:	6923      	ldr	r3, [r4, #16]
 8004e30:	6862      	ldr	r2, [r4, #4]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	bfde      	ittt	le
 8004e36:	2330      	movle	r3, #48	; 0x30
 8004e38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e40:	ebc5 030e 	rsb	r3, r5, lr
 8004e44:	6123      	str	r3, [r4, #16]
 8004e46:	e02e      	b.n	8004ea6 <_printf_i+0x1d6>
 8004e48:	6808      	ldr	r0, [r1, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	6949      	ldr	r1, [r1, #20]
 8004e4e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004e52:	d003      	beq.n	8004e5c <_printf_i+0x18c>
 8004e54:	1d10      	adds	r0, r2, #4
 8004e56:	6018      	str	r0, [r3, #0]
 8004e58:	6813      	ldr	r3, [r2, #0]
 8004e5a:	e008      	b.n	8004e6e <_printf_i+0x19e>
 8004e5c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e60:	f102 0004 	add.w	r0, r2, #4
 8004e64:	6018      	str	r0, [r3, #0]
 8004e66:	6813      	ldr	r3, [r2, #0]
 8004e68:	d001      	beq.n	8004e6e <_printf_i+0x19e>
 8004e6a:	8019      	strh	r1, [r3, #0]
 8004e6c:	e000      	b.n	8004e70 <_printf_i+0x1a0>
 8004e6e:	6019      	str	r1, [r3, #0]
 8004e70:	2300      	movs	r3, #0
 8004e72:	6123      	str	r3, [r4, #16]
 8004e74:	4675      	mov	r5, lr
 8004e76:	e016      	b.n	8004ea6 <_printf_i+0x1d6>
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	1d11      	adds	r1, r2, #4
 8004e7c:	6019      	str	r1, [r3, #0]
 8004e7e:	6815      	ldr	r5, [r2, #0]
 8004e80:	6862      	ldr	r2, [r4, #4]
 8004e82:	2100      	movs	r1, #0
 8004e84:	4628      	mov	r0, r5
 8004e86:	f7fb f9cb 	bl	8000220 <memchr>
 8004e8a:	b108      	cbz	r0, 8004e90 <_printf_i+0x1c0>
 8004e8c:	1b40      	subs	r0, r0, r5
 8004e8e:	6060      	str	r0, [r4, #4]
 8004e90:	6863      	ldr	r3, [r4, #4]
 8004e92:	e004      	b.n	8004e9e <_printf_i+0x1ce>
 8004e94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e98:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	6123      	str	r3, [r4, #16]
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ea6:	f8cd 8000 	str.w	r8, [sp]
 8004eaa:	463b      	mov	r3, r7
 8004eac:	aa03      	add	r2, sp, #12
 8004eae:	4621      	mov	r1, r4
 8004eb0:	4630      	mov	r0, r6
 8004eb2:	f7ff fe97 	bl	8004be4 <_printf_common>
 8004eb6:	3001      	adds	r0, #1
 8004eb8:	d102      	bne.n	8004ec0 <_printf_i+0x1f0>
 8004eba:	f04f 30ff 	mov.w	r0, #4294967295
 8004ebe:	e026      	b.n	8004f0e <_printf_i+0x23e>
 8004ec0:	6923      	ldr	r3, [r4, #16]
 8004ec2:	462a      	mov	r2, r5
 8004ec4:	4639      	mov	r1, r7
 8004ec6:	4630      	mov	r0, r6
 8004ec8:	47c0      	blx	r8
 8004eca:	3001      	adds	r0, #1
 8004ecc:	d0f5      	beq.n	8004eba <_printf_i+0x1ea>
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	079b      	lsls	r3, r3, #30
 8004ed2:	d510      	bpl.n	8004ef6 <_printf_i+0x226>
 8004ed4:	2500      	movs	r5, #0
 8004ed6:	f104 0919 	add.w	r9, r4, #25
 8004eda:	e007      	b.n	8004eec <_printf_i+0x21c>
 8004edc:	2301      	movs	r3, #1
 8004ede:	464a      	mov	r2, r9
 8004ee0:	4639      	mov	r1, r7
 8004ee2:	4630      	mov	r0, r6
 8004ee4:	47c0      	blx	r8
 8004ee6:	3001      	adds	r0, #1
 8004ee8:	d0e7      	beq.n	8004eba <_printf_i+0x1ea>
 8004eea:	3501      	adds	r5, #1
 8004eec:	68e3      	ldr	r3, [r4, #12]
 8004eee:	9a03      	ldr	r2, [sp, #12]
 8004ef0:	1a9b      	subs	r3, r3, r2
 8004ef2:	429d      	cmp	r5, r3
 8004ef4:	dbf2      	blt.n	8004edc <_printf_i+0x20c>
 8004ef6:	68e0      	ldr	r0, [r4, #12]
 8004ef8:	9b03      	ldr	r3, [sp, #12]
 8004efa:	4298      	cmp	r0, r3
 8004efc:	bfb8      	it	lt
 8004efe:	4618      	movlt	r0, r3
 8004f00:	e005      	b.n	8004f0e <_printf_i+0x23e>
 8004f02:	780b      	ldrb	r3, [r1, #0]
 8004f04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f0c:	e78a      	b.n	8004e24 <_printf_i+0x154>
 8004f0e:	b005      	add	sp, #20
 8004f10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f14:	08005241 	.word	0x08005241
 8004f18:	08005252 	.word	0x08005252

08004f1c <__sread>:
 8004f1c:	b510      	push	{r4, lr}
 8004f1e:	460c      	mov	r4, r1
 8004f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f24:	f000 f8d6 	bl	80050d4 <_read_r>
 8004f28:	2800      	cmp	r0, #0
 8004f2a:	bfab      	itete	ge
 8004f2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f2e:	89a3      	ldrhlt	r3, [r4, #12]
 8004f30:	181b      	addge	r3, r3, r0
 8004f32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f36:	bfac      	ite	ge
 8004f38:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f3a:	81a3      	strhlt	r3, [r4, #12]
 8004f3c:	bd10      	pop	{r4, pc}

08004f3e <__swrite>:
 8004f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f42:	461f      	mov	r7, r3
 8004f44:	898b      	ldrh	r3, [r1, #12]
 8004f46:	05db      	lsls	r3, r3, #23
 8004f48:	4605      	mov	r5, r0
 8004f4a:	460c      	mov	r4, r1
 8004f4c:	4616      	mov	r6, r2
 8004f4e:	d505      	bpl.n	8004f5c <__swrite+0x1e>
 8004f50:	2302      	movs	r3, #2
 8004f52:	2200      	movs	r2, #0
 8004f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f58:	f000 f868 	bl	800502c <_lseek_r>
 8004f5c:	89a3      	ldrh	r3, [r4, #12]
 8004f5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f66:	81a3      	strh	r3, [r4, #12]
 8004f68:	4632      	mov	r2, r6
 8004f6a:	463b      	mov	r3, r7
 8004f6c:	4628      	mov	r0, r5
 8004f6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f72:	f000 b817 	b.w	8004fa4 <_write_r>

08004f76 <__sseek>:
 8004f76:	b510      	push	{r4, lr}
 8004f78:	460c      	mov	r4, r1
 8004f7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f7e:	f000 f855 	bl	800502c <_lseek_r>
 8004f82:	1c43      	adds	r3, r0, #1
 8004f84:	89a3      	ldrh	r3, [r4, #12]
 8004f86:	bf15      	itete	ne
 8004f88:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f92:	81a3      	strheq	r3, [r4, #12]
 8004f94:	bf18      	it	ne
 8004f96:	81a3      	strhne	r3, [r4, #12]
 8004f98:	bd10      	pop	{r4, pc}

08004f9a <__sclose>:
 8004f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f9e:	f000 b813 	b.w	8004fc8 <_close_r>
	...

08004fa4 <_write_r>:
 8004fa4:	b538      	push	{r3, r4, r5, lr}
 8004fa6:	4c07      	ldr	r4, [pc, #28]	; (8004fc4 <_write_r+0x20>)
 8004fa8:	4605      	mov	r5, r0
 8004faa:	4608      	mov	r0, r1
 8004fac:	4611      	mov	r1, r2
 8004fae:	2200      	movs	r2, #0
 8004fb0:	6022      	str	r2, [r4, #0]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	f7fe fe92 	bl	8003cdc <_write>
 8004fb8:	1c43      	adds	r3, r0, #1
 8004fba:	d102      	bne.n	8004fc2 <_write_r+0x1e>
 8004fbc:	6823      	ldr	r3, [r4, #0]
 8004fbe:	b103      	cbz	r3, 8004fc2 <_write_r+0x1e>
 8004fc0:	602b      	str	r3, [r5, #0]
 8004fc2:	bd38      	pop	{r3, r4, r5, pc}
 8004fc4:	20002b38 	.word	0x20002b38

08004fc8 <_close_r>:
 8004fc8:	b538      	push	{r3, r4, r5, lr}
 8004fca:	4c06      	ldr	r4, [pc, #24]	; (8004fe4 <_close_r+0x1c>)
 8004fcc:	2300      	movs	r3, #0
 8004fce:	4605      	mov	r5, r0
 8004fd0:	4608      	mov	r0, r1
 8004fd2:	6023      	str	r3, [r4, #0]
 8004fd4:	f7fe fec4 	bl	8003d60 <_close>
 8004fd8:	1c43      	adds	r3, r0, #1
 8004fda:	d102      	bne.n	8004fe2 <_close_r+0x1a>
 8004fdc:	6823      	ldr	r3, [r4, #0]
 8004fde:	b103      	cbz	r3, 8004fe2 <_close_r+0x1a>
 8004fe0:	602b      	str	r3, [r5, #0]
 8004fe2:	bd38      	pop	{r3, r4, r5, pc}
 8004fe4:	20002b38 	.word	0x20002b38

08004fe8 <_fstat_r>:
 8004fe8:	b538      	push	{r3, r4, r5, lr}
 8004fea:	4c07      	ldr	r4, [pc, #28]	; (8005008 <_fstat_r+0x20>)
 8004fec:	2300      	movs	r3, #0
 8004fee:	4605      	mov	r5, r0
 8004ff0:	4608      	mov	r0, r1
 8004ff2:	4611      	mov	r1, r2
 8004ff4:	6023      	str	r3, [r4, #0]
 8004ff6:	f7fe fec5 	bl	8003d84 <_fstat>
 8004ffa:	1c43      	adds	r3, r0, #1
 8004ffc:	d102      	bne.n	8005004 <_fstat_r+0x1c>
 8004ffe:	6823      	ldr	r3, [r4, #0]
 8005000:	b103      	cbz	r3, 8005004 <_fstat_r+0x1c>
 8005002:	602b      	str	r3, [r5, #0]
 8005004:	bd38      	pop	{r3, r4, r5, pc}
 8005006:	bf00      	nop
 8005008:	20002b38 	.word	0x20002b38

0800500c <_isatty_r>:
 800500c:	b538      	push	{r3, r4, r5, lr}
 800500e:	4c06      	ldr	r4, [pc, #24]	; (8005028 <_isatty_r+0x1c>)
 8005010:	2300      	movs	r3, #0
 8005012:	4605      	mov	r5, r0
 8005014:	4608      	mov	r0, r1
 8005016:	6023      	str	r3, [r4, #0]
 8005018:	f7fe fec6 	bl	8003da8 <_isatty>
 800501c:	1c43      	adds	r3, r0, #1
 800501e:	d102      	bne.n	8005026 <_isatty_r+0x1a>
 8005020:	6823      	ldr	r3, [r4, #0]
 8005022:	b103      	cbz	r3, 8005026 <_isatty_r+0x1a>
 8005024:	602b      	str	r3, [r5, #0]
 8005026:	bd38      	pop	{r3, r4, r5, pc}
 8005028:	20002b38 	.word	0x20002b38

0800502c <_lseek_r>:
 800502c:	b538      	push	{r3, r4, r5, lr}
 800502e:	4c07      	ldr	r4, [pc, #28]	; (800504c <_lseek_r+0x20>)
 8005030:	4605      	mov	r5, r0
 8005032:	4608      	mov	r0, r1
 8005034:	4611      	mov	r1, r2
 8005036:	2200      	movs	r2, #0
 8005038:	6022      	str	r2, [r4, #0]
 800503a:	461a      	mov	r2, r3
 800503c:	f7fe fec4 	bl	8003dc8 <_lseek>
 8005040:	1c43      	adds	r3, r0, #1
 8005042:	d102      	bne.n	800504a <_lseek_r+0x1e>
 8005044:	6823      	ldr	r3, [r4, #0]
 8005046:	b103      	cbz	r3, 800504a <_lseek_r+0x1e>
 8005048:	602b      	str	r3, [r5, #0]
 800504a:	bd38      	pop	{r3, r4, r5, pc}
 800504c:	20002b38 	.word	0x20002b38

08005050 <memmove>:
 8005050:	4288      	cmp	r0, r1
 8005052:	b510      	push	{r4, lr}
 8005054:	eb01 0302 	add.w	r3, r1, r2
 8005058:	d801      	bhi.n	800505e <memmove+0xe>
 800505a:	1e42      	subs	r2, r0, #1
 800505c:	e00b      	b.n	8005076 <memmove+0x26>
 800505e:	4298      	cmp	r0, r3
 8005060:	d2fb      	bcs.n	800505a <memmove+0xa>
 8005062:	1881      	adds	r1, r0, r2
 8005064:	1ad2      	subs	r2, r2, r3
 8005066:	42d3      	cmn	r3, r2
 8005068:	d004      	beq.n	8005074 <memmove+0x24>
 800506a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800506e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005072:	e7f8      	b.n	8005066 <memmove+0x16>
 8005074:	bd10      	pop	{r4, pc}
 8005076:	4299      	cmp	r1, r3
 8005078:	d004      	beq.n	8005084 <memmove+0x34>
 800507a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800507e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005082:	e7f8      	b.n	8005076 <memmove+0x26>
 8005084:	bd10      	pop	{r4, pc}

08005086 <_realloc_r>:
 8005086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005088:	4607      	mov	r7, r0
 800508a:	4615      	mov	r5, r2
 800508c:	460e      	mov	r6, r1
 800508e:	b921      	cbnz	r1, 800509a <_realloc_r+0x14>
 8005090:	4611      	mov	r1, r2
 8005092:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005096:	f7fe bf65 	b.w	8003f64 <_malloc_r>
 800509a:	b91a      	cbnz	r2, 80050a4 <_realloc_r+0x1e>
 800509c:	f7fe ff14 	bl	8003ec8 <_free_r>
 80050a0:	4628      	mov	r0, r5
 80050a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050a4:	f000 f828 	bl	80050f8 <_malloc_usable_size_r>
 80050a8:	4285      	cmp	r5, r0
 80050aa:	d90e      	bls.n	80050ca <_realloc_r+0x44>
 80050ac:	4629      	mov	r1, r5
 80050ae:	4638      	mov	r0, r7
 80050b0:	f7fe ff58 	bl	8003f64 <_malloc_r>
 80050b4:	4604      	mov	r4, r0
 80050b6:	b150      	cbz	r0, 80050ce <_realloc_r+0x48>
 80050b8:	4631      	mov	r1, r6
 80050ba:	462a      	mov	r2, r5
 80050bc:	f7fe fef0 	bl	8003ea0 <memcpy>
 80050c0:	4631      	mov	r1, r6
 80050c2:	4638      	mov	r0, r7
 80050c4:	f7fe ff00 	bl	8003ec8 <_free_r>
 80050c8:	e001      	b.n	80050ce <_realloc_r+0x48>
 80050ca:	4630      	mov	r0, r6
 80050cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050ce:	4620      	mov	r0, r4
 80050d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080050d4 <_read_r>:
 80050d4:	b538      	push	{r3, r4, r5, lr}
 80050d6:	4c07      	ldr	r4, [pc, #28]	; (80050f4 <_read_r+0x20>)
 80050d8:	4605      	mov	r5, r0
 80050da:	4608      	mov	r0, r1
 80050dc:	4611      	mov	r1, r2
 80050de:	2200      	movs	r2, #0
 80050e0:	6022      	str	r2, [r4, #0]
 80050e2:	461a      	mov	r2, r3
 80050e4:	f7fe fe84 	bl	8003df0 <_read>
 80050e8:	1c43      	adds	r3, r0, #1
 80050ea:	d102      	bne.n	80050f2 <_read_r+0x1e>
 80050ec:	6823      	ldr	r3, [r4, #0]
 80050ee:	b103      	cbz	r3, 80050f2 <_read_r+0x1e>
 80050f0:	602b      	str	r3, [r5, #0]
 80050f2:	bd38      	pop	{r3, r4, r5, pc}
 80050f4:	20002b38 	.word	0x20002b38

080050f8 <_malloc_usable_size_r>:
 80050f8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80050fc:	2800      	cmp	r0, #0
 80050fe:	bfbe      	ittt	lt
 8005100:	1809      	addlt	r1, r1, r0
 8005102:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 8005106:	18c0      	addlt	r0, r0, r3
 8005108:	3804      	subs	r0, #4
 800510a:	4770      	bx	lr

0800510c <_init>:
 800510c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800510e:	bf00      	nop
 8005110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005112:	bc08      	pop	{r3}
 8005114:	469e      	mov	lr, r3
 8005116:	4770      	bx	lr

08005118 <_fini>:
 8005118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800511a:	bf00      	nop
 800511c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800511e:	bc08      	pop	{r3}
 8005120:	469e      	mov	lr, r3
 8005122:	4770      	bx	lr
