
C:\Users\emon1\Atollic\TrueSTUDIO\ARM_workspace_7.1.2\Vulture\Debug\Vulture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003408  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080035d8  080035d8  000135d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  08003690  08003690  00013690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003698  08003698  00013698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000094  20000000  0800369c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000005c4  20000098  08003730  00020098  2**3
                  ALLOC
  7 ._user_heap_stack 00000604  2000065c  08003730  0002065c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000fab8  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000254d  00000000  00000000  0002fb7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000e88  00000000  00000000  000320d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000d60  00000000  00000000  00032f58  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00007adc  00000000  00000000  00033cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000062d5  00000000  00000000  0003b794  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  00041a69  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00004154  00000000  00000000  00041ae8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000098 	.word	0x20000098
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080035c0 	.word	0x080035c0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000009c 	.word	0x2000009c
 800020c:	080035c0 	.word	0x080035c0

08000210 <vApplicationStackOverflowHook>:

/**
  Dummy implementation of the callback function vApplicationStackOverflowHook().
*/
#if (configCHECK_FOR_STACK_OVERFLOW > 0)
__WEAK void vApplicationStackOverflowHook (TaskHandle_t xTask, signed char *pcTaskName) {
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
 8000218:	6039      	str	r1, [r7, #0]
  (void)xTask;
  (void)pcTaskName;
}
 800021a:	bf00      	nop
 800021c:	370c      	adds	r7, #12
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop

08000228 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000228:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000260 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800022c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800022e:	e003      	b.n	8000238 <LoopCopyDataInit>

08000230 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000230:	4b0c      	ldr	r3, [pc, #48]	; (8000264 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000232:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000234:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000236:	3104      	adds	r1, #4

08000238 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000238:	480b      	ldr	r0, [pc, #44]	; (8000268 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800023a:	4b0c      	ldr	r3, [pc, #48]	; (800026c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800023c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800023e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000240:	d3f6      	bcc.n	8000230 <CopyDataInit>
  ldr  r2, =_sbss
 8000242:	4a0b      	ldr	r2, [pc, #44]	; (8000270 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000244:	e002      	b.n	800024c <LoopFillZerobss>

08000246 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000246:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000248:	f842 3b04 	str.w	r3, [r2], #4

0800024c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800024c:	4b09      	ldr	r3, [pc, #36]	; (8000274 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800024e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000250:	d3f9      	bcc.n	8000246 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000252:	f001 faff 	bl	8001854 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000256:	f002 fd13 	bl	8002c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800025a:	f002 fb89 	bl	8002970 <main>
  bx  lr    
 800025e:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000260:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8000264:	0800369c 	.word	0x0800369c
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000268:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800026c:	20000094 	.word	0x20000094
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000270:	20000098 	.word	0x20000098
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000274:	2000065c 	.word	0x2000065c

08000278 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000278:	e7fe      	b.n	8000278 <ADC_IRQHandler>
	...

0800027c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000280:	4a0e      	ldr	r2, [pc, #56]	; (80002bc <HAL_Init+0x40>)
 8000282:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <HAL_Init+0x40>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800028a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800028c:	4a0b      	ldr	r2, [pc, #44]	; (80002bc <HAL_Init+0x40>)
 800028e:	4b0b      	ldr	r3, [pc, #44]	; (80002bc <HAL_Init+0x40>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000296:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000298:	4a08      	ldr	r2, [pc, #32]	; (80002bc <HAL_Init+0x40>)
 800029a:	4b08      	ldr	r3, [pc, #32]	; (80002bc <HAL_Init+0x40>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002a4:	2003      	movs	r0, #3
 80002a6:	f000 f901 	bl	80004ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80002aa:	200f      	movs	r0, #15
 80002ac:	f000 f810 	bl	80002d0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80002b0:	f000 f806 	bl	80002c0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80002b4:	2300      	movs	r3, #0
}
 80002b6:	4618      	mov	r0, r3
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	40023c00 	.word	0x40023c00

080002c0 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80002d8:	4b09      	ldr	r3, [pc, #36]	; (8000300 <HAL_InitTick+0x30>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a09      	ldr	r2, [pc, #36]	; (8000304 <HAL_InitTick+0x34>)
 80002de:	fba2 2303 	umull	r2, r3, r2, r3
 80002e2:	099b      	lsrs	r3, r3, #6
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 f909 	bl	80004fc <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80002ea:	2200      	movs	r2, #0
 80002ec:	6879      	ldr	r1, [r7, #4]
 80002ee:	f04f 30ff 	mov.w	r0, #4294967295
 80002f2:	f000 f8e7 	bl	80004c4 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 80002f6:	2300      	movs	r3, #0
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	3708      	adds	r7, #8
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	20000004 	.word	0x20000004
 8000304:	10624dd3 	.word	0x10624dd3

08000308 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
  return uwTick;
 800030c:	4b03      	ldr	r3, [pc, #12]	; (800031c <HAL_GetTick+0x14>)
 800030e:	681b      	ldr	r3, [r3, #0]
}
 8000310:	4618      	mov	r0, r3
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	20000654 	.word	0x20000654

08000320 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b084      	sub	sp, #16
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000328:	2300      	movs	r3, #0
 800032a:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 800032c:	f7ff ffec 	bl	8000308 <HAL_GetTick>
 8000330:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8000332:	bf00      	nop
 8000334:	f7ff ffe8 	bl	8000308 <HAL_GetTick>
 8000338:	4602      	mov	r2, r0
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	1ad2      	subs	r2, r2, r3
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	429a      	cmp	r2, r3
 8000342:	d3f7      	bcc.n	8000334 <HAL_Delay+0x14>
  {
  }
}
 8000344:	bf00      	nop
 8000346:	3710      	adds	r7, #16
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}

0800034c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800034c:	b480      	push	{r7}
 800034e:	b085      	sub	sp, #20
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	f003 0307 	and.w	r3, r3, #7
 800035a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800035c:	4b0c      	ldr	r3, [pc, #48]	; (8000390 <__NVIC_SetPriorityGrouping+0x44>)
 800035e:	68db      	ldr	r3, [r3, #12]
 8000360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000362:	68ba      	ldr	r2, [r7, #8]
 8000364:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000368:	4013      	ands	r3, r2
 800036a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000374:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800037c:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800037e:	4a04      	ldr	r2, [pc, #16]	; (8000390 <__NVIC_SetPriorityGrouping+0x44>)
 8000380:	68bb      	ldr	r3, [r7, #8]
 8000382:	60d3      	str	r3, [r2, #12]
}
 8000384:	bf00      	nop
 8000386:	3714      	adds	r7, #20
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr
 8000390:	e000ed00 	.word	0xe000ed00

08000394 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000398:	4b04      	ldr	r3, [pc, #16]	; (80003ac <__NVIC_GetPriorityGrouping+0x18>)
 800039a:	68db      	ldr	r3, [r3, #12]
 800039c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80003a0:	0a1b      	lsrs	r3, r3, #8
}
 80003a2:	4618      	mov	r0, r3
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr
 80003ac:	e000ed00 	.word	0xe000ed00

080003b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	6039      	str	r1, [r7, #0]
 80003ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	db0a      	blt.n	80003da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003c4:	490d      	ldr	r1, [pc, #52]	; (80003fc <__NVIC_SetPriority+0x4c>)
 80003c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ca:	683a      	ldr	r2, [r7, #0]
 80003cc:	b2d2      	uxtb	r2, r2
 80003ce:	0112      	lsls	r2, r2, #4
 80003d0:	b2d2      	uxtb	r2, r2
 80003d2:	440b      	add	r3, r1
 80003d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003d8:	e00a      	b.n	80003f0 <__NVIC_SetPriority+0x40>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003da:	4909      	ldr	r1, [pc, #36]	; (8000400 <__NVIC_SetPriority+0x50>)
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	f003 030f 	and.w	r3, r3, #15
 80003e2:	3b04      	subs	r3, #4
 80003e4:	683a      	ldr	r2, [r7, #0]
 80003e6:	b2d2      	uxtb	r2, r2
 80003e8:	0112      	lsls	r2, r2, #4
 80003ea:	b2d2      	uxtb	r2, r2
 80003ec:	440b      	add	r3, r1
 80003ee:	761a      	strb	r2, [r3, #24]
  }
}
 80003f0:	bf00      	nop
 80003f2:	370c      	adds	r7, #12
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr
 80003fc:	e000e100 	.word	0xe000e100
 8000400:	e000ed00 	.word	0xe000ed00

08000404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000404:	b480      	push	{r7}
 8000406:	b089      	sub	sp, #36	; 0x24
 8000408:	af00      	add	r7, sp, #0
 800040a:	60f8      	str	r0, [r7, #12]
 800040c:	60b9      	str	r1, [r7, #8]
 800040e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	f003 0307 	and.w	r3, r3, #7
 8000416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000418:	69fb      	ldr	r3, [r7, #28]
 800041a:	f1c3 0307 	rsb	r3, r3, #7
 800041e:	2b04      	cmp	r3, #4
 8000420:	bf28      	it	cs
 8000422:	2304      	movcs	r3, #4
 8000424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000426:	69fb      	ldr	r3, [r7, #28]
 8000428:	3304      	adds	r3, #4
 800042a:	2b06      	cmp	r3, #6
 800042c:	d902      	bls.n	8000434 <NVIC_EncodePriority+0x30>
 800042e:	69fb      	ldr	r3, [r7, #28]
 8000430:	3b03      	subs	r3, #3
 8000432:	e000      	b.n	8000436 <NVIC_EncodePriority+0x32>
 8000434:	2300      	movs	r3, #0
 8000436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000438:	2201      	movs	r2, #1
 800043a:	69bb      	ldr	r3, [r7, #24]
 800043c:	fa02 f303 	lsl.w	r3, r2, r3
 8000440:	1e5a      	subs	r2, r3, #1
 8000442:	68bb      	ldr	r3, [r7, #8]
 8000444:	401a      	ands	r2, r3
 8000446:	697b      	ldr	r3, [r7, #20]
 8000448:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800044a:	2101      	movs	r1, #1
 800044c:	697b      	ldr	r3, [r7, #20]
 800044e:	fa01 f303 	lsl.w	r3, r1, r3
 8000452:	1e59      	subs	r1, r3, #1
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000458:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 800045a:	4618      	mov	r0, r3
 800045c:	3724      	adds	r7, #36	; 0x24
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop

08000468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	3b01      	subs	r3, #1
 8000474:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000478:	d301      	bcc.n	800047e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800047a:	2301      	movs	r3, #1
 800047c:	e00f      	b.n	800049e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800047e:	4a0a      	ldr	r2, [pc, #40]	; (80004a8 <SysTick_Config+0x40>)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	3b01      	subs	r3, #1
 8000484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000486:	210f      	movs	r1, #15
 8000488:	f04f 30ff 	mov.w	r0, #4294967295
 800048c:	f7ff ff90 	bl	80003b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000490:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <SysTick_Config+0x40>)
 8000492:	2200      	movs	r2, #0
 8000494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000496:	4b04      	ldr	r3, [pc, #16]	; (80004a8 <SysTick_Config+0x40>)
 8000498:	2207      	movs	r2, #7
 800049a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800049c:	2300      	movs	r3, #0
}
 800049e:	4618      	mov	r0, r3
 80004a0:	3708      	adds	r7, #8
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	e000e010 	.word	0xe000e010

080004ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004b4:	6878      	ldr	r0, [r7, #4]
 80004b6:	f7ff ff49 	bl	800034c <__NVIC_SetPriorityGrouping>
}
 80004ba:	bf00      	nop
 80004bc:	3708      	adds	r7, #8
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop

080004c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	60b9      	str	r1, [r7, #8]
 80004ce:	607a      	str	r2, [r7, #4]
 80004d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80004d2:	2300      	movs	r3, #0
 80004d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80004d6:	f7ff ff5d 	bl	8000394 <__NVIC_GetPriorityGrouping>
 80004da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004dc:	687a      	ldr	r2, [r7, #4]
 80004de:	68b9      	ldr	r1, [r7, #8]
 80004e0:	6978      	ldr	r0, [r7, #20]
 80004e2:	f7ff ff8f 	bl	8000404 <NVIC_EncodePriority>
 80004e6:	4602      	mov	r2, r0
 80004e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004ec:	4611      	mov	r1, r2
 80004ee:	4618      	mov	r0, r3
 80004f0:	f7ff ff5e 	bl	80003b0 <__NVIC_SetPriority>
}
 80004f4:	bf00      	nop
 80004f6:	3718      	adds	r7, #24
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}

080004fc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	f7ff ffaf 	bl	8000468 <SysTick_Config>
 800050a:	4603      	mov	r3, r0
}
 800050c:	4618      	mov	r0, r3
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}

08000514 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000514:	b480      	push	{r7}
 8000516:	b089      	sub	sp, #36	; 0x24
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800051e:	2300      	movs	r3, #0
 8000520:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000522:	2300      	movs	r3, #0
 8000524:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000526:	2300      	movs	r3, #0
 8000528:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800052a:	2300      	movs	r3, #0
 800052c:	61fb      	str	r3, [r7, #28]
 800052e:	e165      	b.n	80007fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8000530:	2201      	movs	r2, #1
 8000532:	69fb      	ldr	r3, [r7, #28]
 8000534:	fa02 f303 	lsl.w	r3, r2, r3
 8000538:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	4013      	ands	r3, r2
 8000542:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000544:	693a      	ldr	r2, [r7, #16]
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	429a      	cmp	r2, r3
 800054a:	f040 8154 	bne.w	80007f6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	2b02      	cmp	r3, #2
 8000554:	d003      	beq.n	800055e <HAL_GPIO_Init+0x4a>
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	685b      	ldr	r3, [r3, #4]
 800055a:	2b12      	cmp	r3, #18
 800055c:	d123      	bne.n	80005a6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800055e:	69fb      	ldr	r3, [r7, #28]
 8000560:	08da      	lsrs	r2, r3, #3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	3208      	adds	r2, #8
 8000566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800056a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800056c:	69fb      	ldr	r3, [r7, #28]
 800056e:	f003 0307 	and.w	r3, r3, #7
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	220f      	movs	r2, #15
 8000576:	fa02 f303 	lsl.w	r3, r2, r3
 800057a:	43db      	mvns	r3, r3
 800057c:	69ba      	ldr	r2, [r7, #24]
 800057e:	4013      	ands	r3, r2
 8000580:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	691a      	ldr	r2, [r3, #16]
 8000586:	69fb      	ldr	r3, [r7, #28]
 8000588:	f003 0307 	and.w	r3, r3, #7
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	fa02 f303 	lsl.w	r3, r2, r3
 8000592:	69ba      	ldr	r2, [r7, #24]
 8000594:	4313      	orrs	r3, r2
 8000596:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000598:	69fb      	ldr	r3, [r7, #28]
 800059a:	08da      	lsrs	r2, r3, #3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	3208      	adds	r2, #8
 80005a0:	69b9      	ldr	r1, [r7, #24]
 80005a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80005ac:	69fb      	ldr	r3, [r7, #28]
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	2203      	movs	r2, #3
 80005b2:	fa02 f303 	lsl.w	r3, r2, r3
 80005b6:	43db      	mvns	r3, r3
 80005b8:	69ba      	ldr	r2, [r7, #24]
 80005ba:	4013      	ands	r3, r2
 80005bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	685b      	ldr	r3, [r3, #4]
 80005c2:	f003 0203 	and.w	r2, r3, #3
 80005c6:	69fb      	ldr	r3, [r7, #28]
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	fa02 f303 	lsl.w	r3, r2, r3
 80005ce:	69ba      	ldr	r2, [r7, #24]
 80005d0:	4313      	orrs	r3, r2
 80005d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	69ba      	ldr	r2, [r7, #24]
 80005d8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d00b      	beq.n	80005fa <HAL_GPIO_Init+0xe6>
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d007      	beq.n	80005fa <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	685b      	ldr	r3, [r3, #4]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005ee:	2b11      	cmp	r3, #17
 80005f0:	d003      	beq.n	80005fa <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	2b12      	cmp	r3, #18
 80005f8:	d130      	bne.n	800065c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	689b      	ldr	r3, [r3, #8]
 80005fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000600:	69fb      	ldr	r3, [r7, #28]
 8000602:	005b      	lsls	r3, r3, #1
 8000604:	2203      	movs	r2, #3
 8000606:	fa02 f303 	lsl.w	r3, r2, r3
 800060a:	43db      	mvns	r3, r3
 800060c:	69ba      	ldr	r2, [r7, #24]
 800060e:	4013      	ands	r3, r2
 8000610:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	68da      	ldr	r2, [r3, #12]
 8000616:	69fb      	ldr	r3, [r7, #28]
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	fa02 f303 	lsl.w	r3, r2, r3
 800061e:	69ba      	ldr	r2, [r7, #24]
 8000620:	4313      	orrs	r3, r2
 8000622:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	69ba      	ldr	r2, [r7, #24]
 8000628:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000630:	2201      	movs	r2, #1
 8000632:	69fb      	ldr	r3, [r7, #28]
 8000634:	fa02 f303 	lsl.w	r3, r2, r3
 8000638:	43db      	mvns	r3, r3
 800063a:	69ba      	ldr	r2, [r7, #24]
 800063c:	4013      	ands	r3, r2
 800063e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	685b      	ldr	r3, [r3, #4]
 8000644:	091b      	lsrs	r3, r3, #4
 8000646:	f003 0201 	and.w	r2, r3, #1
 800064a:	69fb      	ldr	r3, [r7, #28]
 800064c:	fa02 f303 	lsl.w	r3, r2, r3
 8000650:	69ba      	ldr	r2, [r7, #24]
 8000652:	4313      	orrs	r3, r2
 8000654:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	69ba      	ldr	r2, [r7, #24]
 800065a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000662:	69fb      	ldr	r3, [r7, #28]
 8000664:	005b      	lsls	r3, r3, #1
 8000666:	2203      	movs	r2, #3
 8000668:	fa02 f303 	lsl.w	r3, r2, r3
 800066c:	43db      	mvns	r3, r3
 800066e:	69ba      	ldr	r2, [r7, #24]
 8000670:	4013      	ands	r3, r2
 8000672:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	689a      	ldr	r2, [r3, #8]
 8000678:	69fb      	ldr	r3, [r7, #28]
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	fa02 f303 	lsl.w	r3, r2, r3
 8000680:	69ba      	ldr	r2, [r7, #24]
 8000682:	4313      	orrs	r3, r2
 8000684:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	69ba      	ldr	r2, [r7, #24]
 800068a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	685b      	ldr	r3, [r3, #4]
 8000690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000694:	2b00      	cmp	r3, #0
 8000696:	f000 80ae 	beq.w	80007f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	4a5c      	ldr	r2, [pc, #368]	; (8000810 <HAL_GPIO_Init+0x2fc>)
 80006a0:	4b5b      	ldr	r3, [pc, #364]	; (8000810 <HAL_GPIO_Init+0x2fc>)
 80006a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6453      	str	r3, [r2, #68]	; 0x44
 80006aa:	4b59      	ldr	r3, [pc, #356]	; (8000810 <HAL_GPIO_Init+0x2fc>)
 80006ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80006b6:	4a57      	ldr	r2, [pc, #348]	; (8000814 <HAL_GPIO_Init+0x300>)
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	089b      	lsrs	r3, r3, #2
 80006bc:	3302      	adds	r3, #2
 80006be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80006c4:	69fb      	ldr	r3, [r7, #28]
 80006c6:	f003 0303 	and.w	r3, r3, #3
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	220f      	movs	r2, #15
 80006ce:	fa02 f303 	lsl.w	r3, r2, r3
 80006d2:	43db      	mvns	r3, r3
 80006d4:	69ba      	ldr	r2, [r7, #24]
 80006d6:	4013      	ands	r3, r2
 80006d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4a4e      	ldr	r2, [pc, #312]	; (8000818 <HAL_GPIO_Init+0x304>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d025      	beq.n	800072e <HAL_GPIO_Init+0x21a>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4a4d      	ldr	r2, [pc, #308]	; (800081c <HAL_GPIO_Init+0x308>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d01f      	beq.n	800072a <HAL_GPIO_Init+0x216>
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4a4c      	ldr	r2, [pc, #304]	; (8000820 <HAL_GPIO_Init+0x30c>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d019      	beq.n	8000726 <HAL_GPIO_Init+0x212>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a4b      	ldr	r2, [pc, #300]	; (8000824 <HAL_GPIO_Init+0x310>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d013      	beq.n	8000722 <HAL_GPIO_Init+0x20e>
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4a4a      	ldr	r2, [pc, #296]	; (8000828 <HAL_GPIO_Init+0x314>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d00d      	beq.n	800071e <HAL_GPIO_Init+0x20a>
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4a49      	ldr	r2, [pc, #292]	; (800082c <HAL_GPIO_Init+0x318>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d007      	beq.n	800071a <HAL_GPIO_Init+0x206>
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4a48      	ldr	r2, [pc, #288]	; (8000830 <HAL_GPIO_Init+0x31c>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d101      	bne.n	8000716 <HAL_GPIO_Init+0x202>
 8000712:	2306      	movs	r3, #6
 8000714:	e00c      	b.n	8000730 <HAL_GPIO_Init+0x21c>
 8000716:	2307      	movs	r3, #7
 8000718:	e00a      	b.n	8000730 <HAL_GPIO_Init+0x21c>
 800071a:	2305      	movs	r3, #5
 800071c:	e008      	b.n	8000730 <HAL_GPIO_Init+0x21c>
 800071e:	2304      	movs	r3, #4
 8000720:	e006      	b.n	8000730 <HAL_GPIO_Init+0x21c>
 8000722:	2303      	movs	r3, #3
 8000724:	e004      	b.n	8000730 <HAL_GPIO_Init+0x21c>
 8000726:	2302      	movs	r3, #2
 8000728:	e002      	b.n	8000730 <HAL_GPIO_Init+0x21c>
 800072a:	2301      	movs	r3, #1
 800072c:	e000      	b.n	8000730 <HAL_GPIO_Init+0x21c>
 800072e:	2300      	movs	r3, #0
 8000730:	69fa      	ldr	r2, [r7, #28]
 8000732:	f002 0203 	and.w	r2, r2, #3
 8000736:	0092      	lsls	r2, r2, #2
 8000738:	4093      	lsls	r3, r2
 800073a:	69ba      	ldr	r2, [r7, #24]
 800073c:	4313      	orrs	r3, r2
 800073e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000740:	4934      	ldr	r1, [pc, #208]	; (8000814 <HAL_GPIO_Init+0x300>)
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	089b      	lsrs	r3, r3, #2
 8000746:	3302      	adds	r3, #2
 8000748:	69ba      	ldr	r2, [r7, #24]
 800074a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800074e:	4b39      	ldr	r3, [pc, #228]	; (8000834 <HAL_GPIO_Init+0x320>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000754:	693b      	ldr	r3, [r7, #16]
 8000756:	43db      	mvns	r3, r3
 8000758:	69ba      	ldr	r2, [r7, #24]
 800075a:	4013      	ands	r3, r2
 800075c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000766:	2b00      	cmp	r3, #0
 8000768:	d003      	beq.n	8000772 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800076a:	69ba      	ldr	r2, [r7, #24]
 800076c:	693b      	ldr	r3, [r7, #16]
 800076e:	4313      	orrs	r3, r2
 8000770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000772:	4a30      	ldr	r2, [pc, #192]	; (8000834 <HAL_GPIO_Init+0x320>)
 8000774:	69bb      	ldr	r3, [r7, #24]
 8000776:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000778:	4b2e      	ldr	r3, [pc, #184]	; (8000834 <HAL_GPIO_Init+0x320>)
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800077e:	693b      	ldr	r3, [r7, #16]
 8000780:	43db      	mvns	r3, r3
 8000782:	69ba      	ldr	r2, [r7, #24]
 8000784:	4013      	ands	r3, r2
 8000786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000790:	2b00      	cmp	r3, #0
 8000792:	d003      	beq.n	800079c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000794:	69ba      	ldr	r2, [r7, #24]
 8000796:	693b      	ldr	r3, [r7, #16]
 8000798:	4313      	orrs	r3, r2
 800079a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800079c:	4a25      	ldr	r2, [pc, #148]	; (8000834 <HAL_GPIO_Init+0x320>)
 800079e:	69bb      	ldr	r3, [r7, #24]
 80007a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007a2:	4b24      	ldr	r3, [pc, #144]	; (8000834 <HAL_GPIO_Init+0x320>)
 80007a4:	689b      	ldr	r3, [r3, #8]
 80007a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80007a8:	693b      	ldr	r3, [r7, #16]
 80007aa:	43db      	mvns	r3, r3
 80007ac:	69ba      	ldr	r2, [r7, #24]
 80007ae:	4013      	ands	r3, r2
 80007b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d003      	beq.n	80007c6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80007be:	69ba      	ldr	r2, [r7, #24]
 80007c0:	693b      	ldr	r3, [r7, #16]
 80007c2:	4313      	orrs	r3, r2
 80007c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80007c6:	4a1b      	ldr	r2, [pc, #108]	; (8000834 <HAL_GPIO_Init+0x320>)
 80007c8:	69bb      	ldr	r3, [r7, #24]
 80007ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80007cc:	4b19      	ldr	r3, [pc, #100]	; (8000834 <HAL_GPIO_Init+0x320>)
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80007d2:	693b      	ldr	r3, [r7, #16]
 80007d4:	43db      	mvns	r3, r3
 80007d6:	69ba      	ldr	r2, [r7, #24]
 80007d8:	4013      	ands	r3, r2
 80007da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d003      	beq.n	80007f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80007e8:	69ba      	ldr	r2, [r7, #24]
 80007ea:	693b      	ldr	r3, [r7, #16]
 80007ec:	4313      	orrs	r3, r2
 80007ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80007f0:	4a10      	ldr	r2, [pc, #64]	; (8000834 <HAL_GPIO_Init+0x320>)
 80007f2:	69bb      	ldr	r3, [r7, #24]
 80007f4:	60d3      	str	r3, [r2, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	3301      	adds	r3, #1
 80007fa:	61fb      	str	r3, [r7, #28]
 80007fc:	69fb      	ldr	r3, [r7, #28]
 80007fe:	2b0f      	cmp	r3, #15
 8000800:	f67f ae96 	bls.w	8000530 <HAL_GPIO_Init+0x1c>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8000804:	bf00      	nop
 8000806:	3724      	adds	r7, #36	; 0x24
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	40023800 	.word	0x40023800
 8000814:	40013800 	.word	0x40013800
 8000818:	40020000 	.word	0x40020000
 800081c:	40020400 	.word	0x40020400
 8000820:	40020800 	.word	0x40020800
 8000824:	40020c00 	.word	0x40020c00
 8000828:	40021000 	.word	0x40021000
 800082c:	40021400 	.word	0x40021400
 8000830:	40021800 	.word	0x40021800
 8000834:	40013c00 	.word	0x40013c00

08000838 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	460b      	mov	r3, r1
 8000842:	807b      	strh	r3, [r7, #2]
 8000844:	4613      	mov	r3, r2
 8000846:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000848:	787b      	ldrb	r3, [r7, #1]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d003      	beq.n	8000856 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800084e:	887a      	ldrh	r2, [r7, #2]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000854:	e003      	b.n	800085e <HAL_GPIO_WritePin+0x26>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000856:	887b      	ldrh	r3, [r7, #2]
 8000858:	041a      	lsls	r2, r3, #16
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	619a      	str	r2, [r3, #24]
  }
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop

0800086c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	4a2e      	ldr	r2, [pc, #184]	; (8000934 <HAL_PWREx_EnableOverDrive+0xc8>)
 800087c:	4b2d      	ldr	r3, [pc, #180]	; (8000934 <HAL_PWREx_EnableOverDrive+0xc8>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000884:	6413      	str	r3, [r2, #64]	; 0x40
 8000886:	4b2b      	ldr	r3, [pc, #172]	; (8000934 <HAL_PWREx_EnableOverDrive+0xc8>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000896:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	fa93 f3a3 	rbit	r3, r3
 800089e:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80008a0:	68bb      	ldr	r3, [r7, #8]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80008a2:	fab3 f383 	clz	r3, r3
 80008a6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80008aa:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	461a      	mov	r2, r3
 80008b2:	2301      	movs	r3, #1
 80008b4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008b6:	f7ff fd27 	bl	8000308 <HAL_GetTick>
 80008ba:	6178      	str	r0, [r7, #20]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80008bc:	e009      	b.n	80008d2 <HAL_PWREx_EnableOverDrive+0x66>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80008be:	f7ff fd23 	bl	8000308 <HAL_GetTick>
 80008c2:	4602      	mov	r2, r0
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	1ad3      	subs	r3, r2, r3
 80008c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008cc:	d901      	bls.n	80008d2 <HAL_PWREx_EnableOverDrive+0x66>
    {
      return HAL_TIMEOUT;
 80008ce:	2303      	movs	r3, #3
 80008d0:	e02c      	b.n	800092c <HAL_PWREx_EnableOverDrive+0xc0>
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80008d2:	4b19      	ldr	r3, [pc, #100]	; (8000938 <HAL_PWREx_EnableOverDrive+0xcc>)
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d0ef      	beq.n	80008be <HAL_PWREx_EnableOverDrive+0x52>
 80008de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008e2:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008e4:	693b      	ldr	r3, [r7, #16]
 80008e6:	fa93 f3a3 	rbit	r3, r3
 80008ea:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80008ec:	687b      	ldr	r3, [r7, #4]
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80008ee:	fab3 f383 	clz	r3, r3
 80008f2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80008f6:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	461a      	mov	r2, r3
 80008fe:	2301      	movs	r3, #1
 8000900:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000902:	f7ff fd01 	bl	8000308 <HAL_GetTick>
 8000906:	6178      	str	r0, [r7, #20]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000908:	e009      	b.n	800091e <HAL_PWREx_EnableOverDrive+0xb2>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800090a:	f7ff fcfd 	bl	8000308 <HAL_GetTick>
 800090e:	4602      	mov	r2, r0
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	1ad3      	subs	r3, r2, r3
 8000914:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000918:	d901      	bls.n	800091e <HAL_PWREx_EnableOverDrive+0xb2>
    {
      return HAL_TIMEOUT;
 800091a:	2303      	movs	r3, #3
 800091c:	e006      	b.n	800092c <HAL_PWREx_EnableOverDrive+0xc0>
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <HAL_PWREx_EnableOverDrive+0xcc>)
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000926:	2b00      	cmp	r3, #0
 8000928:	d0ef      	beq.n	800090a <HAL_PWREx_EnableOverDrive+0x9e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800092a:	2300      	movs	r3, #0
}
 800092c:	4618      	mov	r0, r3
 800092e:	3718      	adds	r7, #24
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40023800 	.word	0x40023800
 8000938:	40007000 	.word	0x40007000

0800093c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;   
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800094a:	4b81      	ldr	r3, [pc, #516]	; (8000b50 <HAL_RCC_ClockConfig+0x214>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f003 020f 	and.w	r2, r3, #15
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	429a      	cmp	r2, r3
 8000956:	d20c      	bcs.n	8000972 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000958:	4b7d      	ldr	r3, [pc, #500]	; (8000b50 <HAL_RCC_ClockConfig+0x214>)
 800095a:	683a      	ldr	r2, [r7, #0]
 800095c:	b2d2      	uxtb	r2, r2
 800095e:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000960:	4b7b      	ldr	r3, [pc, #492]	; (8000b50 <HAL_RCC_ClockConfig+0x214>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f003 020f 	and.w	r2, r3, #15
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	429a      	cmp	r2, r3
 800096c:	d001      	beq.n	8000972 <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 800096e:	2301      	movs	r3, #1
 8000970:	e0ea      	b.n	8000b48 <HAL_RCC_ClockConfig+0x20c>
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	2b00      	cmp	r3, #0
 800097c:	d008      	beq.n	8000990 <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800097e:	4975      	ldr	r1, [pc, #468]	; (8000b54 <HAL_RCC_ClockConfig+0x218>)
 8000980:	4b74      	ldr	r3, [pc, #464]	; (8000b54 <HAL_RCC_ClockConfig+0x218>)
 8000982:	689b      	ldr	r3, [r3, #8]
 8000984:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	4313      	orrs	r3, r2
 800098e:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	2b00      	cmp	r3, #0
 800099a:	f000 8086 	beq.w	8000aaa <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d107      	bne.n	80009b6 <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009a6:	4b6b      	ldr	r3, [pc, #428]	; (8000b54 <HAL_RCC_ClockConfig+0x218>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d119      	bne.n	80009e6 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
 80009b4:	e0c8      	b.n	8000b48 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	2b02      	cmp	r3, #2
 80009bc:	d003      	beq.n	80009c6 <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	685b      	ldr	r3, [r3, #4]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80009c2:	2b03      	cmp	r3, #3
 80009c4:	d107      	bne.n	80009d6 <HAL_RCC_ClockConfig+0x9a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80009c6:	4b63      	ldr	r3, [pc, #396]	; (8000b54 <HAL_RCC_ClockConfig+0x218>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d109      	bne.n	80009e6 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	e0b8      	b.n	8000b48 <HAL_RCC_ClockConfig+0x20c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009d6:	4b5f      	ldr	r3, [pc, #380]	; (8000b54 <HAL_RCC_ClockConfig+0x218>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f003 0302 	and.w	r3, r3, #2
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d101      	bne.n	80009e6 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	e0b0      	b.n	8000b48 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80009e6:	495b      	ldr	r1, [pc, #364]	; (8000b54 <HAL_RCC_ClockConfig+0x218>)
 80009e8:	4b5a      	ldr	r3, [pc, #360]	; (8000b54 <HAL_RCC_ClockConfig+0x218>)
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	f023 0203 	bic.w	r2, r3, #3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80009f8:	f7ff fc86 	bl	8000308 <HAL_GetTick>
 80009fc:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d112      	bne.n	8000a2c <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a06:	e00a      	b.n	8000a1e <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a08:	f7ff fc7e 	bl	8000308 <HAL_GetTick>
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d901      	bls.n	8000a1e <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	e094      	b.n	8000b48 <HAL_RCC_ClockConfig+0x20c>
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a1e:	4b4d      	ldr	r3, [pc, #308]	; (8000b54 <HAL_RCC_ClockConfig+0x218>)
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	f003 030c 	and.w	r3, r3, #12
 8000a26:	2b04      	cmp	r3, #4
 8000a28:	d1ee      	bne.n	8000a08 <HAL_RCC_ClockConfig+0xcc>
 8000a2a:	e03e      	b.n	8000aaa <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d112      	bne.n	8000a5a <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a34:	e00a      	b.n	8000a4c <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a36:	f7ff fc67 	bl	8000308 <HAL_GetTick>
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	1ad3      	subs	r3, r2, r3
 8000a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d901      	bls.n	8000a4c <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	e07d      	b.n	8000b48 <HAL_RCC_ClockConfig+0x20c>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a4c:	4b41      	ldr	r3, [pc, #260]	; (8000b54 <HAL_RCC_ClockConfig+0x218>)
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	f003 030c 	and.w	r3, r3, #12
 8000a54:	2b08      	cmp	r3, #8
 8000a56:	d1ee      	bne.n	8000a36 <HAL_RCC_ClockConfig+0xfa>
 8000a58:	e027      	b.n	8000aaa <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	2b03      	cmp	r3, #3
 8000a60:	d11d      	bne.n	8000a9e <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000a62:	e00a      	b.n	8000a7a <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a64:	f7ff fc50 	bl	8000308 <HAL_GetTick>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d901      	bls.n	8000a7a <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8000a76:	2303      	movs	r3, #3
 8000a78:	e066      	b.n	8000b48 <HAL_RCC_ClockConfig+0x20c>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000a7a:	4b36      	ldr	r3, [pc, #216]	; (8000b54 <HAL_RCC_ClockConfig+0x218>)
 8000a7c:	689b      	ldr	r3, [r3, #8]
 8000a7e:	f003 030c 	and.w	r3, r3, #12
 8000a82:	2b0c      	cmp	r3, #12
 8000a84:	d1ee      	bne.n	8000a64 <HAL_RCC_ClockConfig+0x128>
 8000a86:	e010      	b.n	8000aaa <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a88:	f7ff fc3e 	bl	8000308 <HAL_GetTick>
 8000a8c:	4602      	mov	r2, r0
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d901      	bls.n	8000a9e <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	e054      	b.n	8000b48 <HAL_RCC_ClockConfig+0x20c>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a9e:	4b2d      	ldr	r3, [pc, #180]	; (8000b54 <HAL_RCC_ClockConfig+0x218>)
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	f003 030c 	and.w	r3, r3, #12
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d1ee      	bne.n	8000a88 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000aaa:	4b29      	ldr	r3, [pc, #164]	; (8000b50 <HAL_RCC_ClockConfig+0x214>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f003 020f 	and.w	r2, r3, #15
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d90c      	bls.n	8000ad2 <HAL_RCC_ClockConfig+0x196>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ab8:	4b25      	ldr	r3, [pc, #148]	; (8000b50 <HAL_RCC_ClockConfig+0x214>)
 8000aba:	683a      	ldr	r2, [r7, #0]
 8000abc:	b2d2      	uxtb	r2, r2
 8000abe:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ac0:	4b23      	ldr	r3, [pc, #140]	; (8000b50 <HAL_RCC_ClockConfig+0x214>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f003 020f 	and.w	r2, r3, #15
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	d001      	beq.n	8000ad2 <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e03a      	b.n	8000b48 <HAL_RCC_ClockConfig+0x20c>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f003 0304 	and.w	r3, r3, #4
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d008      	beq.n	8000af0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ade:	491d      	ldr	r1, [pc, #116]	; (8000b54 <HAL_RCC_ClockConfig+0x218>)
 8000ae0:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <HAL_RCC_ClockConfig+0x218>)
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f003 0308 	and.w	r3, r3, #8
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d009      	beq.n	8000b10 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000afc:	4915      	ldr	r1, [pc, #84]	; (8000b54 <HAL_RCC_ClockConfig+0x218>)
 8000afe:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <HAL_RCC_ClockConfig+0x218>)
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	691b      	ldr	r3, [r3, #16]
 8000b0a:	00db      	lsls	r3, r3, #3
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000b10:	f000 faa6 	bl	8001060 <HAL_RCC_GetSysClockFreq>
 8000b14:	4601      	mov	r1, r0
 8000b16:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <HAL_RCC_ClockConfig+0x218>)
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000b1e:	23f0      	movs	r3, #240	; 0xf0
 8000b20:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	fa93 f3a3 	rbit	r3, r3
 8000b28:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	fab3 f383 	clz	r3, r3
 8000b30:	fa22 f303 	lsr.w	r3, r2, r3
 8000b34:	4a08      	ldr	r2, [pc, #32]	; (8000b58 <HAL_RCC_ClockConfig+0x21c>)
 8000b36:	5cd3      	ldrb	r3, [r2, r3]
 8000b38:	fa21 f303 	lsr.w	r3, r1, r3
 8000b3c:	4a07      	ldr	r2, [pc, #28]	; (8000b5c <HAL_RCC_ClockConfig+0x220>)
 8000b3e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000b40:	200f      	movs	r0, #15
 8000b42:	f7ff fbc5 	bl	80002d0 <HAL_InitTick>
  
  return HAL_OK;
 8000b46:	2300      	movs	r3, #0
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40023c00 	.word	0x40023c00
 8000b54:	40023800 	.word	0x40023800
 8000b58:	080035e8 	.word	0x080035e8
 8000b5c:	20000004 	.word	0x20000004

08000b60 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature 
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b090      	sub	sp, #64	; 0x40
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;  
 8000b68:	2300      	movs	r3, #0
 8000b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	f000 8081 	beq.w	8000c7c <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000b7a:	4b9e      	ldr	r3, [pc, #632]	; (8000df4 <HAL_RCC_OscConfig+0x294>)
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	f003 030c 	and.w	r3, r3, #12
 8000b82:	2b04      	cmp	r3, #4
 8000b84:	d017      	beq.n	8000bb6 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000b86:	4b9b      	ldr	r3, [pc, #620]	; (8000df4 <HAL_RCC_OscConfig+0x294>)
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	f003 030c 	and.w	r3, r3, #12
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000b8e:	2b08      	cmp	r3, #8
 8000b90:	d105      	bne.n	8000b9e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000b92:	4b98      	ldr	r3, [pc, #608]	; (8000df4 <HAL_RCC_OscConfig+0x294>)
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d10b      	bne.n	8000bb6 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b9e:	4b95      	ldr	r3, [pc, #596]	; (8000df4 <HAL_RCC_OscConfig+0x294>)
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	f003 030c 	and.w	r3, r3, #12
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000ba6:	2b0c      	cmp	r3, #12
 8000ba8:	d111      	bne.n	8000bce <HAL_RCC_OscConfig+0x6e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000baa:	4b92      	ldr	r3, [pc, #584]	; (8000df4 <HAL_RCC_OscConfig+0x294>)
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d00b      	beq.n	8000bce <HAL_RCC_OscConfig+0x6e>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bb6:	4b8f      	ldr	r3, [pc, #572]	; (8000df4 <HAL_RCC_OscConfig+0x294>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d05b      	beq.n	8000c7a <HAL_RCC_OscConfig+0x11a>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d157      	bne.n	8000c7a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e23e      	b.n	800104c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bd6:	d106      	bne.n	8000be6 <HAL_RCC_OscConfig+0x86>
 8000bd8:	4a86      	ldr	r2, [pc, #536]	; (8000df4 <HAL_RCC_OscConfig+0x294>)
 8000bda:	4b86      	ldr	r3, [pc, #536]	; (8000df4 <HAL_RCC_OscConfig+0x294>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000be2:	6013      	str	r3, [r2, #0]
 8000be4:	e01d      	b.n	8000c22 <HAL_RCC_OscConfig+0xc2>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bee:	d10c      	bne.n	8000c0a <HAL_RCC_OscConfig+0xaa>
 8000bf0:	4a80      	ldr	r2, [pc, #512]	; (8000df4 <HAL_RCC_OscConfig+0x294>)
 8000bf2:	4b80      	ldr	r3, [pc, #512]	; (8000df4 <HAL_RCC_OscConfig+0x294>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bfa:	6013      	str	r3, [r2, #0]
 8000bfc:	4a7d      	ldr	r2, [pc, #500]	; (8000df4 <HAL_RCC_OscConfig+0x294>)
 8000bfe:	4b7d      	ldr	r3, [pc, #500]	; (8000df4 <HAL_RCC_OscConfig+0x294>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	e00b      	b.n	8000c22 <HAL_RCC_OscConfig+0xc2>
 8000c0a:	4a7a      	ldr	r2, [pc, #488]	; (8000df4 <HAL_RCC_OscConfig+0x294>)
 8000c0c:	4b79      	ldr	r3, [pc, #484]	; (8000df4 <HAL_RCC_OscConfig+0x294>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c14:	6013      	str	r3, [r2, #0]
 8000c16:	4a77      	ldr	r2, [pc, #476]	; (8000df4 <HAL_RCC_OscConfig+0x294>)
 8000c18:	4b76      	ldr	r3, [pc, #472]	; (8000df4 <HAL_RCC_OscConfig+0x294>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c20:	6013      	str	r3, [r2, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d013      	beq.n	8000c52 <HAL_RCC_OscConfig+0xf2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c2a:	f7ff fb6d 	bl	8000308 <HAL_GetTick>
 8000c2e:	63f8      	str	r0, [r7, #60]	; 0x3c
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c30:	e008      	b.n	8000c44 <HAL_RCC_OscConfig+0xe4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c32:	f7ff fb69 	bl	8000308 <HAL_GetTick>
 8000c36:	4602      	mov	r2, r0
 8000c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c3a:	1ad3      	subs	r3, r2, r3
 8000c3c:	2b64      	cmp	r3, #100	; 0x64
 8000c3e:	d901      	bls.n	8000c44 <HAL_RCC_OscConfig+0xe4>
          {
            return HAL_TIMEOUT;
 8000c40:	2303      	movs	r3, #3
 8000c42:	e203      	b.n	800104c <HAL_RCC_OscConfig+0x4ec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c44:	4b6b      	ldr	r3, [pc, #428]	; (8000df4 <HAL_RCC_OscConfig+0x294>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d0f0      	beq.n	8000c32 <HAL_RCC_OscConfig+0xd2>
 8000c50:	e014      	b.n	8000c7c <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c52:	f7ff fb59 	bl	8000308 <HAL_GetTick>
 8000c56:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c58:	e008      	b.n	8000c6c <HAL_RCC_OscConfig+0x10c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c5a:	f7ff fb55 	bl	8000308 <HAL_GetTick>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c62:	1ad3      	subs	r3, r2, r3
 8000c64:	2b64      	cmp	r3, #100	; 0x64
 8000c66:	d901      	bls.n	8000c6c <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	e1ef      	b.n	800104c <HAL_RCC_OscConfig+0x4ec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c6c:	4b61      	ldr	r3, [pc, #388]	; (8000df4 <HAL_RCC_OscConfig+0x294>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d1f0      	bne.n	8000c5a <HAL_RCC_OscConfig+0xfa>
 8000c78:	e000      	b.n	8000c7c <HAL_RCC_OscConfig+0x11c>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c7a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f003 0302 	and.w	r3, r3, #2
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	f000 8084 	beq.w	8000d92 <HAL_RCC_OscConfig+0x232>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000c8a:	4b5a      	ldr	r3, [pc, #360]	; (8000df4 <HAL_RCC_OscConfig+0x294>)
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	f003 030c 	and.w	r3, r3, #12
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d017      	beq.n	8000cc6 <HAL_RCC_OscConfig+0x166>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000c96:	4b57      	ldr	r3, [pc, #348]	; (8000df4 <HAL_RCC_OscConfig+0x294>)
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	f003 030c 	and.w	r3, r3, #12
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000c9e:	2b08      	cmp	r3, #8
 8000ca0:	d105      	bne.n	8000cae <HAL_RCC_OscConfig+0x14e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000ca2:	4b54      	ldr	r3, [pc, #336]	; (8000df4 <HAL_RCC_OscConfig+0x294>)
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d00b      	beq.n	8000cc6 <HAL_RCC_OscConfig+0x166>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cae:	4b51      	ldr	r3, [pc, #324]	; (8000df4 <HAL_RCC_OscConfig+0x294>)
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	f003 030c 	and.w	r3, r3, #12
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000cb6:	2b0c      	cmp	r3, #12
 8000cb8:	d126      	bne.n	8000d08 <HAL_RCC_OscConfig+0x1a8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cba:	4b4e      	ldr	r3, [pc, #312]	; (8000df4 <HAL_RCC_OscConfig+0x294>)
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d120      	bne.n	8000d08 <HAL_RCC_OscConfig+0x1a8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cc6:	4b4b      	ldr	r3, [pc, #300]	; (8000df4 <HAL_RCC_OscConfig+0x294>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d005      	beq.n	8000cde <HAL_RCC_OscConfig+0x17e>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	68db      	ldr	r3, [r3, #12]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d001      	beq.n	8000cde <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e1b6      	b.n	800104c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cde:	4845      	ldr	r0, [pc, #276]	; (8000df4 <HAL_RCC_OscConfig+0x294>)
 8000ce0:	4b44      	ldr	r3, [pc, #272]	; (8000df4 <HAL_RCC_OscConfig+0x294>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6919      	ldr	r1, [r3, #16]
 8000cec:	23f8      	movs	r3, #248	; 0xf8
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf2:	fa93 f3a3 	rbit	r3, r3
 8000cf6:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000cf8:	6a3b      	ldr	r3, [r7, #32]
 8000cfa:	fab3 f383 	clz	r3, r3
 8000cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000d02:	4313      	orrs	r3, r2
 8000d04:	6003      	str	r3, [r0, #0]
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d06:	e044      	b.n	8000d92 <HAL_RCC_OscConfig+0x232>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d02a      	beq.n	8000d66 <HAL_RCC_OscConfig+0x206>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d10:	4b39      	ldr	r3, [pc, #228]	; (8000df8 <HAL_RCC_OscConfig+0x298>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d16:	f7ff faf7 	bl	8000308 <HAL_GetTick>
 8000d1a:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d1c:	e008      	b.n	8000d30 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d1e:	f7ff faf3 	bl	8000308 <HAL_GetTick>
 8000d22:	4602      	mov	r2, r0
 8000d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d901      	bls.n	8000d30 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	e18d      	b.n	800104c <HAL_RCC_OscConfig+0x4ec>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d30:	4b30      	ldr	r3, [pc, #192]	; (8000df4 <HAL_RCC_OscConfig+0x294>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f003 0302 	and.w	r3, r3, #2
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d0f0      	beq.n	8000d1e <HAL_RCC_OscConfig+0x1be>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d3c:	482d      	ldr	r0, [pc, #180]	; (8000df4 <HAL_RCC_OscConfig+0x294>)
 8000d3e:	4b2d      	ldr	r3, [pc, #180]	; (8000df4 <HAL_RCC_OscConfig+0x294>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6919      	ldr	r1, [r3, #16]
 8000d4a:	23f8      	movs	r3, #248	; 0xf8
 8000d4c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d50:	fa93 f3a3 	rbit	r3, r3
 8000d54:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	fab3 f383 	clz	r3, r3
 8000d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d60:	4313      	orrs	r3, r2
 8000d62:	6003      	str	r3, [r0, #0]
 8000d64:	e015      	b.n	8000d92 <HAL_RCC_OscConfig+0x232>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d66:	4b24      	ldr	r3, [pc, #144]	; (8000df8 <HAL_RCC_OscConfig+0x298>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d6c:	f7ff facc 	bl	8000308 <HAL_GetTick>
 8000d70:	63f8      	str	r0, [r7, #60]	; 0x3c
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d72:	e008      	b.n	8000d86 <HAL_RCC_OscConfig+0x226>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d74:	f7ff fac8 	bl	8000308 <HAL_GetTick>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d901      	bls.n	8000d86 <HAL_RCC_OscConfig+0x226>
          {
            return HAL_TIMEOUT;
 8000d82:	2303      	movs	r3, #3
 8000d84:	e162      	b.n	800104c <HAL_RCC_OscConfig+0x4ec>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d86:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <HAL_RCC_OscConfig+0x294>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1f0      	bne.n	8000d74 <HAL_RCC_OscConfig+0x214>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0308 	and.w	r3, r3, #8
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d036      	beq.n	8000e0c <HAL_RCC_OscConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	695b      	ldr	r3, [r3, #20]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d016      	beq.n	8000dd4 <HAL_RCC_OscConfig+0x274>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <HAL_RCC_OscConfig+0x29c>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dac:	f7ff faac 	bl	8000308 <HAL_GetTick>
 8000db0:	63f8      	str	r0, [r7, #60]	; 0x3c
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000db2:	e008      	b.n	8000dc6 <HAL_RCC_OscConfig+0x266>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000db4:	f7ff faa8 	bl	8000308 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d901      	bls.n	8000dc6 <HAL_RCC_OscConfig+0x266>
        {
          return HAL_TIMEOUT;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e142      	b.n	800104c <HAL_RCC_OscConfig+0x4ec>
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <HAL_RCC_OscConfig+0x294>)
 8000dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d0f0      	beq.n	8000db4 <HAL_RCC_OscConfig+0x254>
 8000dd2:	e01b      	b.n	8000e0c <HAL_RCC_OscConfig+0x2ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dd4:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <HAL_RCC_OscConfig+0x29c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dda:	f7ff fa95 	bl	8000308 <HAL_GetTick>
 8000dde:	63f8      	str	r0, [r7, #60]	; 0x3c
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000de0:	e00e      	b.n	8000e00 <HAL_RCC_OscConfig+0x2a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000de2:	f7ff fa91 	bl	8000308 <HAL_GetTick>
 8000de6:	4602      	mov	r2, r0
 8000de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d907      	bls.n	8000e00 <HAL_RCC_OscConfig+0x2a0>
        {
          return HAL_TIMEOUT;
 8000df0:	2303      	movs	r3, #3
 8000df2:	e12b      	b.n	800104c <HAL_RCC_OscConfig+0x4ec>
 8000df4:	40023800 	.word	0x40023800
 8000df8:	42470000 	.word	0x42470000
 8000dfc:	42470e80 	.word	0x42470e80
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e00:	4b94      	ldr	r3, [pc, #592]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000e02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e04:	f003 0302 	and.w	r3, r3, #2
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d1ea      	bne.n	8000de2 <HAL_RCC_OscConfig+0x282>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f003 0304 	and.w	r3, r3, #4
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d07d      	beq.n	8000f14 <HAL_RCC_OscConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	4a8d      	ldr	r2, [pc, #564]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000e1e:	4b8d      	ldr	r3, [pc, #564]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e26:	6413      	str	r3, [r2, #64]	; 0x40
 8000e28:	4b8a      	ldr	r3, [pc, #552]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000e34:	4a88      	ldr	r2, [pc, #544]	; (8001058 <HAL_RCC_OscConfig+0x4f8>)
 8000e36:	4b88      	ldr	r3, [pc, #544]	; (8001058 <HAL_RCC_OscConfig+0x4f8>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e3e:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8000e40:	f7ff fa62 	bl	8000308 <HAL_GetTick>
 8000e44:	63f8      	str	r0, [r7, #60]	; 0x3c
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000e46:	e008      	b.n	8000e5a <HAL_RCC_OscConfig+0x2fa>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000e48:	f7ff fa5e 	bl	8000308 <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d901      	bls.n	8000e5a <HAL_RCC_OscConfig+0x2fa>
      {
        return HAL_TIMEOUT;
 8000e56:	2303      	movs	r3, #3
 8000e58:	e0f8      	b.n	800104c <HAL_RCC_OscConfig+0x4ec>
    PWR->CR |= PWR_CR_DBP;
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000e5a:	4b7f      	ldr	r3, [pc, #508]	; (8001058 <HAL_RCC_OscConfig+0x4f8>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d0f0      	beq.n	8000e48 <HAL_RCC_OscConfig+0x2e8>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d106      	bne.n	8000e7c <HAL_RCC_OscConfig+0x31c>
 8000e6e:	4a79      	ldr	r2, [pc, #484]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000e70:	4b78      	ldr	r3, [pc, #480]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6713      	str	r3, [r2, #112]	; 0x70
 8000e7a:	e01c      	b.n	8000eb6 <HAL_RCC_OscConfig+0x356>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	2b05      	cmp	r3, #5
 8000e82:	d10c      	bne.n	8000e9e <HAL_RCC_OscConfig+0x33e>
 8000e84:	4a73      	ldr	r2, [pc, #460]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000e86:	4b73      	ldr	r3, [pc, #460]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e8a:	f043 0304 	orr.w	r3, r3, #4
 8000e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8000e90:	4a70      	ldr	r2, [pc, #448]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000e92:	4b70      	ldr	r3, [pc, #448]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8000e9c:	e00b      	b.n	8000eb6 <HAL_RCC_OscConfig+0x356>
 8000e9e:	4a6d      	ldr	r2, [pc, #436]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000ea0:	4b6c      	ldr	r3, [pc, #432]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ea4:	f023 0301 	bic.w	r3, r3, #1
 8000ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8000eaa:	4a6a      	ldr	r2, [pc, #424]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000eac:	4b69      	ldr	r3, [pc, #420]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eb0:	f023 0304 	bic.w	r3, r3, #4
 8000eb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d015      	beq.n	8000eea <HAL_RCC_OscConfig+0x38a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ebe:	f7ff fa23 	bl	8000308 <HAL_GetTick>
 8000ec2:	63f8      	str	r0, [r7, #60]	; 0x3c
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ec4:	e00a      	b.n	8000edc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ec6:	f7ff fa1f 	bl	8000308 <HAL_GetTick>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d901      	bls.n	8000edc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	e0b7      	b.n	800104c <HAL_RCC_OscConfig+0x4ec>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000edc:	4b5d      	ldr	r3, [pc, #372]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ee0:	f003 0302 	and.w	r3, r3, #2
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d0ee      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x366>
 8000ee8:	e014      	b.n	8000f14 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000eea:	f7ff fa0d 	bl	8000308 <HAL_GetTick>
 8000eee:	63f8      	str	r0, [r7, #60]	; 0x3c
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ef0:	e00a      	b.n	8000f08 <HAL_RCC_OscConfig+0x3a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ef2:	f7ff fa09 	bl	8000308 <HAL_GetTick>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d901      	bls.n	8000f08 <HAL_RCC_OscConfig+0x3a8>
        {
          return HAL_TIMEOUT;
 8000f04:	2303      	movs	r3, #3
 8000f06:	e0a1      	b.n	800104c <HAL_RCC_OscConfig+0x4ec>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f08:	4b52      	ldr	r3, [pc, #328]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f0c:	f003 0302 	and.w	r3, r3, #2
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d1ee      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x392>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	f000 8096 	beq.w	800104a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f1e:	4b4d      	ldr	r3, [pc, #308]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	f003 030c 	and.w	r3, r3, #12
 8000f26:	2b08      	cmp	r3, #8
 8000f28:	f000 808d 	beq.w	8001046 <HAL_RCC_OscConfig+0x4e6>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d171      	bne.n	8001018 <HAL_RCC_OscConfig+0x4b8>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f34:	4b49      	ldr	r3, [pc, #292]	; (800105c <HAL_RCC_OscConfig+0x4fc>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f3a:	f7ff f9e5 	bl	8000308 <HAL_GetTick>
 8000f3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f40:	e008      	b.n	8000f54 <HAL_RCC_OscConfig+0x3f4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f42:	f7ff f9e1 	bl	8000308 <HAL_GetTick>
 8000f46:	4602      	mov	r2, r0
 8000f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d901      	bls.n	8000f54 <HAL_RCC_OscConfig+0x3f4>
          {
            return HAL_TIMEOUT;
 8000f50:	2303      	movs	r3, #3
 8000f52:	e07b      	b.n	800104c <HAL_RCC_OscConfig+0x4ec>
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f54:	4b3f      	ldr	r3, [pc, #252]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1f0      	bne.n	8000f42 <HAL_RCC_OscConfig+0x3e2>
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f60:	483c      	ldr	r0, [pc, #240]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	69da      	ldr	r2, [r3, #28]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6a1b      	ldr	r3, [r3, #32]
 8000f6a:	431a      	orrs	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000f70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000f74:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f78:	fa93 f3a3 	rbit	r3, r3
 8000f7c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	fab3 f383 	clz	r3, r3
 8000f84:	fa01 f303 	lsl.w	r3, r1, r3
 8000f88:	431a      	orrs	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f8e:	085b      	lsrs	r3, r3, #1
 8000f90:	1e59      	subs	r1, r3, #1
 8000f92:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f9a:	fa93 f3a3 	rbit	r3, r3
 8000f9e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	fab3 f383 	clz	r3, r3
 8000fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000faa:	431a      	orrs	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000fb0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb8:	fa93 f3a3 	rbit	r3, r3
 8000fbc:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	fab3 f383 	clz	r3, r3
 8000fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc8:	431a      	orrs	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fce:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8000fd2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fd6:	fa93 f3a3 	rbit	r3, r3
 8000fda:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	fab3 f383 	clz	r3, r3
 8000fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fea:	4b1c      	ldr	r3, [pc, #112]	; (800105c <HAL_RCC_OscConfig+0x4fc>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ff0:	f7ff f98a 	bl	8000308 <HAL_GetTick>
 8000ff4:	63f8      	str	r0, [r7, #60]	; 0x3c
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ff6:	e008      	b.n	800100a <HAL_RCC_OscConfig+0x4aa>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ff8:	f7ff f986 	bl	8000308 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b02      	cmp	r3, #2
 8001004:	d901      	bls.n	800100a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e020      	b.n	800104c <HAL_RCC_OscConfig+0x4ec>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d0f0      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x498>
 8001016:	e018      	b.n	800104a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001018:	4b10      	ldr	r3, [pc, #64]	; (800105c <HAL_RCC_OscConfig+0x4fc>)
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800101e:	f7ff f973 	bl	8000308 <HAL_GetTick>
 8001022:	63f8      	str	r0, [r7, #60]	; 0x3c
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001024:	e008      	b.n	8001038 <HAL_RCC_OscConfig+0x4d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001026:	f7ff f96f 	bl	8000308 <HAL_GetTick>
 800102a:	4602      	mov	r2, r0
 800102c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d901      	bls.n	8001038 <HAL_RCC_OscConfig+0x4d8>
          {
            return HAL_TIMEOUT;
 8001034:	2303      	movs	r3, #3
 8001036:	e009      	b.n	800104c <HAL_RCC_OscConfig+0x4ec>
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_RCC_OscConfig+0x4f4>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1f0      	bne.n	8001026 <HAL_RCC_OscConfig+0x4c6>
 8001044:	e001      	b.n	800104a <HAL_RCC_OscConfig+0x4ea>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <HAL_RCC_OscConfig+0x4ec>
    }
  }
  return HAL_OK;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	3740      	adds	r7, #64	; 0x40
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40023800 	.word	0x40023800
 8001058:	40007000 	.word	0x40007000
 800105c:	42470060 	.word	0x42470060

08001060 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001060:	b480      	push	{r7}
 8001062:	b093      	sub	sp, #76	; 0x4c
 8001064:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001066:	2300      	movs	r3, #0
 8001068:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllvco = 0U;
 800106a:	2300      	movs	r3, #0
 800106c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllp = 0U;
 800106e:	2300      	movs	r3, #0
 8001070:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t pllr = 0U;
 8001072:	2300      	movs	r3, #0
 8001074:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t sysclockfreq = 0U;
 8001076:	2300      	movs	r3, #0
 8001078:	643b      	str	r3, [r7, #64]	; 0x40

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800107a:	4b6c      	ldr	r3, [pc, #432]	; (800122c <HAL_RCC_GetSysClockFreq+0x1cc>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f003 030c 	and.w	r3, r3, #12
 8001082:	2b0c      	cmp	r3, #12
 8001084:	f200 80c8 	bhi.w	8001218 <HAL_RCC_GetSysClockFreq+0x1b8>
 8001088:	a201      	add	r2, pc, #4	; (adr r2, 8001090 <HAL_RCC_GetSysClockFreq+0x30>)
 800108a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800108e:	bf00      	nop
 8001090:	080010c5 	.word	0x080010c5
 8001094:	08001219 	.word	0x08001219
 8001098:	08001219 	.word	0x08001219
 800109c:	08001219 	.word	0x08001219
 80010a0:	080010cb 	.word	0x080010cb
 80010a4:	08001219 	.word	0x08001219
 80010a8:	08001219 	.word	0x08001219
 80010ac:	08001219 	.word	0x08001219
 80010b0:	080010d1 	.word	0x080010d1
 80010b4:	08001219 	.word	0x08001219
 80010b8:	08001219 	.word	0x08001219
 80010bc:	08001219 	.word	0x08001219
 80010c0:	08001177 	.word	0x08001177
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80010c4:	4b5a      	ldr	r3, [pc, #360]	; (8001230 <HAL_RCC_GetSysClockFreq+0x1d0>)
 80010c6:	643b      	str	r3, [r7, #64]	; 0x40
       break;
 80010c8:	e0a9      	b.n	800121e <HAL_RCC_GetSysClockFreq+0x1be>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80010ca:	4b5a      	ldr	r3, [pc, #360]	; (8001234 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80010cc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80010ce:	e0a6      	b.n	800121e <HAL_RCC_GetSysClockFreq+0x1be>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010d0:	4b56      	ldr	r3, [pc, #344]	; (800122c <HAL_RCC_GetSysClockFreq+0x1cc>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010d8:	63fb      	str	r3, [r7, #60]	; 0x3c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80010da:	4b54      	ldr	r3, [pc, #336]	; (800122c <HAL_RCC_GetSysClockFreq+0x1cc>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d017      	beq.n	8001116 <HAL_RCC_GetSysClockFreq+0xb6>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80010e6:	4a53      	ldr	r2, [pc, #332]	; (8001234 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80010e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80010ee:	4b4f      	ldr	r3, [pc, #316]	; (800122c <HAL_RCC_GetSysClockFreq+0x1cc>)
 80010f0:	6859      	ldr	r1, [r3, #4]
 80010f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80010f6:	400b      	ands	r3, r1
 80010f8:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80010fc:	61f9      	str	r1, [r7, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fe:	69f9      	ldr	r1, [r7, #28]
 8001100:	fa91 f1a1 	rbit	r1, r1
 8001104:	61b9      	str	r1, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001106:	69b9      	ldr	r1, [r7, #24]
 8001108:	fab1 f181 	clz	r1, r1
 800110c:	40cb      	lsrs	r3, r1
 800110e:	fb03 f302 	mul.w	r3, r3, r2
 8001112:	647b      	str	r3, [r7, #68]	; 0x44
 8001114:	e016      	b.n	8001144 <HAL_RCC_GetSysClockFreq+0xe4>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8001116:	4a46      	ldr	r2, [pc, #280]	; (8001230 <HAL_RCC_GetSysClockFreq+0x1d0>)
 8001118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800111a:	fbb2 f2f3 	udiv	r2, r2, r3
 800111e:	4b43      	ldr	r3, [pc, #268]	; (800122c <HAL_RCC_GetSysClockFreq+0x1cc>)
 8001120:	6859      	ldr	r1, [r3, #4]
 8001122:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001126:	400b      	ands	r3, r1
 8001128:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 800112c:	6339      	str	r1, [r7, #48]	; 0x30
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001130:	fa91 f1a1 	rbit	r1, r1
 8001134:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001136:	6979      	ldr	r1, [r7, #20]
 8001138:	fab1 f181 	clz	r1, r1
 800113c:	40cb      	lsrs	r3, r1
 800113e:	fb03 f302 	mul.w	r3, r3, r2
 8001142:	647b      	str	r3, [r7, #68]	; 0x44
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8001144:	4b39      	ldr	r3, [pc, #228]	; (800122c <HAL_RCC_GetSysClockFreq+0x1cc>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800114c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001154:	fa93 f3a3 	rbit	r3, r3
 8001158:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	fab3 f383 	clz	r3, r3
 8001160:	fa22 f303 	lsr.w	r3, r2, r3
 8001164:	3301      	adds	r3, #1
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	63bb      	str	r3, [r7, #56]	; 0x38
      
      sysclockfreq = pllvco/pllp;
 800116a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800116c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800116e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001172:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001174:	e053      	b.n	800121e <HAL_RCC_GetSysClockFreq+0x1be>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001176:	4b2d      	ldr	r3, [pc, #180]	; (800122c <HAL_RCC_GetSysClockFreq+0x1cc>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800117e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001180:	4b2a      	ldr	r3, [pc, #168]	; (800122c <HAL_RCC_GetSysClockFreq+0x1cc>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d017      	beq.n	80011bc <HAL_RCC_GetSysClockFreq+0x15c>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 800118c:	4a29      	ldr	r2, [pc, #164]	; (8001234 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800118e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001190:	fbb2 f2f3 	udiv	r2, r2, r3
 8001194:	4b25      	ldr	r3, [pc, #148]	; (800122c <HAL_RCC_GetSysClockFreq+0x1cc>)
 8001196:	6859      	ldr	r1, [r3, #4]
 8001198:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800119c:	400b      	ands	r3, r1
 800119e:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80011a2:	62b9      	str	r1, [r7, #40]	; 0x28
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80011a6:	fa91 f1a1 	rbit	r1, r1
 80011aa:	60f9      	str	r1, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80011ac:	68f9      	ldr	r1, [r7, #12]
 80011ae:	fab1 f181 	clz	r1, r1
 80011b2:	40cb      	lsrs	r3, r1
 80011b4:	fb03 f302 	mul.w	r3, r3, r2
 80011b8:	647b      	str	r3, [r7, #68]	; 0x44
 80011ba:	e016      	b.n	80011ea <HAL_RCC_GetSysClockFreq+0x18a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80011bc:	4a1c      	ldr	r2, [pc, #112]	; (8001230 <HAL_RCC_GetSysClockFreq+0x1d0>)
 80011be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80011c4:	4b19      	ldr	r3, [pc, #100]	; (800122c <HAL_RCC_GetSysClockFreq+0x1cc>)
 80011c6:	6859      	ldr	r1, [r3, #4]
 80011c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80011cc:	400b      	ands	r3, r1
 80011ce:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80011d2:	6279      	str	r1, [r7, #36]	; 0x24
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011d6:	fa91 f1a1 	rbit	r1, r1
 80011da:	60b9      	str	r1, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80011dc:	68b9      	ldr	r1, [r7, #8]
 80011de:	fab1 f181 	clz	r1, r1
 80011e2:	40cb      	lsrs	r3, r1
 80011e4:	fb03 f302 	mul.w	r3, r3, r2
 80011e8:	647b      	str	r3, [r7, #68]	; 0x44
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR));
 80011ea:	4b10      	ldr	r3, [pc, #64]	; (800122c <HAL_RCC_GetSysClockFreq+0x1cc>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80011f2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80011f6:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f8:	6a3b      	ldr	r3, [r7, #32]
 80011fa:	fa93 f3a3 	rbit	r3, r3
 80011fe:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	fab3 f383 	clz	r3, r3
 8001206:	fa22 f303 	lsr.w	r3, r2, r3
 800120a:	637b      	str	r3, [r7, #52]	; 0x34
      
      sysclockfreq = pllvco/pllr;
 800120c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800120e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001210:	fbb2 f3f3 	udiv	r3, r2, r3
 8001214:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001216:	e002      	b.n	800121e <HAL_RCC_GetSysClockFreq+0x1be>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <HAL_RCC_GetSysClockFreq+0x1d0>)
 800121a:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800121c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800121e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8001220:	4618      	mov	r0, r3
 8001222:	374c      	adds	r7, #76	; 0x4c
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	40023800 	.word	0x40023800
 8001230:	00f42400 	.word	0x00f42400
 8001234:	017d7840 	.word	0x017d7840

08001238 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e05c      	b.n	8001304 <HAL_SPI_Init+0xcc>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d106      	bne.n	8001264 <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 f854 	bl	800130c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2202      	movs	r2, #2
 8001268:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	6812      	ldr	r2, [r2, #0]
 8001274:	6812      	ldr	r2, [r2, #0]
 8001276:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800127a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	6851      	ldr	r1, [r2, #4]
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	6892      	ldr	r2, [r2, #8]
 8001288:	4311      	orrs	r1, r2
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	68d2      	ldr	r2, [r2, #12]
 800128e:	4311      	orrs	r1, r2
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	6912      	ldr	r2, [r2, #16]
 8001294:	4311      	orrs	r1, r2
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	6952      	ldr	r2, [r2, #20]
 800129a:	4311      	orrs	r1, r2
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	6992      	ldr	r2, [r2, #24]
 80012a0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80012a4:	4311      	orrs	r1, r2
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	69d2      	ldr	r2, [r2, #28]
 80012aa:	4311      	orrs	r1, r2
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	6a12      	ldr	r2, [r2, #32]
 80012b0:	4311      	orrs	r1, r2
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80012b6:	430a      	orrs	r2, r1
 80012b8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	6992      	ldr	r2, [r2, #24]
 80012c2:	0c12      	lsrs	r2, r2, #16
 80012c4:	f002 0104 	and.w	r1, r2, #4
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80012cc:	430a      	orrs	r2, r1
 80012ce:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012d8:	d104      	bne.n	80012e4 <HAL_SPI_Init+0xac>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80012e2:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	6812      	ldr	r2, [r2, #0]
 80012ec:	69d2      	ldr	r2, [r2, #28]
 80012ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012f2:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2201      	movs	r2, #1
 80012fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
  */
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent and received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08e      	sub	sp, #56	; 0x38
 8001324:	af02      	add	r7, sp, #8
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
 800132c:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 800132e:	2300      	movs	r3, #0
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
 8001332:	2300      	movs	r3, #0
 8001334:	623b      	str	r3, [r7, #32]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
 8001336:	2300      	movs	r3, #0
 8001338:	837b      	strh	r3, [r7, #26]
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 800133e:	2301      	movs	r3, #1
 8001340:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001342:	2300      	movs	r3, #0
 8001344:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800134e:	2b01      	cmp	r3, #1
 8001350:	d101      	bne.n	8001356 <HAL_SPI_TransmitReceive+0x36>
 8001352:	2302      	movs	r3, #2
 8001354:	e1f1      	b.n	800173a <HAL_SPI_TransmitReceive+0x41a>
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2201      	movs	r2, #1
 800135a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800135e:	f7fe ffd3 	bl	8000308 <HAL_GetTick>
 8001362:	61f8      	str	r0, [r7, #28]
  
  tmp  = hspi->State;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800136a:	b2db      	uxtb	r3, r3
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp1 = hspi->Init.Mode;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	623b      	str	r3, [r7, #32]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8001374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001376:	2b01      	cmp	r3, #1
 8001378:	d00e      	beq.n	8001398 <HAL_SPI_TransmitReceive+0x78>
 800137a:	6a3b      	ldr	r3, [r7, #32]
 800137c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001380:	d106      	bne.n	8001390 <HAL_SPI_TransmitReceive+0x70>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d102      	bne.n	8001390 <HAL_SPI_TransmitReceive+0x70>
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	2b04      	cmp	r3, #4
 800138e:	d003      	beq.n	8001398 <HAL_SPI_TransmitReceive+0x78>
  {
    errorcode = HAL_BUSY;
 8001390:	2302      	movs	r3, #2
 8001392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001396:	e1c6      	b.n	8001726 <HAL_SPI_TransmitReceive+0x406>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d005      	beq.n	80013aa <HAL_SPI_TransmitReceive+0x8a>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d002      	beq.n	80013aa <HAL_SPI_TransmitReceive+0x8a>
 80013a4:	887b      	ldrh	r3, [r7, #2]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d103      	bne.n	80013b2 <HAL_SPI_TransmitReceive+0x92>
  {
    errorcode = HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80013b0:	e1b9      	b.n	8001726 <HAL_SPI_TransmitReceive+0x406>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d103      	bne.n	80013c6 <HAL_SPI_TransmitReceive+0xa6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2205      	movs	r2, #5
 80013c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2200      	movs	r2, #0
 80013ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	887a      	ldrh	r2, [r7, #2]
 80013d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	887a      	ldrh	r2, [r7, #2]
 80013dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	68ba      	ldr	r2, [r7, #8]
 80013e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	887a      	ldrh	r2, [r7, #2]
 80013e8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	887a      	ldrh	r2, [r7, #2]
 80013ee:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2200      	movs	r2, #0
 80013f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2200      	movs	r2, #0
 80013fa:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001400:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001404:	d110      	bne.n	8001428 <HAL_SPI_TransmitReceive+0x108>
  {
    SPI_RESET_CRC(hspi);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6819      	ldr	r1, [r3, #0]
 8001410:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8001414:	400b      	ands	r3, r1
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	68fa      	ldr	r2, [r7, #12]
 800141e:	6812      	ldr	r2, [r2, #0]
 8001420:	6812      	ldr	r2, [r2, #0]
 8001422:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001426:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001432:	2b00      	cmp	r3, #0
 8001434:	d107      	bne.n	8001446 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	6812      	ldr	r2, [r2, #0]
 800143e:	6812      	ldr	r2, [r2, #0]
 8001440:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001444:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800144e:	f040 8084 	bne.w	800155a <HAL_SPI_TransmitReceive+0x23a>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d004      	beq.n	8001464 <HAL_SPI_TransmitReceive+0x144>
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800145e:	b29b      	uxth	r3, r3
 8001460:	2b01      	cmp	r3, #1
 8001462:	d16f      	bne.n	8001544 <HAL_SPI_TransmitReceive+0x224>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	68ba      	ldr	r2, [r7, #8]
 800146a:	8812      	ldrh	r2, [r2, #0]
 800146c:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	3302      	adds	r3, #2
 8001472:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001478:	b29b      	uxth	r3, r3
 800147a:	3b01      	subs	r3, #1
 800147c:	b29a      	uxth	r2, r3
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001482:	e05f      	b.n	8001544 <HAL_SPI_TransmitReceive+0x224>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001486:	2b00      	cmp	r3, #0
 8001488:	d02e      	beq.n	80014e8 <HAL_SPI_TransmitReceive+0x1c8>
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800148e:	b29b      	uxth	r3, r3
 8001490:	2b00      	cmp	r3, #0
 8001492:	d029      	beq.n	80014e8 <HAL_SPI_TransmitReceive+0x1c8>
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d022      	beq.n	80014e8 <HAL_SPI_TransmitReceive+0x1c8>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	8812      	ldrh	r2, [r2, #0]
 80014aa:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	3302      	adds	r3, #2
 80014b0:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	3b01      	subs	r3, #1
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d10c      	bne.n	80014e8 <HAL_SPI_TransmitReceive+0x1c8>
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014d6:	d107      	bne.n	80014e8 <HAL_SPI_TransmitReceive+0x1c8>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	68fa      	ldr	r2, [r7, #12]
 80014de:	6812      	ldr	r2, [r2, #0]
 80014e0:	6812      	ldr	r2, [r2, #0]
 80014e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80014e6:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d018      	beq.n	8001524 <HAL_SPI_TransmitReceive+0x204>
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d011      	beq.n	8001524 <HAL_SPI_TransmitReceive+0x204>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	b29a      	uxth	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3302      	adds	r3, #2
 8001510:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001516:	b29b      	uxth	r3, r3
 8001518:	3b01      	subs	r3, #1
 800151a:	b29a      	uxth	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8001520:	2301      	movs	r3, #1
 8001522:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800152a:	d00b      	beq.n	8001544 <HAL_SPI_TransmitReceive+0x224>
 800152c:	f7fe feec 	bl	8000308 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	1ad2      	subs	r2, r2, r3
 8001536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001538:	429a      	cmp	r2, r3
 800153a:	d303      	bcc.n	8001544 <HAL_SPI_TransmitReceive+0x224>
      {
        errorcode = HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001542:	e0f0      	b.n	8001726 <HAL_SPI_TransmitReceive+0x406>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
      pTxData += sizeof(uint16_t);
      hspi->TxXferCount--;
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001548:	b29b      	uxth	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d19a      	bne.n	8001484 <HAL_SPI_TransmitReceive+0x164>
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001552:	b29b      	uxth	r3, r3
 8001554:	2b00      	cmp	r3, #0
 8001556:	d195      	bne.n	8001484 <HAL_SPI_TransmitReceive+0x164>
 8001558:	e083      	b.n	8001662 <HAL_SPI_TransmitReceive+0x342>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d004      	beq.n	800156c <HAL_SPI_TransmitReceive+0x24c>
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001566:	b29b      	uxth	r3, r3
 8001568:	2b01      	cmp	r3, #1
 800156a:	d170      	bne.n	800164e <HAL_SPI_TransmitReceive+0x32e>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	330c      	adds	r3, #12
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	7812      	ldrb	r2, [r2, #0]
 8001576:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	3301      	adds	r3, #1
 800157c:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001582:	b29b      	uxth	r3, r3
 8001584:	3b01      	subs	r3, #1
 8001586:	b29a      	uxth	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800158c:	e05f      	b.n	800164e <HAL_SPI_TransmitReceive+0x32e>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800158e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001590:	2b00      	cmp	r3, #0
 8001592:	d02f      	beq.n	80015f4 <HAL_SPI_TransmitReceive+0x2d4>
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001598:	b29b      	uxth	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d02a      	beq.n	80015f4 <HAL_SPI_TransmitReceive+0x2d4>
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d023      	beq.n	80015f4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f103 020c 	add.w	r2, r3, #12
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	1c59      	adds	r1, r3, #1
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	3b01      	subs	r3, #1
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d10c      	bne.n	80015f4 <HAL_SPI_TransmitReceive+0x2d4>
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015e2:	d107      	bne.n	80015f4 <HAL_SPI_TransmitReceive+0x2d4>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	6812      	ldr	r2, [r2, #0]
 80015ec:	6812      	ldr	r2, [r2, #0]
 80015ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80015f2:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d017      	beq.n	800162e <HAL_SPI_TransmitReceive+0x30e>
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b00      	cmp	r3, #0
 800160a:	d010      	beq.n	800162e <HAL_SPI_TransmitReceive+0x30e>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	1c5a      	adds	r2, r3, #1
 8001610:	607a      	str	r2, [r7, #4]
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	6812      	ldr	r2, [r2, #0]
 8001616:	68d2      	ldr	r2, [r2, #12]
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001620:	b29b      	uxth	r3, r3
 8001622:	3b01      	subs	r3, #1
 8001624:	b29a      	uxth	r2, r3
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 800162a:	2301      	movs	r3, #1
 800162c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 800162e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001634:	d00b      	beq.n	800164e <HAL_SPI_TransmitReceive+0x32e>
 8001636:	f7fe fe67 	bl	8000308 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	1ad2      	subs	r2, r2, r3
 8001640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001642:	429a      	cmp	r2, r3
 8001644:	d303      	bcc.n	800164e <HAL_SPI_TransmitReceive+0x32e>
      {
        errorcode = HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800164c:	e06b      	b.n	8001726 <HAL_SPI_TransmitReceive+0x406>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
      pTxData += sizeof(uint8_t);
      hspi->TxXferCount--;
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001652:	b29b      	uxth	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d19a      	bne.n	800158e <HAL_SPI_TransmitReceive+0x26e>
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800165c:	b29b      	uxth	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d195      	bne.n	800158e <HAL_SPI_TransmitReceive+0x26e>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001666:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800166a:	d11a      	bne.n	80016a2 <HAL_SPI_TransmitReceive+0x382>
  {
    /* Wait until TXE flag */
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001672:	2201      	movs	r2, #1
 8001674:	2101      	movs	r1, #1
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f000 f864 	bl	8001744 <SPI_WaitFlagStateUntilTimeout>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d009      	beq.n	8001696 <HAL_SPI_TransmitReceive+0x376>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001686:	f043 0202 	orr.w	r2, r3, #2
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 8001694:	e047      	b.n	8001726 <HAL_SPI_TransmitReceive+0x406>
    }
    /* Read CRC */
    tmpreg1 = hspi->Instance->DR;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	b29b      	uxth	r3, r3
 800169e:	837b      	strh	r3, [r7, #26]
    /* To avoid GCC warning */
    UNUSED(tmpreg1);
 80016a0:	8b7b      	ldrh	r3, [r7, #26]
  }

  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f003 0310 	and.w	r3, r3, #16
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00d      	beq.n	80016cc <HAL_SPI_TransmitReceive+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016b4:	f043 0202 	orr.w	r2, r3, #2
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80016c4:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016d2:	2201      	movs	r2, #1
 80016d4:	2102      	movs	r1, #2
 80016d6:	68f8      	ldr	r0, [r7, #12]
 80016d8:	f000 f834 	bl	8001744 <SPI_WaitFlagStateUntilTimeout>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_SPI_TransmitReceive+0x3ca>
  {
    errorcode = HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80016e8:	e01d      	b.n	8001726 <HAL_SPI_TransmitReceive+0x406>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 80016ea:	69fa      	ldr	r2, [r7, #28]
 80016ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	f000 f892 	bl	8001818 <SPI_CheckFlag_BSY>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d006      	beq.n	8001708 <HAL_SPI_TransmitReceive+0x3e8>
  {
    errorcode = HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2220      	movs	r2, #32
 8001704:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001706:	e00e      	b.n	8001726 <HAL_SPI_TransmitReceive+0x406>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d10a      	bne.n	8001726 <HAL_SPI_TransmitReceive+0x406>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	617b      	str	r3, [r7, #20]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	697b      	ldr	r3, [r7, #20]
  }
  
error :
  hspi->State = HAL_SPI_STATE_READY;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2201      	movs	r2, #1
 800172a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001736:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800173a:	4618      	mov	r0, r3
 800173c:	3730      	adds	r7, #48	; 0x30
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop

08001744 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
 8001750:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8001752:	e04d      	b.n	80017f0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800175a:	d049      	beq.n	80017f0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d007      	beq.n	8001772 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8001762:	f7fe fdd1 	bl	8000308 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	1ad2      	subs	r2, r2, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	429a      	cmp	r2, r3
 8001770:	d33e      	bcc.n	80017f0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	6812      	ldr	r2, [r2, #0]
 800177a:	6852      	ldr	r2, [r2, #4]
 800177c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001780:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800178a:	d111      	bne.n	80017b0 <SPI_WaitFlagStateUntilTimeout+0x6c>
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001794:	d004      	beq.n	80017a0 <SPI_WaitFlagStateUntilTimeout+0x5c>
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800179e:	d107      	bne.n	80017b0 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	6812      	ldr	r2, [r2, #0]
 80017a8:	6812      	ldr	r2, [r2, #0]
 80017aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017b8:	d110      	bne.n	80017dc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6819      	ldr	r1, [r3, #0]
 80017c4:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 80017c8:	400b      	ands	r3, r1
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	6812      	ldr	r2, [r2, #0]
 80017d4:	6812      	ldr	r2, [r2, #0]
 80017d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017da:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e00e      	b.n	800180e <SPI_WaitFlagStateUntilTimeout+0xca>
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	401a      	ands	r2, r3
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d101      	bne.n	8001804 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8001800:	2201      	movs	r2, #1
 8001802:	e000      	b.n	8001806 <SPI_WaitFlagStateUntilTimeout+0xc2>
 8001804:	2200      	movs	r2, #0
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	429a      	cmp	r2, r3
 800180a:	d1a3      	bne.n	8001754 <SPI_WaitFlagStateUntilTimeout+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop

08001818 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af02      	add	r7, sp, #8
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	2200      	movs	r2, #0
 800182c:	2180      	movs	r1, #128	; 0x80
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	f7ff ff88 	bl	8001744 <SPI_WaitFlagStateUntilTimeout>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d007      	beq.n	800184a <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800183e:	f043 0220 	orr.w	r2, r3, #32
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e000      	b.n	800184c <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001858:	4a16      	ldr	r2, [pc, #88]	; (80018b4 <SystemInit+0x60>)
 800185a:	4b16      	ldr	r3, [pc, #88]	; (80018b4 <SystemInit+0x60>)
 800185c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001860:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001864:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001868:	4a13      	ldr	r2, [pc, #76]	; (80018b8 <SystemInit+0x64>)
 800186a:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <SystemInit+0x64>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001874:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <SystemInit+0x64>)
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800187a:	4a0f      	ldr	r2, [pc, #60]	; (80018b8 <SystemInit+0x64>)
 800187c:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <SystemInit+0x64>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001888:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800188a:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <SystemInit+0x64>)
 800188c:	4a0b      	ldr	r2, [pc, #44]	; (80018bc <SystemInit+0x68>)
 800188e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001890:	4a09      	ldr	r2, [pc, #36]	; (80018b8 <SystemInit+0x64>)
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <SystemInit+0x64>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800189a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <SystemInit+0x64>)
 800189e:	2200      	movs	r2, #0
 80018a0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018a2:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <SystemInit+0x60>)
 80018a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018a8:	609a      	str	r2, [r3, #8]
#endif
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000ed00 	.word	0xe000ed00
 80018b8:	40023800 	.word	0x40023800
 80018bc:	24003010 	.word	0x24003010

080018c0 <SysTick_Handler>:
extern void xPortSysTickHandler (void);

/*
  SysTick handler implementation that also clears overflow flag.
*/
void SysTick_Handler (void) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80018c4:	4b02      	ldr	r3, [pc, #8]	; (80018d0 <SysTick_Handler+0x10>)
 80018c6:	681b      	ldr	r3, [r3, #0]

  /* Call tick handler */
  xPortSysTickHandler();
 80018c8:	f000 f89e 	bl	8001a08 <xPortSysTickHandler>
}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	e000e010 	.word	0xe000e010

080018d4 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	689a      	ldr	r2, [r3, #8]
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	601a      	str	r2, [r3, #0]
}
 8001910:	bf00      	nop
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6892      	ldr	r2, [r2, #8]
 8001932:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6852      	ldr	r2, [r2, #4]
 800193c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	429a      	cmp	r2, r3
 8001946:	d103      	bne.n	8001950 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	1e5a      	subs	r2, r3, #1
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001970:	4b07      	ldr	r3, [pc, #28]	; (8001990 <pxCurrentTCBConst2>)
 8001972:	6819      	ldr	r1, [r3, #0]
 8001974:	6808      	ldr	r0, [r1, #0]
 8001976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800197a:	f380 8809 	msr	PSP, r0
 800197e:	f3bf 8f6f 	isb	sy
 8001982:	f04f 0000 	mov.w	r0, #0
 8001986:	f380 8811 	msr	BASEPRI, r0
 800198a:	4770      	bx	lr
 800198c:	f3af 8000 	nop.w

08001990 <pxCurrentTCBConst2>:
 8001990:	200000b4 	.word	0x200000b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001994:	bf00      	nop
 8001996:	bf00      	nop
	...

080019a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80019a0:	f3ef 8009 	mrs	r0, PSP
 80019a4:	f3bf 8f6f 	isb	sy
 80019a8:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <pxCurrentTCBConst>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	f01e 0f10 	tst.w	lr, #16
 80019b0:	bf08      	it	eq
 80019b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80019b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019ba:	6010      	str	r0, [r2, #0]
 80019bc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80019c0:	f04f 0010 	mov.w	r0, #16
 80019c4:	f380 8811 	msr	BASEPRI, r0
 80019c8:	f3bf 8f4f 	dsb	sy
 80019cc:	f3bf 8f6f 	isb	sy
 80019d0:	f000 f8e8 	bl	8001ba4 <vTaskSwitchContext>
 80019d4:	f04f 0000 	mov.w	r0, #0
 80019d8:	f380 8811 	msr	BASEPRI, r0
 80019dc:	bc08      	pop	{r3}
 80019de:	6819      	ldr	r1, [r3, #0]
 80019e0:	6808      	ldr	r0, [r1, #0]
 80019e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019e6:	f01e 0f10 	tst.w	lr, #16
 80019ea:	bf08      	it	eq
 80019ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80019f0:	f380 8809 	msr	PSP, r0
 80019f4:	f3bf 8f6f 	isb	sy
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	f3af 8000 	nop.w

08001a00 <pxCurrentTCBConst>:
 8001a00:	200000b4 	.word	0x200000b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001a04:	bf00      	nop
 8001a06:	bf00      	nop

08001a08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001a0e:	f04f 0310 	mov.w	r3, #16
 8001a12:	f383 8811 	msr	BASEPRI, r3
 8001a16:	f3bf 8f6f 	isb	sy
 8001a1a:	f3bf 8f4f 	dsb	sy
 8001a1e:	603b      	str	r3, [r7, #0]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001a20:	f000 f812 	bl	8001a48 <xTaskIncrementTick>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <xPortSysTickHandler+0x3c>)
 8001a2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	2300      	movs	r3, #0
 8001a34:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8001a3c:	bf00      	nop
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	e000ed04 	.word	0xe000ed04

08001a48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a52:	4b49      	ldr	r3, [pc, #292]	; (8001b78 <xTaskIncrementTick+0x130>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d17d      	bne.n	8001b56 <xTaskIncrementTick+0x10e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8001a5a:	4b48      	ldr	r3, [pc, #288]	; (8001b7c <xTaskIncrementTick+0x134>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001a62:	4a46      	ldr	r2, [pc, #280]	; (8001b7c <xTaskIncrementTick+0x134>)
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d110      	bne.n	8001a90 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 8001a6e:	4b44      	ldr	r3, [pc, #272]	; (8001b80 <xTaskIncrementTick+0x138>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	4b43      	ldr	r3, [pc, #268]	; (8001b84 <xTaskIncrementTick+0x13c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a41      	ldr	r2, [pc, #260]	; (8001b80 <xTaskIncrementTick+0x138>)
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	4a41      	ldr	r2, [pc, #260]	; (8001b84 <xTaskIncrementTick+0x13c>)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	4b41      	ldr	r3, [pc, #260]	; (8001b88 <xTaskIncrementTick+0x140>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	3301      	adds	r3, #1
 8001a88:	4a3f      	ldr	r2, [pc, #252]	; (8001b88 <xTaskIncrementTick+0x140>)
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	f000 f8fe 	bl	8001c8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001a90:	4b3e      	ldr	r3, [pc, #248]	; (8001b8c <xTaskIncrementTick+0x144>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d34e      	bcc.n	8001b38 <xTaskIncrementTick+0xf0>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a9a:	4b39      	ldr	r3, [pc, #228]	; (8001b80 <xTaskIncrementTick+0x138>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <xTaskIncrementTick+0x60>
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e000      	b.n	8001aaa <xTaskIncrementTick+0x62>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d004      	beq.n	8001ab8 <xTaskIncrementTick+0x70>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001aae:	4b37      	ldr	r3, [pc, #220]	; (8001b8c <xTaskIncrementTick+0x144>)
 8001ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab4:	601a      	str	r2, [r3, #0]
					break;
 8001ab6:	e03f      	b.n	8001b38 <xTaskIncrementTick+0xf0>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001ab8:	4b31      	ldr	r3, [pc, #196]	; (8001b80 <xTaskIncrementTick+0x138>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d203      	bcs.n	8001ad8 <xTaskIncrementTick+0x90>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001ad0:	4a2e      	ldr	r2, [pc, #184]	; (8001b8c <xTaskIncrementTick+0x144>)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6013      	str	r3, [r2, #0]
						break;
 8001ad6:	e02f      	b.n	8001b38 <xTaskIncrementTick+0xf0>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	3304      	adds	r3, #4
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff1d 	bl	800191c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d004      	beq.n	8001af4 <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	3318      	adds	r3, #24
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff ff14 	bl	800191c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001af8:	4b25      	ldr	r3, [pc, #148]	; (8001b90 <xTaskIncrementTick+0x148>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d903      	bls.n	8001b08 <xTaskIncrementTick+0xc0>
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b04:	4a22      	ldr	r2, [pc, #136]	; (8001b90 <xTaskIncrementTick+0x148>)
 8001b06:	6013      	str	r3, [r2, #0]
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4a1f      	ldr	r2, [pc, #124]	; (8001b94 <xTaskIncrementTick+0x14c>)
 8001b16:	441a      	add	r2, r3
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	3304      	adds	r3, #4
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4610      	mov	r0, r2
 8001b20:	f7ff fed8 	bl	80018d4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b28:	4b1b      	ldr	r3, [pc, #108]	; (8001b98 <xTaskIncrementTick+0x150>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d3b3      	bcc.n	8001a9a <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 8001b32:	2301      	movs	r3, #1
 8001b34:	617b      	str	r3, [r7, #20]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
 8001b36:	e7b0      	b.n	8001a9a <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001b38:	4b17      	ldr	r3, [pc, #92]	; (8001b98 <xTaskIncrementTick+0x150>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b3e:	4915      	ldr	r1, [pc, #84]	; (8001b94 <xTaskIncrementTick+0x14c>)
 8001b40:	4613      	mov	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	440b      	add	r3, r1
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d907      	bls.n	8001b60 <xTaskIncrementTick+0x118>
			{
				xSwitchRequired = pdTRUE;
 8001b50:	2301      	movs	r3, #1
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	e004      	b.n	8001b60 <xTaskIncrementTick+0x118>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001b56:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <xTaskIncrementTick+0x154>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	4a0f      	ldr	r2, [pc, #60]	; (8001b9c <xTaskIncrementTick+0x154>)
 8001b5e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001b60:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <xTaskIncrementTick+0x158>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <xTaskIncrementTick+0x124>
		{
			xSwitchRequired = pdTRUE;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001b6c:	697b      	ldr	r3, [r7, #20]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20000538 	.word	0x20000538
 8001b7c:	20000520 	.word	0x20000520
 8001b80:	20000518 	.word	0x20000518
 8001b84:	2000051c 	.word	0x2000051c
 8001b88:	20000530 	.word	0x20000530
 8001b8c:	20000534 	.word	0x20000534
 8001b90:	20000524 	.word	0x20000524
 8001b94:	200000b8 	.word	0x200000b8
 8001b98:	200000b4 	.word	0x200000b4
 8001b9c:	20000528 	.word	0x20000528
 8001ba0:	2000052c 	.word	0x2000052c

08001ba4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001baa:	4b33      	ldr	r3, [pc, #204]	; (8001c78 <vTaskSwitchContext+0xd4>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001bb2:	4b32      	ldr	r3, [pc, #200]	; (8001c7c <vTaskSwitchContext+0xd8>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001bb8:	e05a      	b.n	8001c70 <vTaskSwitchContext+0xcc>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 8001bba:	4b30      	ldr	r3, [pc, #192]	; (8001c7c <vTaskSwitchContext+0xd8>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
 8001bc0:	4b2f      	ldr	r3, [pc, #188]	; (8001c80 <vTaskSwitchContext+0xdc>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8001bcc:	607b      	str	r3, [r7, #4]
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d111      	bne.n	8001bfc <vTaskSwitchContext+0x58>
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	3304      	adds	r3, #4
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d10b      	bne.n	8001bfc <vTaskSwitchContext+0x58>
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	3308      	adds	r3, #8
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d105      	bne.n	8001bfc <vTaskSwitchContext+0x58>
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	330c      	adds	r3, #12
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d008      	beq.n	8001c0e <vTaskSwitchContext+0x6a>
 8001bfc:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <vTaskSwitchContext+0xdc>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b1f      	ldr	r3, [pc, #124]	; (8001c80 <vTaskSwitchContext+0xdc>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	3334      	adds	r3, #52	; 0x34
 8001c06:	4619      	mov	r1, r3
 8001c08:	4610      	mov	r0, r2
 8001c0a:	f7fe fb01 	bl	8000210 <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001c0e:	4b1d      	ldr	r3, [pc, #116]	; (8001c84 <vTaskSwitchContext+0xe0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	e002      	b.n	8001c1c <vTaskSwitchContext+0x78>
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	491a      	ldr	r1, [pc, #104]	; (8001c88 <vTaskSwitchContext+0xe4>)
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	4613      	mov	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	440b      	add	r3, r1
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0f2      	beq.n	8001c16 <vTaskSwitchContext+0x72>
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	4613      	mov	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4a13      	ldr	r2, [pc, #76]	; (8001c88 <vTaskSwitchContext+0xe4>)
 8001c3c:	4413      	add	r3, r2
 8001c3e:	603b      	str	r3, [r7, #0]
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	3308      	adds	r3, #8
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d104      	bne.n	8001c60 <vTaskSwitchContext+0xbc>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	605a      	str	r2, [r3, #4]
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	4a06      	ldr	r2, [pc, #24]	; (8001c80 <vTaskSwitchContext+0xdc>)
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	4a06      	ldr	r2, [pc, #24]	; (8001c84 <vTaskSwitchContext+0xe0>)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6013      	str	r3, [r2, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001c70:	bf00      	nop
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000538 	.word	0x20000538
 8001c7c:	2000052c 	.word	0x2000052c
 8001c80:	200000b4 	.word	0x200000b4
 8001c84:	20000524 	.word	0x20000524
 8001c88:	200000b8 	.word	0x200000b8

08001c8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c92:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <prvResetNextTaskUnblockTime+0x44>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <prvResetNextTaskUnblockTime+0x14>
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e000      	b.n	8001ca2 <prvResetNextTaskUnblockTime+0x16>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d004      	beq.n	8001cb0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001ca6:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <prvResetNextTaskUnblockTime+0x48>)
 8001ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cac:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001cae:	e008      	b.n	8001cc2 <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001cb0:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <prvResetNextTaskUnblockTime+0x44>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	4a05      	ldr	r2, [pc, #20]	; (8001cd4 <prvResetNextTaskUnblockTime+0x48>)
 8001cc0:	6013      	str	r3, [r2, #0]
	}
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	20000518 	.word	0x20000518
 8001cd4:	20000534 	.word	0x20000534

08001cd8 <_ZN9NRF24L01pC1Ev>:
 */

#include "NRF24L01p.h"


NRF24L01p::NRF24L01p() {
 8001cd8:	b5b0      	push	{r4, r5, r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 f9b2 	bl	800204c <_ZN15NRF24L01pDriverC1Ev>
 8001ce8:	4a85      	ldr	r2, [pc, #532]	; (8001f00 <_ZN9NRF24L01pC1Ev+0x228>)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	601a      	str	r2, [r3, #0]
    
    port_Initialize();
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f000 fd31 	bl	8002758 <_ZN13NRF24L01pPort15port_InitializeEv>
    //ResetConfigValues(_RadioConfig, _RxPipeConfig);
    
    
    port_Pin_CE(0);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 fddc 	bl	80028b8 <_ZN13NRF24L01pPort11port_Pin_CEEb>
    port_Pin_CSN(0);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2100      	movs	r1, #0
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 fde9 	bl	80028dc <_ZN13NRF24L01pPort12port_Pin_CSNEb>

    port_DelayMs(_NRF24L01P_TIMING_PowerOnReset_ms);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2164      	movs	r1, #100	; 0x64
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f000 fe0e 	bl	8002930 <_ZN13NRF24L01pPort12port_DelayMsEj>

    RadioMode(MODE_POWER_DOWN);
 8001d14:	2101      	movs	r1, #1
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f920 	bl	8001f5c <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE>
    RadioMode(MODE_RX);
 8001d1c:	2103      	movs	r1, #3
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f91c 	bl	8001f5c <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE>

    clear_data_ready_flag();
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 fbc0 	bl	80024ac <_ZN15NRF24L01pDriver21clear_data_ready_flagEv>
    flush_rx();
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f000 fa66 	bl	8002200 <_ZN15NRF24L01pDriver8flush_rxEv>
    flush_tx();
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f000 fa46 	bl	80021c8 <_ZN15NRF24L01pDriver8flush_txEv>

    uint8_t status_rst_val = 0x70;//reset status
 8001d3c:	2370      	movs	r3, #112	; 0x70
 8001d3e:	72fb      	strb	r3, [r7, #11]
    write_register(_NRF24L01P_REG_STATUS, &status_rst_val,1);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f107 020b 	add.w	r2, r7, #11
 8001d46:	2301      	movs	r3, #1
 8001d48:	2107      	movs	r1, #7
 8001d4a:	f000 fa0f 	bl	800216c <_ZN15NRF24L01pDriver14write_registerEhPhi>
    uint8_t config_rst_val = 0x0b;//reset config
 8001d4e:	230b      	movs	r3, #11
 8001d50:	72bb      	strb	r3, [r7, #10]
    write_register(_NRF24L01P_REG_CONFIG, &config_rst_val,1);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f107 020a 	add.w	r2, r7, #10
 8001d58:	2301      	movs	r3, #1
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	f000 fa06 	bl	800216c <_ZN15NRF24L01pDriver14write_registerEhPhi>

    
        RadioConfig.DataReadyInterruptEnabled = 0;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	715a      	strb	r2, [r3, #5]
    RadioConfig.DataSentInterruptFlagEnabled = 0;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	719a      	strb	r2, [r3, #6]
    RadioConfig.MaxRetryInterruptFlagEnabled = 0;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	71da      	strb	r2, [r3, #7]
    RadioConfig.Crc = NRF24L01p::CONFIG_CRC_16BIT;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	220c      	movs	r2, #12
 8001d76:	721a      	strb	r2, [r3, #8]
    RadioConfig.AutoReTransmissionCount = 15;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	220f      	movs	r2, #15
 8001d7c:	725a      	strb	r2, [r3, #9]
    RadioConfig.AutoReTransmitDelayX250us = 15;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	220f      	movs	r2, #15
 8001d82:	729a      	strb	r2, [r3, #10]
    RadioConfig.frequencyOffset = 2;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2202      	movs	r2, #2
 8001d88:	72da      	strb	r2, [r3, #11]
    RadioConfig.datarate = NRF24L01p::RF_SETUP_RF_DR_2MBPS;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2208      	movs	r2, #8
 8001d8e:	731a      	strb	r2, [r3, #12]
    RadioConfig.RfPower = NRF24L01p::RF_SETUP_RF_PWR_0DBM;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2206      	movs	r2, #6
 8001d94:	735a      	strb	r2, [r3, #13]
    RadioConfig.PllLock = 0;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	739a      	strb	r2, [r3, #14]
    RadioConfig.ContWaveEnabled = 0;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	73da      	strb	r2, [r3, #15]
    RadioConfig.FeatureDynamicPayloadEnabled = 1;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	741a      	strb	r2, [r3, #16]
    RadioConfig.FeaturePayloadWithAckEnabled = 1;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	745a      	strb	r2, [r3, #17]
    RadioConfig.FeatureDynamicPayloadWithNoAckEnabled = 1;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	749a      	strb	r2, [r3, #18]
    
    RxPipeConfig[0].address = 0xe7e7e7e7e7;
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	f04f 33e7 	mov.w	r3, #3890735079	; 0xe7e7e7e7
 8001dba:	f04f 04e7 	mov.w	r4, #231	; 0xe7
 8001dbe:	e9c2 3408 	strd	r3, r4, [r2, #32]
    RxPipeConfig[1].address = 0xc2c2c2c2c2;
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	f04f 33c2 	mov.w	r3, #3267543746	; 0xc2c2c2c2
 8001dc8:	f04f 04c2 	mov.w	r4, #194	; 0xc2
 8001dcc:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    RxPipeConfig[2].address = 0xc2c2c2c2c3;
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	4b4c      	ldr	r3, [pc, #304]	; (8001f04 <_ZN9NRF24L01pC1Ev+0x22c>)
 8001dd4:	f04f 04c2 	mov.w	r4, #194	; 0xc2
 8001dd8:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
    RxPipeConfig[3].address = 0xc2c2c2c2c4;
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	a444      	add	r4, pc, #272	; (adr r4, 8001ef0 <_ZN9NRF24L01pC1Ev+0x218>)
 8001de0:	cc18      	ldmia	r4, {r3, r4}
 8001de2:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
    RxPipeConfig[4].address = 0xc2c2c2c2c5;
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	a443      	add	r4, pc, #268	; (adr r4, 8001ef8 <_ZN9NRF24L01pC1Ev+0x220>)
 8001dea:	cc18      	ldmia	r4, {r3, r4}
 8001dec:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
    RxPipeConfig[5].address = 0xc2c2c2c2c6;
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	4b45      	ldr	r3, [pc, #276]	; (8001f08 <_ZN9NRF24L01pC1Ev+0x230>)
 8001df4:	f04f 04c2 	mov.w	r4, #194	; 0xc2
 8001df8:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
    
    enable_dynamic_payload(RadioConfig.FeatureDynamicPayloadEnabled);
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	7c1b      	ldrb	r3, [r3, #16]
 8001e02:	4619      	mov	r1, r3
 8001e04:	4610      	mov	r0, r2
 8001e06:	f000 fbe9 	bl	80025dc <_ZN15NRF24L01pDriver22enable_dynamic_payloadEb>
    enable_payload_with_ack(RadioConfig.FeaturePayloadWithAckEnabled);
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	7c5b      	ldrb	r3, [r3, #17]
 8001e10:	4619      	mov	r1, r3
 8001e12:	4610      	mov	r0, r2
 8001e14:	f000 fc10 	bl	8002638 <_ZN15NRF24L01pDriver23enable_payload_with_ackEb>
    enable_dynamic_payload_with_no_ack(RadioConfig.FeatureDynamicPayloadWithNoAckEnabled);
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	7c9b      	ldrb	r3, [r3, #18]
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4610      	mov	r0, r2
 8001e22:	f000 fc37 	bl	8002694 <_ZN15NRF24L01pDriver34enable_dynamic_payload_with_no_ackEb>
    set_auto_retransmission_count(RadioConfig.AutoReTransmissionCount);
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	7a5b      	ldrb	r3, [r3, #9]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4610      	mov	r0, r2
 8001e30:	f000 fade 	bl	80023f0 <_ZN15NRF24L01pDriver29set_auto_retransmission_countEh>
    set_auto_retransmission_delay(RadioConfig.AutoReTransmitDelayX250us);        
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	7a9b      	ldrb	r3, [r3, #10]
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	f000 faf5 	bl	800242c <_ZN15NRF24L01pDriver29set_auto_retransmission_delayEh>
    set_DataRate(RadioConfig.datarate);
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	7b1b      	ldrb	r3, [r3, #12]
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4610      	mov	r0, r2
 8001e4c:	f000 fb10 	bl	8002470 <_ZN15NRF24L01pDriver12set_DataRateENS_10datarate_tE>
    
    int i;
    for(i=0;i<6;i++){
 8001e50:	2300      	movs	r3, #0
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2b05      	cmp	r3, #5
 8001e58:	dc45      	bgt.n	8001ee6 <_ZN9NRF24L01pC1Ev+0x20e>
        enable_rx_on_pipe((pipe_t)i,RxPipeConfig[i].PipeEnabled );
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	b2dc      	uxtb	r4, r3
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	4613      	mov	r3, r2
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	4413      	add	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	440b      	add	r3, r1
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	461a      	mov	r2, r3
 8001e74:	4621      	mov	r1, r4
 8001e76:	f000 fa7d 	bl	8002374 <_ZN15NRF24L01pDriver17enable_rx_on_pipeENS_6pipe_tEb>
        enable_auto_ack((pipe_t)i,RxPipeConfig[i].autoAckEnabled );
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	b2dc      	uxtb	r4, r3
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	1c5a      	adds	r2, r3, #1
 8001e86:	4613      	mov	r3, r2
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	4413      	add	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	440b      	add	r3, r1
 8001e90:	3301      	adds	r3, #1
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	4621      	mov	r1, r4
 8001e98:	f000 fa2e 	bl	80022f8 <_ZN15NRF24L01pDriver15enable_auto_ackENS_6pipe_tEb>
        enable_dynamic_payload_pipe((pipe_t)i,RxPipeConfig[i].dynamicPayloadEnabled);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	b2dc      	uxtb	r4, r3
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4413      	add	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	440b      	add	r3, r1
 8001eb0:	3329      	adds	r3, #41	; 0x29
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4621      	mov	r1, r4
 8001eb8:	f000 fb52 	bl	8002560 <_ZN15NRF24L01pDriver27enable_dynamic_payload_pipeENS_6pipe_tEb>
        set_RX_pipe_address((pipe_t)i,RxPipeConfig[i].address);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	b2dd      	uxtb	r5, r3
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	4413      	add	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	440b      	add	r3, r1
 8001ed0:	3320      	adds	r3, #32
 8001ed2:	cb18      	ldmia	r3, {r3, r4}
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4623      	mov	r3, r4
 8001ed8:	4629      	mov	r1, r5
 8001eda:	f000 faf9 	bl	80024d0 <_ZN15NRF24L01pDriver19set_RX_pipe_addressENS_6pipe_tEy>
    set_auto_retransmission_count(RadioConfig.AutoReTransmissionCount);
    set_auto_retransmission_delay(RadioConfig.AutoReTransmitDelayX250us);        
    set_DataRate(RadioConfig.datarate);
    
    int i;
    for(i=0;i<6;i++){
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	e7b6      	b.n	8001e54 <_ZN9NRF24L01pC1Ev+0x17c>
        enable_dynamic_payload_pipe((pipe_t)i,RxPipeConfig[i].dynamicPayloadEnabled);
        set_RX_pipe_address((pipe_t)i,RxPipeConfig[i].address);
    }

    
}
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bdb0      	pop	{r4, r5, r7, pc}
 8001ef0:	c2c2c2c4 	.word	0xc2c2c2c4
 8001ef4:	000000c2 	.word	0x000000c2
 8001ef8:	c2c2c2c5 	.word	0xc2c2c2c5
 8001efc:	000000c2 	.word	0x000000c2
 8001f00:	08003600 	.word	0x08003600
 8001f04:	c2c2c2c3 	.word	0xc2c2c2c3
 8001f08:	c2c2c2c6 	.word	0xc2c2c2c6

08001f0c <_ZN9NRF24L01pD1Ev>:

NRF24L01p::NRF24L01p(const NRF24L01p& orig) {
}

NRF24L01p::~NRF24L01p() {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	4a08      	ldr	r2, [pc, #32]	; (8001f38 <_ZN9NRF24L01pD1Ev+0x2c>)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f000 f8a7 	bl	8002070 <_ZN15NRF24L01pDriverD1Ev>
}
 8001f22:	2300      	movs	r3, #0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d002      	beq.n	8001f2e <_ZN9NRF24L01pD1Ev+0x22>
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 fe98 	bl	8002c5e <_ZdlPv>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	08003600 	.word	0x08003600

08001f3c <_ZN9NRF24L01pD0Ev>:
}

NRF24L01p::NRF24L01p(const NRF24L01p& orig) {
}

NRF24L01p::~NRF24L01p() {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
}
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff ffe1 	bl	8001f0c <_ZN9NRF24L01pD1Ev>
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 fe87 	bl	8002c5e <_ZdlPv>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop

08001f5c <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE>:
        enable_dynamic_payload_pipe((pipe_t)i,RxPipeConfig[i].dynamicPayloadEnabled);
        set_RX_pipe_address((pipe_t)i,RxPipeConfig[i].address);
    }
}

void NRF24L01p::RadioMode(NRF24L01p::RadioState_t mode){
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	70fb      	strb	r3, [r7, #3]
    switch(mode){
 8001f68:	78fb      	ldrb	r3, [r7, #3]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	2b03      	cmp	r3, #3
 8001f6e:	d869      	bhi.n	8002044 <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE+0xe8>
 8001f70:	a201      	add	r2, pc, #4	; (adr r2, 8001f78 <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE+0x1c>)
 8001f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f76:	bf00      	nop
 8001f78:	08001f89 	.word	0x08001f89
 8001f7c:	08001fa3 	.word	0x08001fa3
 8001f80:	08001fd3 	.word	0x08001fd3
 8001f84:	08002009 	.word	0x08002009
        case MODE_POWER_DOWN: {
            power_down();
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 f96c 	bl	8002268 <_ZN15NRF24L01pDriver10power_downEv>
            port_Pin_CE(0);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2100      	movs	r1, #0
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 fc8f 	bl	80028b8 <_ZN13NRF24L01pPort11port_Pin_CEEb>
            RadioState = MODE_POWER_DOWN;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	711a      	strb	r2, [r3, #4]
            break;
 8001fa0:	e050      	b.n	8002044 <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE+0xe8>
        }
        case MODE_STANDBY: {
            if(RadioState == MODE_POWER_DOWN){
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	791b      	ldrb	r3, [r3, #4]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d10a      	bne.n	8001fc0 <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE+0x64>
                    power_up();
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f000 f943 	bl	8002238 <_ZN15NRF24L01pDriver8power_upEv>
                    port_DelayUs(_NRF24L01P_TIMING_Tpd2stby_us);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f241 1194 	movw	r1, #4500	; 0x1194
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f000 fcc5 	bl	8002948 <_ZN13NRF24L01pPort12port_DelayUsEj>
 8001fbe:	e004      	b.n	8001fca <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE+0x6e>
            }
            else{
                    port_Pin_CE(0);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f000 fc77 	bl	80028b8 <_ZN13NRF24L01pPort11port_Pin_CEEb>
            }
            RadioState = MODE_STANDBY;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2202      	movs	r2, #2
 8001fce:	711a      	strb	r2, [r3, #4]
            break;
 8001fd0:	e038      	b.n	8002044 <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE+0xe8>
        }
        case MODE_RX: {
            if(RadioState != MODE_RX){
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	791b      	ldrb	r3, [r3, #4]
 8001fd6:	2b03      	cmp	r3, #3
 8001fd8:	d031      	beq.n	800203e <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE+0xe2>
                port_Pin_CE(0);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 fc6a 	bl	80028b8 <_ZN13NRF24L01pPort11port_Pin_CEEb>
                rx_mode();
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 f956 	bl	8002298 <_ZN15NRF24L01pDriver7rx_modeEv>
                port_Pin_CE(1);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2101      	movs	r1, #1
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f000 fc61 	bl	80028b8 <_ZN13NRF24L01pPort11port_Pin_CEEb>
                port_DelayUs(_NRF24L01P_TIMING_Tstby2a_us);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2182      	movs	r1, #130	; 0x82
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 fca4 	bl	8002948 <_ZN13NRF24L01pPort12port_DelayUsEj>
                RadioState = MODE_RX;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2203      	movs	r2, #3
 8002004:	711a      	strb	r2, [r3, #4]
            }
            break;
 8002006:	e01a      	b.n	800203e <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE+0xe2>
        }
        case MODE_TX: {
            if(RadioState != MODE_TX){
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	791b      	ldrb	r3, [r3, #4]
 800200c:	2b04      	cmp	r3, #4
 800200e:	d018      	beq.n	8002042 <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE+0xe6>
                port_Pin_CE(0);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2100      	movs	r1, #0
 8002014:	4618      	mov	r0, r3
 8002016:	f000 fc4f 	bl	80028b8 <_ZN13NRF24L01pPort11port_Pin_CEEb>
                tx_mode();
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4618      	mov	r0, r3
 800201e:	f000 f953 	bl	80022c8 <_ZN15NRF24L01pDriver7tx_modeEv>
                port_Pin_CE(1);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2101      	movs	r1, #1
 8002026:	4618      	mov	r0, r3
 8002028:	f000 fc46 	bl	80028b8 <_ZN13NRF24L01pPort11port_Pin_CEEb>
                port_DelayUs(_NRF24L01P_TIMING_Tstby2a_us);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2182      	movs	r1, #130	; 0x82
 8002030:	4618      	mov	r0, r3
 8002032:	f000 fc89 	bl	8002948 <_ZN13NRF24L01pPort12port_DelayUsEj>
                RadioState = MODE_TX;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2204      	movs	r2, #4
 800203a:	711a      	strb	r2, [r3, #4]
            }
            break;
 800203c:	e001      	b.n	8002042 <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE+0xe6>
                rx_mode();
                port_Pin_CE(1);
                port_DelayUs(_NRF24L01P_TIMING_Tstby2a_us);
                RadioState = MODE_RX;
            }
            break;
 800203e:	bf00      	nop
 8002040:	e000      	b.n	8002044 <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE+0xe8>
                tx_mode();
                port_Pin_CE(1);
                port_DelayUs(_NRF24L01P_TIMING_Tstby2a_us);
                RadioState = MODE_TX;
            }
            break;
 8002042:	bf00      	nop
        }		
    }
}
 8002044:	bf00      	nop
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <_ZN15NRF24L01pDriverC1Ev>:
 * Created on January 29, 2017, 7:56 AM
 */

#include "NRF24L01pDriver.h"

NRF24L01pDriver::NRF24L01pDriver() {
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4618      	mov	r0, r3
 8002058:	f000 fb4a 	bl	80026f0 <_ZN13NRF24L01pPortC1Ev>
 800205c:	4a03      	ldr	r2, [pc, #12]	; (800206c <_ZN15NRF24L01pDriverC1Ev+0x20>)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	601a      	str	r2, [r3, #0]
}
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4618      	mov	r0, r3
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	08003610 	.word	0x08003610

08002070 <_ZN15NRF24L01pDriverD1Ev>:

NRF24L01pDriver::NRF24L01pDriver(const NRF24L01pDriver& orig) {
}

NRF24L01pDriver::~NRF24L01pDriver() {
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	4a08      	ldr	r2, [pc, #32]	; (800209c <_ZN15NRF24L01pDriverD1Ev+0x2c>)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4618      	mov	r0, r3
 8002082:	f000 fb45 	bl	8002710 <_ZN13NRF24L01pPortD1Ev>
}
 8002086:	2300      	movs	r3, #0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d002      	beq.n	8002092 <_ZN15NRF24L01pDriverD1Ev+0x22>
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 fde6 	bl	8002c5e <_ZdlPv>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4618      	mov	r0, r3
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	08003610 	.word	0x08003610

080020a0 <_ZN15NRF24L01pDriverD0Ev>:
}

NRF24L01pDriver::NRF24L01pDriver(const NRF24L01pDriver& orig) {
}

NRF24L01pDriver::~NRF24L01pDriver() {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
}
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff ffe1 	bl	8002070 <_ZN15NRF24L01pDriverD1Ev>
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 fdd5 	bl	8002c5e <_ZdlPv>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop

080020c0 <_ZN15NRF24L01pDriver13read_registerEh>:

uint8_t NRF24L01pDriver::read_register(uint8_t address){
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	70fb      	strb	r3, [r7, #3]
    port_Pin_CSN(0);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2100      	movs	r1, #0
 80020d0:	4618      	mov	r0, r3
 80020d2:	f000 fc03 	bl	80028dc <_ZN13NRF24L01pPort12port_Pin_CSNEb>
    uint8_t temp = address&_NRF24L01P_REG_ADDRESS_MASK;
 80020d6:	78fb      	ldrb	r3, [r7, #3]
 80020d8:	f003 031f 	and.w	r3, r3, #31
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	73fb      	strb	r3, [r7, #15]
    port_SPI_Transcieve(&temp, 1);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f107 010f 	add.w	r1, r7, #15
 80020e6:	2201      	movs	r2, #1
 80020e8:	4618      	mov	r0, r3
 80020ea:	f000 fc09 	bl	8002900 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>
    port_SPI_Transcieve(&temp, 1);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f107 010f 	add.w	r1, r7, #15
 80020f4:	2201      	movs	r2, #1
 80020f6:	4618      	mov	r0, r3
 80020f8:	f000 fc02 	bl	8002900 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>
    port_Pin_CSN(1);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2101      	movs	r1, #1
 8002100:	4618      	mov	r0, r3
 8002102:	f000 fbeb 	bl	80028dc <_ZN13NRF24L01pPort12port_Pin_CSNEb>
    return temp;
 8002106:	7bfb      	ldrb	r3, [r7, #15]
    
}
 8002108:	4618      	mov	r0, r3
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <_ZN15NRF24L01pDriver14write_registerEhh>:
    uint8_t temp = address&_NRF24L01P_REG_ADDRESS_MASK;
    port_SPI_Transcieve(&temp, 1);
    port_SPI_Transcieve(dataout, len);
    port_Pin_CSN(1);
}
void NRF24L01pDriver::write_register(uint8_t address, uint8_t datain){
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	460b      	mov	r3, r1
 800211a:	70fb      	strb	r3, [r7, #3]
 800211c:	4613      	mov	r3, r2
 800211e:	70bb      	strb	r3, [r7, #2]
    port_Pin_CSN(0);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2100      	movs	r1, #0
 8002124:	4618      	mov	r0, r3
 8002126:	f000 fbd9 	bl	80028dc <_ZN13NRF24L01pPort12port_Pin_CSNEb>
    uint8_t temp = (( _NRF24L01P_SPI_CMD_WR_REG | (address&(_NRF24L01P_REG_ADDRESS_MASK))));
 800212a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800212e:	f003 031f 	and.w	r3, r3, #31
 8002132:	b25b      	sxtb	r3, r3
 8002134:	f043 0320 	orr.w	r3, r3, #32
 8002138:	b25b      	sxtb	r3, r3
 800213a:	b2db      	uxtb	r3, r3
 800213c:	73fb      	strb	r3, [r7, #15]
    port_SPI_Transcieve(&temp, 1);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f107 010f 	add.w	r1, r7, #15
 8002144:	2201      	movs	r2, #1
 8002146:	4618      	mov	r0, r3
 8002148:	f000 fbda 	bl	8002900 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>
    port_SPI_Transcieve(&datain, 1);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	1cb9      	adds	r1, r7, #2
 8002150:	2201      	movs	r2, #1
 8002152:	4618      	mov	r0, r3
 8002154:	f000 fbd4 	bl	8002900 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>
    port_Pin_CSN(1);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2101      	movs	r1, #1
 800215c:	4618      	mov	r0, r3
 800215e:	f000 fbbd 	bl	80028dc <_ZN13NRF24L01pPort12port_Pin_CSNEb>
}
 8002162:	bf00      	nop
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop

0800216c <_ZN15NRF24L01pDriver14write_registerEhPhi>:
void NRF24L01pDriver::write_register(uint8_t address, uint8_t *datain, int len){
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	607a      	str	r2, [r7, #4]
 8002176:	603b      	str	r3, [r7, #0]
 8002178:	460b      	mov	r3, r1
 800217a:	72fb      	strb	r3, [r7, #11]
    port_Pin_CSN(0);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2100      	movs	r1, #0
 8002180:	4618      	mov	r0, r3
 8002182:	f000 fbab 	bl	80028dc <_ZN13NRF24L01pPort12port_Pin_CSNEb>
    uint8_t temp = (( _NRF24L01P_SPI_CMD_WR_REG | (address&(_NRF24L01P_REG_ADDRESS_MASK))));
 8002186:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800218a:	f003 031f 	and.w	r3, r3, #31
 800218e:	b25b      	sxtb	r3, r3
 8002190:	f043 0320 	orr.w	r3, r3, #32
 8002194:	b25b      	sxtb	r3, r3
 8002196:	b2db      	uxtb	r3, r3
 8002198:	75fb      	strb	r3, [r7, #23]
    port_SPI_Transcieve(&temp, 1);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f107 0117 	add.w	r1, r7, #23
 80021a0:	2201      	movs	r2, #1
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 fbac 	bl	8002900 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>
    port_SPI_Transcieve(datain, len);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 fba6 	bl	8002900 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>
    port_Pin_CSN(1);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2101      	movs	r1, #1
 80021b8:	4618      	mov	r0, r3
 80021ba:	f000 fb8f 	bl	80028dc <_ZN13NRF24L01pPort12port_Pin_CSNEb>
}
 80021be:	bf00      	nop
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop

080021c8 <_ZN15NRF24L01pDriver8flush_txEv>:
    uint8_t temp = (_NRF24L01P_SPI_CMD_WR_TX_PAYLOAD);
    port_SPI_Transcieve(&temp,1);
    port_SPI_Transcieve(datain,pay_len);
    port_Pin_CSN(1);
}
void NRF24L01pDriver::flush_tx(){
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
    port_Pin_CSN(0);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2100      	movs	r1, #0
 80021d4:	4618      	mov	r0, r3
 80021d6:	f000 fb81 	bl	80028dc <_ZN13NRF24L01pPort12port_Pin_CSNEb>
    uint8_t temp = (_NRF24L01P_SPI_CMD_FLUSH_TX);
 80021da:	23e1      	movs	r3, #225	; 0xe1
 80021dc:	73fb      	strb	r3, [r7, #15]
    port_SPI_Transcieve(&temp,1);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f107 010f 	add.w	r1, r7, #15
 80021e4:	2201      	movs	r2, #1
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 fb8a 	bl	8002900 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>
    port_Pin_CSN(1);  
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2101      	movs	r1, #1
 80021f0:	4618      	mov	r0, r3
 80021f2:	f000 fb73 	bl	80028dc <_ZN13NRF24L01pPort12port_Pin_CSNEb>
}
 80021f6:	bf00      	nop
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop

08002200 <_ZN15NRF24L01pDriver8flush_rxEv>:
void NRF24L01pDriver::flush_rx(){
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
    port_Pin_CSN(0);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2100      	movs	r1, #0
 800220c:	4618      	mov	r0, r3
 800220e:	f000 fb65 	bl	80028dc <_ZN13NRF24L01pPort12port_Pin_CSNEb>
    uint8_t temp = (_NRF24L01P_SPI_CMD_FLUSH_RX);
 8002212:	23e2      	movs	r3, #226	; 0xe2
 8002214:	73fb      	strb	r3, [r7, #15]
    port_SPI_Transcieve(&temp,1);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f107 010f 	add.w	r1, r7, #15
 800221c:	2201      	movs	r2, #1
 800221e:	4618      	mov	r0, r3
 8002220:	f000 fb6e 	bl	8002900 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>
    port_Pin_CSN(1);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2101      	movs	r1, #1
 8002228:	4618      	mov	r0, r3
 800222a:	f000 fb57 	bl	80028dc <_ZN13NRF24L01pPort12port_Pin_CSNEb>
}
 800222e:	bf00      	nop
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop

08002238 <_ZN15NRF24L01pDriver8power_upEv>:
    port_Pin_CSN(1);     
    return temp;
}


void NRF24L01pDriver::power_up(){
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
    uint8_t temp = read_register(_NRF24L01P_REG_CONFIG);
 8002240:	2100      	movs	r1, #0
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff ff3c 	bl	80020c0 <_ZN15NRF24L01pDriver13read_registerEh>
 8002248:	4603      	mov	r3, r0
 800224a:	73fb      	strb	r3, [r7, #15]
    temp |= _NRF24L01P_CONFIG_PWR_UP;
 800224c:	7bfb      	ldrb	r3, [r7, #15]
 800224e:	f043 0302 	orr.w	r3, r3, #2
 8002252:	73fb      	strb	r3, [r7, #15]
    write_register(_NRF24L01P_REG_CONFIG,temp);
 8002254:	7bfb      	ldrb	r3, [r7, #15]
 8002256:	461a      	mov	r2, r3
 8002258:	2100      	movs	r1, #0
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff ff58 	bl	8002110 <_ZN15NRF24L01pDriver14write_registerEhh>
}
 8002260:	bf00      	nop
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <_ZN15NRF24L01pDriver10power_downEv>:
void NRF24L01pDriver::power_down(){
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
    uint8_t temp = read_register(_NRF24L01P_REG_CONFIG);
 8002270:	2100      	movs	r1, #0
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff ff24 	bl	80020c0 <_ZN15NRF24L01pDriver13read_registerEh>
 8002278:	4603      	mov	r3, r0
 800227a:	73fb      	strb	r3, [r7, #15]
    temp &= ~_NRF24L01P_CONFIG_PWR_UP;
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	f023 0302 	bic.w	r3, r3, #2
 8002282:	73fb      	strb	r3, [r7, #15]
    write_register(_NRF24L01P_REG_CONFIG,temp);
 8002284:	7bfb      	ldrb	r3, [r7, #15]
 8002286:	461a      	mov	r2, r3
 8002288:	2100      	movs	r1, #0
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff ff40 	bl	8002110 <_ZN15NRF24L01pDriver14write_registerEhh>
}
 8002290:	bf00      	nop
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <_ZN15NRF24L01pDriver7rx_modeEv>:
void NRF24L01pDriver::rx_mode(){
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
    uint8_t temp = read_register(_NRF24L01P_REG_CONFIG);
 80022a0:	2100      	movs	r1, #0
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff ff0c 	bl	80020c0 <_ZN15NRF24L01pDriver13read_registerEh>
 80022a8:	4603      	mov	r3, r0
 80022aa:	73fb      	strb	r3, [r7, #15]
    temp |= _NRF24L01P_CONFIG_PRIM_RX;
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	73fb      	strb	r3, [r7, #15]
    write_register(_NRF24L01P_REG_CONFIG,temp);
 80022b4:	7bfb      	ldrb	r3, [r7, #15]
 80022b6:	461a      	mov	r2, r3
 80022b8:	2100      	movs	r1, #0
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7ff ff28 	bl	8002110 <_ZN15NRF24L01pDriver14write_registerEhh>
}
 80022c0:	bf00      	nop
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <_ZN15NRF24L01pDriver7tx_modeEv>:
void NRF24L01pDriver::tx_mode(){
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
    uint8_t temp = read_register(_NRF24L01P_REG_CONFIG);
 80022d0:	2100      	movs	r1, #0
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff fef4 	bl	80020c0 <_ZN15NRF24L01pDriver13read_registerEh>
 80022d8:	4603      	mov	r3, r0
 80022da:	73fb      	strb	r3, [r7, #15]
    temp &= ~_NRF24L01P_CONFIG_PRIM_RX;
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
 80022de:	f023 0301 	bic.w	r3, r3, #1
 80022e2:	73fb      	strb	r3, [r7, #15]
    write_register(_NRF24L01P_REG_CONFIG,temp);
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
 80022e6:	461a      	mov	r2, r3
 80022e8:	2100      	movs	r1, #0
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7ff ff10 	bl	8002110 <_ZN15NRF24L01pDriver14write_registerEhh>
}
 80022f0:	bf00      	nop
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <_ZN15NRF24L01pDriver15enable_auto_ackENS_6pipe_tEb>:
void NRF24L01pDriver::enable_maxRetry_interrupt(bool sel){
    
}


void NRF24L01pDriver::enable_auto_ack(pipe_t pipe, bool sel){
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	70fb      	strb	r3, [r7, #3]
 8002304:	4613      	mov	r3, r2
 8002306:	70bb      	strb	r3, [r7, #2]
    if (sel){
 8002308:	78bb      	ldrb	r3, [r7, #2]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d016      	beq.n	800233c <_ZN15NRF24L01pDriver15enable_auto_ackENS_6pipe_tEb+0x44>
        uint8_t temp = read_register(_NRF24L01P_REG_EN_AA);
 800230e:	2101      	movs	r1, #1
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff fed5 	bl	80020c0 <_ZN15NRF24L01pDriver13read_registerEh>
 8002316:	4603      	mov	r3, r0
 8002318:	73fb      	strb	r3, [r7, #15]
        _nrf24l01p_set_bit(temp,pipe);
 800231a:	78fb      	ldrb	r3, [r7, #3]
 800231c:	2201      	movs	r2, #1
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	b25a      	sxtb	r2, r3
 8002324:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002328:	4313      	orrs	r3, r2
 800232a:	b25b      	sxtb	r3, r3
 800232c:	73fb      	strb	r3, [r7, #15]
        write_register(_NRF24L01P_REG_EN_AA,temp); 
 800232e:	7bfb      	ldrb	r3, [r7, #15]
 8002330:	461a      	mov	r2, r3
 8002332:	2101      	movs	r1, #1
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7ff feeb 	bl	8002110 <_ZN15NRF24L01pDriver14write_registerEhh>
        uint8_t temp = read_register(_NRF24L01P_REG_EN_AA);
        _nrf24l01p_clr_bit(temp,pipe);
        write_register(_NRF24L01P_REG_EN_AA,temp); 
    }
  
}
 800233a:	e017      	b.n	800236c <_ZN15NRF24L01pDriver15enable_auto_ackENS_6pipe_tEb+0x74>
    if (sel){
        uint8_t temp = read_register(_NRF24L01P_REG_EN_AA);
        _nrf24l01p_set_bit(temp,pipe);
        write_register(_NRF24L01P_REG_EN_AA,temp); 
    }else{
        uint8_t temp = read_register(_NRF24L01P_REG_EN_AA);
 800233c:	2101      	movs	r1, #1
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7ff febe 	bl	80020c0 <_ZN15NRF24L01pDriver13read_registerEh>
 8002344:	4603      	mov	r3, r0
 8002346:	73bb      	strb	r3, [r7, #14]
        _nrf24l01p_clr_bit(temp,pipe);
 8002348:	78fb      	ldrb	r3, [r7, #3]
 800234a:	2201      	movs	r2, #1
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	b25b      	sxtb	r3, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	b25a      	sxtb	r2, r3
 8002356:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800235a:	4013      	ands	r3, r2
 800235c:	b25b      	sxtb	r3, r3
 800235e:	73bb      	strb	r3, [r7, #14]
        write_register(_NRF24L01P_REG_EN_AA,temp); 
 8002360:	7bbb      	ldrb	r3, [r7, #14]
 8002362:	461a      	mov	r2, r3
 8002364:	2101      	movs	r1, #1
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff fed2 	bl	8002110 <_ZN15NRF24L01pDriver14write_registerEhh>
    }
  
}
 800236c:	bf00      	nop
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <_ZN15NRF24L01pDriver17enable_rx_on_pipeENS_6pipe_tEb>:



void NRF24L01pDriver::enable_rx_on_pipe(pipe_t pipe, bool sel){
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	70fb      	strb	r3, [r7, #3]
 8002380:	4613      	mov	r3, r2
 8002382:	70bb      	strb	r3, [r7, #2]
    if(sel){
 8002384:	78bb      	ldrb	r3, [r7, #2]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d016      	beq.n	80023b8 <_ZN15NRF24L01pDriver17enable_rx_on_pipeENS_6pipe_tEb+0x44>
        uint8_t temp = read_register(_NRF24L01P_REG_EN_RXADDR);
 800238a:	2102      	movs	r1, #2
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff fe97 	bl	80020c0 <_ZN15NRF24L01pDriver13read_registerEh>
 8002392:	4603      	mov	r3, r0
 8002394:	73fb      	strb	r3, [r7, #15]
        _nrf24l01p_set_bit(temp,pipe);
 8002396:	78fb      	ldrb	r3, [r7, #3]
 8002398:	2201      	movs	r2, #1
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	b25a      	sxtb	r2, r3
 80023a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	b25b      	sxtb	r3, r3
 80023a8:	73fb      	strb	r3, [r7, #15]
        write_register(_NRF24L01P_REG_EN_RXADDR,temp);
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	461a      	mov	r2, r3
 80023ae:	2102      	movs	r1, #2
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff fead 	bl	8002110 <_ZN15NRF24L01pDriver14write_registerEhh>
        uint8_t temp = read_register(_NRF24L01P_REG_EN_RXADDR);
        _nrf24l01p_clr_bit(temp,pipe);
        write_register(_NRF24L01P_REG_EN_RXADDR,temp);
    }

}
 80023b6:	e017      	b.n	80023e8 <_ZN15NRF24L01pDriver17enable_rx_on_pipeENS_6pipe_tEb+0x74>
    if(sel){
        uint8_t temp = read_register(_NRF24L01P_REG_EN_RXADDR);
        _nrf24l01p_set_bit(temp,pipe);
        write_register(_NRF24L01P_REG_EN_RXADDR,temp);
    }else{
        uint8_t temp = read_register(_NRF24L01P_REG_EN_RXADDR);
 80023b8:	2102      	movs	r1, #2
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff fe80 	bl	80020c0 <_ZN15NRF24L01pDriver13read_registerEh>
 80023c0:	4603      	mov	r3, r0
 80023c2:	73bb      	strb	r3, [r7, #14]
        _nrf24l01p_clr_bit(temp,pipe);
 80023c4:	78fb      	ldrb	r3, [r7, #3]
 80023c6:	2201      	movs	r2, #1
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	b25b      	sxtb	r3, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	b25a      	sxtb	r2, r3
 80023d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80023d6:	4013      	ands	r3, r2
 80023d8:	b25b      	sxtb	r3, r3
 80023da:	73bb      	strb	r3, [r7, #14]
        write_register(_NRF24L01P_REG_EN_RXADDR,temp);
 80023dc:	7bbb      	ldrb	r3, [r7, #14]
 80023de:	461a      	mov	r2, r3
 80023e0:	2102      	movs	r1, #2
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7ff fe94 	bl	8002110 <_ZN15NRF24L01pDriver14write_registerEhh>
    }

}
 80023e8:	bf00      	nop
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <_ZN15NRF24L01pDriver29set_auto_retransmission_countEh>:
}
NRF24L01pDriver::aw_t NRF24L01pDriver::get_address_width(){
    return (aw_t) read_register(_NRF24L01P_REG_SETUP_AW);  
}

void NRF24L01pDriver::set_auto_retransmission_count(uint8_t count){
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	70fb      	strb	r3, [r7, #3]
    uint8_t temp = read_register(_NRF24L01P_REG_SETUP_RETR);
 80023fc:	2104      	movs	r1, #4
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff fe5e 	bl	80020c0 <_ZN15NRF24L01pDriver13read_registerEh>
 8002404:	4603      	mov	r3, r0
 8002406:	73fb      	strb	r3, [r7, #15]
    temp &= ~ 0x0F;
 8002408:	7bfb      	ldrb	r3, [r7, #15]
 800240a:	f023 030f 	bic.w	r3, r3, #15
 800240e:	73fb      	strb	r3, [r7, #15]
    temp |= (count<<0);
 8002410:	7bfa      	ldrb	r2, [r7, #15]
 8002412:	78fb      	ldrb	r3, [r7, #3]
 8002414:	4313      	orrs	r3, r2
 8002416:	73fb      	strb	r3, [r7, #15]
    write_register(_NRF24L01P_REG_SETUP_RETR,temp);
 8002418:	7bfb      	ldrb	r3, [r7, #15]
 800241a:	461a      	mov	r2, r3
 800241c:	2104      	movs	r1, #4
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7ff fe76 	bl	8002110 <_ZN15NRF24L01pDriver14write_registerEhh>
}
 8002424:	bf00      	nop
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <_ZN15NRF24L01pDriver29set_auto_retransmission_delayEh>:
uint8_t NRF24L01pDriver::read_auto_retransmission_count(){
    uint8_t temp = read_register(_NRF24L01P_REG_SETUP_RETR);
    return temp & 0x0F; 
}

void NRF24L01pDriver::set_auto_retransmission_delay(uint8_t times250us){
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	70fb      	strb	r3, [r7, #3]
    uint8_t temp = read_register(_NRF24L01P_REG_SETUP_RETR);
 8002438:	2104      	movs	r1, #4
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7ff fe40 	bl	80020c0 <_ZN15NRF24L01pDriver13read_registerEh>
 8002440:	4603      	mov	r3, r0
 8002442:	73fb      	strb	r3, [r7, #15]
    temp &= ~(0xF0);
 8002444:	7bfb      	ldrb	r3, [r7, #15]
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	73fb      	strb	r3, [r7, #15]
    temp |= (times250us<<4);
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	b25a      	sxtb	r2, r3
 8002452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002456:	4313      	orrs	r3, r2
 8002458:	b25b      	sxtb	r3, r3
 800245a:	73fb      	strb	r3, [r7, #15]
    write_register(_NRF24L01P_REG_SETUP_RETR,temp);
 800245c:	7bfb      	ldrb	r3, [r7, #15]
 800245e:	461a      	mov	r2, r3
 8002460:	2104      	movs	r1, #4
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7ff fe54 	bl	8002110 <_ZN15NRF24L01pDriver14write_registerEhh>
}
 8002468:	bf00      	nop
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <_ZN15NRF24L01pDriver12set_DataRateENS_10datarate_tE>:
}
uint8_t NRF24L01pDriver::get_frequency_offset(){
    return read_register(_NRF24L01P_REG_RF_CH);
}

void NRF24L01pDriver::set_DataRate(datarate_t DataRate){
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	70fb      	strb	r3, [r7, #3]
    uint8_t temp = read_register(_NRF24L01P_REG_RF_SETUP);
 800247c:	2106      	movs	r1, #6
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7ff fe1e 	bl	80020c0 <_ZN15NRF24L01pDriver13read_registerEh>
 8002484:	4603      	mov	r3, r0
 8002486:	73fb      	strb	r3, [r7, #15]
    temp &= ~_NRF24L01P_RF_SETUP_RF_DR_MASK;
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800248e:	73fb      	strb	r3, [r7, #15]
    temp |= DataRate;
 8002490:	7bfa      	ldrb	r2, [r7, #15]
 8002492:	78fb      	ldrb	r3, [r7, #3]
 8002494:	4313      	orrs	r3, r2
 8002496:	73fb      	strb	r3, [r7, #15]
    write_register(_NRF24L01P_REG_RF_SETUP,temp);
 8002498:	7bfb      	ldrb	r3, [r7, #15]
 800249a:	461a      	mov	r2, r3
 800249c:	2106      	movs	r1, #6
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7ff fe36 	bl	8002110 <_ZN15NRF24L01pDriver14write_registerEhh>
}
 80024a4:	bf00      	nop
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <_ZN15NRF24L01pDriver21clear_data_ready_flagEv>:
}
bool NRF24L01pDriver::get_data_ready_flag(){
    if(get_status()&_NRF24L01P_STATUS_RX_DR) return 1;
    else return 0;
}
void NRF24L01pDriver::clear_data_ready_flag(){
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
    uint8_t temp = _NRF24L01P_STATUS_RX_DR;
 80024b4:	2340      	movs	r3, #64	; 0x40
 80024b6:	73fb      	strb	r3, [r7, #15]
    write_register(_NRF24L01P_REG_STATUS,&temp,sizeof(temp));
 80024b8:	2301      	movs	r3, #1
 80024ba:	f107 020f 	add.w	r2, r7, #15
 80024be:	2107      	movs	r1, #7
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff fe53 	bl	800216c <_ZN15NRF24L01pDriver14write_registerEhPhi>
}
 80024c6:	bf00      	nop
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop

080024d0 <_ZN15NRF24L01pDriver19set_RX_pipe_addressENS_6pipe_tEy>:
bool NRF24L01pDriver::get_rpd(){
    if(read_register(_NRF24L01P_REG_RPD)) return 1;
    else return 0;
}

void NRF24L01pDriver::set_RX_pipe_address(pipe_t pipe,PipeAddr_t address){
 80024d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024d2:	b089      	sub	sp, #36	; 0x24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	e9c7 2300 	strd	r2, r3, [r7]
 80024dc:	460b      	mov	r3, r1
 80024de:	72fb      	strb	r3, [r7, #11]
    int max_pipe_addr_width = 0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	61fb      	str	r3, [r7, #28]
    if((pipe>=0) && (pipe<=1)   ){max_pipe_addr_width = 5;}
 80024e4:	7afb      	ldrb	r3, [r7, #11]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d802      	bhi.n	80024f0 <_ZN15NRF24L01pDriver19set_RX_pipe_addressENS_6pipe_tEy+0x20>
 80024ea:	2305      	movs	r3, #5
 80024ec:	61fb      	str	r3, [r7, #28]
 80024ee:	e007      	b.n	8002500 <_ZN15NRF24L01pDriver19set_RX_pipe_addressENS_6pipe_tEy+0x30>
    else if ((pipe>=2) && (pipe<=5)   ){max_pipe_addr_width = 1;}
 80024f0:	7afb      	ldrb	r3, [r7, #11]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d904      	bls.n	8002500 <_ZN15NRF24L01pDriver19set_RX_pipe_addressENS_6pipe_tEy+0x30>
 80024f6:	7afb      	ldrb	r3, [r7, #11]
 80024f8:	2b05      	cmp	r3, #5
 80024fa:	d801      	bhi.n	8002500 <_ZN15NRF24L01pDriver19set_RX_pipe_addressENS_6pipe_tEy+0x30>
 80024fc:	2301      	movs	r3, #1
 80024fe:	61fb      	str	r3, [r7, #28]
    uint8_t temp[5];
    int i;
    for(i=0;i<max_pipe_addr_width;i++){
 8002500:	2300      	movs	r3, #0
 8002502:	61bb      	str	r3, [r7, #24]
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	429a      	cmp	r2, r3
 800250a:	da1c      	bge.n	8002546 <_ZN15NRF24L01pDriver19set_RX_pipe_addressENS_6pipe_tEy+0x76>
            temp[i] = (address>>(8*i))&0xFF;
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	00d9      	lsls	r1, r3, #3
 8002510:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002514:	f1c1 0620 	rsb	r6, r1, #32
 8002518:	f1a1 0020 	sub.w	r0, r1, #32
 800251c:	fa22 f401 	lsr.w	r4, r2, r1
 8002520:	fa03 f606 	lsl.w	r6, r3, r6
 8002524:	4334      	orrs	r4, r6
 8002526:	fa23 f000 	lsr.w	r0, r3, r0
 800252a:	4304      	orrs	r4, r0
 800252c:	fa23 f501 	lsr.w	r5, r3, r1
 8002530:	b2e1      	uxtb	r1, r4
 8002532:	f107 0210 	add.w	r2, r7, #16
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	4413      	add	r3, r2
 800253a:	460a      	mov	r2, r1
 800253c:	701a      	strb	r2, [r3, #0]
    int max_pipe_addr_width = 0;
    if((pipe>=0) && (pipe<=1)   ){max_pipe_addr_width = 5;}
    else if ((pipe>=2) && (pipe<=5)   ){max_pipe_addr_width = 1;}
    uint8_t temp[5];
    int i;
    for(i=0;i<max_pipe_addr_width;i++){
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	3301      	adds	r3, #1
 8002542:	61bb      	str	r3, [r7, #24]
 8002544:	e7de      	b.n	8002504 <_ZN15NRF24L01pDriver19set_RX_pipe_addressENS_6pipe_tEy+0x34>
            temp[i] = (address>>(8*i))&0xFF;
    }
    write_register(_NRF24L01P_REG_RX_ADDR_P0 + pipe,temp,max_pipe_addr_width);
 8002546:	7afb      	ldrb	r3, [r7, #11]
 8002548:	330a      	adds	r3, #10
 800254a:	b2d9      	uxtb	r1, r3
 800254c:	f107 0210 	add.w	r2, r7, #16
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f7ff fe0a 	bl	800216c <_ZN15NRF24L01pDriver14write_registerEhPhi>
}
 8002558:	bf00      	nop
 800255a:	3724      	adds	r7, #36	; 0x24
 800255c:	46bd      	mov	sp, r7
 800255e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002560 <_ZN15NRF24L01pDriver27enable_dynamic_payload_pipeENS_6pipe_tEb>:
bool NRF24L01pDriver::get_fifo_flag_tx_reuse(){
    if(read_register(_NRF24L01P_REG_FIFO_STATUS)&_NRF24L01P_FIFO_STATUS_RX_REUSE ) return 1;
    else return 0;      
}

void NRF24L01pDriver::enable_dynamic_payload_pipe(pipe_t pipe, bool sel){
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	70fb      	strb	r3, [r7, #3]
 800256c:	4613      	mov	r3, r2
 800256e:	70bb      	strb	r3, [r7, #2]
    if(sel){
 8002570:	78bb      	ldrb	r3, [r7, #2]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d016      	beq.n	80025a4 <_ZN15NRF24L01pDriver27enable_dynamic_payload_pipeENS_6pipe_tEb+0x44>
          uint8_t temp = read_register(_NRF24L01P_REG_DYNPD);
 8002576:	211c      	movs	r1, #28
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f7ff fda1 	bl	80020c0 <_ZN15NRF24L01pDriver13read_registerEh>
 800257e:	4603      	mov	r3, r0
 8002580:	73fb      	strb	r3, [r7, #15]
        temp |= (1<<pipe);
 8002582:	78fb      	ldrb	r3, [r7, #3]
 8002584:	2201      	movs	r2, #1
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	b25a      	sxtb	r2, r3
 800258c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002590:	4313      	orrs	r3, r2
 8002592:	b25b      	sxtb	r3, r3
 8002594:	73fb      	strb	r3, [r7, #15]
        write_register(_NRF24L01P_REG_DYNPD,temp);   
 8002596:	7bfb      	ldrb	r3, [r7, #15]
 8002598:	461a      	mov	r2, r3
 800259a:	211c      	movs	r1, #28
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f7ff fdb7 	bl	8002110 <_ZN15NRF24L01pDriver14write_registerEhh>
        uint8_t temp = read_register(_NRF24L01P_REG_DYNPD);
        temp &= ~(1<<pipe);
        write_register(_NRF24L01P_REG_DYNPD,temp);    
    }
   
}
 80025a2:	e017      	b.n	80025d4 <_ZN15NRF24L01pDriver27enable_dynamic_payload_pipeENS_6pipe_tEb+0x74>
    if(sel){
          uint8_t temp = read_register(_NRF24L01P_REG_DYNPD);
        temp |= (1<<pipe);
        write_register(_NRF24L01P_REG_DYNPD,temp);   
    }else{
        uint8_t temp = read_register(_NRF24L01P_REG_DYNPD);
 80025a4:	211c      	movs	r1, #28
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7ff fd8a 	bl	80020c0 <_ZN15NRF24L01pDriver13read_registerEh>
 80025ac:	4603      	mov	r3, r0
 80025ae:	73bb      	strb	r3, [r7, #14]
        temp &= ~(1<<pipe);
 80025b0:	78fb      	ldrb	r3, [r7, #3]
 80025b2:	2201      	movs	r2, #1
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	b25b      	sxtb	r3, r3
 80025ba:	43db      	mvns	r3, r3
 80025bc:	b25a      	sxtb	r2, r3
 80025be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80025c2:	4013      	ands	r3, r2
 80025c4:	b25b      	sxtb	r3, r3
 80025c6:	73bb      	strb	r3, [r7, #14]
        write_register(_NRF24L01P_REG_DYNPD,temp);    
 80025c8:	7bbb      	ldrb	r3, [r7, #14]
 80025ca:	461a      	mov	r2, r3
 80025cc:	211c      	movs	r1, #28
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff fd9e 	bl	8002110 <_ZN15NRF24L01pDriver14write_registerEhh>
    }
   
}
 80025d4:	bf00      	nop
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <_ZN15NRF24L01pDriver22enable_dynamic_payloadEb>:



void NRF24L01pDriver::enable_dynamic_payload(bool sel){
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	460b      	mov	r3, r1
 80025e6:	70fb      	strb	r3, [r7, #3]
    if(sel){
 80025e8:	78fb      	ldrb	r3, [r7, #3]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d010      	beq.n	8002610 <_ZN15NRF24L01pDriver22enable_dynamic_payloadEb+0x34>
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
 80025ee:	211d      	movs	r1, #29
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f7ff fd65 	bl	80020c0 <_ZN15NRF24L01pDriver13read_registerEh>
 80025f6:	4603      	mov	r3, r0
 80025f8:	73fb      	strb	r3, [r7, #15]
        temp |= _NRF24L01_FEATURE_EN_DPL;
 80025fa:	7bfb      	ldrb	r3, [r7, #15]
 80025fc:	f043 0304 	orr.w	r3, r3, #4
 8002600:	73fb      	strb	r3, [r7, #15]
        write_register(_NRF24L01P_REG_FEATURE,temp);     
 8002602:	7bfb      	ldrb	r3, [r7, #15]
 8002604:	461a      	mov	r2, r3
 8002606:	211d      	movs	r1, #29
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7ff fd81 	bl	8002110 <_ZN15NRF24L01pDriver14write_registerEhh>
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
        temp &= ~_NRF24L01_FEATURE_EN_DPL;
        write_register(_NRF24L01P_REG_FEATURE,temp);
    }
   
}
 800260e:	e00f      	b.n	8002630 <_ZN15NRF24L01pDriver22enable_dynamic_payloadEb+0x54>
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
        temp |= _NRF24L01_FEATURE_EN_DPL;
        write_register(_NRF24L01P_REG_FEATURE,temp);     
    }
    else{
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
 8002610:	211d      	movs	r1, #29
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7ff fd54 	bl	80020c0 <_ZN15NRF24L01pDriver13read_registerEh>
 8002618:	4603      	mov	r3, r0
 800261a:	73bb      	strb	r3, [r7, #14]
        temp &= ~_NRF24L01_FEATURE_EN_DPL;
 800261c:	7bbb      	ldrb	r3, [r7, #14]
 800261e:	f023 0304 	bic.w	r3, r3, #4
 8002622:	73bb      	strb	r3, [r7, #14]
        write_register(_NRF24L01P_REG_FEATURE,temp);
 8002624:	7bbb      	ldrb	r3, [r7, #14]
 8002626:	461a      	mov	r2, r3
 8002628:	211d      	movs	r1, #29
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7ff fd70 	bl	8002110 <_ZN15NRF24L01pDriver14write_registerEhh>
    }
   
}
 8002630:	bf00      	nop
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <_ZN15NRF24L01pDriver23enable_payload_with_ackEb>:



void NRF24L01pDriver::enable_payload_with_ack(bool sel){
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	460b      	mov	r3, r1
 8002642:	70fb      	strb	r3, [r7, #3]
    if(sel){
 8002644:	78fb      	ldrb	r3, [r7, #3]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d010      	beq.n	800266c <_ZN15NRF24L01pDriver23enable_payload_with_ackEb+0x34>
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
 800264a:	211d      	movs	r1, #29
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f7ff fd37 	bl	80020c0 <_ZN15NRF24L01pDriver13read_registerEh>
 8002652:	4603      	mov	r3, r0
 8002654:	73fb      	strb	r3, [r7, #15]
        temp |= _NRF24L01_FEATURE_EN_ACK_PAY;
 8002656:	7bfb      	ldrb	r3, [r7, #15]
 8002658:	f043 0302 	orr.w	r3, r3, #2
 800265c:	73fb      	strb	r3, [r7, #15]
        write_register(_NRF24L01P_REG_FEATURE,temp); 
 800265e:	7bfb      	ldrb	r3, [r7, #15]
 8002660:	461a      	mov	r2, r3
 8002662:	211d      	movs	r1, #29
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7ff fd53 	bl	8002110 <_ZN15NRF24L01pDriver14write_registerEhh>
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
        temp &= ~_NRF24L01_FEATURE_EN_ACK_PAY;
        write_register(_NRF24L01P_REG_FEATURE,temp); 
    }
     
}
 800266a:	e00f      	b.n	800268c <_ZN15NRF24L01pDriver23enable_payload_with_ackEb+0x54>
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
        temp |= _NRF24L01_FEATURE_EN_ACK_PAY;
        write_register(_NRF24L01P_REG_FEATURE,temp); 
    }
    else{
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
 800266c:	211d      	movs	r1, #29
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff fd26 	bl	80020c0 <_ZN15NRF24L01pDriver13read_registerEh>
 8002674:	4603      	mov	r3, r0
 8002676:	73bb      	strb	r3, [r7, #14]
        temp &= ~_NRF24L01_FEATURE_EN_ACK_PAY;
 8002678:	7bbb      	ldrb	r3, [r7, #14]
 800267a:	f023 0302 	bic.w	r3, r3, #2
 800267e:	73bb      	strb	r3, [r7, #14]
        write_register(_NRF24L01P_REG_FEATURE,temp); 
 8002680:	7bbb      	ldrb	r3, [r7, #14]
 8002682:	461a      	mov	r2, r3
 8002684:	211d      	movs	r1, #29
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7ff fd42 	bl	8002110 <_ZN15NRF24L01pDriver14write_registerEhh>
    }
     
}
 800268c:	bf00      	nop
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <_ZN15NRF24L01pDriver34enable_dynamic_payload_with_no_ackEb>:



void NRF24L01pDriver::enable_dynamic_payload_with_no_ack(bool sel){
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	70fb      	strb	r3, [r7, #3]
    if(sel){
 80026a0:	78fb      	ldrb	r3, [r7, #3]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d010      	beq.n	80026c8 <_ZN15NRF24L01pDriver34enable_dynamic_payload_with_no_ackEb+0x34>
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
 80026a6:	211d      	movs	r1, #29
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f7ff fd09 	bl	80020c0 <_ZN15NRF24L01pDriver13read_registerEh>
 80026ae:	4603      	mov	r3, r0
 80026b0:	73fb      	strb	r3, [r7, #15]
        temp |= _NRF24L01_FEATURE_EN_DYN_ACK;
 80026b2:	7bfb      	ldrb	r3, [r7, #15]
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	73fb      	strb	r3, [r7, #15]
        write_register(_NRF24L01P_REG_FEATURE,temp);        
 80026ba:	7bfb      	ldrb	r3, [r7, #15]
 80026bc:	461a      	mov	r2, r3
 80026be:	211d      	movs	r1, #29
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7ff fd25 	bl	8002110 <_ZN15NRF24L01pDriver14write_registerEhh>
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
        temp &= ~_NRF24L01_FEATURE_EN_DYN_ACK;
        write_register(_NRF24L01P_REG_FEATURE,temp);  
    }
     
}
 80026c6:	e00f      	b.n	80026e8 <_ZN15NRF24L01pDriver34enable_dynamic_payload_with_no_ackEb+0x54>
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
        temp |= _NRF24L01_FEATURE_EN_DYN_ACK;
        write_register(_NRF24L01P_REG_FEATURE,temp);        
    }
    else{
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
 80026c8:	211d      	movs	r1, #29
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff fcf8 	bl	80020c0 <_ZN15NRF24L01pDriver13read_registerEh>
 80026d0:	4603      	mov	r3, r0
 80026d2:	73bb      	strb	r3, [r7, #14]
        temp &= ~_NRF24L01_FEATURE_EN_DYN_ACK;
 80026d4:	7bbb      	ldrb	r3, [r7, #14]
 80026d6:	f023 0301 	bic.w	r3, r3, #1
 80026da:	73bb      	strb	r3, [r7, #14]
        write_register(_NRF24L01P_REG_FEATURE,temp);  
 80026dc:	7bbb      	ldrb	r3, [r7, #14]
 80026de:	461a      	mov	r2, r3
 80026e0:	211d      	movs	r1, #29
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7ff fd14 	bl	8002110 <_ZN15NRF24L01pDriver14write_registerEhh>
    }
     
}
 80026e8:	bf00      	nop
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <_ZN13NRF24L01pPortC1Ev>:
static GPIO_InitTypeDef nrf24l01p_CE_pin_Struct = {NRF24L01P_CE_PIN,GPIO_MODE_OUTPUT_PP,GPIO_PULLUP,GPIO_SPEED_FREQ_HIGH,};
static GPIO_InitTypeDef nrf24l01p_CSN_pin_Struct = {NRF24L01P_CSN_PIN,GPIO_MODE_OUTPUT_PP,GPIO_PULLUP,GPIO_SPEED_FREQ_HIGH,};



NRF24L01pPort::NRF24L01pPort() {
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	4a04      	ldr	r2, [pc, #16]	; (800270c <_ZN13NRF24L01pPortC1Ev+0x1c>)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	601a      	str	r2, [r3, #0]
}
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4618      	mov	r0, r3
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	08003620 	.word	0x08003620

08002710 <_ZN13NRF24L01pPortD1Ev>:

NRF24L01pPort::NRF24L01pPort(const NRF24L01pPort& orig) {
}

NRF24L01pPort::~NRF24L01pPort() {
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	4a06      	ldr	r2, [pc, #24]	; (8002734 <_ZN13NRF24L01pPortD1Ev+0x24>)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	601a      	str	r2, [r3, #0]
}
 800271e:	2300      	movs	r3, #0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d002      	beq.n	800272a <_ZN13NRF24L01pPortD1Ev+0x1a>
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 fa9a 	bl	8002c5e <_ZdlPv>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4618      	mov	r0, r3
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	08003620 	.word	0x08003620

08002738 <_ZN13NRF24L01pPortD0Ev>:
}

NRF24L01pPort::NRF24L01pPort(const NRF24L01pPort& orig) {
}

NRF24L01pPort::~NRF24L01pPort() {
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
}
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f7ff ffe5 	bl	8002710 <_ZN13NRF24L01pPortD1Ev>
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 fa89 	bl	8002c5e <_ZdlPv>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop

08002758 <_ZN13NRF24L01pPort15port_InitializeEv>:

void NRF24L01pPort::port_Initialize(){
 8002758:	b580      	push	{r7, lr}
 800275a:	b08c      	sub	sp, #48	; 0x30
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
		/*##-1- Configure the SPI peripheral #######################################*/
		/* Set the SPI parameters */
		nrf24l01p_SpiHandle.Instance               = SPIx;
 8002760:	4b4f      	ldr	r3, [pc, #316]	; (80028a0 <_ZN13NRF24L01pPort15port_InitializeEv+0x148>)
 8002762:	4a50      	ldr	r2, [pc, #320]	; (80028a4 <_ZN13NRF24L01pPort15port_InitializeEv+0x14c>)
 8002764:	601a      	str	r2, [r3, #0]
		nrf24l01p_SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002766:	4b4e      	ldr	r3, [pc, #312]	; (80028a0 <_ZN13NRF24L01pPort15port_InitializeEv+0x148>)
 8002768:	2220      	movs	r2, #32
 800276a:	61da      	str	r2, [r3, #28]
		nrf24l01p_SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 800276c:	4b4c      	ldr	r3, [pc, #304]	; (80028a0 <_ZN13NRF24L01pPort15port_InitializeEv+0x148>)
 800276e:	2200      	movs	r2, #0
 8002770:	609a      	str	r2, [r3, #8]
		nrf24l01p_SpiHandle.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8002772:	4b4b      	ldr	r3, [pc, #300]	; (80028a0 <_ZN13NRF24L01pPort15port_InitializeEv+0x148>)
 8002774:	2200      	movs	r2, #0
 8002776:	615a      	str	r2, [r3, #20]
		nrf24l01p_SpiHandle.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8002778:	4b49      	ldr	r3, [pc, #292]	; (80028a0 <_ZN13NRF24L01pPort15port_InitializeEv+0x148>)
 800277a:	2200      	movs	r2, #0
 800277c:	611a      	str	r2, [r3, #16]
		nrf24l01p_SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 800277e:	4b48      	ldr	r3, [pc, #288]	; (80028a0 <_ZN13NRF24L01pPort15port_InitializeEv+0x148>)
 8002780:	2200      	movs	r2, #0
 8002782:	60da      	str	r2, [r3, #12]
		nrf24l01p_SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8002784:	4b46      	ldr	r3, [pc, #280]	; (80028a0 <_ZN13NRF24L01pPort15port_InitializeEv+0x148>)
 8002786:	2200      	movs	r2, #0
 8002788:	621a      	str	r2, [r3, #32]
		nrf24l01p_SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLE;
 800278a:	4b45      	ldr	r3, [pc, #276]	; (80028a0 <_ZN13NRF24L01pPort15port_InitializeEv+0x148>)
 800278c:	2200      	movs	r2, #0
 800278e:	625a      	str	r2, [r3, #36]	; 0x24
		nrf24l01p_SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8002790:	4b43      	ldr	r3, [pc, #268]	; (80028a0 <_ZN13NRF24L01pPort15port_InitializeEv+0x148>)
 8002792:	2200      	movs	r2, #0
 8002794:	629a      	str	r2, [r3, #40]	; 0x28
		nrf24l01p_SpiHandle.Init.CRCPolynomial     = 7;
 8002796:	4b42      	ldr	r3, [pc, #264]	; (80028a0 <_ZN13NRF24L01pPort15port_InitializeEv+0x148>)
 8002798:	2207      	movs	r2, #7
 800279a:	62da      	str	r2, [r3, #44]	; 0x2c
		//nrf24l01p_SpiHandle.Init.CRCLength         = SPI_CRC_LENGTH_8BIT;
		nrf24l01p_SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 800279c:	4b40      	ldr	r3, [pc, #256]	; (80028a0 <_ZN13NRF24L01pPort15port_InitializeEv+0x148>)
 800279e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027a2:	619a      	str	r2, [r3, #24]
		//nrf24l01p_SpiHandle.Init.NSSPMode          = SPI_NSS_PULSE_DISABLE;

		nrf24l01p_SpiHandle.Init.Mode = SPI_MODE_MASTER;
 80027a4:	4b3e      	ldr	r3, [pc, #248]	; (80028a0 <_ZN13NRF24L01pPort15port_InitializeEv+0x148>)
 80027a6:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027aa:	605a      	str	r2, [r3, #4]

		GPIO_InitTypeDef  GPIO_InitStruct;

		/*##-1- Enable peripherals and GPIO Clocks #################################*/
		/* Enable GPIO TX/RX clock */
		SPIx_SCK_GPIO_CLK_ENABLE();
 80027ac:	2300      	movs	r3, #0
 80027ae:	61bb      	str	r3, [r7, #24]
 80027b0:	4a3d      	ldr	r2, [pc, #244]	; (80028a8 <_ZN13NRF24L01pPort15port_InitializeEv+0x150>)
 80027b2:	4b3d      	ldr	r3, [pc, #244]	; (80028a8 <_ZN13NRF24L01pPort15port_InitializeEv+0x150>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	f043 0301 	orr.w	r3, r3, #1
 80027ba:	6313      	str	r3, [r2, #48]	; 0x30
 80027bc:	4b3a      	ldr	r3, [pc, #232]	; (80028a8 <_ZN13NRF24L01pPort15port_InitializeEv+0x150>)
 80027be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	61bb      	str	r3, [r7, #24]
 80027c6:	69bb      	ldr	r3, [r7, #24]
		SPIx_MISO_GPIO_CLK_ENABLE();
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	4a36      	ldr	r2, [pc, #216]	; (80028a8 <_ZN13NRF24L01pPort15port_InitializeEv+0x150>)
 80027ce:	4b36      	ldr	r3, [pc, #216]	; (80028a8 <_ZN13NRF24L01pPort15port_InitializeEv+0x150>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	6313      	str	r3, [r2, #48]	; 0x30
 80027d8:	4b33      	ldr	r3, [pc, #204]	; (80028a8 <_ZN13NRF24L01pPort15port_InitializeEv+0x150>)
 80027da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	617b      	str	r3, [r7, #20]
 80027e2:	697b      	ldr	r3, [r7, #20]
		SPIx_MOSI_GPIO_CLK_ENABLE();
 80027e4:	2300      	movs	r3, #0
 80027e6:	613b      	str	r3, [r7, #16]
 80027e8:	4a2f      	ldr	r2, [pc, #188]	; (80028a8 <_ZN13NRF24L01pPort15port_InitializeEv+0x150>)
 80027ea:	4b2f      	ldr	r3, [pc, #188]	; (80028a8 <_ZN13NRF24L01pPort15port_InitializeEv+0x150>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	6313      	str	r3, [r2, #48]	; 0x30
 80027f4:	4b2c      	ldr	r3, [pc, #176]	; (80028a8 <_ZN13NRF24L01pPort15port_InitializeEv+0x150>)
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	693b      	ldr	r3, [r7, #16]
		/* Enable SPI clock */
		SPIx_CLK_ENABLE();
 8002800:	2300      	movs	r3, #0
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	4a28      	ldr	r2, [pc, #160]	; (80028a8 <_ZN13NRF24L01pPort15port_InitializeEv+0x150>)
 8002806:	4b28      	ldr	r3, [pc, #160]	; (80028a8 <_ZN13NRF24L01pPort15port_InitializeEv+0x150>)
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800280e:	6453      	str	r3, [r2, #68]	; 0x44
 8002810:	4b25      	ldr	r3, [pc, #148]	; (80028a8 <_ZN13NRF24L01pPort15port_InitializeEv+0x150>)
 8002812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002814:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	68fb      	ldr	r3, [r7, #12]

		/*##-2- Configure peripheral GPIO ##########################################*/
		/* SPI SCK GPIO pin configuration  */
		GPIO_InitStruct.Pin       = SPIx_SCK_PIN;
 800281c:	2320      	movs	r3, #32
 800281e:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8002820:	2302      	movs	r3, #2
 8002822:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 8002824:	2302      	movs	r3, #2
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002828:	2302      	movs	r3, #2
 800282a:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 800282c:	2305      	movs	r3, #5
 800282e:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002830:	f107 031c 	add.w	r3, r7, #28
 8002834:	4619      	mov	r1, r3
 8002836:	481d      	ldr	r0, [pc, #116]	; (80028ac <_ZN13NRF24L01pPort15port_InitializeEv+0x154>)
 8002838:	f7fd fe6c 	bl	8000514 <HAL_GPIO_Init>

		/* SPI MISO GPIO pin configuration  */
		GPIO_InitStruct.Pin = SPIx_MISO_PIN;
 800283c:	2340      	movs	r3, #64	; 0x40
 800283e:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Alternate = SPIx_MISO_AF;
 8002840:	2305      	movs	r3, #5
 8002842:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002844:	f107 031c 	add.w	r3, r7, #28
 8002848:	4619      	mov	r1, r3
 800284a:	4818      	ldr	r0, [pc, #96]	; (80028ac <_ZN13NRF24L01pPort15port_InitializeEv+0x154>)
 800284c:	f7fd fe62 	bl	8000514 <HAL_GPIO_Init>

		/* SPI MOSI GPIO pin configuration  */
		GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 8002850:	2380      	movs	r3, #128	; 0x80
 8002852:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Alternate = SPIx_MOSI_AF;
 8002854:	2305      	movs	r3, #5
 8002856:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002858:	f107 031c 	add.w	r3, r7, #28
 800285c:	4619      	mov	r1, r3
 800285e:	4813      	ldr	r0, [pc, #76]	; (80028ac <_ZN13NRF24L01pPort15port_InitializeEv+0x154>)
 8002860:	f7fd fe58 	bl	8000514 <HAL_GPIO_Init>

		/* Enable GPIOA clock */
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8002864:	2300      	movs	r3, #0
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	4a0f      	ldr	r2, [pc, #60]	; (80028a8 <_ZN13NRF24L01pPort15port_InitializeEv+0x150>)
 800286a:	4b0f      	ldr	r3, [pc, #60]	; (80028a8 <_ZN13NRF24L01pPort15port_InitializeEv+0x150>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	6313      	str	r3, [r2, #48]	; 0x30
 8002874:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <_ZN13NRF24L01pPort15port_InitializeEv+0x150>)
 8002876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	68bb      	ldr	r3, [r7, #8]


		HAL_SPI_Init(&nrf24l01p_SpiHandle);
 8002880:	4807      	ldr	r0, [pc, #28]	; (80028a0 <_ZN13NRF24L01pPort15port_InitializeEv+0x148>)
 8002882:	f7fe fcd9 	bl	8001238 <HAL_SPI_Init>

		HAL_GPIO_Init(NRF24L01P_CE_PORT, &nrf24l01p_CE_pin_Struct);
 8002886:	490a      	ldr	r1, [pc, #40]	; (80028b0 <_ZN13NRF24L01pPort15port_InitializeEv+0x158>)
 8002888:	4808      	ldr	r0, [pc, #32]	; (80028ac <_ZN13NRF24L01pPort15port_InitializeEv+0x154>)
 800288a:	f7fd fe43 	bl	8000514 <HAL_GPIO_Init>
		HAL_GPIO_Init(NRF24L01P_CSN_PORT, &nrf24l01p_CSN_pin_Struct);
 800288e:	4909      	ldr	r1, [pc, #36]	; (80028b4 <_ZN13NRF24L01pPort15port_InitializeEv+0x15c>)
 8002890:	4806      	ldr	r0, [pc, #24]	; (80028ac <_ZN13NRF24L01pPort15port_InitializeEv+0x154>)
 8002892:	f7fd fe3f 	bl	8000514 <HAL_GPIO_Init>
}
 8002896:	bf00      	nop
 8002898:	3730      	adds	r7, #48	; 0x30
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	2000053c 	.word	0x2000053c
 80028a4:	40013000 	.word	0x40013000
 80028a8:	40023800 	.word	0x40023800
 80028ac:	40020000 	.word	0x40020000
 80028b0:	20000008 	.word	0x20000008
 80028b4:	2000001c 	.word	0x2000001c

080028b8 <_ZN13NRF24L01pPort11port_Pin_CEEb>:
void NRF24L01pPort::port_DeInitialize(){
    
}
void NRF24L01pPort::port_Pin_CE(bool val){
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	460b      	mov	r3, r1
 80028c2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(NRF24L01P_CE_PORT, NRF24L01P_CE_PIN, (GPIO_PinState)val);
 80028c4:	78fb      	ldrb	r3, [r7, #3]
 80028c6:	461a      	mov	r2, r3
 80028c8:	2108      	movs	r1, #8
 80028ca:	4803      	ldr	r0, [pc, #12]	; (80028d8 <_ZN13NRF24L01pPort11port_Pin_CEEb+0x20>)
 80028cc:	f7fd ffb4 	bl	8000838 <HAL_GPIO_WritePin>
}
 80028d0:	bf00      	nop
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40020000 	.word	0x40020000

080028dc <_ZN13NRF24L01pPort12port_Pin_CSNEb>:
void NRF24L01pPort::port_Pin_CSN(bool val){
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(NRF24L01P_CSN_PORT, NRF24L01P_CSN_PIN, (GPIO_PinState)val);
 80028e8:	78fb      	ldrb	r3, [r7, #3]
 80028ea:	461a      	mov	r2, r3
 80028ec:	2110      	movs	r1, #16
 80028ee:	4803      	ldr	r0, [pc, #12]	; (80028fc <_ZN13NRF24L01pPort12port_Pin_CSNEb+0x20>)
 80028f0:	f7fd ffa2 	bl	8000838 <HAL_GPIO_WritePin>
}
 80028f4:	bf00      	nop
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40020000 	.word	0x40020000

08002900 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>:
int NRF24L01pPort::port_SPI_Transcieve(uint8_t *dataInOut, unsigned int size){
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af02      	add	r7, sp, #8
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
	return HAL_SPI_TransmitReceive(&nrf24l01p_SpiHandle, dataInOut, dataInOut, size,1000);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	b29a      	uxth	r2, r3
 8002910:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	4613      	mov	r3, r2
 8002918:	68ba      	ldr	r2, [r7, #8]
 800291a:	68b9      	ldr	r1, [r7, #8]
 800291c:	4803      	ldr	r0, [pc, #12]	; (800292c <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj+0x2c>)
 800291e:	f7fe fcff 	bl	8001320 <HAL_SPI_TransmitReceive>
 8002922:	4603      	mov	r3, r0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	2000053c 	.word	0x2000053c

08002930 <_ZN13NRF24L01pPort12port_DelayMsEj>:
void NRF24L01pPort::port_DelayMs(unsigned int ms){
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
	HAL_Delay(ms);
 800293a:	6838      	ldr	r0, [r7, #0]
 800293c:	f7fd fcf0 	bl	8000320 <HAL_Delay>
}
 8002940:	bf00      	nop
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <_ZN13NRF24L01pPort12port_DelayUsEj>:
void NRF24L01pPort::port_DelayUs(unsigned int us){
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
	HAL_Delay(us/1000);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	4a05      	ldr	r2, [pc, #20]	; (800296c <_ZN13NRF24L01pPort12port_DelayUsEj+0x24>)
 8002956:	fba2 2303 	umull	r2, r3, r2, r3
 800295a:	099b      	lsrs	r3, r3, #6
 800295c:	4618      	mov	r0, r3
 800295e:	f7fd fcdf 	bl	8000320 <HAL_Delay>
}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	10624dd3 	.word	0x10624dd3

08002970 <main>:

NRF24L01p Radio;

/* main function */
int main(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0

	HAL_Init();
 8002974:	f7fd fc82 	bl	800027c <HAL_Init>
	/* Configure the system clock to 100 MHz */
	SystemClock_Config();
 8002978:	f000 f806 	bl	8002988 <_Z18SystemClock_Configv>
  /* Infinite loop */
  while (1)
  {
   /* Add application code here */
	  //HAL_Delay(1000);
	  printf("hello world\r\n");
 800297c:	4801      	ldr	r0, [pc, #4]	; (8002984 <main+0x14>)
 800297e:	f000 fabb 	bl	8002ef8 <puts>
  osKernelStart ();                     // start thread execution 
#endif


  /* Infinite loop */
  while (1)
 8002982:	e7fb      	b.n	800297c <main+0xc>
 8002984:	080035d8 	.word	0x080035d8

08002988 <_Z18SystemClock_Configv>:
}



void SystemClock_Config(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b096      	sub	sp, #88	; 0x58
 800298c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002994:	2300      	movs	r3, #0
 8002996:	60bb      	str	r3, [r7, #8]
 8002998:	4a33      	ldr	r2, [pc, #204]	; (8002a68 <_Z18SystemClock_Configv+0xe0>)
 800299a:	4b33      	ldr	r3, [pc, #204]	; (8002a68 <_Z18SystemClock_Configv+0xe0>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a2:	6413      	str	r3, [r2, #64]	; 0x40
 80029a4:	4b30      	ldr	r3, [pc, #192]	; (8002a68 <_Z18SystemClock_Configv+0xe0>)
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ac:	60bb      	str	r3, [r7, #8]
 80029ae:	68bb      	ldr	r3, [r7, #8]

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029b0:	2300      	movs	r3, #0
 80029b2:	607b      	str	r3, [r7, #4]
 80029b4:	4a2d      	ldr	r2, [pc, #180]	; (8002a6c <_Z18SystemClock_Configv+0xe4>)
 80029b6:	4b2d      	ldr	r3, [pc, #180]	; (8002a6c <_Z18SystemClock_Configv+0xe4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029be:	6013      	str	r3, [r2, #0]
 80029c0:	4b2a      	ldr	r3, [pc, #168]	; (8002a6c <_Z18SystemClock_Configv+0xe4>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80029c8:	607b      	str	r3, [r7, #4]
 80029ca:	687b      	ldr	r3, [r7, #4]

  /* Enable HSI Oscillator and activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029cc:	2302      	movs	r3, #2
 80029ce:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029d0:	2301      	movs	r3, #1
 80029d2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSICalibrationValue = 0x10;
 80029d4:	2310      	movs	r3, #16
 80029d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029d8:	2302      	movs	r3, #2
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80029dc:	2300      	movs	r3, #0
 80029de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 16;
 80029e0:	2310      	movs	r3, #16
 80029e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 80029e4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80029e8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80029ea:	2302      	movs	r3, #2
 80029ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80029ee:	2307      	movs	r3, #7
 80029f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLR = 6;
 80029f2:	2306      	movs	r3, #6
 80029f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029f6:	f107 030c 	add.w	r3, r7, #12
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fe f8b0 	bl	8000b60 <HAL_RCC_OscConfig>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	bf14      	ite	ne
 8002a06:	2301      	movne	r3, #1
 8002a08:	2300      	moveq	r3, #0
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8002a10:	f000 f82e 	bl	8002a70 <_ZL13Error_Handlerv>
  }

   /* Activate the OverDrive to reach the 180 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 8002a14:	f7fd ff2a 	bl	800086c <HAL_PWREx_EnableOverDrive>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if(ret != HAL_OK)
 8002a1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d000      	beq.n	8002a28 <_Z18SystemClock_Configv+0xa0>
  {
    while(1) { ; }
 8002a26:	e7fe      	b.n	8002a26 <_Z18SystemClock_Configv+0x9e>
  }
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002a28:	230f      	movs	r3, #15
 8002a2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a30:	2300      	movs	r3, #0
 8002a32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002a34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002a38:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	653b      	str	r3, [r7, #80]	; 0x50
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002a3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a42:	2105      	movs	r1, #5
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fd ff79 	bl	800093c <HAL_RCC_ClockConfig>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	bf14      	ite	ne
 8002a50:	2301      	movne	r3, #1
 8002a52:	2300      	moveq	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8002a5a:	f000 f809 	bl	8002a70 <_ZL13Error_Handlerv>
  }

}
 8002a5e:	bf00      	nop
 8002a60:	3758      	adds	r7, #88	; 0x58
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40007000 	.word	0x40007000

08002a70 <_ZL13Error_Handlerv>:



static void Error_Handler(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  while(1)
 8002a74:	e7fe      	b.n	8002a74 <_ZL13Error_Handlerv+0x4>
 8002a76:	bf00      	nop

08002a78 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
}
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d10c      	bne.n	8002aa2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d107      	bne.n	8002aa2 <_Z41__static_initialization_and_destruction_0ii+0x2a>

void SystemClock_Config(void);
static void Error_Handler(void);


NRF24L01p Radio;
 8002a92:	4806      	ldr	r0, [pc, #24]	; (8002aac <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8002a94:	f7ff f920 	bl	8001cd8 <_ZN9NRF24L01pC1Ev>
 8002a98:	4a05      	ldr	r2, [pc, #20]	; (8002ab0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8002a9a:	4906      	ldr	r1, [pc, #24]	; (8002ab4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8002a9c:	4803      	ldr	r0, [pc, #12]	; (8002aac <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8002a9e:	f000 f8d9 	bl	8002c54 <__aeabi_atexit>
static void Error_Handler(void)
{
  while(1)
  {
  }
}
 8002aa2:	bf00      	nop
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20000598 	.word	0x20000598
 8002ab0:	20000000 	.word	0x20000000
 8002ab4:	08001f0d 	.word	0x08001f0d

08002ab8 <_GLOBAL__sub_I_Radio>:
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	f7ff ffd9 	bl	8002a78 <_Z41__static_initialization_and_destruction_0ii>
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002ad0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002ad4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d013      	beq.n	8002b08 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002ae0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002ae4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002ae8:	f003 0301 	and.w	r3, r3, #1
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00b      	beq.n	8002b08 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002af0:	e000      	b.n	8002af4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002af2:	bf00      	nop
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002af4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0f9      	beq.n	8002af2 <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002afe:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002b08:	687b      	ldr	r3, [r7, #4]
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop

08002b18 <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	/* return len; */
	int i;
	for(i=0;i<len;i++){
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	e009      	b.n	8002b3e <_write+0x26>
		ITM_SendChar(*ptr++);
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	60ba      	str	r2, [r7, #8]
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff ffc8 	bl	8002ac8 <ITM_SendChar>
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
	/* Implement your write code here, this is used by puts and printf for example */
	/* return len; */
	int i;
	for(i=0;i<len;i++){
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	617b      	str	r3, [r7, #20]
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	dbf1      	blt.n	8002b2a <_write+0x12>
		ITM_SendChar(*ptr++);
	}
	errno = ENOSYS;
 8002b46:	4b04      	ldr	r3, [pc, #16]	; (8002b58 <_write+0x40>)
 8002b48:	2258      	movs	r2, #88	; 0x58
 8002b4a:	601a      	str	r2, [r3, #0]
	return -1;
 8002b4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	20000658 	.word	0x20000658

08002b5c <_sbrk>:

void * _sbrk(int32_t incr)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8002b64:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <_sbrk+0x38>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d102      	bne.n	8002b72 <_sbrk+0x16>
		heap_end = & end;
 8002b6c:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <_sbrk+0x38>)
 8002b6e:	4a0a      	ldr	r2, [pc, #40]	; (8002b98 <_sbrk+0x3c>)
 8002b70:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 8002b72:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <_sbrk+0x38>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 8002b78:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <_sbrk+0x38>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4413      	add	r3, r2
 8002b80:	4a04      	ldr	r2, [pc, #16]	; (8002b94 <_sbrk+0x38>)
 8002b82:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 8002b84:	68fb      	ldr	r3, [r7, #12]
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	20000648 	.word	0x20000648
 8002b98:	20000660 	.word	0x20000660

08002b9c <_close>:

int _close(int32_t file)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8002ba4:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <_close+0x20>)
 8002ba6:	2258      	movs	r2, #88	; 0x58
 8002ba8:	601a      	str	r2, [r3, #0]
	return -1;
 8002baa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	20000658 	.word	0x20000658

08002bc0 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 8002bca:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <_fstat+0x20>)
 8002bcc:	2258      	movs	r2, #88	; 0x58
 8002bce:	601a      	str	r2, [r3, #0]
	return -1;
 8002bd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	20000658 	.word	0x20000658

08002be4 <_isatty>:

int _isatty(int32_t file)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8002bec:	4b04      	ldr	r3, [pc, #16]	; (8002c00 <_isatty+0x1c>)
 8002bee:	2258      	movs	r2, #88	; 0x58
 8002bf0:	601a      	str	r2, [r3, #0]
	return 0;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	20000658 	.word	0x20000658

08002c04 <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8002c10:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <_lseek+0x24>)
 8002c12:	2258      	movs	r2, #88	; 0x58
 8002c14:	601a      	str	r2, [r3, #0]
	return -1;
 8002c16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3714      	adds	r7, #20
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	20000658 	.word	0x20000658

08002c2c <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8002c38:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <_read+0x24>)
 8002c3a:	2258      	movs	r2, #88	; 0x58
 8002c3c:	601a      	str	r2, [r3, #0]
	return -1;
 8002c3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	20000658 	.word	0x20000658

08002c54 <__aeabi_atexit>:
 8002c54:	460b      	mov	r3, r1
 8002c56:	4601      	mov	r1, r0
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f000 b803 	b.w	8002c64 <__cxa_atexit>

08002c5e <_ZdlPv>:
 8002c5e:	f000 b835 	b.w	8002ccc <free>
	...

08002c64 <__cxa_atexit>:
 8002c64:	b510      	push	{r4, lr}
 8002c66:	4c05      	ldr	r4, [pc, #20]	; (8002c7c <__cxa_atexit+0x18>)
 8002c68:	4613      	mov	r3, r2
 8002c6a:	b12c      	cbz	r4, 8002c78 <__cxa_atexit+0x14>
 8002c6c:	460a      	mov	r2, r1
 8002c6e:	4601      	mov	r1, r0
 8002c70:	2002      	movs	r0, #2
 8002c72:	f3af 8000 	nop.w
 8002c76:	bd10      	pop	{r4, pc}
 8002c78:	4620      	mov	r0, r4
 8002c7a:	bd10      	pop	{r4, pc}
 8002c7c:	00000000 	.word	0x00000000

08002c80 <__libc_init_array>:
 8002c80:	b570      	push	{r4, r5, r6, lr}
 8002c82:	4b0e      	ldr	r3, [pc, #56]	; (8002cbc <__libc_init_array+0x3c>)
 8002c84:	4c0e      	ldr	r4, [pc, #56]	; (8002cc0 <__libc_init_array+0x40>)
 8002c86:	1ae4      	subs	r4, r4, r3
 8002c88:	10a4      	asrs	r4, r4, #2
 8002c8a:	2500      	movs	r5, #0
 8002c8c:	461e      	mov	r6, r3
 8002c8e:	42a5      	cmp	r5, r4
 8002c90:	d004      	beq.n	8002c9c <__libc_init_array+0x1c>
 8002c92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c96:	4798      	blx	r3
 8002c98:	3501      	adds	r5, #1
 8002c9a:	e7f8      	b.n	8002c8e <__libc_init_array+0xe>
 8002c9c:	f000 fc90 	bl	80035c0 <_init>
 8002ca0:	4c08      	ldr	r4, [pc, #32]	; (8002cc4 <__libc_init_array+0x44>)
 8002ca2:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <__libc_init_array+0x48>)
 8002ca4:	1ae4      	subs	r4, r4, r3
 8002ca6:	10a4      	asrs	r4, r4, #2
 8002ca8:	2500      	movs	r5, #0
 8002caa:	461e      	mov	r6, r3
 8002cac:	42a5      	cmp	r5, r4
 8002cae:	d004      	beq.n	8002cba <__libc_init_array+0x3a>
 8002cb0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002cb4:	4798      	blx	r3
 8002cb6:	3501      	adds	r5, #1
 8002cb8:	e7f8      	b.n	8002cac <__libc_init_array+0x2c>
 8002cba:	bd70      	pop	{r4, r5, r6, pc}
 8002cbc:	08003690 	.word	0x08003690
 8002cc0:	08003690 	.word	0x08003690
 8002cc4:	08003698 	.word	0x08003698
 8002cc8:	08003690 	.word	0x08003690

08002ccc <free>:
 8002ccc:	4b02      	ldr	r3, [pc, #8]	; (8002cd8 <free+0xc>)
 8002cce:	4601      	mov	r1, r0
 8002cd0:	6818      	ldr	r0, [r3, #0]
 8002cd2:	f000 b80b 	b.w	8002cec <_free_r>
 8002cd6:	bf00      	nop
 8002cd8:	20000090 	.word	0x20000090

08002cdc <memset>:
 8002cdc:	4402      	add	r2, r0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d002      	beq.n	8002cea <memset+0xe>
 8002ce4:	f803 1b01 	strb.w	r1, [r3], #1
 8002ce8:	e7fa      	b.n	8002ce0 <memset+0x4>
 8002cea:	4770      	bx	lr

08002cec <_free_r>:
 8002cec:	b538      	push	{r3, r4, r5, lr}
 8002cee:	4605      	mov	r5, r0
 8002cf0:	2900      	cmp	r1, #0
 8002cf2:	d046      	beq.n	8002d82 <_free_r+0x96>
 8002cf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002cf8:	1f0c      	subs	r4, r1, #4
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	bfb8      	it	lt
 8002cfe:	18e4      	addlt	r4, r4, r3
 8002d00:	f000 fbb0 	bl	8003464 <__malloc_lock>
 8002d04:	4a1f      	ldr	r2, [pc, #124]	; (8002d84 <_free_r+0x98>)
 8002d06:	6813      	ldr	r3, [r2, #0]
 8002d08:	4611      	mov	r1, r2
 8002d0a:	b913      	cbnz	r3, 8002d12 <_free_r+0x26>
 8002d0c:	6063      	str	r3, [r4, #4]
 8002d0e:	6014      	str	r4, [r2, #0]
 8002d10:	e032      	b.n	8002d78 <_free_r+0x8c>
 8002d12:	42a3      	cmp	r3, r4
 8002d14:	d90e      	bls.n	8002d34 <_free_r+0x48>
 8002d16:	6822      	ldr	r2, [r4, #0]
 8002d18:	18a0      	adds	r0, r4, r2
 8002d1a:	4283      	cmp	r3, r0
 8002d1c:	bf04      	itt	eq
 8002d1e:	6818      	ldreq	r0, [r3, #0]
 8002d20:	685b      	ldreq	r3, [r3, #4]
 8002d22:	6063      	str	r3, [r4, #4]
 8002d24:	bf04      	itt	eq
 8002d26:	1812      	addeq	r2, r2, r0
 8002d28:	6022      	streq	r2, [r4, #0]
 8002d2a:	600c      	str	r4, [r1, #0]
 8002d2c:	e024      	b.n	8002d78 <_free_r+0x8c>
 8002d2e:	42a2      	cmp	r2, r4
 8002d30:	d803      	bhi.n	8002d3a <_free_r+0x4e>
 8002d32:	4613      	mov	r3, r2
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	2a00      	cmp	r2, #0
 8002d38:	d1f9      	bne.n	8002d2e <_free_r+0x42>
 8002d3a:	6818      	ldr	r0, [r3, #0]
 8002d3c:	1819      	adds	r1, r3, r0
 8002d3e:	42a1      	cmp	r1, r4
 8002d40:	d10b      	bne.n	8002d5a <_free_r+0x6e>
 8002d42:	6821      	ldr	r1, [r4, #0]
 8002d44:	4401      	add	r1, r0
 8002d46:	1858      	adds	r0, r3, r1
 8002d48:	4282      	cmp	r2, r0
 8002d4a:	6019      	str	r1, [r3, #0]
 8002d4c:	d114      	bne.n	8002d78 <_free_r+0x8c>
 8002d4e:	6810      	ldr	r0, [r2, #0]
 8002d50:	6852      	ldr	r2, [r2, #4]
 8002d52:	605a      	str	r2, [r3, #4]
 8002d54:	4401      	add	r1, r0
 8002d56:	6019      	str	r1, [r3, #0]
 8002d58:	e00e      	b.n	8002d78 <_free_r+0x8c>
 8002d5a:	d902      	bls.n	8002d62 <_free_r+0x76>
 8002d5c:	230c      	movs	r3, #12
 8002d5e:	602b      	str	r3, [r5, #0]
 8002d60:	e00a      	b.n	8002d78 <_free_r+0x8c>
 8002d62:	6821      	ldr	r1, [r4, #0]
 8002d64:	1860      	adds	r0, r4, r1
 8002d66:	4282      	cmp	r2, r0
 8002d68:	bf04      	itt	eq
 8002d6a:	6810      	ldreq	r0, [r2, #0]
 8002d6c:	6852      	ldreq	r2, [r2, #4]
 8002d6e:	6062      	str	r2, [r4, #4]
 8002d70:	bf04      	itt	eq
 8002d72:	1809      	addeq	r1, r1, r0
 8002d74:	6021      	streq	r1, [r4, #0]
 8002d76:	605c      	str	r4, [r3, #4]
 8002d78:	4628      	mov	r0, r5
 8002d7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d7e:	f000 bb72 	b.w	8003466 <__malloc_unlock>
 8002d82:	bd38      	pop	{r3, r4, r5, pc}
 8002d84:	20000650 	.word	0x20000650

08002d88 <_malloc_r>:
 8002d88:	b570      	push	{r4, r5, r6, lr}
 8002d8a:	1ccd      	adds	r5, r1, #3
 8002d8c:	f025 0503 	bic.w	r5, r5, #3
 8002d90:	3508      	adds	r5, #8
 8002d92:	2d0c      	cmp	r5, #12
 8002d94:	bf38      	it	cc
 8002d96:	250c      	movcc	r5, #12
 8002d98:	2d00      	cmp	r5, #0
 8002d9a:	4606      	mov	r6, r0
 8002d9c:	db01      	blt.n	8002da2 <_malloc_r+0x1a>
 8002d9e:	42a9      	cmp	r1, r5
 8002da0:	d902      	bls.n	8002da8 <_malloc_r+0x20>
 8002da2:	230c      	movs	r3, #12
 8002da4:	6033      	str	r3, [r6, #0]
 8002da6:	e046      	b.n	8002e36 <_malloc_r+0xae>
 8002da8:	f000 fb5c 	bl	8003464 <__malloc_lock>
 8002dac:	4b23      	ldr	r3, [pc, #140]	; (8002e3c <_malloc_r+0xb4>)
 8002dae:	681c      	ldr	r4, [r3, #0]
 8002db0:	461a      	mov	r2, r3
 8002db2:	4621      	mov	r1, r4
 8002db4:	b1a1      	cbz	r1, 8002de0 <_malloc_r+0x58>
 8002db6:	680b      	ldr	r3, [r1, #0]
 8002db8:	1b5b      	subs	r3, r3, r5
 8002dba:	d40e      	bmi.n	8002dda <_malloc_r+0x52>
 8002dbc:	2b0b      	cmp	r3, #11
 8002dbe:	d903      	bls.n	8002dc8 <_malloc_r+0x40>
 8002dc0:	600b      	str	r3, [r1, #0]
 8002dc2:	18cc      	adds	r4, r1, r3
 8002dc4:	50cd      	str	r5, [r1, r3]
 8002dc6:	e01e      	b.n	8002e06 <_malloc_r+0x7e>
 8002dc8:	428c      	cmp	r4, r1
 8002dca:	bf0d      	iteet	eq
 8002dcc:	6863      	ldreq	r3, [r4, #4]
 8002dce:	684b      	ldrne	r3, [r1, #4]
 8002dd0:	6063      	strne	r3, [r4, #4]
 8002dd2:	6013      	streq	r3, [r2, #0]
 8002dd4:	bf18      	it	ne
 8002dd6:	460c      	movne	r4, r1
 8002dd8:	e015      	b.n	8002e06 <_malloc_r+0x7e>
 8002dda:	460c      	mov	r4, r1
 8002ddc:	6849      	ldr	r1, [r1, #4]
 8002dde:	e7e9      	b.n	8002db4 <_malloc_r+0x2c>
 8002de0:	4c17      	ldr	r4, [pc, #92]	; (8002e40 <_malloc_r+0xb8>)
 8002de2:	6823      	ldr	r3, [r4, #0]
 8002de4:	b91b      	cbnz	r3, 8002dee <_malloc_r+0x66>
 8002de6:	4630      	mov	r0, r6
 8002de8:	f000 f88e 	bl	8002f08 <_sbrk_r>
 8002dec:	6020      	str	r0, [r4, #0]
 8002dee:	4629      	mov	r1, r5
 8002df0:	4630      	mov	r0, r6
 8002df2:	f000 f889 	bl	8002f08 <_sbrk_r>
 8002df6:	1c43      	adds	r3, r0, #1
 8002df8:	d018      	beq.n	8002e2c <_malloc_r+0xa4>
 8002dfa:	1cc4      	adds	r4, r0, #3
 8002dfc:	f024 0403 	bic.w	r4, r4, #3
 8002e00:	42a0      	cmp	r0, r4
 8002e02:	d10d      	bne.n	8002e20 <_malloc_r+0x98>
 8002e04:	6025      	str	r5, [r4, #0]
 8002e06:	4630      	mov	r0, r6
 8002e08:	f000 fb2d 	bl	8003466 <__malloc_unlock>
 8002e0c:	f104 000b 	add.w	r0, r4, #11
 8002e10:	1d23      	adds	r3, r4, #4
 8002e12:	f020 0007 	bic.w	r0, r0, #7
 8002e16:	1ac3      	subs	r3, r0, r3
 8002e18:	d00e      	beq.n	8002e38 <_malloc_r+0xb0>
 8002e1a:	425a      	negs	r2, r3
 8002e1c:	50e2      	str	r2, [r4, r3]
 8002e1e:	bd70      	pop	{r4, r5, r6, pc}
 8002e20:	1a21      	subs	r1, r4, r0
 8002e22:	4630      	mov	r0, r6
 8002e24:	f000 f870 	bl	8002f08 <_sbrk_r>
 8002e28:	3001      	adds	r0, #1
 8002e2a:	d1eb      	bne.n	8002e04 <_malloc_r+0x7c>
 8002e2c:	230c      	movs	r3, #12
 8002e2e:	6033      	str	r3, [r6, #0]
 8002e30:	4630      	mov	r0, r6
 8002e32:	f000 fb18 	bl	8003466 <__malloc_unlock>
 8002e36:	2000      	movs	r0, #0
 8002e38:	bd70      	pop	{r4, r5, r6, pc}
 8002e3a:	bf00      	nop
 8002e3c:	20000650 	.word	0x20000650
 8002e40:	2000064c 	.word	0x2000064c

08002e44 <_puts_r>:
 8002e44:	b570      	push	{r4, r5, r6, lr}
 8002e46:	460e      	mov	r6, r1
 8002e48:	4605      	mov	r5, r0
 8002e4a:	b118      	cbz	r0, 8002e54 <_puts_r+0x10>
 8002e4c:	6983      	ldr	r3, [r0, #24]
 8002e4e:	b90b      	cbnz	r3, 8002e54 <_puts_r+0x10>
 8002e50:	f000 fa1e 	bl	8003290 <__sinit>
 8002e54:	69ab      	ldr	r3, [r5, #24]
 8002e56:	68ac      	ldr	r4, [r5, #8]
 8002e58:	b913      	cbnz	r3, 8002e60 <_puts_r+0x1c>
 8002e5a:	4628      	mov	r0, r5
 8002e5c:	f000 fa18 	bl	8003290 <__sinit>
 8002e60:	4b22      	ldr	r3, [pc, #136]	; (8002eec <_puts_r+0xa8>)
 8002e62:	429c      	cmp	r4, r3
 8002e64:	d101      	bne.n	8002e6a <_puts_r+0x26>
 8002e66:	686c      	ldr	r4, [r5, #4]
 8002e68:	e008      	b.n	8002e7c <_puts_r+0x38>
 8002e6a:	4b21      	ldr	r3, [pc, #132]	; (8002ef0 <_puts_r+0xac>)
 8002e6c:	429c      	cmp	r4, r3
 8002e6e:	d101      	bne.n	8002e74 <_puts_r+0x30>
 8002e70:	68ac      	ldr	r4, [r5, #8]
 8002e72:	e003      	b.n	8002e7c <_puts_r+0x38>
 8002e74:	4b1f      	ldr	r3, [pc, #124]	; (8002ef4 <_puts_r+0xb0>)
 8002e76:	429c      	cmp	r4, r3
 8002e78:	bf08      	it	eq
 8002e7a:	68ec      	ldreq	r4, [r5, #12]
 8002e7c:	89a3      	ldrh	r3, [r4, #12]
 8002e7e:	071b      	lsls	r3, r3, #28
 8002e80:	d501      	bpl.n	8002e86 <_puts_r+0x42>
 8002e82:	6923      	ldr	r3, [r4, #16]
 8002e84:	b93b      	cbnz	r3, 8002e96 <_puts_r+0x52>
 8002e86:	4621      	mov	r1, r4
 8002e88:	4628      	mov	r0, r5
 8002e8a:	f000 f8a1 	bl	8002fd0 <__swsetup_r>
 8002e8e:	b110      	cbz	r0, 8002e96 <_puts_r+0x52>
 8002e90:	f04f 30ff 	mov.w	r0, #4294967295
 8002e94:	bd70      	pop	{r4, r5, r6, pc}
 8002e96:	3e01      	subs	r6, #1
 8002e98:	68a3      	ldr	r3, [r4, #8]
 8002e9a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	60a3      	str	r3, [r4, #8]
 8002ea2:	b191      	cbz	r1, 8002eca <_puts_r+0x86>
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	da04      	bge.n	8002eb2 <_puts_r+0x6e>
 8002ea8:	69a2      	ldr	r2, [r4, #24]
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	db06      	blt.n	8002ebc <_puts_r+0x78>
 8002eae:	290a      	cmp	r1, #10
 8002eb0:	d004      	beq.n	8002ebc <_puts_r+0x78>
 8002eb2:	6823      	ldr	r3, [r4, #0]
 8002eb4:	1c5a      	adds	r2, r3, #1
 8002eb6:	6022      	str	r2, [r4, #0]
 8002eb8:	7019      	strb	r1, [r3, #0]
 8002eba:	e7ed      	b.n	8002e98 <_puts_r+0x54>
 8002ebc:	4622      	mov	r2, r4
 8002ebe:	4628      	mov	r0, r5
 8002ec0:	f000 f832 	bl	8002f28 <__swbuf_r>
 8002ec4:	3001      	adds	r0, #1
 8002ec6:	d1e7      	bne.n	8002e98 <_puts_r+0x54>
 8002ec8:	e7e2      	b.n	8002e90 <_puts_r+0x4c>
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	da08      	bge.n	8002ee0 <_puts_r+0x9c>
 8002ece:	4622      	mov	r2, r4
 8002ed0:	210a      	movs	r1, #10
 8002ed2:	4628      	mov	r0, r5
 8002ed4:	f000 f828 	bl	8002f28 <__swbuf_r>
 8002ed8:	3001      	adds	r0, #1
 8002eda:	d0d9      	beq.n	8002e90 <_puts_r+0x4c>
 8002edc:	200a      	movs	r0, #10
 8002ede:	bd70      	pop	{r4, r5, r6, pc}
 8002ee0:	6823      	ldr	r3, [r4, #0]
 8002ee2:	200a      	movs	r0, #10
 8002ee4:	1c5a      	adds	r2, r3, #1
 8002ee6:	6022      	str	r2, [r4, #0]
 8002ee8:	7018      	strb	r0, [r3, #0]
 8002eea:	bd70      	pop	{r4, r5, r6, pc}
 8002eec:	08003630 	.word	0x08003630
 8002ef0:	08003650 	.word	0x08003650
 8002ef4:	08003670 	.word	0x08003670

08002ef8 <puts>:
 8002ef8:	4b02      	ldr	r3, [pc, #8]	; (8002f04 <puts+0xc>)
 8002efa:	4601      	mov	r1, r0
 8002efc:	6818      	ldr	r0, [r3, #0]
 8002efe:	f7ff bfa1 	b.w	8002e44 <_puts_r>
 8002f02:	bf00      	nop
 8002f04:	20000090 	.word	0x20000090

08002f08 <_sbrk_r>:
 8002f08:	b538      	push	{r3, r4, r5, lr}
 8002f0a:	4c06      	ldr	r4, [pc, #24]	; (8002f24 <_sbrk_r+0x1c>)
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	4605      	mov	r5, r0
 8002f10:	4608      	mov	r0, r1
 8002f12:	6023      	str	r3, [r4, #0]
 8002f14:	f7ff fe22 	bl	8002b5c <_sbrk>
 8002f18:	1c43      	adds	r3, r0, #1
 8002f1a:	d102      	bne.n	8002f22 <_sbrk_r+0x1a>
 8002f1c:	6823      	ldr	r3, [r4, #0]
 8002f1e:	b103      	cbz	r3, 8002f22 <_sbrk_r+0x1a>
 8002f20:	602b      	str	r3, [r5, #0]
 8002f22:	bd38      	pop	{r3, r4, r5, pc}
 8002f24:	20000658 	.word	0x20000658

08002f28 <__swbuf_r>:
 8002f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f2a:	460f      	mov	r7, r1
 8002f2c:	4614      	mov	r4, r2
 8002f2e:	4606      	mov	r6, r0
 8002f30:	b118      	cbz	r0, 8002f3a <__swbuf_r+0x12>
 8002f32:	6983      	ldr	r3, [r0, #24]
 8002f34:	b90b      	cbnz	r3, 8002f3a <__swbuf_r+0x12>
 8002f36:	f000 f9ab 	bl	8003290 <__sinit>
 8002f3a:	4b22      	ldr	r3, [pc, #136]	; (8002fc4 <__swbuf_r+0x9c>)
 8002f3c:	429c      	cmp	r4, r3
 8002f3e:	d101      	bne.n	8002f44 <__swbuf_r+0x1c>
 8002f40:	6874      	ldr	r4, [r6, #4]
 8002f42:	e008      	b.n	8002f56 <__swbuf_r+0x2e>
 8002f44:	4b20      	ldr	r3, [pc, #128]	; (8002fc8 <__swbuf_r+0xa0>)
 8002f46:	429c      	cmp	r4, r3
 8002f48:	d101      	bne.n	8002f4e <__swbuf_r+0x26>
 8002f4a:	68b4      	ldr	r4, [r6, #8]
 8002f4c:	e003      	b.n	8002f56 <__swbuf_r+0x2e>
 8002f4e:	4b1f      	ldr	r3, [pc, #124]	; (8002fcc <__swbuf_r+0xa4>)
 8002f50:	429c      	cmp	r4, r3
 8002f52:	bf08      	it	eq
 8002f54:	68f4      	ldreq	r4, [r6, #12]
 8002f56:	69a3      	ldr	r3, [r4, #24]
 8002f58:	60a3      	str	r3, [r4, #8]
 8002f5a:	89a3      	ldrh	r3, [r4, #12]
 8002f5c:	071a      	lsls	r2, r3, #28
 8002f5e:	d509      	bpl.n	8002f74 <__swbuf_r+0x4c>
 8002f60:	6923      	ldr	r3, [r4, #16]
 8002f62:	b13b      	cbz	r3, 8002f74 <__swbuf_r+0x4c>
 8002f64:	6823      	ldr	r3, [r4, #0]
 8002f66:	6920      	ldr	r0, [r4, #16]
 8002f68:	1a18      	subs	r0, r3, r0
 8002f6a:	6963      	ldr	r3, [r4, #20]
 8002f6c:	4298      	cmp	r0, r3
 8002f6e:	b2fd      	uxtb	r5, r7
 8002f70:	db0f      	blt.n	8002f92 <__swbuf_r+0x6a>
 8002f72:	e008      	b.n	8002f86 <__swbuf_r+0x5e>
 8002f74:	4621      	mov	r1, r4
 8002f76:	4630      	mov	r0, r6
 8002f78:	f000 f82a 	bl	8002fd0 <__swsetup_r>
 8002f7c:	2800      	cmp	r0, #0
 8002f7e:	d0f1      	beq.n	8002f64 <__swbuf_r+0x3c>
 8002f80:	f04f 30ff 	mov.w	r0, #4294967295
 8002f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f86:	4621      	mov	r1, r4
 8002f88:	4630      	mov	r0, r6
 8002f8a:	f000 f917 	bl	80031bc <_fflush_r>
 8002f8e:	2800      	cmp	r0, #0
 8002f90:	d1f6      	bne.n	8002f80 <__swbuf_r+0x58>
 8002f92:	68a3      	ldr	r3, [r4, #8]
 8002f94:	3b01      	subs	r3, #1
 8002f96:	60a3      	str	r3, [r4, #8]
 8002f98:	6823      	ldr	r3, [r4, #0]
 8002f9a:	1c5a      	adds	r2, r3, #1
 8002f9c:	6022      	str	r2, [r4, #0]
 8002f9e:	701f      	strb	r7, [r3, #0]
 8002fa0:	6962      	ldr	r2, [r4, #20]
 8002fa2:	1c43      	adds	r3, r0, #1
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d004      	beq.n	8002fb2 <__swbuf_r+0x8a>
 8002fa8:	89a3      	ldrh	r3, [r4, #12]
 8002faa:	07db      	lsls	r3, r3, #31
 8002fac:	d507      	bpl.n	8002fbe <__swbuf_r+0x96>
 8002fae:	2d0a      	cmp	r5, #10
 8002fb0:	d105      	bne.n	8002fbe <__swbuf_r+0x96>
 8002fb2:	4621      	mov	r1, r4
 8002fb4:	4630      	mov	r0, r6
 8002fb6:	f000 f901 	bl	80031bc <_fflush_r>
 8002fba:	2800      	cmp	r0, #0
 8002fbc:	d1e0      	bne.n	8002f80 <__swbuf_r+0x58>
 8002fbe:	4628      	mov	r0, r5
 8002fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	08003630 	.word	0x08003630
 8002fc8:	08003650 	.word	0x08003650
 8002fcc:	08003670 	.word	0x08003670

08002fd0 <__swsetup_r>:
 8002fd0:	4b32      	ldr	r3, [pc, #200]	; (800309c <__swsetup_r+0xcc>)
 8002fd2:	b570      	push	{r4, r5, r6, lr}
 8002fd4:	681d      	ldr	r5, [r3, #0]
 8002fd6:	4606      	mov	r6, r0
 8002fd8:	460c      	mov	r4, r1
 8002fda:	b125      	cbz	r5, 8002fe6 <__swsetup_r+0x16>
 8002fdc:	69ab      	ldr	r3, [r5, #24]
 8002fde:	b913      	cbnz	r3, 8002fe6 <__swsetup_r+0x16>
 8002fe0:	4628      	mov	r0, r5
 8002fe2:	f000 f955 	bl	8003290 <__sinit>
 8002fe6:	4b2e      	ldr	r3, [pc, #184]	; (80030a0 <__swsetup_r+0xd0>)
 8002fe8:	429c      	cmp	r4, r3
 8002fea:	d101      	bne.n	8002ff0 <__swsetup_r+0x20>
 8002fec:	686c      	ldr	r4, [r5, #4]
 8002fee:	e008      	b.n	8003002 <__swsetup_r+0x32>
 8002ff0:	4b2c      	ldr	r3, [pc, #176]	; (80030a4 <__swsetup_r+0xd4>)
 8002ff2:	429c      	cmp	r4, r3
 8002ff4:	d101      	bne.n	8002ffa <__swsetup_r+0x2a>
 8002ff6:	68ac      	ldr	r4, [r5, #8]
 8002ff8:	e003      	b.n	8003002 <__swsetup_r+0x32>
 8002ffa:	4b2b      	ldr	r3, [pc, #172]	; (80030a8 <__swsetup_r+0xd8>)
 8002ffc:	429c      	cmp	r4, r3
 8002ffe:	bf08      	it	eq
 8003000:	68ec      	ldreq	r4, [r5, #12]
 8003002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003006:	b29a      	uxth	r2, r3
 8003008:	0715      	lsls	r5, r2, #28
 800300a:	d41d      	bmi.n	8003048 <__swsetup_r+0x78>
 800300c:	06d0      	lsls	r0, r2, #27
 800300e:	d402      	bmi.n	8003016 <__swsetup_r+0x46>
 8003010:	2209      	movs	r2, #9
 8003012:	6032      	str	r2, [r6, #0]
 8003014:	e03a      	b.n	800308c <__swsetup_r+0xbc>
 8003016:	0751      	lsls	r1, r2, #29
 8003018:	d512      	bpl.n	8003040 <__swsetup_r+0x70>
 800301a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800301c:	b141      	cbz	r1, 8003030 <__swsetup_r+0x60>
 800301e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003022:	4299      	cmp	r1, r3
 8003024:	d002      	beq.n	800302c <__swsetup_r+0x5c>
 8003026:	4630      	mov	r0, r6
 8003028:	f7ff fe60 	bl	8002cec <_free_r>
 800302c:	2300      	movs	r3, #0
 800302e:	6363      	str	r3, [r4, #52]	; 0x34
 8003030:	89a3      	ldrh	r3, [r4, #12]
 8003032:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003036:	81a3      	strh	r3, [r4, #12]
 8003038:	2300      	movs	r3, #0
 800303a:	6063      	str	r3, [r4, #4]
 800303c:	6923      	ldr	r3, [r4, #16]
 800303e:	6023      	str	r3, [r4, #0]
 8003040:	89a3      	ldrh	r3, [r4, #12]
 8003042:	f043 0308 	orr.w	r3, r3, #8
 8003046:	81a3      	strh	r3, [r4, #12]
 8003048:	6923      	ldr	r3, [r4, #16]
 800304a:	b94b      	cbnz	r3, 8003060 <__swsetup_r+0x90>
 800304c:	89a3      	ldrh	r3, [r4, #12]
 800304e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003056:	d003      	beq.n	8003060 <__swsetup_r+0x90>
 8003058:	4621      	mov	r1, r4
 800305a:	4630      	mov	r0, r6
 800305c:	f000 f9c6 	bl	80033ec <__smakebuf_r>
 8003060:	89a2      	ldrh	r2, [r4, #12]
 8003062:	f012 0301 	ands.w	r3, r2, #1
 8003066:	d005      	beq.n	8003074 <__swsetup_r+0xa4>
 8003068:	2300      	movs	r3, #0
 800306a:	60a3      	str	r3, [r4, #8]
 800306c:	6963      	ldr	r3, [r4, #20]
 800306e:	425b      	negs	r3, r3
 8003070:	61a3      	str	r3, [r4, #24]
 8003072:	e003      	b.n	800307c <__swsetup_r+0xac>
 8003074:	0792      	lsls	r2, r2, #30
 8003076:	bf58      	it	pl
 8003078:	6963      	ldrpl	r3, [r4, #20]
 800307a:	60a3      	str	r3, [r4, #8]
 800307c:	6923      	ldr	r3, [r4, #16]
 800307e:	b95b      	cbnz	r3, 8003098 <__swsetup_r+0xc8>
 8003080:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003084:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8003088:	b280      	uxth	r0, r0
 800308a:	b130      	cbz	r0, 800309a <__swsetup_r+0xca>
 800308c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003090:	81a3      	strh	r3, [r4, #12]
 8003092:	f04f 30ff 	mov.w	r0, #4294967295
 8003096:	bd70      	pop	{r4, r5, r6, pc}
 8003098:	2000      	movs	r0, #0
 800309a:	bd70      	pop	{r4, r5, r6, pc}
 800309c:	20000090 	.word	0x20000090
 80030a0:	08003630 	.word	0x08003630
 80030a4:	08003650 	.word	0x08003650
 80030a8:	08003670 	.word	0x08003670

080030ac <__sflush_r>:
 80030ac:	898a      	ldrh	r2, [r1, #12]
 80030ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030b2:	4605      	mov	r5, r0
 80030b4:	0710      	lsls	r0, r2, #28
 80030b6:	460c      	mov	r4, r1
 80030b8:	d459      	bmi.n	800316e <__sflush_r+0xc2>
 80030ba:	684b      	ldr	r3, [r1, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	dc02      	bgt.n	80030c6 <__sflush_r+0x1a>
 80030c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	dd17      	ble.n	80030f6 <__sflush_r+0x4a>
 80030c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80030c8:	b1ae      	cbz	r6, 80030f6 <__sflush_r+0x4a>
 80030ca:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80030ce:	2300      	movs	r3, #0
 80030d0:	b292      	uxth	r2, r2
 80030d2:	682f      	ldr	r7, [r5, #0]
 80030d4:	602b      	str	r3, [r5, #0]
 80030d6:	b10a      	cbz	r2, 80030dc <__sflush_r+0x30>
 80030d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80030da:	e015      	b.n	8003108 <__sflush_r+0x5c>
 80030dc:	6a21      	ldr	r1, [r4, #32]
 80030de:	2301      	movs	r3, #1
 80030e0:	4628      	mov	r0, r5
 80030e2:	47b0      	blx	r6
 80030e4:	1c41      	adds	r1, r0, #1
 80030e6:	d10f      	bne.n	8003108 <__sflush_r+0x5c>
 80030e8:	682b      	ldr	r3, [r5, #0]
 80030ea:	b16b      	cbz	r3, 8003108 <__sflush_r+0x5c>
 80030ec:	2b1d      	cmp	r3, #29
 80030ee:	d001      	beq.n	80030f4 <__sflush_r+0x48>
 80030f0:	2b16      	cmp	r3, #22
 80030f2:	d103      	bne.n	80030fc <__sflush_r+0x50>
 80030f4:	602f      	str	r7, [r5, #0]
 80030f6:	2000      	movs	r0, #0
 80030f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030fc:	89a3      	ldrh	r3, [r4, #12]
 80030fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003102:	81a3      	strh	r3, [r4, #12]
 8003104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003108:	89a3      	ldrh	r3, [r4, #12]
 800310a:	075a      	lsls	r2, r3, #29
 800310c:	d505      	bpl.n	800311a <__sflush_r+0x6e>
 800310e:	6863      	ldr	r3, [r4, #4]
 8003110:	1ac0      	subs	r0, r0, r3
 8003112:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003114:	b10b      	cbz	r3, 800311a <__sflush_r+0x6e>
 8003116:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003118:	1ac0      	subs	r0, r0, r3
 800311a:	2300      	movs	r3, #0
 800311c:	4602      	mov	r2, r0
 800311e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003120:	6a21      	ldr	r1, [r4, #32]
 8003122:	4628      	mov	r0, r5
 8003124:	47b0      	blx	r6
 8003126:	1c43      	adds	r3, r0, #1
 8003128:	89a3      	ldrh	r3, [r4, #12]
 800312a:	d106      	bne.n	800313a <__sflush_r+0x8e>
 800312c:	6829      	ldr	r1, [r5, #0]
 800312e:	291d      	cmp	r1, #29
 8003130:	d83a      	bhi.n	80031a8 <__sflush_r+0xfc>
 8003132:	4a21      	ldr	r2, [pc, #132]	; (80031b8 <__sflush_r+0x10c>)
 8003134:	40ca      	lsrs	r2, r1
 8003136:	07d6      	lsls	r6, r2, #31
 8003138:	d536      	bpl.n	80031a8 <__sflush_r+0xfc>
 800313a:	2200      	movs	r2, #0
 800313c:	6062      	str	r2, [r4, #4]
 800313e:	04d9      	lsls	r1, r3, #19
 8003140:	6922      	ldr	r2, [r4, #16]
 8003142:	6022      	str	r2, [r4, #0]
 8003144:	d504      	bpl.n	8003150 <__sflush_r+0xa4>
 8003146:	1c42      	adds	r2, r0, #1
 8003148:	d101      	bne.n	800314e <__sflush_r+0xa2>
 800314a:	682b      	ldr	r3, [r5, #0]
 800314c:	b903      	cbnz	r3, 8003150 <__sflush_r+0xa4>
 800314e:	6560      	str	r0, [r4, #84]	; 0x54
 8003150:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003152:	602f      	str	r7, [r5, #0]
 8003154:	2900      	cmp	r1, #0
 8003156:	d0ce      	beq.n	80030f6 <__sflush_r+0x4a>
 8003158:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800315c:	4299      	cmp	r1, r3
 800315e:	d002      	beq.n	8003166 <__sflush_r+0xba>
 8003160:	4628      	mov	r0, r5
 8003162:	f7ff fdc3 	bl	8002cec <_free_r>
 8003166:	2000      	movs	r0, #0
 8003168:	6360      	str	r0, [r4, #52]	; 0x34
 800316a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800316e:	690f      	ldr	r7, [r1, #16]
 8003170:	2f00      	cmp	r7, #0
 8003172:	d0c0      	beq.n	80030f6 <__sflush_r+0x4a>
 8003174:	0793      	lsls	r3, r2, #30
 8003176:	680e      	ldr	r6, [r1, #0]
 8003178:	bf08      	it	eq
 800317a:	694b      	ldreq	r3, [r1, #20]
 800317c:	600f      	str	r7, [r1, #0]
 800317e:	bf18      	it	ne
 8003180:	2300      	movne	r3, #0
 8003182:	ebc7 0806 	rsb	r8, r7, r6
 8003186:	608b      	str	r3, [r1, #8]
 8003188:	e002      	b.n	8003190 <__sflush_r+0xe4>
 800318a:	4407      	add	r7, r0
 800318c:	ebc0 0808 	rsb	r8, r0, r8
 8003190:	f1b8 0f00 	cmp.w	r8, #0
 8003194:	ddaf      	ble.n	80030f6 <__sflush_r+0x4a>
 8003196:	4643      	mov	r3, r8
 8003198:	463a      	mov	r2, r7
 800319a:	6a21      	ldr	r1, [r4, #32]
 800319c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800319e:	4628      	mov	r0, r5
 80031a0:	47b0      	blx	r6
 80031a2:	2800      	cmp	r0, #0
 80031a4:	dcf1      	bgt.n	800318a <__sflush_r+0xde>
 80031a6:	89a3      	ldrh	r3, [r4, #12]
 80031a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031ac:	81a3      	strh	r3, [r4, #12]
 80031ae:	f04f 30ff 	mov.w	r0, #4294967295
 80031b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031b6:	bf00      	nop
 80031b8:	20400001 	.word	0x20400001

080031bc <_fflush_r>:
 80031bc:	b538      	push	{r3, r4, r5, lr}
 80031be:	690b      	ldr	r3, [r1, #16]
 80031c0:	4605      	mov	r5, r0
 80031c2:	460c      	mov	r4, r1
 80031c4:	b1db      	cbz	r3, 80031fe <_fflush_r+0x42>
 80031c6:	b118      	cbz	r0, 80031d0 <_fflush_r+0x14>
 80031c8:	6983      	ldr	r3, [r0, #24]
 80031ca:	b90b      	cbnz	r3, 80031d0 <_fflush_r+0x14>
 80031cc:	f000 f860 	bl	8003290 <__sinit>
 80031d0:	4b0c      	ldr	r3, [pc, #48]	; (8003204 <_fflush_r+0x48>)
 80031d2:	429c      	cmp	r4, r3
 80031d4:	d101      	bne.n	80031da <_fflush_r+0x1e>
 80031d6:	686c      	ldr	r4, [r5, #4]
 80031d8:	e008      	b.n	80031ec <_fflush_r+0x30>
 80031da:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <_fflush_r+0x4c>)
 80031dc:	429c      	cmp	r4, r3
 80031de:	d101      	bne.n	80031e4 <_fflush_r+0x28>
 80031e0:	68ac      	ldr	r4, [r5, #8]
 80031e2:	e003      	b.n	80031ec <_fflush_r+0x30>
 80031e4:	4b09      	ldr	r3, [pc, #36]	; (800320c <_fflush_r+0x50>)
 80031e6:	429c      	cmp	r4, r3
 80031e8:	bf08      	it	eq
 80031ea:	68ec      	ldreq	r4, [r5, #12]
 80031ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031f0:	b12b      	cbz	r3, 80031fe <_fflush_r+0x42>
 80031f2:	4621      	mov	r1, r4
 80031f4:	4628      	mov	r0, r5
 80031f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031fa:	f7ff bf57 	b.w	80030ac <__sflush_r>
 80031fe:	2000      	movs	r0, #0
 8003200:	bd38      	pop	{r3, r4, r5, pc}
 8003202:	bf00      	nop
 8003204:	08003630 	.word	0x08003630
 8003208:	08003650 	.word	0x08003650
 800320c:	08003670 	.word	0x08003670

08003210 <_cleanup_r>:
 8003210:	4901      	ldr	r1, [pc, #4]	; (8003218 <_cleanup_r+0x8>)
 8003212:	f000 b8a9 	b.w	8003368 <_fwalk_reent>
 8003216:	bf00      	nop
 8003218:	080031bd 	.word	0x080031bd

0800321c <std.isra.0>:
 800321c:	2300      	movs	r3, #0
 800321e:	b510      	push	{r4, lr}
 8003220:	4604      	mov	r4, r0
 8003222:	6003      	str	r3, [r0, #0]
 8003224:	6043      	str	r3, [r0, #4]
 8003226:	6083      	str	r3, [r0, #8]
 8003228:	8181      	strh	r1, [r0, #12]
 800322a:	6643      	str	r3, [r0, #100]	; 0x64
 800322c:	81c2      	strh	r2, [r0, #14]
 800322e:	6103      	str	r3, [r0, #16]
 8003230:	6143      	str	r3, [r0, #20]
 8003232:	6183      	str	r3, [r0, #24]
 8003234:	4619      	mov	r1, r3
 8003236:	2208      	movs	r2, #8
 8003238:	305c      	adds	r0, #92	; 0x5c
 800323a:	f7ff fd4f 	bl	8002cdc <memset>
 800323e:	4b05      	ldr	r3, [pc, #20]	; (8003254 <std.isra.0+0x38>)
 8003240:	6263      	str	r3, [r4, #36]	; 0x24
 8003242:	4b05      	ldr	r3, [pc, #20]	; (8003258 <std.isra.0+0x3c>)
 8003244:	62a3      	str	r3, [r4, #40]	; 0x28
 8003246:	4b05      	ldr	r3, [pc, #20]	; (800325c <std.isra.0+0x40>)
 8003248:	62e3      	str	r3, [r4, #44]	; 0x2c
 800324a:	4b05      	ldr	r3, [pc, #20]	; (8003260 <std.isra.0+0x44>)
 800324c:	6224      	str	r4, [r4, #32]
 800324e:	6323      	str	r3, [r4, #48]	; 0x30
 8003250:	bd10      	pop	{r4, pc}
 8003252:	bf00      	nop
 8003254:	08003469 	.word	0x08003469
 8003258:	0800348b 	.word	0x0800348b
 800325c:	080034c3 	.word	0x080034c3
 8003260:	080034e7 	.word	0x080034e7

08003264 <__sfmoreglue>:
 8003264:	b570      	push	{r4, r5, r6, lr}
 8003266:	2368      	movs	r3, #104	; 0x68
 8003268:	1e4d      	subs	r5, r1, #1
 800326a:	435d      	muls	r5, r3
 800326c:	460e      	mov	r6, r1
 800326e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003272:	f7ff fd89 	bl	8002d88 <_malloc_r>
 8003276:	4604      	mov	r4, r0
 8003278:	b140      	cbz	r0, 800328c <__sfmoreglue+0x28>
 800327a:	2100      	movs	r1, #0
 800327c:	e880 0042 	stmia.w	r0, {r1, r6}
 8003280:	300c      	adds	r0, #12
 8003282:	60a0      	str	r0, [r4, #8]
 8003284:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003288:	f7ff fd28 	bl	8002cdc <memset>
 800328c:	4620      	mov	r0, r4
 800328e:	bd70      	pop	{r4, r5, r6, pc}

08003290 <__sinit>:
 8003290:	6983      	ldr	r3, [r0, #24]
 8003292:	b510      	push	{r4, lr}
 8003294:	4604      	mov	r4, r0
 8003296:	bb33      	cbnz	r3, 80032e6 <__sinit+0x56>
 8003298:	6483      	str	r3, [r0, #72]	; 0x48
 800329a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800329c:	6503      	str	r3, [r0, #80]	; 0x50
 800329e:	4b12      	ldr	r3, [pc, #72]	; (80032e8 <__sinit+0x58>)
 80032a0:	4a12      	ldr	r2, [pc, #72]	; (80032ec <__sinit+0x5c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6282      	str	r2, [r0, #40]	; 0x28
 80032a6:	4298      	cmp	r0, r3
 80032a8:	bf04      	itt	eq
 80032aa:	2301      	moveq	r3, #1
 80032ac:	6183      	streq	r3, [r0, #24]
 80032ae:	f000 f81f 	bl	80032f0 <__sfp>
 80032b2:	6060      	str	r0, [r4, #4]
 80032b4:	4620      	mov	r0, r4
 80032b6:	f000 f81b 	bl	80032f0 <__sfp>
 80032ba:	60a0      	str	r0, [r4, #8]
 80032bc:	4620      	mov	r0, r4
 80032be:	f000 f817 	bl	80032f0 <__sfp>
 80032c2:	2200      	movs	r2, #0
 80032c4:	60e0      	str	r0, [r4, #12]
 80032c6:	2104      	movs	r1, #4
 80032c8:	6860      	ldr	r0, [r4, #4]
 80032ca:	f7ff ffa7 	bl	800321c <std.isra.0>
 80032ce:	2201      	movs	r2, #1
 80032d0:	2109      	movs	r1, #9
 80032d2:	68a0      	ldr	r0, [r4, #8]
 80032d4:	f7ff ffa2 	bl	800321c <std.isra.0>
 80032d8:	2202      	movs	r2, #2
 80032da:	2112      	movs	r1, #18
 80032dc:	68e0      	ldr	r0, [r4, #12]
 80032de:	f7ff ff9d 	bl	800321c <std.isra.0>
 80032e2:	2301      	movs	r3, #1
 80032e4:	61a3      	str	r3, [r4, #24]
 80032e6:	bd10      	pop	{r4, pc}
 80032e8:	0800362c 	.word	0x0800362c
 80032ec:	08003211 	.word	0x08003211

080032f0 <__sfp>:
 80032f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032f2:	4b1c      	ldr	r3, [pc, #112]	; (8003364 <__sfp+0x74>)
 80032f4:	681e      	ldr	r6, [r3, #0]
 80032f6:	69b3      	ldr	r3, [r6, #24]
 80032f8:	4607      	mov	r7, r0
 80032fa:	b913      	cbnz	r3, 8003302 <__sfp+0x12>
 80032fc:	4630      	mov	r0, r6
 80032fe:	f7ff ffc7 	bl	8003290 <__sinit>
 8003302:	3648      	adds	r6, #72	; 0x48
 8003304:	68b4      	ldr	r4, [r6, #8]
 8003306:	6873      	ldr	r3, [r6, #4]
 8003308:	3b01      	subs	r3, #1
 800330a:	d404      	bmi.n	8003316 <__sfp+0x26>
 800330c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003310:	b17d      	cbz	r5, 8003332 <__sfp+0x42>
 8003312:	3468      	adds	r4, #104	; 0x68
 8003314:	e7f8      	b.n	8003308 <__sfp+0x18>
 8003316:	6833      	ldr	r3, [r6, #0]
 8003318:	b10b      	cbz	r3, 800331e <__sfp+0x2e>
 800331a:	6836      	ldr	r6, [r6, #0]
 800331c:	e7f2      	b.n	8003304 <__sfp+0x14>
 800331e:	2104      	movs	r1, #4
 8003320:	4638      	mov	r0, r7
 8003322:	f7ff ff9f 	bl	8003264 <__sfmoreglue>
 8003326:	6030      	str	r0, [r6, #0]
 8003328:	2800      	cmp	r0, #0
 800332a:	d1f6      	bne.n	800331a <__sfp+0x2a>
 800332c:	230c      	movs	r3, #12
 800332e:	603b      	str	r3, [r7, #0]
 8003330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003332:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003336:	81e3      	strh	r3, [r4, #14]
 8003338:	2301      	movs	r3, #1
 800333a:	81a3      	strh	r3, [r4, #12]
 800333c:	6665      	str	r5, [r4, #100]	; 0x64
 800333e:	6025      	str	r5, [r4, #0]
 8003340:	60a5      	str	r5, [r4, #8]
 8003342:	6065      	str	r5, [r4, #4]
 8003344:	6125      	str	r5, [r4, #16]
 8003346:	6165      	str	r5, [r4, #20]
 8003348:	61a5      	str	r5, [r4, #24]
 800334a:	2208      	movs	r2, #8
 800334c:	4629      	mov	r1, r5
 800334e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003352:	f7ff fcc3 	bl	8002cdc <memset>
 8003356:	6365      	str	r5, [r4, #52]	; 0x34
 8003358:	63a5      	str	r5, [r4, #56]	; 0x38
 800335a:	64a5      	str	r5, [r4, #72]	; 0x48
 800335c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800335e:	4620      	mov	r0, r4
 8003360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003362:	bf00      	nop
 8003364:	0800362c 	.word	0x0800362c

08003368 <_fwalk_reent>:
 8003368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800336c:	4680      	mov	r8, r0
 800336e:	4689      	mov	r9, r1
 8003370:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003374:	2600      	movs	r6, #0
 8003376:	b194      	cbz	r4, 800339e <_fwalk_reent+0x36>
 8003378:	68a5      	ldr	r5, [r4, #8]
 800337a:	6867      	ldr	r7, [r4, #4]
 800337c:	3f01      	subs	r7, #1
 800337e:	d40c      	bmi.n	800339a <_fwalk_reent+0x32>
 8003380:	89ab      	ldrh	r3, [r5, #12]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d907      	bls.n	8003396 <_fwalk_reent+0x2e>
 8003386:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800338a:	3301      	adds	r3, #1
 800338c:	d003      	beq.n	8003396 <_fwalk_reent+0x2e>
 800338e:	4629      	mov	r1, r5
 8003390:	4640      	mov	r0, r8
 8003392:	47c8      	blx	r9
 8003394:	4306      	orrs	r6, r0
 8003396:	3568      	adds	r5, #104	; 0x68
 8003398:	e7f0      	b.n	800337c <_fwalk_reent+0x14>
 800339a:	6824      	ldr	r4, [r4, #0]
 800339c:	e7eb      	b.n	8003376 <_fwalk_reent+0xe>
 800339e:	4630      	mov	r0, r6
 80033a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080033a4 <__swhatbuf_r>:
 80033a4:	b570      	push	{r4, r5, r6, lr}
 80033a6:	460e      	mov	r6, r1
 80033a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033ac:	2900      	cmp	r1, #0
 80033ae:	b090      	sub	sp, #64	; 0x40
 80033b0:	4614      	mov	r4, r2
 80033b2:	461d      	mov	r5, r3
 80033b4:	da06      	bge.n	80033c4 <__swhatbuf_r+0x20>
 80033b6:	2300      	movs	r3, #0
 80033b8:	602b      	str	r3, [r5, #0]
 80033ba:	89b3      	ldrh	r3, [r6, #12]
 80033bc:	061a      	lsls	r2, r3, #24
 80033be:	d50e      	bpl.n	80033de <__swhatbuf_r+0x3a>
 80033c0:	2340      	movs	r3, #64	; 0x40
 80033c2:	e00e      	b.n	80033e2 <__swhatbuf_r+0x3e>
 80033c4:	aa01      	add	r2, sp, #4
 80033c6:	f000 f8b5 	bl	8003534 <_fstat_r>
 80033ca:	2800      	cmp	r0, #0
 80033cc:	dbf3      	blt.n	80033b6 <__swhatbuf_r+0x12>
 80033ce:	9a02      	ldr	r2, [sp, #8]
 80033d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80033d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80033d8:	425a      	negs	r2, r3
 80033da:	415a      	adcs	r2, r3
 80033dc:	602a      	str	r2, [r5, #0]
 80033de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033e2:	2000      	movs	r0, #0
 80033e4:	6023      	str	r3, [r4, #0]
 80033e6:	b010      	add	sp, #64	; 0x40
 80033e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080033ec <__smakebuf_r>:
 80033ec:	898b      	ldrh	r3, [r1, #12]
 80033ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80033f0:	079e      	lsls	r6, r3, #30
 80033f2:	4605      	mov	r5, r0
 80033f4:	460c      	mov	r4, r1
 80033f6:	d410      	bmi.n	800341a <__smakebuf_r+0x2e>
 80033f8:	ab01      	add	r3, sp, #4
 80033fa:	466a      	mov	r2, sp
 80033fc:	f7ff ffd2 	bl	80033a4 <__swhatbuf_r>
 8003400:	9900      	ldr	r1, [sp, #0]
 8003402:	4606      	mov	r6, r0
 8003404:	4628      	mov	r0, r5
 8003406:	f7ff fcbf 	bl	8002d88 <_malloc_r>
 800340a:	b968      	cbnz	r0, 8003428 <__smakebuf_r+0x3c>
 800340c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003410:	059a      	lsls	r2, r3, #22
 8003412:	d422      	bmi.n	800345a <__smakebuf_r+0x6e>
 8003414:	f043 0302 	orr.w	r3, r3, #2
 8003418:	81a3      	strh	r3, [r4, #12]
 800341a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800341e:	6023      	str	r3, [r4, #0]
 8003420:	6123      	str	r3, [r4, #16]
 8003422:	2301      	movs	r3, #1
 8003424:	6163      	str	r3, [r4, #20]
 8003426:	e018      	b.n	800345a <__smakebuf_r+0x6e>
 8003428:	4b0d      	ldr	r3, [pc, #52]	; (8003460 <__smakebuf_r+0x74>)
 800342a:	62ab      	str	r3, [r5, #40]	; 0x28
 800342c:	89a3      	ldrh	r3, [r4, #12]
 800342e:	6020      	str	r0, [r4, #0]
 8003430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003434:	81a3      	strh	r3, [r4, #12]
 8003436:	9b00      	ldr	r3, [sp, #0]
 8003438:	6163      	str	r3, [r4, #20]
 800343a:	9b01      	ldr	r3, [sp, #4]
 800343c:	6120      	str	r0, [r4, #16]
 800343e:	b14b      	cbz	r3, 8003454 <__smakebuf_r+0x68>
 8003440:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003444:	4628      	mov	r0, r5
 8003446:	f000 f887 	bl	8003558 <_isatty_r>
 800344a:	b118      	cbz	r0, 8003454 <__smakebuf_r+0x68>
 800344c:	89a3      	ldrh	r3, [r4, #12]
 800344e:	f043 0301 	orr.w	r3, r3, #1
 8003452:	81a3      	strh	r3, [r4, #12]
 8003454:	89a0      	ldrh	r0, [r4, #12]
 8003456:	4330      	orrs	r0, r6
 8003458:	81a0      	strh	r0, [r4, #12]
 800345a:	b002      	add	sp, #8
 800345c:	bd70      	pop	{r4, r5, r6, pc}
 800345e:	bf00      	nop
 8003460:	08003211 	.word	0x08003211

08003464 <__malloc_lock>:
 8003464:	4770      	bx	lr

08003466 <__malloc_unlock>:
 8003466:	4770      	bx	lr

08003468 <__sread>:
 8003468:	b510      	push	{r4, lr}
 800346a:	460c      	mov	r4, r1
 800346c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003470:	f000 f894 	bl	800359c <_read_r>
 8003474:	2800      	cmp	r0, #0
 8003476:	bfab      	itete	ge
 8003478:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800347a:	89a3      	ldrhlt	r3, [r4, #12]
 800347c:	181b      	addge	r3, r3, r0
 800347e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003482:	bfac      	ite	ge
 8003484:	6563      	strge	r3, [r4, #84]	; 0x54
 8003486:	81a3      	strhlt	r3, [r4, #12]
 8003488:	bd10      	pop	{r4, pc}

0800348a <__swrite>:
 800348a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800348e:	461f      	mov	r7, r3
 8003490:	898b      	ldrh	r3, [r1, #12]
 8003492:	05db      	lsls	r3, r3, #23
 8003494:	4605      	mov	r5, r0
 8003496:	460c      	mov	r4, r1
 8003498:	4616      	mov	r6, r2
 800349a:	d505      	bpl.n	80034a8 <__swrite+0x1e>
 800349c:	2302      	movs	r3, #2
 800349e:	2200      	movs	r2, #0
 80034a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034a4:	f000 f868 	bl	8003578 <_lseek_r>
 80034a8:	89a3      	ldrh	r3, [r4, #12]
 80034aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034b2:	81a3      	strh	r3, [r4, #12]
 80034b4:	4632      	mov	r2, r6
 80034b6:	463b      	mov	r3, r7
 80034b8:	4628      	mov	r0, r5
 80034ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034be:	f000 b817 	b.w	80034f0 <_write_r>

080034c2 <__sseek>:
 80034c2:	b510      	push	{r4, lr}
 80034c4:	460c      	mov	r4, r1
 80034c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034ca:	f000 f855 	bl	8003578 <_lseek_r>
 80034ce:	1c43      	adds	r3, r0, #1
 80034d0:	89a3      	ldrh	r3, [r4, #12]
 80034d2:	bf15      	itete	ne
 80034d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80034d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80034da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80034de:	81a3      	strheq	r3, [r4, #12]
 80034e0:	bf18      	it	ne
 80034e2:	81a3      	strhne	r3, [r4, #12]
 80034e4:	bd10      	pop	{r4, pc}

080034e6 <__sclose>:
 80034e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034ea:	f000 b813 	b.w	8003514 <_close_r>
	...

080034f0 <_write_r>:
 80034f0:	b538      	push	{r3, r4, r5, lr}
 80034f2:	4c07      	ldr	r4, [pc, #28]	; (8003510 <_write_r+0x20>)
 80034f4:	4605      	mov	r5, r0
 80034f6:	4608      	mov	r0, r1
 80034f8:	4611      	mov	r1, r2
 80034fa:	2200      	movs	r2, #0
 80034fc:	6022      	str	r2, [r4, #0]
 80034fe:	461a      	mov	r2, r3
 8003500:	f7ff fb0a 	bl	8002b18 <_write>
 8003504:	1c43      	adds	r3, r0, #1
 8003506:	d102      	bne.n	800350e <_write_r+0x1e>
 8003508:	6823      	ldr	r3, [r4, #0]
 800350a:	b103      	cbz	r3, 800350e <_write_r+0x1e>
 800350c:	602b      	str	r3, [r5, #0]
 800350e:	bd38      	pop	{r3, r4, r5, pc}
 8003510:	20000658 	.word	0x20000658

08003514 <_close_r>:
 8003514:	b538      	push	{r3, r4, r5, lr}
 8003516:	4c06      	ldr	r4, [pc, #24]	; (8003530 <_close_r+0x1c>)
 8003518:	2300      	movs	r3, #0
 800351a:	4605      	mov	r5, r0
 800351c:	4608      	mov	r0, r1
 800351e:	6023      	str	r3, [r4, #0]
 8003520:	f7ff fb3c 	bl	8002b9c <_close>
 8003524:	1c43      	adds	r3, r0, #1
 8003526:	d102      	bne.n	800352e <_close_r+0x1a>
 8003528:	6823      	ldr	r3, [r4, #0]
 800352a:	b103      	cbz	r3, 800352e <_close_r+0x1a>
 800352c:	602b      	str	r3, [r5, #0]
 800352e:	bd38      	pop	{r3, r4, r5, pc}
 8003530:	20000658 	.word	0x20000658

08003534 <_fstat_r>:
 8003534:	b538      	push	{r3, r4, r5, lr}
 8003536:	4c07      	ldr	r4, [pc, #28]	; (8003554 <_fstat_r+0x20>)
 8003538:	2300      	movs	r3, #0
 800353a:	4605      	mov	r5, r0
 800353c:	4608      	mov	r0, r1
 800353e:	4611      	mov	r1, r2
 8003540:	6023      	str	r3, [r4, #0]
 8003542:	f7ff fb3d 	bl	8002bc0 <_fstat>
 8003546:	1c43      	adds	r3, r0, #1
 8003548:	d102      	bne.n	8003550 <_fstat_r+0x1c>
 800354a:	6823      	ldr	r3, [r4, #0]
 800354c:	b103      	cbz	r3, 8003550 <_fstat_r+0x1c>
 800354e:	602b      	str	r3, [r5, #0]
 8003550:	bd38      	pop	{r3, r4, r5, pc}
 8003552:	bf00      	nop
 8003554:	20000658 	.word	0x20000658

08003558 <_isatty_r>:
 8003558:	b538      	push	{r3, r4, r5, lr}
 800355a:	4c06      	ldr	r4, [pc, #24]	; (8003574 <_isatty_r+0x1c>)
 800355c:	2300      	movs	r3, #0
 800355e:	4605      	mov	r5, r0
 8003560:	4608      	mov	r0, r1
 8003562:	6023      	str	r3, [r4, #0]
 8003564:	f7ff fb3e 	bl	8002be4 <_isatty>
 8003568:	1c43      	adds	r3, r0, #1
 800356a:	d102      	bne.n	8003572 <_isatty_r+0x1a>
 800356c:	6823      	ldr	r3, [r4, #0]
 800356e:	b103      	cbz	r3, 8003572 <_isatty_r+0x1a>
 8003570:	602b      	str	r3, [r5, #0]
 8003572:	bd38      	pop	{r3, r4, r5, pc}
 8003574:	20000658 	.word	0x20000658

08003578 <_lseek_r>:
 8003578:	b538      	push	{r3, r4, r5, lr}
 800357a:	4c07      	ldr	r4, [pc, #28]	; (8003598 <_lseek_r+0x20>)
 800357c:	4605      	mov	r5, r0
 800357e:	4608      	mov	r0, r1
 8003580:	4611      	mov	r1, r2
 8003582:	2200      	movs	r2, #0
 8003584:	6022      	str	r2, [r4, #0]
 8003586:	461a      	mov	r2, r3
 8003588:	f7ff fb3c 	bl	8002c04 <_lseek>
 800358c:	1c43      	adds	r3, r0, #1
 800358e:	d102      	bne.n	8003596 <_lseek_r+0x1e>
 8003590:	6823      	ldr	r3, [r4, #0]
 8003592:	b103      	cbz	r3, 8003596 <_lseek_r+0x1e>
 8003594:	602b      	str	r3, [r5, #0]
 8003596:	bd38      	pop	{r3, r4, r5, pc}
 8003598:	20000658 	.word	0x20000658

0800359c <_read_r>:
 800359c:	b538      	push	{r3, r4, r5, lr}
 800359e:	4c07      	ldr	r4, [pc, #28]	; (80035bc <_read_r+0x20>)
 80035a0:	4605      	mov	r5, r0
 80035a2:	4608      	mov	r0, r1
 80035a4:	4611      	mov	r1, r2
 80035a6:	2200      	movs	r2, #0
 80035a8:	6022      	str	r2, [r4, #0]
 80035aa:	461a      	mov	r2, r3
 80035ac:	f7ff fb3e 	bl	8002c2c <_read>
 80035b0:	1c43      	adds	r3, r0, #1
 80035b2:	d102      	bne.n	80035ba <_read_r+0x1e>
 80035b4:	6823      	ldr	r3, [r4, #0]
 80035b6:	b103      	cbz	r3, 80035ba <_read_r+0x1e>
 80035b8:	602b      	str	r3, [r5, #0]
 80035ba:	bd38      	pop	{r3, r4, r5, pc}
 80035bc:	20000658 	.word	0x20000658

080035c0 <_init>:
 80035c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035c2:	bf00      	nop
 80035c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035c6:	bc08      	pop	{r3}
 80035c8:	469e      	mov	lr, r3
 80035ca:	4770      	bx	lr

080035cc <_fini>:
 80035cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ce:	bf00      	nop
 80035d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035d2:	bc08      	pop	{r3}
 80035d4:	469e      	mov	lr, r3
 80035d6:	4770      	bx	lr
