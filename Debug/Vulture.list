
C:\Users\emon1\Atollic\TrueSTUDIO\ARM_workspace_7.1.2\Vulture\Debug\Vulture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ed8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  080060a8  080060a8  000160a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  08006214  08006214  00016214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800621c  0800621c  0001621c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000098  20000000  08006220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002b94  20000098  080062b8  00020098  2**3
                  ALLOC
  7 ._user_heap_stack 00000604  20002c2c  080062b8  00022c2c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001227f  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002be4  00000000  00000000  00032347  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001218  00000000  00000000  00034f30  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000010c0  00000000  00000000  00036148  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00008b3b  00000000  00000000  00037208  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00007768  00000000  00000000  0003fd43  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  000474ab  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00005284  00000000  00000000  0004752c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000098 	.word	0x20000098
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006090 	.word	0x08006090

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000009c 	.word	0x2000009c
 800020c:	08006090 	.word	0x08006090

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <vApplicationStackOverflowHook>:

/**
  Dummy implementation of the callback function vApplicationStackOverflowHook().
*/
#if (configCHECK_FOR_STACK_OVERFLOW > 0)
__WEAK void vApplicationStackOverflowHook (TaskHandle_t xTask, signed char *pcTaskName) {
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
  (void)xTask;
  (void)pcTaskName;
}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop

080002d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
 80002de:	60f8      	str	r0, [r7, #12]
 80002e0:	60b9      	str	r1, [r7, #8]
 80002e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	4a07      	ldr	r2, [pc, #28]	; (8000304 <vApplicationGetIdleTaskMemory+0x2c>)
 80002e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	4a06      	ldr	r2, [pc, #24]	; (8000308 <vApplicationGetIdleTaskMemory+0x30>)
 80002ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	2280      	movs	r2, #128	; 0x80
 80002f4:	601a      	str	r2, [r3, #0]
}
 80002f6:	bf00      	nop
 80002f8:	3714      	adds	r7, #20
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	200000b4 	.word	0x200000b4
 8000308:	20000110 	.word	0x20000110

0800030c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
 8000312:	60f8      	str	r0, [r7, #12]
 8000314:	60b9      	str	r1, [r7, #8]
 8000316:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	4a07      	ldr	r2, [pc, #28]	; (8000338 <vApplicationGetTimerTaskMemory+0x2c>)
 800031c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800031e:	68bb      	ldr	r3, [r7, #8]
 8000320:	4a06      	ldr	r2, [pc, #24]	; (800033c <vApplicationGetTimerTaskMemory+0x30>)
 8000322:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	2250      	movs	r2, #80	; 0x50
 8000328:	601a      	str	r2, [r3, #0]
}
 800032a:	bf00      	nop
 800032c:	3714      	adds	r7, #20
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	20000310 	.word	0x20000310
 800033c:	2000036c 	.word	0x2000036c

08000340 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000340:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000378 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000344:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000346:	e003      	b.n	8000350 <LoopCopyDataInit>

08000348 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000348:	4b0c      	ldr	r3, [pc, #48]	; (800037c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800034a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800034c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800034e:	3104      	adds	r1, #4

08000350 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000350:	480b      	ldr	r0, [pc, #44]	; (8000380 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000352:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000354:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000356:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000358:	d3f6      	bcc.n	8000348 <CopyDataInit>
  ldr  r2, =_sbss
 800035a:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800035c:	e002      	b.n	8000364 <LoopFillZerobss>

0800035e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800035e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000360:	f842 3b04 	str.w	r3, [r2], #4

08000364 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000364:	4b09      	ldr	r3, [pc, #36]	; (800038c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000366:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000368:	d3f9      	bcc.n	800035e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800036a:	f001 f891 	bl	8001490 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800036e:	f004 fee9 	bl	8005144 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000372:	f004 fdc7 	bl	8004f04 <main>
  bx  lr    
 8000376:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000378:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 800037c:	08006220 	.word	0x08006220
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000380:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000384:	20000098 	.word	0x20000098
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000388:	20000098 	.word	0x20000098
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800038c:	20002c2c 	.word	0x20002c2c

08000390 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000390:	e7fe      	b.n	8000390 <ADC_IRQHandler>
	...

08000394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  return uwTick;
 8000398:	4b03      	ldr	r3, [pc, #12]	; (80003a8 <HAL_GetTick+0x14>)
 800039a:	681b      	ldr	r3, [r3, #0]
}
 800039c:	4618      	mov	r0, r3
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	20002c24 	.word	0x20002c24

080003ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b089      	sub	sp, #36	; 0x24
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
 80003b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80003b6:	2300      	movs	r3, #0
 80003b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80003ba:	2300      	movs	r3, #0
 80003bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80003be:	2300      	movs	r3, #0
 80003c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80003c2:	2300      	movs	r3, #0
 80003c4:	61fb      	str	r3, [r7, #28]
 80003c6:	e165      	b.n	8000694 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 80003c8:	2201      	movs	r2, #1
 80003ca:	69fb      	ldr	r3, [r7, #28]
 80003cc:	fa02 f303 	lsl.w	r3, r2, r3
 80003d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003d2:	683b      	ldr	r3, [r7, #0]
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	697b      	ldr	r3, [r7, #20]
 80003d8:	4013      	ands	r3, r2
 80003da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80003dc:	693a      	ldr	r2, [r7, #16]
 80003de:	697b      	ldr	r3, [r7, #20]
 80003e0:	429a      	cmp	r2, r3
 80003e2:	f040 8154 	bne.w	800068e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	685b      	ldr	r3, [r3, #4]
 80003ea:	2b02      	cmp	r3, #2
 80003ec:	d003      	beq.n	80003f6 <HAL_GPIO_Init+0x4a>
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	685b      	ldr	r3, [r3, #4]
 80003f2:	2b12      	cmp	r3, #18
 80003f4:	d123      	bne.n	800043e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80003f6:	69fb      	ldr	r3, [r7, #28]
 80003f8:	08da      	lsrs	r2, r3, #3
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	3208      	adds	r2, #8
 80003fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000404:	69fb      	ldr	r3, [r7, #28]
 8000406:	f003 0307 	and.w	r3, r3, #7
 800040a:	009b      	lsls	r3, r3, #2
 800040c:	220f      	movs	r2, #15
 800040e:	fa02 f303 	lsl.w	r3, r2, r3
 8000412:	43db      	mvns	r3, r3
 8000414:	69ba      	ldr	r2, [r7, #24]
 8000416:	4013      	ands	r3, r2
 8000418:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800041a:	683b      	ldr	r3, [r7, #0]
 800041c:	691a      	ldr	r2, [r3, #16]
 800041e:	69fb      	ldr	r3, [r7, #28]
 8000420:	f003 0307 	and.w	r3, r3, #7
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	fa02 f303 	lsl.w	r3, r2, r3
 800042a:	69ba      	ldr	r2, [r7, #24]
 800042c:	4313      	orrs	r3, r2
 800042e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000430:	69fb      	ldr	r3, [r7, #28]
 8000432:	08da      	lsrs	r2, r3, #3
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	3208      	adds	r2, #8
 8000438:	69b9      	ldr	r1, [r7, #24]
 800043a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000444:	69fb      	ldr	r3, [r7, #28]
 8000446:	005b      	lsls	r3, r3, #1
 8000448:	2203      	movs	r2, #3
 800044a:	fa02 f303 	lsl.w	r3, r2, r3
 800044e:	43db      	mvns	r3, r3
 8000450:	69ba      	ldr	r2, [r7, #24]
 8000452:	4013      	ands	r3, r2
 8000454:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	685b      	ldr	r3, [r3, #4]
 800045a:	f003 0203 	and.w	r2, r3, #3
 800045e:	69fb      	ldr	r3, [r7, #28]
 8000460:	005b      	lsls	r3, r3, #1
 8000462:	fa02 f303 	lsl.w	r3, r2, r3
 8000466:	69ba      	ldr	r2, [r7, #24]
 8000468:	4313      	orrs	r3, r2
 800046a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	69ba      	ldr	r2, [r7, #24]
 8000470:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	685b      	ldr	r3, [r3, #4]
 8000476:	2b01      	cmp	r3, #1
 8000478:	d00b      	beq.n	8000492 <HAL_GPIO_Init+0xe6>
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	685b      	ldr	r3, [r3, #4]
 800047e:	2b02      	cmp	r3, #2
 8000480:	d007      	beq.n	8000492 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	685b      	ldr	r3, [r3, #4]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000486:	2b11      	cmp	r3, #17
 8000488:	d003      	beq.n	8000492 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	685b      	ldr	r3, [r3, #4]
 800048e:	2b12      	cmp	r3, #18
 8000490:	d130      	bne.n	80004f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	689b      	ldr	r3, [r3, #8]
 8000496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000498:	69fb      	ldr	r3, [r7, #28]
 800049a:	005b      	lsls	r3, r3, #1
 800049c:	2203      	movs	r2, #3
 800049e:	fa02 f303 	lsl.w	r3, r2, r3
 80004a2:	43db      	mvns	r3, r3
 80004a4:	69ba      	ldr	r2, [r7, #24]
 80004a6:	4013      	ands	r3, r2
 80004a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	68da      	ldr	r2, [r3, #12]
 80004ae:	69fb      	ldr	r3, [r7, #28]
 80004b0:	005b      	lsls	r3, r3, #1
 80004b2:	fa02 f303 	lsl.w	r3, r2, r3
 80004b6:	69ba      	ldr	r2, [r7, #24]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	69ba      	ldr	r2, [r7, #24]
 80004c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	685b      	ldr	r3, [r3, #4]
 80004c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80004c8:	2201      	movs	r2, #1
 80004ca:	69fb      	ldr	r3, [r7, #28]
 80004cc:	fa02 f303 	lsl.w	r3, r2, r3
 80004d0:	43db      	mvns	r3, r3
 80004d2:	69ba      	ldr	r2, [r7, #24]
 80004d4:	4013      	ands	r3, r2
 80004d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	091b      	lsrs	r3, r3, #4
 80004de:	f003 0201 	and.w	r2, r3, #1
 80004e2:	69fb      	ldr	r3, [r7, #28]
 80004e4:	fa02 f303 	lsl.w	r3, r2, r3
 80004e8:	69ba      	ldr	r2, [r7, #24]
 80004ea:	4313      	orrs	r3, r2
 80004ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	69ba      	ldr	r2, [r7, #24]
 80004f2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	68db      	ldr	r3, [r3, #12]
 80004f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80004fa:	69fb      	ldr	r3, [r7, #28]
 80004fc:	005b      	lsls	r3, r3, #1
 80004fe:	2203      	movs	r2, #3
 8000500:	fa02 f303 	lsl.w	r3, r2, r3
 8000504:	43db      	mvns	r3, r3
 8000506:	69ba      	ldr	r2, [r7, #24]
 8000508:	4013      	ands	r3, r2
 800050a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	689a      	ldr	r2, [r3, #8]
 8000510:	69fb      	ldr	r3, [r7, #28]
 8000512:	005b      	lsls	r3, r3, #1
 8000514:	fa02 f303 	lsl.w	r3, r2, r3
 8000518:	69ba      	ldr	r2, [r7, #24]
 800051a:	4313      	orrs	r3, r2
 800051c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	69ba      	ldr	r2, [r7, #24]
 8000522:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800052c:	2b00      	cmp	r3, #0
 800052e:	f000 80ae 	beq.w	800068e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	4a5c      	ldr	r2, [pc, #368]	; (80006a8 <HAL_GPIO_Init+0x2fc>)
 8000538:	4b5b      	ldr	r3, [pc, #364]	; (80006a8 <HAL_GPIO_Init+0x2fc>)
 800053a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800053c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000540:	6453      	str	r3, [r2, #68]	; 0x44
 8000542:	4b59      	ldr	r3, [pc, #356]	; (80006a8 <HAL_GPIO_Init+0x2fc>)
 8000544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800054e:	4a57      	ldr	r2, [pc, #348]	; (80006ac <HAL_GPIO_Init+0x300>)
 8000550:	69fb      	ldr	r3, [r7, #28]
 8000552:	089b      	lsrs	r3, r3, #2
 8000554:	3302      	adds	r3, #2
 8000556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800055a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800055c:	69fb      	ldr	r3, [r7, #28]
 800055e:	f003 0303 	and.w	r3, r3, #3
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	220f      	movs	r2, #15
 8000566:	fa02 f303 	lsl.w	r3, r2, r3
 800056a:	43db      	mvns	r3, r3
 800056c:	69ba      	ldr	r2, [r7, #24]
 800056e:	4013      	ands	r3, r2
 8000570:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4a4e      	ldr	r2, [pc, #312]	; (80006b0 <HAL_GPIO_Init+0x304>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d025      	beq.n	80005c6 <HAL_GPIO_Init+0x21a>
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4a4d      	ldr	r2, [pc, #308]	; (80006b4 <HAL_GPIO_Init+0x308>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d01f      	beq.n	80005c2 <HAL_GPIO_Init+0x216>
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4a4c      	ldr	r2, [pc, #304]	; (80006b8 <HAL_GPIO_Init+0x30c>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d019      	beq.n	80005be <HAL_GPIO_Init+0x212>
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4a4b      	ldr	r2, [pc, #300]	; (80006bc <HAL_GPIO_Init+0x310>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d013      	beq.n	80005ba <HAL_GPIO_Init+0x20e>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4a4a      	ldr	r2, [pc, #296]	; (80006c0 <HAL_GPIO_Init+0x314>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d00d      	beq.n	80005b6 <HAL_GPIO_Init+0x20a>
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a49      	ldr	r2, [pc, #292]	; (80006c4 <HAL_GPIO_Init+0x318>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d007      	beq.n	80005b2 <HAL_GPIO_Init+0x206>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4a48      	ldr	r2, [pc, #288]	; (80006c8 <HAL_GPIO_Init+0x31c>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d101      	bne.n	80005ae <HAL_GPIO_Init+0x202>
 80005aa:	2306      	movs	r3, #6
 80005ac:	e00c      	b.n	80005c8 <HAL_GPIO_Init+0x21c>
 80005ae:	2307      	movs	r3, #7
 80005b0:	e00a      	b.n	80005c8 <HAL_GPIO_Init+0x21c>
 80005b2:	2305      	movs	r3, #5
 80005b4:	e008      	b.n	80005c8 <HAL_GPIO_Init+0x21c>
 80005b6:	2304      	movs	r3, #4
 80005b8:	e006      	b.n	80005c8 <HAL_GPIO_Init+0x21c>
 80005ba:	2303      	movs	r3, #3
 80005bc:	e004      	b.n	80005c8 <HAL_GPIO_Init+0x21c>
 80005be:	2302      	movs	r3, #2
 80005c0:	e002      	b.n	80005c8 <HAL_GPIO_Init+0x21c>
 80005c2:	2301      	movs	r3, #1
 80005c4:	e000      	b.n	80005c8 <HAL_GPIO_Init+0x21c>
 80005c6:	2300      	movs	r3, #0
 80005c8:	69fa      	ldr	r2, [r7, #28]
 80005ca:	f002 0203 	and.w	r2, r2, #3
 80005ce:	0092      	lsls	r2, r2, #2
 80005d0:	4093      	lsls	r3, r2
 80005d2:	69ba      	ldr	r2, [r7, #24]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80005d8:	4934      	ldr	r1, [pc, #208]	; (80006ac <HAL_GPIO_Init+0x300>)
 80005da:	69fb      	ldr	r3, [r7, #28]
 80005dc:	089b      	lsrs	r3, r3, #2
 80005de:	3302      	adds	r3, #2
 80005e0:	69ba      	ldr	r2, [r7, #24]
 80005e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80005e6:	4b39      	ldr	r3, [pc, #228]	; (80006cc <HAL_GPIO_Init+0x320>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80005ec:	693b      	ldr	r3, [r7, #16]
 80005ee:	43db      	mvns	r3, r3
 80005f0:	69ba      	ldr	r2, [r7, #24]
 80005f2:	4013      	ands	r3, r2
 80005f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	685b      	ldr	r3, [r3, #4]
 80005fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d003      	beq.n	800060a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000602:	69ba      	ldr	r2, [r7, #24]
 8000604:	693b      	ldr	r3, [r7, #16]
 8000606:	4313      	orrs	r3, r2
 8000608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800060a:	4a30      	ldr	r2, [pc, #192]	; (80006cc <HAL_GPIO_Init+0x320>)
 800060c:	69bb      	ldr	r3, [r7, #24]
 800060e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000610:	4b2e      	ldr	r3, [pc, #184]	; (80006cc <HAL_GPIO_Init+0x320>)
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	43db      	mvns	r3, r3
 800061a:	69ba      	ldr	r2, [r7, #24]
 800061c:	4013      	ands	r3, r2
 800061e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000628:	2b00      	cmp	r3, #0
 800062a:	d003      	beq.n	8000634 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800062c:	69ba      	ldr	r2, [r7, #24]
 800062e:	693b      	ldr	r3, [r7, #16]
 8000630:	4313      	orrs	r3, r2
 8000632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000634:	4a25      	ldr	r2, [pc, #148]	; (80006cc <HAL_GPIO_Init+0x320>)
 8000636:	69bb      	ldr	r3, [r7, #24]
 8000638:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800063a:	4b24      	ldr	r3, [pc, #144]	; (80006cc <HAL_GPIO_Init+0x320>)
 800063c:	689b      	ldr	r3, [r3, #8]
 800063e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000640:	693b      	ldr	r3, [r7, #16]
 8000642:	43db      	mvns	r3, r3
 8000644:	69ba      	ldr	r2, [r7, #24]
 8000646:	4013      	ands	r3, r2
 8000648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	685b      	ldr	r3, [r3, #4]
 800064e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000652:	2b00      	cmp	r3, #0
 8000654:	d003      	beq.n	800065e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000656:	69ba      	ldr	r2, [r7, #24]
 8000658:	693b      	ldr	r3, [r7, #16]
 800065a:	4313      	orrs	r3, r2
 800065c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800065e:	4a1b      	ldr	r2, [pc, #108]	; (80006cc <HAL_GPIO_Init+0x320>)
 8000660:	69bb      	ldr	r3, [r7, #24]
 8000662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000664:	4b19      	ldr	r3, [pc, #100]	; (80006cc <HAL_GPIO_Init+0x320>)
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800066a:	693b      	ldr	r3, [r7, #16]
 800066c:	43db      	mvns	r3, r3
 800066e:	69ba      	ldr	r2, [r7, #24]
 8000670:	4013      	ands	r3, r2
 8000672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800067c:	2b00      	cmp	r3, #0
 800067e:	d003      	beq.n	8000688 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000680:	69ba      	ldr	r2, [r7, #24]
 8000682:	693b      	ldr	r3, [r7, #16]
 8000684:	4313      	orrs	r3, r2
 8000686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000688:	4a10      	ldr	r2, [pc, #64]	; (80006cc <HAL_GPIO_Init+0x320>)
 800068a:	69bb      	ldr	r3, [r7, #24]
 800068c:	60d3      	str	r3, [r2, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800068e:	69fb      	ldr	r3, [r7, #28]
 8000690:	3301      	adds	r3, #1
 8000692:	61fb      	str	r3, [r7, #28]
 8000694:	69fb      	ldr	r3, [r7, #28]
 8000696:	2b0f      	cmp	r3, #15
 8000698:	f67f ae96 	bls.w	80003c8 <HAL_GPIO_Init+0x1c>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 800069c:	bf00      	nop
 800069e:	3724      	adds	r7, #36	; 0x24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40013800 	.word	0x40013800
 80006b0:	40020000 	.word	0x40020000
 80006b4:	40020400 	.word	0x40020400
 80006b8:	40020800 	.word	0x40020800
 80006bc:	40020c00 	.word	0x40020c00
 80006c0:	40021000 	.word	0x40021000
 80006c4:	40021400 	.word	0x40021400
 80006c8:	40021800 	.word	0x40021800
 80006cc:	40013c00 	.word	0x40013c00

080006d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	460b      	mov	r3, r1
 80006da:	807b      	strh	r3, [r7, #2]
 80006dc:	4613      	mov	r3, r2
 80006de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80006e0:	787b      	ldrb	r3, [r7, #1]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d003      	beq.n	80006ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80006e6:	887a      	ldrh	r2, [r7, #2]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80006ec:	e003      	b.n	80006f6 <HAL_GPIO_WritePin+0x26>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80006ee:	887b      	ldrh	r3, [r7, #2]
 80006f0:	041a      	lsls	r2, r3, #16
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	619a      	str	r2, [r3, #24]
  }
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	460b      	mov	r3, r1
 800070e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	695a      	ldr	r2, [r3, #20]
 8000714:	887b      	ldrh	r3, [r7, #2]
 8000716:	405a      	eors	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	615a      	str	r2, [r3, #20]
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800072c:	4b03      	ldr	r3, [pc, #12]	; (800073c <HAL_RCC_GetHCLKFreq+0x14>)
 800072e:	681b      	ldr	r3, [r3, #0]
}
 8000730:	4618      	mov	r0, r3
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	20000004 	.word	0x20000004

08000740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8000746:	f7ff ffef 	bl	8000728 <HAL_RCC_GetHCLKFreq>
 800074a:	4601      	mov	r1, r0
 800074c:	4b0b      	ldr	r3, [pc, #44]	; (800077c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800074e:	689b      	ldr	r3, [r3, #8]
 8000750:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8000754:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000758:	607b      	str	r3, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	fa93 f3a3 	rbit	r3, r3
 8000760:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	fab3 f383 	clz	r3, r3
 8000768:	fa22 f303 	lsr.w	r3, r2, r3
 800076c:	4a04      	ldr	r2, [pc, #16]	; (8000780 <HAL_RCC_GetPCLK1Freq+0x40>)
 800076e:	5cd3      	ldrb	r3, [r2, r3]
 8000770:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000774:	4618      	mov	r0, r3
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40023800 	.word	0x40023800
 8000780:	08006118 	.word	0x08006118

08000784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800078a:	f7ff ffcd 	bl	8000728 <HAL_RCC_GetHCLKFreq>
 800078e:	4601      	mov	r1, r0
 8000790:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8000792:	689b      	ldr	r3, [r3, #8]
 8000794:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 8000798:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800079c:	607b      	str	r3, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	fa93 f3a3 	rbit	r3, r3
 80007a4:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	fab3 f383 	clz	r3, r3
 80007ac:	fa22 f303 	lsr.w	r3, r2, r3
 80007b0:	4a04      	ldr	r2, [pc, #16]	; (80007c4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80007b2:	5cd3      	ldrb	r3, [r2, r3]
 80007b4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80007b8:	4618      	mov	r0, r3
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40023800 	.word	0x40023800
 80007c4:	08006118 	.word	0x08006118

080007c8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d101      	bne.n	80007da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
 80007d8:	e05c      	b.n	8000894 <HAL_SPI_Init+0xcc>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d106      	bne.n	80007f4 <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2200      	movs	r2, #0
 80007ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f000 f854 	bl	800089c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2202      	movs	r2, #2
 80007f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	6812      	ldr	r2, [r2, #0]
 8000804:	6812      	ldr	r2, [r2, #0]
 8000806:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800080a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	6851      	ldr	r1, [r2, #4]
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	6892      	ldr	r2, [r2, #8]
 8000818:	4311      	orrs	r1, r2
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	68d2      	ldr	r2, [r2, #12]
 800081e:	4311      	orrs	r1, r2
 8000820:	687a      	ldr	r2, [r7, #4]
 8000822:	6912      	ldr	r2, [r2, #16]
 8000824:	4311      	orrs	r1, r2
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	6952      	ldr	r2, [r2, #20]
 800082a:	4311      	orrs	r1, r2
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	6992      	ldr	r2, [r2, #24]
 8000830:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000834:	4311      	orrs	r1, r2
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	69d2      	ldr	r2, [r2, #28]
 800083a:	4311      	orrs	r1, r2
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	6a12      	ldr	r2, [r2, #32]
 8000840:	4311      	orrs	r1, r2
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000846:	430a      	orrs	r2, r1
 8000848:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	6992      	ldr	r2, [r2, #24]
 8000852:	0c12      	lsrs	r2, r2, #16
 8000854:	f002 0104 	and.w	r1, r2, #4
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800085c:	430a      	orrs	r2, r1
 800085e:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000864:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000868:	d104      	bne.n	8000874 <HAL_SPI_Init+0xac>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000872:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	6812      	ldr	r2, [r2, #0]
 800087c:	69d2      	ldr	r2, [r2, #28]
 800087e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000882:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2200      	movs	r2, #0
 8000888:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2201      	movs	r2, #1
 800088e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8000892:	2300      	movs	r3, #0
}
 8000894:	4618      	mov	r0, r3
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
  */
}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent and received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08e      	sub	sp, #56	; 0x38
 80008b4:	af02      	add	r7, sp, #8
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
 80008bc:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
 80008c6:	2300      	movs	r3, #0
 80008c8:	837b      	strh	r3, [r7, #26]
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 80008ce:	2301      	movs	r3, #1
 80008d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef errorcode = HAL_OK;
 80008d2:	2300      	movs	r3, #0
 80008d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d101      	bne.n	80008e6 <HAL_SPI_TransmitReceive+0x36>
 80008e2:	2302      	movs	r3, #2
 80008e4:	e1f1      	b.n	8000cca <HAL_SPI_TransmitReceive+0x41a>
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	2201      	movs	r2, #1
 80008ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80008ee:	f7ff fd51 	bl	8000394 <HAL_GetTick>
 80008f2:	61f8      	str	r0, [r7, #28]
  
  tmp  = hspi->State;
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp1 = hspi->Init.Mode;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	623b      	str	r3, [r7, #32]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8000904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000906:	2b01      	cmp	r3, #1
 8000908:	d00e      	beq.n	8000928 <HAL_SPI_TransmitReceive+0x78>
 800090a:	6a3b      	ldr	r3, [r7, #32]
 800090c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000910:	d106      	bne.n	8000920 <HAL_SPI_TransmitReceive+0x70>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	689b      	ldr	r3, [r3, #8]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d102      	bne.n	8000920 <HAL_SPI_TransmitReceive+0x70>
 800091a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091c:	2b04      	cmp	r3, #4
 800091e:	d003      	beq.n	8000928 <HAL_SPI_TransmitReceive+0x78>
  {
    errorcode = HAL_BUSY;
 8000920:	2302      	movs	r3, #2
 8000922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8000926:	e1c6      	b.n	8000cb6 <HAL_SPI_TransmitReceive+0x406>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d005      	beq.n	800093a <HAL_SPI_TransmitReceive+0x8a>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d002      	beq.n	800093a <HAL_SPI_TransmitReceive+0x8a>
 8000934:	887b      	ldrh	r3, [r7, #2]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d103      	bne.n	8000942 <HAL_SPI_TransmitReceive+0x92>
  {
    errorcode = HAL_ERROR;
 800093a:	2301      	movs	r3, #1
 800093c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8000940:	e1b9      	b.n	8000cb6 <HAL_SPI_TransmitReceive+0x406>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000948:	b2db      	uxtb	r3, r3
 800094a:	2b01      	cmp	r3, #1
 800094c:	d103      	bne.n	8000956 <HAL_SPI_TransmitReceive+0xa6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	2205      	movs	r2, #5
 8000952:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	2200      	movs	r2, #0
 800095a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	887a      	ldrh	r2, [r7, #2]
 8000966:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	887a      	ldrh	r2, [r7, #2]
 800096c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	68ba      	ldr	r2, [r7, #8]
 8000972:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	887a      	ldrh	r2, [r7, #2]
 8000978:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	887a      	ldrh	r2, [r7, #2]
 800097e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	2200      	movs	r2, #0
 8000984:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	2200      	movs	r2, #0
 800098a:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000990:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000994:	d110      	bne.n	80009b8 <HAL_SPI_TransmitReceive+0x108>
  {
    SPI_RESET_CRC(hspi);
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	6819      	ldr	r1, [r3, #0]
 80009a0:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 80009a4:	400b      	ands	r3, r1
 80009a6:	6013      	str	r3, [r2, #0]
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	68fa      	ldr	r2, [r7, #12]
 80009ae:	6812      	ldr	r2, [r2, #0]
 80009b0:	6812      	ldr	r2, [r2, #0]
 80009b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80009b6:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d107      	bne.n	80009d6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	6812      	ldr	r2, [r2, #0]
 80009ce:	6812      	ldr	r2, [r2, #0]
 80009d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80009d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	68db      	ldr	r3, [r3, #12]
 80009da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009de:	f040 8084 	bne.w	8000aea <HAL_SPI_TransmitReceive+0x23a>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d004      	beq.n	80009f4 <HAL_SPI_TransmitReceive+0x144>
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d16f      	bne.n	8000ad4 <HAL_SPI_TransmitReceive+0x224>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	68ba      	ldr	r2, [r7, #8]
 80009fa:	8812      	ldrh	r2, [r2, #0]
 80009fc:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	3302      	adds	r3, #2
 8000a02:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000a12:	e05f      	b.n	8000ad4 <HAL_SPI_TransmitReceive+0x224>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8000a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d02e      	beq.n	8000a78 <HAL_SPI_TransmitReceive+0x1c8>
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d029      	beq.n	8000a78 <HAL_SPI_TransmitReceive+0x1c8>
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	689b      	ldr	r3, [r3, #8]
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d022      	beq.n	8000a78 <HAL_SPI_TransmitReceive+0x1c8>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	68ba      	ldr	r2, [r7, #8]
 8000a38:	8812      	ldrh	r2, [r2, #0]
 8000a3a:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	3302      	adds	r3, #2
 8000a40:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	3b01      	subs	r3, #1
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d10c      	bne.n	8000a78 <HAL_SPI_TransmitReceive+0x1c8>
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a66:	d107      	bne.n	8000a78 <HAL_SPI_TransmitReceive+0x1c8>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	68fa      	ldr	r2, [r7, #12]
 8000a6e:	6812      	ldr	r2, [r2, #0]
 8000a70:	6812      	ldr	r2, [r2, #0]
 8000a72:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000a76:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d018      	beq.n	8000ab4 <HAL_SPI_TransmitReceive+0x204>
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d011      	beq.n	8000ab4 <HAL_SPI_TransmitReceive+0x204>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	68db      	ldr	r3, [r3, #12]
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3302      	adds	r3, #2
 8000aa0:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	3b01      	subs	r3, #1
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8000ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aba:	d00b      	beq.n	8000ad4 <HAL_SPI_TransmitReceive+0x224>
 8000abc:	f7ff fc6a 	bl	8000394 <HAL_GetTick>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	1ad2      	subs	r2, r2, r3
 8000ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d303      	bcc.n	8000ad4 <HAL_SPI_TransmitReceive+0x224>
      {
        errorcode = HAL_TIMEOUT;
 8000acc:	2303      	movs	r3, #3
 8000ace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8000ad2:	e0f0      	b.n	8000cb6 <HAL_SPI_TransmitReceive+0x406>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
      pTxData += sizeof(uint16_t);
      hspi->TxXferCount--;
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d19a      	bne.n	8000a14 <HAL_SPI_TransmitReceive+0x164>
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d195      	bne.n	8000a14 <HAL_SPI_TransmitReceive+0x164>
 8000ae8:	e083      	b.n	8000bf2 <HAL_SPI_TransmitReceive+0x342>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d004      	beq.n	8000afc <HAL_SPI_TransmitReceive+0x24c>
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d170      	bne.n	8000bde <HAL_SPI_TransmitReceive+0x32e>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	330c      	adds	r3, #12
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	7812      	ldrb	r2, [r2, #0]
 8000b06:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	3b01      	subs	r3, #1
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000b1c:	e05f      	b.n	8000bde <HAL_SPI_TransmitReceive+0x32e>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8000b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d02f      	beq.n	8000b84 <HAL_SPI_TransmitReceive+0x2d4>
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d02a      	beq.n	8000b84 <HAL_SPI_TransmitReceive+0x2d4>
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	f003 0302 	and.w	r3, r3, #2
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d023      	beq.n	8000b84 <HAL_SPI_TransmitReceive+0x2d4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f103 020c 	add.w	r2, r3, #12
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	1c59      	adds	r1, r3, #1
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	3b01      	subs	r3, #1
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d10c      	bne.n	8000b84 <HAL_SPI_TransmitReceive+0x2d4>
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b72:	d107      	bne.n	8000b84 <HAL_SPI_TransmitReceive+0x2d4>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	68fa      	ldr	r2, [r7, #12]
 8000b7a:	6812      	ldr	r2, [r2, #0]
 8000b7c:	6812      	ldr	r2, [r2, #0]
 8000b7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000b82:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d017      	beq.n	8000bbe <HAL_SPI_TransmitReceive+0x30e>
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	689b      	ldr	r3, [r3, #8]
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d010      	beq.n	8000bbe <HAL_SPI_TransmitReceive+0x30e>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	1c5a      	adds	r2, r3, #1
 8000ba0:	607a      	str	r2, [r7, #4]
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	6812      	ldr	r2, [r2, #0]
 8000ba6:	68d2      	ldr	r2, [r2, #12]
 8000ba8:	b2d2      	uxtb	r2, r2
 8000baa:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8000bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc4:	d00b      	beq.n	8000bde <HAL_SPI_TransmitReceive+0x32e>
 8000bc6:	f7ff fbe5 	bl	8000394 <HAL_GetTick>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	1ad2      	subs	r2, r2, r3
 8000bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d303      	bcc.n	8000bde <HAL_SPI_TransmitReceive+0x32e>
      {
        errorcode = HAL_TIMEOUT;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8000bdc:	e06b      	b.n	8000cb6 <HAL_SPI_TransmitReceive+0x406>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
      pTxData += sizeof(uint8_t);
      hspi->TxXferCount--;
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d19a      	bne.n	8000b1e <HAL_SPI_TransmitReceive+0x26e>
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d195      	bne.n	8000b1e <HAL_SPI_TransmitReceive+0x26e>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bfa:	d11a      	bne.n	8000c32 <HAL_SPI_TransmitReceive+0x382>
  {
    /* Wait until TXE flag */
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	9300      	str	r3, [sp, #0]
 8000c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c02:	2201      	movs	r2, #1
 8000c04:	2101      	movs	r1, #1
 8000c06:	68f8      	ldr	r0, [r7, #12]
 8000c08:	f000 f864 	bl	8000cd4 <SPI_WaitFlagStateUntilTimeout>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d009      	beq.n	8000c26 <HAL_SPI_TransmitReceive+0x376>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c16:	f043 0202 	orr.w	r2, r3, #2
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 8000c24:	e047      	b.n	8000cb6 <HAL_SPI_TransmitReceive+0x406>
    }
    /* Read CRC */
    tmpreg1 = hspi->Instance->DR;
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	837b      	strh	r3, [r7, #26]
    /* To avoid GCC warning */
    UNUSED(tmpreg1);
 8000c30:	8b7b      	ldrh	r3, [r7, #26]
  }

  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	f003 0310 	and.w	r3, r3, #16
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d00d      	beq.n	8000c5c <HAL_SPI_TransmitReceive+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c44:	f043 0202 	orr.w	r2, r3, #2
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8000c54:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	9300      	str	r3, [sp, #0]
 8000c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c62:	2201      	movs	r2, #1
 8000c64:	2102      	movs	r1, #2
 8000c66:	68f8      	ldr	r0, [r7, #12]
 8000c68:	f000 f834 	bl	8000cd4 <SPI_WaitFlagStateUntilTimeout>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d003      	beq.n	8000c7a <HAL_SPI_TransmitReceive+0x3ca>
  {
    errorcode = HAL_TIMEOUT;
 8000c72:	2303      	movs	r3, #3
 8000c74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8000c78:	e01d      	b.n	8000cb6 <HAL_SPI_TransmitReceive+0x406>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8000c7a:	69fa      	ldr	r2, [r7, #28]
 8000c7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000c7e:	68f8      	ldr	r0, [r7, #12]
 8000c80:	f000 f892 	bl	8000da8 <SPI_CheckFlag_BSY>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d006      	beq.n	8000c98 <HAL_SPI_TransmitReceive+0x3e8>
  {
    errorcode = HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	2220      	movs	r2, #32
 8000c94:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8000c96:	e00e      	b.n	8000cb6 <HAL_SPI_TransmitReceive+0x406>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d10a      	bne.n	8000cb6 <HAL_SPI_TransmitReceive+0x406>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	68db      	ldr	r3, [r3, #12]
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	697b      	ldr	r3, [r7, #20]
  }
  
error :
  hspi->State = HAL_SPI_STATE_READY;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8000cc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3730      	adds	r7, #48	; 0x30
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop

08000cd4 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
 8000ce0:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000ce2:	e04d      	b.n	8000d80 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cea:	d049      	beq.n	8000d80 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d007      	beq.n	8000d02 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8000cf2:	f7ff fb4f 	bl	8000394 <HAL_GetTick>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	1ad2      	subs	r2, r2, r3
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d33e      	bcc.n	8000d80 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	6812      	ldr	r2, [r2, #0]
 8000d0a:	6852      	ldr	r2, [r2, #4]
 8000d0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000d10:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000d1a:	d111      	bne.n	8000d40 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d24:	d004      	beq.n	8000d30 <SPI_WaitFlagStateUntilTimeout+0x5c>
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d2e:	d107      	bne.n	8000d40 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	6812      	ldr	r2, [r2, #0]
 8000d38:	6812      	ldr	r2, [r2, #0]
 8000d3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d48:	d110      	bne.n	8000d6c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	6819      	ldr	r1, [r3, #0]
 8000d54:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8000d58:	400b      	ands	r3, r1
 8000d5a:	6013      	str	r3, [r2, #0]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	68fa      	ldr	r2, [r7, #12]
 8000d62:	6812      	ldr	r2, [r2, #0]
 8000d64:	6812      	ldr	r2, [r2, #0]
 8000d66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000d6a:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	2200      	movs	r2, #0
 8000d78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	e00e      	b.n	8000d9e <SPI_WaitFlagStateUntilTimeout+0xca>
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	689a      	ldr	r2, [r3, #8]
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	401a      	ands	r2, r3
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d101      	bne.n	8000d94 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8000d90:	2201      	movs	r2, #1
 8000d92:	e000      	b.n	8000d96 <SPI_WaitFlagStateUntilTimeout+0xc2>
 8000d94:	2200      	movs	r2, #0
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d1a3      	bne.n	8000ce4 <SPI_WaitFlagStateUntilTimeout+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop

08000da8 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af02      	add	r7, sp, #8
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2180      	movs	r1, #128	; 0x80
 8000dbe:	68f8      	ldr	r0, [r7, #12]
 8000dc0:	f7ff ff88 	bl	8000cd4 <SPI_WaitFlagStateUntilTimeout>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d007      	beq.n	8000dda <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dce:	f043 0220 	orr.w	r2, r3, #32
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	e000      	b.n	8000ddc <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 8000dda:	2300      	movs	r3, #0
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d101      	bne.n	8000df6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e03f      	b.n	8000e76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d106      	bne.n	8000e10 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2200      	movs	r2, #0
 8000e06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f000 f838 	bl	8000e80 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2224      	movs	r2, #36	; 0x24
 8000e14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	6812      	ldr	r2, [r2, #0]
 8000e20:	68d2      	ldr	r2, [r2, #12]
 8000e22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000e26:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f000 f915 	bl	8001058 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	6812      	ldr	r2, [r2, #0]
 8000e36:	6912      	ldr	r2, [r2, #16]
 8000e38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000e3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	6812      	ldr	r2, [r2, #0]
 8000e46:	6952      	ldr	r2, [r2, #20]
 8000e48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000e4c:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	6812      	ldr	r2, [r2, #0]
 8000e56:	68d2      	ldr	r2, [r2, #12]
 8000e58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e5c:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2200      	movs	r2, #0
 8000e62:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2220      	movs	r2, #32
 8000e68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2220      	movs	r2, #32
 8000e70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop

08000e80 <HAL_UART_MspInit>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
   /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */ 
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af02      	add	r7, sp, #8
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	603b      	str	r3, [r7, #0]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2b20      	cmp	r3, #32
 8000eb2:	f040 8082 	bne.w	8000fba <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL ) || (Size == 0U)) 
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d002      	beq.n	8000ec2 <HAL_UART_Transmit+0x2e>
 8000ebc:	88fb      	ldrh	r3, [r7, #6]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d101      	bne.n	8000ec6 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e07a      	b.n	8000fbc <HAL_UART_Transmit+0x128>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d101      	bne.n	8000ed4 <HAL_UART_Transmit+0x40>
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	e073      	b.n	8000fbc <HAL_UART_Transmit+0x128>
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2221      	movs	r2, #33	; 0x21
 8000ee6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8000eea:	f7ff fa53 	bl	8000394 <HAL_GetTick>
 8000eee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	88fa      	ldrh	r2, [r7, #6]
 8000ef4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	88fa      	ldrh	r2, [r7, #6]
 8000efa:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8000efc:	e041      	b.n	8000f82 <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	3b01      	subs	r3, #1
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f14:	d121      	bne.n	8000f5a <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2180      	movs	r1, #128	; 0x80
 8000f20:	68f8      	ldr	r0, [r7, #12]
 8000f22:	f000 f84f 	bl	8000fc4 <UART_WaitOnFlagUntilTimeout>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e045      	b.n	8000fbc <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FFU);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	8812      	ldrh	r2, [r2, #0]
 8000f3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000f40:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	691b      	ldr	r3, [r3, #16]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d103      	bne.n	8000f52 <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	3302      	adds	r3, #2
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	e017      	b.n	8000f82 <HAL_UART_Transmit+0xee>
        }
        else
        { 
          pData +=1U;
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	3301      	adds	r3, #1
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	e013      	b.n	8000f82 <HAL_UART_Transmit+0xee>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	2200      	movs	r2, #0
 8000f62:	2180      	movs	r1, #128	; 0x80
 8000f64:	68f8      	ldr	r0, [r7, #12]
 8000f66:	f000 f82d 	bl	8000fc4 <UART_WaitOnFlagUntilTimeout>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 8000f70:	2303      	movs	r3, #3
 8000f72:	e023      	b.n	8000fbc <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFFU);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	1c59      	adds	r1, r3, #1
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	6053      	str	r3, [r2, #4]
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0U)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1b8      	bne.n	8000efe <HAL_UART_Transmit+0x6a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFFU);
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	2200      	movs	r2, #0
 8000f94:	2140      	movs	r1, #64	; 0x40
 8000f96:	68f8      	ldr	r0, [r7, #12]
 8000f98:	f000 f814 	bl	8000fc4 <UART_WaitOnFlagUntilTimeout>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <HAL_UART_Transmit+0x112>
    { 
      return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e00a      	b.n	8000fbc <HAL_UART_Transmit+0x128>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2220      	movs	r2, #32
 8000faa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e000      	b.n	8000fbc <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8000fba:	2302      	movs	r3, #2
  }
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	603b      	str	r3, [r7, #0]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8000fd4:	e02c      	b.n	8001030 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fdc:	d028      	beq.n	8001030 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d007      	beq.n	8000ff4 <UART_WaitOnFlagUntilTimeout+0x30>
 8000fe4:	f7ff f9d6 	bl	8000394 <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	1ad2      	subs	r2, r2, r3
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d91d      	bls.n	8001030 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	68fa      	ldr	r2, [r7, #12]
 8000ffa:	6812      	ldr	r2, [r2, #0]
 8000ffc:	68d2      	ldr	r2, [r2, #12]
 8000ffe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001002:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	68fa      	ldr	r2, [r7, #12]
 800100a:	6812      	ldr	r2, [r2, #0]
 800100c:	6952      	ldr	r2, [r2, #20]
 800100e:	f022 0201 	bic.w	r2, r2, #1
 8001012:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2220      	movs	r2, #32
 8001018:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2220      	movs	r2, #32
 8001020:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2200      	movs	r2, #0
 8001028:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e00f      	b.n	8001050 <UART_WaitOnFlagUntilTimeout+0x8c>
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	401a      	ands	r2, r3
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	429a      	cmp	r2, r3
 800103e:	bf0c      	ite	eq
 8001040:	2301      	moveq	r3, #1
 8001042:	2300      	movne	r3, #0
 8001044:	b2db      	uxtb	r3, r3
 8001046:	461a      	mov	r2, r3
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	429a      	cmp	r2, r3
 800104c:	d0c3      	beq.n	8000fd6 <UART_WaitOnFlagUntilTimeout+0x12>
        return HAL_TIMEOUT;
      }
    }
  }
  
  return HAL_OK;
 800104e:	2300      	movs	r3, #0
}
 8001050:	4618      	mov	r0, r3
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	691b      	ldr	r3, [r3, #16]
 800106a:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001072:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	68fa      	ldr	r2, [r7, #12]
 800107a:	4313      	orrs	r3, r2
 800107c:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001094:	f023 030c 	bic.w	r3, r3, #12
 8001098:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689a      	ldr	r2, [r3, #8]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	691b      	ldr	r3, [r3, #16]
 80010a2:	431a      	orrs	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	695b      	ldr	r3, [r3, #20]
 80010a8:	431a      	orrs	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	695b      	ldr	r3, [r3, #20]
 80010c4:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010cc:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	69db      	ldr	r3, [r3, #28]
 80010e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010e8:	f040 80e4 	bne.w	80012b4 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4aab      	ldr	r2, [pc, #684]	; (80013a0 <UART_SetConfig+0x348>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d004      	beq.n	8001100 <UART_SetConfig+0xa8>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4aaa      	ldr	r2, [pc, #680]	; (80013a4 <UART_SetConfig+0x34c>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d16c      	bne.n	80011da <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681c      	ldr	r4, [r3, #0]
 8001104:	f7ff fb3e 	bl	8000784 <HAL_RCC_GetPCLK2Freq>
 8001108:	4602      	mov	r2, r0
 800110a:	4613      	mov	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	009a      	lsls	r2, r3, #2
 8001112:	441a      	add	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	fbb2 f3f3 	udiv	r3, r2, r3
 800111e:	4aa2      	ldr	r2, [pc, #648]	; (80013a8 <UART_SetConfig+0x350>)
 8001120:	fba2 2303 	umull	r2, r3, r2, r3
 8001124:	095b      	lsrs	r3, r3, #5
 8001126:	011d      	lsls	r5, r3, #4
 8001128:	f7ff fb2c 	bl	8000784 <HAL_RCC_GetPCLK2Freq>
 800112c:	4602      	mov	r2, r0
 800112e:	4613      	mov	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	009a      	lsls	r2, r3, #2
 8001136:	441a      	add	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	fbb2 f6f3 	udiv	r6, r2, r3
 8001142:	f7ff fb1f 	bl	8000784 <HAL_RCC_GetPCLK2Freq>
 8001146:	4602      	mov	r2, r0
 8001148:	4613      	mov	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	4413      	add	r3, r2
 800114e:	009a      	lsls	r2, r3, #2
 8001150:	441a      	add	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	fbb2 f3f3 	udiv	r3, r2, r3
 800115c:	4a92      	ldr	r2, [pc, #584]	; (80013a8 <UART_SetConfig+0x350>)
 800115e:	fba2 2303 	umull	r2, r3, r2, r3
 8001162:	095b      	lsrs	r3, r3, #5
 8001164:	2264      	movs	r2, #100	; 0x64
 8001166:	fb02 f303 	mul.w	r3, r2, r3
 800116a:	1af3      	subs	r3, r6, r3
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	3332      	adds	r3, #50	; 0x32
 8001170:	4a8d      	ldr	r2, [pc, #564]	; (80013a8 <UART_SetConfig+0x350>)
 8001172:	fba2 2303 	umull	r2, r3, r2, r3
 8001176:	095b      	lsrs	r3, r3, #5
 8001178:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	441d      	add	r5, r3
 8001180:	f7ff fb00 	bl	8000784 <HAL_RCC_GetPCLK2Freq>
 8001184:	4602      	mov	r2, r0
 8001186:	4613      	mov	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	009a      	lsls	r2, r3, #2
 800118e:	441a      	add	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	fbb2 f6f3 	udiv	r6, r2, r3
 800119a:	f7ff faf3 	bl	8000784 <HAL_RCC_GetPCLK2Freq>
 800119e:	4602      	mov	r2, r0
 80011a0:	4613      	mov	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	4413      	add	r3, r2
 80011a6:	009a      	lsls	r2, r3, #2
 80011a8:	441a      	add	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b4:	4a7c      	ldr	r2, [pc, #496]	; (80013a8 <UART_SetConfig+0x350>)
 80011b6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ba:	095b      	lsrs	r3, r3, #5
 80011bc:	2264      	movs	r2, #100	; 0x64
 80011be:	fb02 f303 	mul.w	r3, r2, r3
 80011c2:	1af3      	subs	r3, r6, r3
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	3332      	adds	r3, #50	; 0x32
 80011c8:	4a77      	ldr	r2, [pc, #476]	; (80013a8 <UART_SetConfig+0x350>)
 80011ca:	fba2 2303 	umull	r2, r3, r2, r3
 80011ce:	095b      	lsrs	r3, r3, #5
 80011d0:	f003 0307 	and.w	r3, r3, #7
 80011d4:	442b      	add	r3, r5
 80011d6:	60a3      	str	r3, [r4, #8]
 80011d8:	e154      	b.n	8001484 <UART_SetConfig+0x42c>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681c      	ldr	r4, [r3, #0]
 80011de:	f7ff faaf 	bl	8000740 <HAL_RCC_GetPCLK1Freq>
 80011e2:	4602      	mov	r2, r0
 80011e4:	4613      	mov	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	009a      	lsls	r2, r3, #2
 80011ec:	441a      	add	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f8:	4a6b      	ldr	r2, [pc, #428]	; (80013a8 <UART_SetConfig+0x350>)
 80011fa:	fba2 2303 	umull	r2, r3, r2, r3
 80011fe:	095b      	lsrs	r3, r3, #5
 8001200:	011d      	lsls	r5, r3, #4
 8001202:	f7ff fa9d 	bl	8000740 <HAL_RCC_GetPCLK1Freq>
 8001206:	4602      	mov	r2, r0
 8001208:	4613      	mov	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	009a      	lsls	r2, r3, #2
 8001210:	441a      	add	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	fbb2 f6f3 	udiv	r6, r2, r3
 800121c:	f7ff fa90 	bl	8000740 <HAL_RCC_GetPCLK1Freq>
 8001220:	4602      	mov	r2, r0
 8001222:	4613      	mov	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	009a      	lsls	r2, r3, #2
 800122a:	441a      	add	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	fbb2 f3f3 	udiv	r3, r2, r3
 8001236:	4a5c      	ldr	r2, [pc, #368]	; (80013a8 <UART_SetConfig+0x350>)
 8001238:	fba2 2303 	umull	r2, r3, r2, r3
 800123c:	095b      	lsrs	r3, r3, #5
 800123e:	2264      	movs	r2, #100	; 0x64
 8001240:	fb02 f303 	mul.w	r3, r2, r3
 8001244:	1af3      	subs	r3, r6, r3
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	3332      	adds	r3, #50	; 0x32
 800124a:	4a57      	ldr	r2, [pc, #348]	; (80013a8 <UART_SetConfig+0x350>)
 800124c:	fba2 2303 	umull	r2, r3, r2, r3
 8001250:	095b      	lsrs	r3, r3, #5
 8001252:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	441d      	add	r5, r3
 800125a:	f7ff fa71 	bl	8000740 <HAL_RCC_GetPCLK1Freq>
 800125e:	4602      	mov	r2, r0
 8001260:	4613      	mov	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	009a      	lsls	r2, r3, #2
 8001268:	441a      	add	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	fbb2 f6f3 	udiv	r6, r2, r3
 8001274:	f7ff fa64 	bl	8000740 <HAL_RCC_GetPCLK1Freq>
 8001278:	4602      	mov	r2, r0
 800127a:	4613      	mov	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	4413      	add	r3, r2
 8001280:	009a      	lsls	r2, r3, #2
 8001282:	441a      	add	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	fbb2 f3f3 	udiv	r3, r2, r3
 800128e:	4a46      	ldr	r2, [pc, #280]	; (80013a8 <UART_SetConfig+0x350>)
 8001290:	fba2 2303 	umull	r2, r3, r2, r3
 8001294:	095b      	lsrs	r3, r3, #5
 8001296:	2264      	movs	r2, #100	; 0x64
 8001298:	fb02 f303 	mul.w	r3, r2, r3
 800129c:	1af3      	subs	r3, r6, r3
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	3332      	adds	r3, #50	; 0x32
 80012a2:	4a41      	ldr	r2, [pc, #260]	; (80013a8 <UART_SetConfig+0x350>)
 80012a4:	fba2 2303 	umull	r2, r3, r2, r3
 80012a8:	095b      	lsrs	r3, r3, #5
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	442b      	add	r3, r5
 80012b0:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80012b2:	e0e7      	b.n	8001484 <UART_SetConfig+0x42c>
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a39      	ldr	r2, [pc, #228]	; (80013a0 <UART_SetConfig+0x348>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d004      	beq.n	80012c8 <UART_SetConfig+0x270>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a38      	ldr	r2, [pc, #224]	; (80013a4 <UART_SetConfig+0x34c>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d171      	bne.n	80013ac <UART_SetConfig+0x354>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681c      	ldr	r4, [r3, #0]
 80012cc:	f7ff fa5a 	bl	8000784 <HAL_RCC_GetPCLK2Freq>
 80012d0:	4602      	mov	r2, r0
 80012d2:	4613      	mov	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	009a      	lsls	r2, r3, #2
 80012da:	441a      	add	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e6:	4a30      	ldr	r2, [pc, #192]	; (80013a8 <UART_SetConfig+0x350>)
 80012e8:	fba2 2303 	umull	r2, r3, r2, r3
 80012ec:	095b      	lsrs	r3, r3, #5
 80012ee:	011d      	lsls	r5, r3, #4
 80012f0:	f7ff fa48 	bl	8000784 <HAL_RCC_GetPCLK2Freq>
 80012f4:	4602      	mov	r2, r0
 80012f6:	4613      	mov	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	009a      	lsls	r2, r3, #2
 80012fe:	441a      	add	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	fbb2 f6f3 	udiv	r6, r2, r3
 800130a:	f7ff fa3b 	bl	8000784 <HAL_RCC_GetPCLK2Freq>
 800130e:	4602      	mov	r2, r0
 8001310:	4613      	mov	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	009a      	lsls	r2, r3, #2
 8001318:	441a      	add	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	fbb2 f3f3 	udiv	r3, r2, r3
 8001324:	4a20      	ldr	r2, [pc, #128]	; (80013a8 <UART_SetConfig+0x350>)
 8001326:	fba2 2303 	umull	r2, r3, r2, r3
 800132a:	095b      	lsrs	r3, r3, #5
 800132c:	2264      	movs	r2, #100	; 0x64
 800132e:	fb02 f303 	mul.w	r3, r2, r3
 8001332:	1af3      	subs	r3, r6, r3
 8001334:	011b      	lsls	r3, r3, #4
 8001336:	3332      	adds	r3, #50	; 0x32
 8001338:	4a1b      	ldr	r2, [pc, #108]	; (80013a8 <UART_SetConfig+0x350>)
 800133a:	fba2 2303 	umull	r2, r3, r2, r3
 800133e:	095b      	lsrs	r3, r3, #5
 8001340:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001344:	441d      	add	r5, r3
 8001346:	f7ff fa1d 	bl	8000784 <HAL_RCC_GetPCLK2Freq>
 800134a:	4602      	mov	r2, r0
 800134c:	4613      	mov	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	009a      	lsls	r2, r3, #2
 8001354:	441a      	add	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	fbb2 f6f3 	udiv	r6, r2, r3
 8001360:	f7ff fa10 	bl	8000784 <HAL_RCC_GetPCLK2Freq>
 8001364:	4602      	mov	r2, r0
 8001366:	4613      	mov	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	009a      	lsls	r2, r3, #2
 800136e:	441a      	add	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	fbb2 f3f3 	udiv	r3, r2, r3
 800137a:	4a0b      	ldr	r2, [pc, #44]	; (80013a8 <UART_SetConfig+0x350>)
 800137c:	fba2 2303 	umull	r2, r3, r2, r3
 8001380:	095b      	lsrs	r3, r3, #5
 8001382:	2264      	movs	r2, #100	; 0x64
 8001384:	fb02 f303 	mul.w	r3, r2, r3
 8001388:	1af3      	subs	r3, r6, r3
 800138a:	011b      	lsls	r3, r3, #4
 800138c:	3332      	adds	r3, #50	; 0x32
 800138e:	4a06      	ldr	r2, [pc, #24]	; (80013a8 <UART_SetConfig+0x350>)
 8001390:	fba2 2303 	umull	r2, r3, r2, r3
 8001394:	095b      	lsrs	r3, r3, #5
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	442b      	add	r3, r5
 800139c:	60a3      	str	r3, [r4, #8]
 800139e:	e071      	b.n	8001484 <UART_SetConfig+0x42c>
 80013a0:	40011000 	.word	0x40011000
 80013a4:	40011400 	.word	0x40011400
 80013a8:	51eb851f 	.word	0x51eb851f
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681c      	ldr	r4, [r3, #0]
 80013b0:	f7ff f9c6 	bl	8000740 <HAL_RCC_GetPCLK1Freq>
 80013b4:	4602      	mov	r2, r0
 80013b6:	4613      	mov	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4413      	add	r3, r2
 80013bc:	009a      	lsls	r2, r3, #2
 80013be:	441a      	add	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ca:	4a30      	ldr	r2, [pc, #192]	; (800148c <UART_SetConfig+0x434>)
 80013cc:	fba2 2303 	umull	r2, r3, r2, r3
 80013d0:	095b      	lsrs	r3, r3, #5
 80013d2:	011d      	lsls	r5, r3, #4
 80013d4:	f7ff f9b4 	bl	8000740 <HAL_RCC_GetPCLK1Freq>
 80013d8:	4602      	mov	r2, r0
 80013da:	4613      	mov	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4413      	add	r3, r2
 80013e0:	009a      	lsls	r2, r3, #2
 80013e2:	441a      	add	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	fbb2 f6f3 	udiv	r6, r2, r3
 80013ee:	f7ff f9a7 	bl	8000740 <HAL_RCC_GetPCLK1Freq>
 80013f2:	4602      	mov	r2, r0
 80013f4:	4613      	mov	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	009a      	lsls	r2, r3, #2
 80013fc:	441a      	add	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	fbb2 f3f3 	udiv	r3, r2, r3
 8001408:	4a20      	ldr	r2, [pc, #128]	; (800148c <UART_SetConfig+0x434>)
 800140a:	fba2 2303 	umull	r2, r3, r2, r3
 800140e:	095b      	lsrs	r3, r3, #5
 8001410:	2264      	movs	r2, #100	; 0x64
 8001412:	fb02 f303 	mul.w	r3, r2, r3
 8001416:	1af3      	subs	r3, r6, r3
 8001418:	011b      	lsls	r3, r3, #4
 800141a:	3332      	adds	r3, #50	; 0x32
 800141c:	4a1b      	ldr	r2, [pc, #108]	; (800148c <UART_SetConfig+0x434>)
 800141e:	fba2 2303 	umull	r2, r3, r2, r3
 8001422:	095b      	lsrs	r3, r3, #5
 8001424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001428:	441d      	add	r5, r3
 800142a:	f7ff f989 	bl	8000740 <HAL_RCC_GetPCLK1Freq>
 800142e:	4602      	mov	r2, r0
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	009a      	lsls	r2, r3, #2
 8001438:	441a      	add	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	fbb2 f6f3 	udiv	r6, r2, r3
 8001444:	f7ff f97c 	bl	8000740 <HAL_RCC_GetPCLK1Freq>
 8001448:	4602      	mov	r2, r0
 800144a:	4613      	mov	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	009a      	lsls	r2, r3, #2
 8001452:	441a      	add	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	fbb2 f3f3 	udiv	r3, r2, r3
 800145e:	4a0b      	ldr	r2, [pc, #44]	; (800148c <UART_SetConfig+0x434>)
 8001460:	fba2 2303 	umull	r2, r3, r2, r3
 8001464:	095b      	lsrs	r3, r3, #5
 8001466:	2264      	movs	r2, #100	; 0x64
 8001468:	fb02 f303 	mul.w	r3, r2, r3
 800146c:	1af3      	subs	r3, r6, r3
 800146e:	011b      	lsls	r3, r3, #4
 8001470:	3332      	adds	r3, #50	; 0x32
 8001472:	4a06      	ldr	r2, [pc, #24]	; (800148c <UART_SetConfig+0x434>)
 8001474:	fba2 2303 	umull	r2, r3, r2, r3
 8001478:	095b      	lsrs	r3, r3, #5
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	442b      	add	r3, r5
 8001480:	60a3      	str	r3, [r4, #8]
    }
  }
}
 8001482:	e7ff      	b.n	8001484 <UART_SetConfig+0x42c>
 8001484:	bf00      	nop
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800148c:	51eb851f 	.word	0x51eb851f

08001490 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001494:	4a16      	ldr	r2, [pc, #88]	; (80014f0 <SystemInit+0x60>)
 8001496:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <SystemInit+0x60>)
 8001498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800149c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80014a4:	4a13      	ldr	r2, [pc, #76]	; (80014f4 <SystemInit+0x64>)
 80014a6:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <SystemInit+0x64>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014b0:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <SystemInit+0x64>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80014b6:	4a0f      	ldr	r2, [pc, #60]	; (80014f4 <SystemInit+0x64>)
 80014b8:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <SystemInit+0x64>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80014c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80014c6:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <SystemInit+0x64>)
 80014c8:	4a0b      	ldr	r2, [pc, #44]	; (80014f8 <SystemInit+0x68>)
 80014ca:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80014cc:	4a09      	ldr	r2, [pc, #36]	; (80014f4 <SystemInit+0x64>)
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <SystemInit+0x64>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <SystemInit+0x64>)
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014de:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <SystemInit+0x60>)
 80014e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014e4:	609a      	str	r2, [r3, #8]
#endif
}
 80014e6:	bf00      	nop
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000ed00 	.word	0xe000ed00
 80014f4:	40023800 	.word	0x40023800
 80014f8:	24003010 	.word	0x24003010

080014fc <SysTick_Handler>:
extern void xPortSysTickHandler (void);

/*
  SysTick handler implementation that also clears overflow flag.
*/
void SysTick_Handler (void) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001500:	4b02      	ldr	r3, [pc, #8]	; (800150c <SysTick_Handler+0x10>)
 8001502:	681b      	ldr	r3, [r3, #0]

  /* Call tick handler */
  xPortSysTickHandler();
 8001504:	f000 fb40 	bl	8001b88 <xPortSysTickHandler>
}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}
 800150c:	e000e010 	.word	0xe000e010

08001510 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800151c:	f001 f90e 	bl	800273c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001520:	4b40      	ldr	r3, [pc, #256]	; (8001624 <pvPortMalloc+0x114>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8001528:	f000 f8c0 	bl	80016ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800152c:	4b3e      	ldr	r3, [pc, #248]	; (8001628 <pvPortMalloc+0x118>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4013      	ands	r3, r2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d16d      	bne.n	8001614 <pvPortMalloc+0x104>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d00d      	beq.n	800155a <pvPortMalloc+0x4a>
			{
				xWantedSize += xHeapStructSize;
 800153e:	2208      	movs	r2, #8
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4413      	add	r3, r2
 8001544:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	2b00      	cmp	r3, #0
 800154e:	d004      	beq.n	800155a <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f023 0307 	bic.w	r3, r3, #7
 8001556:	3308      	adds	r3, #8
 8001558:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d059      	beq.n	8001614 <pvPortMalloc+0x104>
 8001560:	4b32      	ldr	r3, [pc, #200]	; (800162c <pvPortMalloc+0x11c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	429a      	cmp	r2, r3
 8001568:	d854      	bhi.n	8001614 <pvPortMalloc+0x104>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800156a:	4b31      	ldr	r3, [pc, #196]	; (8001630 <pvPortMalloc+0x120>)
 800156c:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800156e:	4b30      	ldr	r3, [pc, #192]	; (8001630 <pvPortMalloc+0x120>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001574:	e004      	b.n	8001580 <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	617b      	str	r3, [r7, #20]
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	429a      	cmp	r2, r3
 8001588:	d203      	bcs.n	8001592 <pvPortMalloc+0x82>
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f1      	bne.n	8001576 <pvPortMalloc+0x66>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001592:	4b24      	ldr	r3, [pc, #144]	; (8001624 <pvPortMalloc+0x114>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	697a      	ldr	r2, [r7, #20]
 8001598:	429a      	cmp	r2, r3
 800159a:	d03b      	beq.n	8001614 <pvPortMalloc+0x104>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2208      	movs	r2, #8
 80015a2:	4413      	add	r3, r2
 80015a4:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	1ad2      	subs	r2, r2, r3
 80015b6:	2308      	movs	r3, #8
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d90f      	bls.n	80015de <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4413      	add	r3, r2
 80015c4:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	1ad2      	subs	r2, r2, r3
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80015d8:	68b8      	ldr	r0, [r7, #8]
 80015da:	f000 f8c9 	bl	8001770 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80015de:	4b13      	ldr	r3, [pc, #76]	; (800162c <pvPortMalloc+0x11c>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	4a10      	ldr	r2, [pc, #64]	; (800162c <pvPortMalloc+0x11c>)
 80015ea:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <pvPortMalloc+0x11c>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b10      	ldr	r3, [pc, #64]	; (8001634 <pvPortMalloc+0x124>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d203      	bcs.n	8001600 <pvPortMalloc+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <pvPortMalloc+0x11c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a0d      	ldr	r2, [pc, #52]	; (8001634 <pvPortMalloc+0x124>)
 80015fe:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	4b08      	ldr	r3, [pc, #32]	; (8001628 <pvPortMalloc+0x118>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	431a      	orrs	r2, r3
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001614:	f001 f8a0 	bl	8002758 <xTaskResumeAll>
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 8001618:	68fb      	ldr	r3, [r7, #12]
}
 800161a:	4618      	mov	r0, r3
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	200024b4 	.word	0x200024b4
 8001628:	200024c0 	.word	0x200024c0
 800162c:	200024b8 	.word	0x200024b8
 8001630:	200024ac 	.word	0x200024ac
 8001634:	200024bc 	.word	0x200024bc

08001638 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d027      	beq.n	800169a <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800164a:	2308      	movs	r3, #8
 800164c:	425b      	negs	r3, r3
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	4413      	add	r3, r2
 8001652:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	685a      	ldr	r2, [r3, #4]
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <vPortFree+0x6c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4013      	ands	r3, r2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d019      	beq.n	800169a <vPortFree+0x62>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d115      	bne.n	800169a <vPortFree+0x62>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	685a      	ldr	r2, [r3, #4]
 8001672:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <vPortFree+0x6c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	43db      	mvns	r3, r3
 8001678:	401a      	ands	r2, r3
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800167e:	f001 f85d 	bl	800273c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <vPortFree+0x70>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4413      	add	r3, r2
 800168c:	4a06      	ldr	r2, [pc, #24]	; (80016a8 <vPortFree+0x70>)
 800168e:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001690:	68b8      	ldr	r0, [r7, #8]
 8001692:	f000 f86d 	bl	8001770 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001696:	f001 f85f 	bl	8002758 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200024c0 	.word	0x200024c0
 80016a8:	200024b8 	.word	0x200024b8

080016ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80016b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80016b8:	4b27      	ldr	r3, [pc, #156]	; (8001758 <prvHeapInit+0xac>)
 80016ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d00c      	beq.n	80016e0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	3307      	adds	r3, #7
 80016ca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f023 0307 	bic.w	r3, r3, #7
 80016d2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80016d4:	68ba      	ldr	r2, [r7, #8]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	4a1f      	ldr	r2, [pc, #124]	; (8001758 <prvHeapInit+0xac>)
 80016dc:	4413      	add	r3, r2
 80016de:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80016e4:	4a1d      	ldr	r2, [pc, #116]	; (800175c <prvHeapInit+0xb0>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80016ea:	4b1c      	ldr	r3, [pc, #112]	; (800175c <prvHeapInit+0xb0>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	4413      	add	r3, r2
 80016f6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80016f8:	2208      	movs	r2, #8
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	1a9b      	subs	r3, r3, r2
 80016fe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f023 0307 	bic.w	r3, r3, #7
 8001706:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4a15      	ldr	r2, [pc, #84]	; (8001760 <prvHeapInit+0xb4>)
 800170c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800170e:	4b14      	ldr	r3, [pc, #80]	; (8001760 <prvHeapInit+0xb4>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2200      	movs	r2, #0
 8001714:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001716:	4b12      	ldr	r3, [pc, #72]	; (8001760 <prvHeapInit+0xb4>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	68fa      	ldr	r2, [r7, #12]
 8001726:	1ad2      	subs	r2, r2, r3
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800172c:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <prvHeapInit+0xb4>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <prvHeapInit+0xb8>)
 800173a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	4a09      	ldr	r2, [pc, #36]	; (8001768 <prvHeapInit+0xbc>)
 8001742:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001744:	4b09      	ldr	r3, [pc, #36]	; (800176c <prvHeapInit+0xc0>)
 8001746:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800174a:	601a      	str	r2, [r3, #0]
}
 800174c:	bf00      	nop
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	200004ac 	.word	0x200004ac
 800175c:	200024ac 	.word	0x200024ac
 8001760:	200024b4 	.word	0x200024b4
 8001764:	200024bc 	.word	0x200024bc
 8001768:	200024b8 	.word	0x200024b8
 800176c:	200024c0 	.word	0x200024c0

08001770 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001778:	4b28      	ldr	r3, [pc, #160]	; (800181c <prvInsertBlockIntoFreeList+0xac>)
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	e002      	b.n	8001784 <prvInsertBlockIntoFreeList+0x14>
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	429a      	cmp	r2, r3
 800178c:	d3f7      	bcc.n	800177e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	441a      	add	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	429a      	cmp	r2, r3
 800179e:	d108      	bne.n	80017b2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	685a      	ldr	r2, [r3, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	441a      	add	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	441a      	add	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d118      	bne.n	80017f8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	4b15      	ldr	r3, [pc, #84]	; (8001820 <prvInsertBlockIntoFreeList+0xb0>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d00d      	beq.n	80017ee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	441a      	add	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	e008      	b.n	8001800 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80017ee:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <prvInsertBlockIntoFreeList+0xb0>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	e003      	b.n	8001800 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	429a      	cmp	r2, r3
 8001806:	d002      	beq.n	800180e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800180e:	bf00      	nop
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	200024ac 	.word	0x200024ac
 8001820:	200024b4 	.word	0x200024b4

08001824 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f103 0208 	add.w	r2, r3, #8
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f04f 32ff 	mov.w	r2, #4294967295
 800183c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f103 0208 	add.w	r2, r3, #8
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f103 0208 	add.w	r2, r3, #8
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop

08001880 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	1c5a      	adds	r2, r3, #1
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	601a      	str	r2, [r3, #0]
}
 80018bc:	bf00      	nop
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018de:	d103      	bne.n	80018e8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	e00c      	b.n	8001902 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3308      	adds	r3, #8
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	e002      	b.n	80018f6 <vListInsert+0x2e>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d9f6      	bls.n	80018f0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	1c5a      	adds	r2, r3, #1
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	601a      	str	r2, [r3, #0]
}
 800192e:	bf00      	nop
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop

0800193c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	6892      	ldr	r2, [r2, #8]
 8001952:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	6852      	ldr	r2, [r2, #4]
 800195c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	429a      	cmp	r2, r3
 8001966:	d103      	bne.n	8001970 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	1e5a      	subs	r2, r3, #1
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	3b04      	subs	r3, #4
 80019a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	3b04      	subs	r3, #4
 80019ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	f023 0201 	bic.w	r2, r3, #1
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	3b04      	subs	r3, #4
 80019be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80019c0:	4a0c      	ldr	r2, [pc, #48]	; (80019f4 <pxPortInitialiseStack+0x64>)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	3b14      	subs	r3, #20
 80019ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	3b04      	subs	r3, #4
 80019d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f06f 0202 	mvn.w	r2, #2
 80019de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	3b20      	subs	r3, #32
 80019e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80019e6:	68fb      	ldr	r3, [r7, #12]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	080019f9 	.word	0x080019f9

080019f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80019fe:	f04f 0310 	mov.w	r3, #16
 8001a02:	f383 8811 	msr	BASEPRI, r3
 8001a06:	f3bf 8f6f 	isb	sy
 8001a0a:	f3bf 8f4f 	dsb	sy
 8001a0e:	607b      	str	r3, [r7, #4]

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	for( ;; );
 8001a10:	e7fe      	b.n	8001a10 <prvTaskExitError+0x18>
 8001a12:	bf00      	nop
	...

08001a20 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001a20:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <pxCurrentTCBConst2>)
 8001a22:	6819      	ldr	r1, [r3, #0]
 8001a24:	6808      	ldr	r0, [r1, #0]
 8001a26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a2a:	f380 8809 	msr	PSP, r0
 8001a2e:	f3bf 8f6f 	isb	sy
 8001a32:	f04f 0000 	mov.w	r0, #0
 8001a36:	f380 8811 	msr	BASEPRI, r0
 8001a3a:	4770      	bx	lr
 8001a3c:	f3af 8000 	nop.w

08001a40 <pxCurrentTCBConst2>:
 8001a40:	200024c4 	.word	0x200024c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001a44:	bf00      	nop
 8001a46:	bf00      	nop

08001a48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001a48:	4806      	ldr	r0, [pc, #24]	; (8001a64 <prvPortStartFirstTask+0x1c>)
 8001a4a:	6800      	ldr	r0, [r0, #0]
 8001a4c:	6800      	ldr	r0, [r0, #0]
 8001a4e:	f380 8808 	msr	MSP, r0
 8001a52:	b662      	cpsie	i
 8001a54:	b661      	cpsie	f
 8001a56:	f3bf 8f4f 	dsb	sy
 8001a5a:	f3bf 8f6f 	isb	sy
 8001a5e:	df00      	svc	0
 8001a60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8001a62:	bf00      	nop
 8001a64:	e000ed08 	.word	0xe000ed08

08001a68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001a6c:	4a0f      	ldr	r2, [pc, #60]	; (8001aac <xPortStartScheduler+0x44>)
 8001a6e:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <xPortStartScheduler+0x44>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001a78:	4a0c      	ldr	r2, [pc, #48]	; (8001aac <xPortStartScheduler+0x44>)
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <xPortStartScheduler+0x44>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001a84:	f000 f8a0 	bl	8001bc8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <xPortStartScheduler+0x48>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8001a8e:	f000 f8b7 	bl	8001c00 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001a92:	4a08      	ldr	r2, [pc, #32]	; (8001ab4 <xPortStartScheduler+0x4c>)
 8001a94:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <xPortStartScheduler+0x4c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001a9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001a9e:	f7ff ffd3 	bl	8001a48 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8001aa2:	f7ff ffa9 	bl	80019f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	e000ed20 	.word	0xe000ed20
 8001ab0:	20000008 	.word	0x20000008
 8001ab4:	e000ef34 	.word	0xe000ef34

08001ab8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	f04f 0310 	mov.w	r3, #16
 8001ac2:	f383 8811 	msr	BASEPRI, r3
 8001ac6:	f3bf 8f6f 	isb	sy
 8001aca:	f3bf 8f4f 	dsb	sy
 8001ace:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <vPortEnterCritical+0x30>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	4a04      	ldr	r2, [pc, #16]	; (8001ae8 <vPortEnterCritical+0x30>)
 8001ad8:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	20000008 	.word	0x20000008

08001aec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 8001af2:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <vPortExitCritical+0x30>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	4a08      	ldr	r2, [pc, #32]	; (8001b1c <vPortExitCritical+0x30>)
 8001afa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001afc:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <vPortExitCritical+0x30>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d104      	bne.n	8001b0e <vPortExitCritical+0x22>
 8001b04:	2300      	movs	r3, #0
 8001b06:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	20000008 	.word	0x20000008

08001b20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001b20:	f3ef 8009 	mrs	r0, PSP
 8001b24:	f3bf 8f6f 	isb	sy
 8001b28:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <pxCurrentTCBConst>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	f01e 0f10 	tst.w	lr, #16
 8001b30:	bf08      	it	eq
 8001b32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001b36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b3a:	6010      	str	r0, [r2, #0]
 8001b3c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8001b40:	f04f 0010 	mov.w	r0, #16
 8001b44:	f380 8811 	msr	BASEPRI, r0
 8001b48:	f3bf 8f4f 	dsb	sy
 8001b4c:	f3bf 8f6f 	isb	sy
 8001b50:	f000 ff4e 	bl	80029f0 <vTaskSwitchContext>
 8001b54:	f04f 0000 	mov.w	r0, #0
 8001b58:	f380 8811 	msr	BASEPRI, r0
 8001b5c:	bc08      	pop	{r3}
 8001b5e:	6819      	ldr	r1, [r3, #0]
 8001b60:	6808      	ldr	r0, [r1, #0]
 8001b62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b66:	f01e 0f10 	tst.w	lr, #16
 8001b6a:	bf08      	it	eq
 8001b6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001b70:	f380 8809 	msr	PSP, r0
 8001b74:	f3bf 8f6f 	isb	sy
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	f3af 8000 	nop.w

08001b80 <pxCurrentTCBConst>:
 8001b80:	200024c4 	.word	0x200024c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001b84:	bf00      	nop
 8001b86:	bf00      	nop

08001b88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001b8e:	f04f 0310 	mov.w	r3, #16
 8001b92:	f383 8811 	msr	BASEPRI, r3
 8001b96:	f3bf 8f6f 	isb	sy
 8001b9a:	f3bf 8f4f 	dsb	sy
 8001b9e:	603b      	str	r3, [r7, #0]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001ba0:	f000 fe78 	bl	8002894 <xTaskIncrementTick>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <xPortSysTickHandler+0x3c>)
 8001bac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	e000ed04 	.word	0xe000ed04

08001bc8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001bcc:	4a08      	ldr	r2, [pc, #32]	; (8001bf0 <vPortSetupTimerInterrupt+0x28>)
 8001bce:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <vPortSetupTimerInterrupt+0x2c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4909      	ldr	r1, [pc, #36]	; (8001bf8 <vPortSetupTimerInterrupt+0x30>)
 8001bd4:	fba1 1303 	umull	r1, r3, r1, r3
 8001bd8:	099b      	lsrs	r3, r3, #6
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001bde:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <vPortSetupTimerInterrupt+0x34>)
 8001be0:	2207      	movs	r2, #7
 8001be2:	601a      	str	r2, [r3, #0]
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	e000e014 	.word	0xe000e014
 8001bf4:	20000004 	.word	0x20000004
 8001bf8:	10624dd3 	.word	0x10624dd3
 8001bfc:	e000e010 	.word	0xe000e010

08001c00 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001c00:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001c10 <vPortEnableVFP+0x10>
 8001c04:	6801      	ldr	r1, [r0, #0]
 8001c06:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001c0a:	6001      	str	r1, [r0, #0]
 8001c0c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8001c0e:	bf00      	nop
 8001c10:	e000ed88 	.word	0xe000ed88

08001c14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 8001c22:	f7ff ff49 	bl	8001ab8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c2e:	68f9      	ldr	r1, [r7, #12]
 8001c30:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001c32:	fb01 f303 	mul.w	r3, r1, r3
 8001c36:	441a      	add	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c52:	3b01      	subs	r3, #1
 8001c54:	68f9      	ldr	r1, [r7, #12]
 8001c56:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001c58:	fb01 f303 	mul.w	r3, r1, r3
 8001c5c:	441a      	add	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	22ff      	movs	r2, #255	; 0xff
 8001c66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	22ff      	movs	r2, #255	; 0xff
 8001c6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d114      	bne.n	8001ca2 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d01a      	beq.n	8001cb6 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	3310      	adds	r3, #16
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 ff5b 	bl	8002b40 <xTaskRemoveFromEventList>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d012      	beq.n	8001cb6 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <xQueueGenericReset+0xb0>)
 8001c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	f3bf 8f4f 	dsb	sy
 8001c9c:	f3bf 8f6f 	isb	sy
 8001ca0:	e009      	b.n	8001cb6 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	3310      	adds	r3, #16
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff fdbc 	bl	8001824 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	3324      	adds	r3, #36	; 0x24
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff fdb7 	bl	8001824 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001cb6:	f7ff ff19 	bl	8001aec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001cba:	2301      	movs	r3, #1
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	e000ed04 	.word	0xe000ed04

08001cc8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af02      	add	r7, sp, #8
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
 8001cd4:	603b      	str	r3, [r7, #0]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00d      	beq.n	8001cfc <xQueueGenericCreateStatic+0x34>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001ce8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	68b9      	ldr	r1, [r7, #8]
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	f000 f806 	bl	8001d08 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8001cfc:	697b      	ldr	r3, [r7, #20]
	}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop

08001d08 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
 8001d14:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d103      	bne.n	8001d24 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	e002      	b.n	8001d2a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001d36:	2101      	movs	r1, #1
 8001d38:	69b8      	ldr	r0, [r7, #24]
 8001d3a:	f7ff ff6b 	bl	8001c14 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	78fa      	ldrb	r2, [r7, #3]
 8001d42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001d46:	bf00      	nop
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop

08001d50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	; 0x28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
 8001d5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	623b      	str	r3, [r7, #32]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001d66:	f7ff fea7 	bl	8001ab8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001d6a:	6a3b      	ldr	r3, [r7, #32]
 8001d6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d6e:	6a3b      	ldr	r3, [r7, #32]
 8001d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d302      	bcc.n	8001d7c <xQueueGenericSend+0x2c>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d129      	bne.n	8001dd0 <xQueueGenericSend+0x80>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	68b9      	ldr	r1, [r7, #8]
 8001d80:	6a38      	ldr	r0, [r7, #32]
 8001d82:	f000 f9bf 	bl	8002104 <prvCopyDataToQueue>
 8001d86:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001d88:	6a3b      	ldr	r3, [r7, #32]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d010      	beq.n	8001db2 <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d90:	6a3b      	ldr	r3, [r7, #32]
 8001d92:	3324      	adds	r3, #36	; 0x24
 8001d94:	4618      	mov	r0, r3
 8001d96:	f000 fed3 	bl	8002b40 <xTaskRemoveFromEventList>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d013      	beq.n	8001dc8 <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001da0:	4b3f      	ldr	r3, [pc, #252]	; (8001ea0 <xQueueGenericSend+0x150>)
 8001da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	f3bf 8f4f 	dsb	sy
 8001dac:	f3bf 8f6f 	isb	sy
 8001db0:	e00a      	b.n	8001dc8 <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d007      	beq.n	8001dc8 <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001db8:	4b39      	ldr	r3, [pc, #228]	; (8001ea0 <xQueueGenericSend+0x150>)
 8001dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	f3bf 8f4f 	dsb	sy
 8001dc4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001dc8:	f7ff fe90 	bl	8001aec <vPortExitCritical>
				return pdPASS;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e063      	b.n	8001e98 <xQueueGenericSend+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d103      	bne.n	8001dde <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001dd6:	f7ff fe89 	bl	8001aec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	e05c      	b.n	8001e98 <xQueueGenericSend+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d106      	bne.n	8001df2 <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	4618      	mov	r0, r3
 8001dea:	f000 feff 	bl	8002bec <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001dee:	2301      	movs	r3, #1
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001df2:	f7ff fe7b 	bl	8001aec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001df6:	f000 fca1 	bl	800273c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001dfa:	f7ff fe5d 	bl	8001ab8 <vPortEnterCritical>
 8001dfe:	6a3b      	ldr	r3, [r7, #32]
 8001e00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e04:	b25b      	sxtb	r3, r3
 8001e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e0a:	d103      	bne.n	8001e14 <xQueueGenericSend+0xc4>
 8001e0c:	6a3b      	ldr	r3, [r7, #32]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e14:	6a3b      	ldr	r3, [r7, #32]
 8001e16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e1a:	b25b      	sxtb	r3, r3
 8001e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e20:	d103      	bne.n	8001e2a <xQueueGenericSend+0xda>
 8001e22:	6a3b      	ldr	r3, [r7, #32]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e2a:	f7ff fe5f 	bl	8001aec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001e2e:	1d3a      	adds	r2, r7, #4
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	4611      	mov	r1, r2
 8001e36:	4618      	mov	r0, r3
 8001e38:	f000 feee 	bl	8002c18 <xTaskCheckForTimeOut>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d124      	bne.n	8001e8c <xQueueGenericSend+0x13c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001e42:	6a38      	ldr	r0, [r7, #32]
 8001e44:	f000 fa56 	bl	80022f4 <prvIsQueueFull>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d018      	beq.n	8001e80 <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
 8001e50:	3310      	adds	r3, #16
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	4611      	mov	r1, r2
 8001e56:	4618      	mov	r0, r3
 8001e58:	f000 fe3e 	bl	8002ad8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001e5c:	6a38      	ldr	r0, [r7, #32]
 8001e5e:	f000 f9e1 	bl	8002224 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001e62:	f000 fc79 	bl	8002758 <xTaskResumeAll>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f47f af7c 	bne.w	8001d66 <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
 8001e6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <xQueueGenericSend+0x150>)
 8001e70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	f3bf 8f4f 	dsb	sy
 8001e7a:	f3bf 8f6f 	isb	sy
 8001e7e:	e772      	b.n	8001d66 <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001e80:	6a38      	ldr	r0, [r7, #32]
 8001e82:	f000 f9cf 	bl	8002224 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001e86:	f000 fc67 	bl	8002758 <xTaskResumeAll>
 8001e8a:	e76c      	b.n	8001d66 <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001e8c:	6a38      	ldr	r0, [r7, #32]
 8001e8e:	f000 f9c9 	bl	8002224 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001e92:	f000 fc61 	bl	8002758 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001e96:	2300      	movs	r3, #0
		}
	}
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3728      	adds	r7, #40	; 0x28
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	e000ed04 	.word	0xe000ed04

08001ea4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08c      	sub	sp, #48	; 0x30
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
 8001eb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	62bb      	str	r3, [r7, #40]	; 0x28

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001eb6:	f3ef 8211 	mrs	r2, BASEPRI
 8001eba:	f04f 0310 	mov.w	r3, #16
 8001ebe:	f383 8811 	msr	BASEPRI, r3
 8001ec2:	f3bf 8f6f 	isb	sy
 8001ec6:	f3bf 8f4f 	dsb	sy
 8001eca:	61ba      	str	r2, [r7, #24]
 8001ecc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001ece:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001ed0:	623b      	str	r3, [r7, #32]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d302      	bcc.n	8001ee4 <xQueueGenericSendFromISR+0x40>
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d12a      	bne.n	8001f3a <xQueueGenericSendFromISR+0x96>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001eea:	77fb      	strb	r3, [r7, #31]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	68b9      	ldr	r1, [r7, #8]
 8001ef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ef2:	f000 f907 	bl	8002104 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001ef6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001efe:	d112      	bne.n	8001f26 <xQueueGenericSendFromISR+0x82>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d015      	beq.n	8001f34 <xQueueGenericSendFromISR+0x90>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f0a:	3324      	adds	r3, #36	; 0x24
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f000 fe17 	bl	8002b40 <xTaskRemoveFromEventList>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00d      	beq.n	8001f34 <xQueueGenericSendFromISR+0x90>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00a      	beq.n	8001f34 <xQueueGenericSendFromISR+0x90>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	e006      	b.n	8001f34 <xQueueGenericSendFromISR+0x90>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001f26:	7ffb      	ldrb	r3, [r7, #31]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	b25a      	sxtb	r2, r3
 8001f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001f34:	2301      	movs	r3, #1
 8001f36:	62fb      	str	r3, [r7, #44]	; 0x2c
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
 8001f38:	e001      	b.n	8001f3e <xQueueGenericSendFromISR+0x9a>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f3e:	6a3b      	ldr	r3, [r7, #32]
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3730      	adds	r7, #48	; 0x30
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop

08001f54 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08a      	sub	sp, #40	; 0x28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
 8001f60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	623b      	str	r3, [r7, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001f6a:	f7ff fda5 	bl	8001ab8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001f6e:	6a3b      	ldr	r3, [r7, #32]
 8001f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f72:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d046      	beq.n	8002008 <xQueueGenericReceive+0xb4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001f80:	68b9      	ldr	r1, [r7, #8]
 8001f82:	6a38      	ldr	r0, [r7, #32]
 8001f84:	f000 f928 	bl	80021d8 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d121      	bne.n	8001fd2 <xQueueGenericReceive+0x7e>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	1e5a      	subs	r2, r3, #1
 8001f92:	6a3b      	ldr	r3, [r7, #32]
 8001f94:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001f96:	6a3b      	ldr	r3, [r7, #32]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d104      	bne.n	8001fa8 <xQueueGenericReceive+0x54>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8001f9e:	f001 f82b 	bl	8002ff8 <pvTaskIncrementMutexHeldCount>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001fa8:	6a3b      	ldr	r3, [r7, #32]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d027      	beq.n	8002000 <xQueueGenericReceive+0xac>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001fb0:	6a3b      	ldr	r3, [r7, #32]
 8001fb2:	3310      	adds	r3, #16
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f000 fdc3 	bl	8002b40 <xTaskRemoveFromEventList>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d01f      	beq.n	8002000 <xQueueGenericReceive+0xac>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8001fc0:	4b4f      	ldr	r3, [pc, #316]	; (8002100 <xQueueGenericReceive+0x1ac>)
 8001fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	f3bf 8f4f 	dsb	sy
 8001fcc:	f3bf 8f6f 	isb	sy
 8001fd0:	e016      	b.n	8002000 <xQueueGenericReceive+0xac>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8001fd2:	6a3b      	ldr	r3, [r7, #32]
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001fd8:	6a3b      	ldr	r3, [r7, #32]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00f      	beq.n	8002000 <xQueueGenericReceive+0xac>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
 8001fe2:	3324      	adds	r3, #36	; 0x24
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f000 fdab 	bl	8002b40 <xTaskRemoveFromEventList>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d007      	beq.n	8002000 <xQueueGenericReceive+0xac>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8001ff0:	4b43      	ldr	r3, [pc, #268]	; (8002100 <xQueueGenericReceive+0x1ac>)
 8001ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	f3bf 8f4f 	dsb	sy
 8001ffc:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8002000:	f7ff fd74 	bl	8001aec <vPortExitCritical>
				return pdPASS;
 8002004:	2301      	movs	r3, #1
 8002006:	e077      	b.n	80020f8 <xQueueGenericReceive+0x1a4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d103      	bne.n	8002016 <xQueueGenericReceive+0xc2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800200e:	f7ff fd6d 	bl	8001aec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002012:	2300      	movs	r3, #0
 8002014:	e070      	b.n	80020f8 <xQueueGenericReceive+0x1a4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	2b00      	cmp	r3, #0
 800201a:	d106      	bne.n	800202a <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800201c:	f107 0310 	add.w	r3, r7, #16
 8002020:	4618      	mov	r0, r3
 8002022:	f000 fde3 	bl	8002bec <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002026:	2301      	movs	r3, #1
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800202a:	f7ff fd5f 	bl	8001aec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800202e:	f000 fb85 	bl	800273c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002032:	f7ff fd41 	bl	8001ab8 <vPortEnterCritical>
 8002036:	6a3b      	ldr	r3, [r7, #32]
 8002038:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800203c:	b25b      	sxtb	r3, r3
 800203e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002042:	d103      	bne.n	800204c <xQueueGenericReceive+0xf8>
 8002044:	6a3b      	ldr	r3, [r7, #32]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002052:	b25b      	sxtb	r3, r3
 8002054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002058:	d103      	bne.n	8002062 <xQueueGenericReceive+0x10e>
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002062:	f7ff fd43 	bl	8001aec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002066:	1d3a      	adds	r2, r7, #4
 8002068:	f107 0310 	add.w	r3, r7, #16
 800206c:	4611      	mov	r1, r2
 800206e:	4618      	mov	r0, r3
 8002070:	f000 fdd2 	bl	8002c18 <xTaskCheckForTimeOut>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d131      	bne.n	80020de <xQueueGenericReceive+0x18a>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800207a:	6a38      	ldr	r0, [r7, #32]
 800207c:	f000 f924 	bl	80022c8 <prvIsQueueEmpty>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d025      	beq.n	80020d2 <xQueueGenericReceive+0x17e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002086:	6a3b      	ldr	r3, [r7, #32]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d108      	bne.n	80020a0 <xQueueGenericReceive+0x14c>
					{
						taskENTER_CRITICAL();
 800208e:	f7ff fd13 	bl	8001ab8 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002092:	6a3b      	ldr	r3, [r7, #32]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	4618      	mov	r0, r3
 8002098:	f000 ff04 	bl	8002ea4 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 800209c:	f7ff fd26 	bl	8001aec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80020a0:	6a3b      	ldr	r3, [r7, #32]
 80020a2:	3324      	adds	r3, #36	; 0x24
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	4611      	mov	r1, r2
 80020a8:	4618      	mov	r0, r3
 80020aa:	f000 fd15 	bl	8002ad8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80020ae:	6a38      	ldr	r0, [r7, #32]
 80020b0:	f000 f8b8 	bl	8002224 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80020b4:	f000 fb50 	bl	8002758 <xTaskResumeAll>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f47f af55 	bne.w	8001f6a <xQueueGenericReceive+0x16>
				{
					portYIELD_WITHIN_API();
 80020c0:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <xQueueGenericReceive+0x1ac>)
 80020c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	f3bf 8f4f 	dsb	sy
 80020cc:	f3bf 8f6f 	isb	sy
 80020d0:	e74b      	b.n	8001f6a <xQueueGenericReceive+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80020d2:	6a38      	ldr	r0, [r7, #32]
 80020d4:	f000 f8a6 	bl	8002224 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80020d8:	f000 fb3e 	bl	8002758 <xTaskResumeAll>
 80020dc:	e745      	b.n	8001f6a <xQueueGenericReceive+0x16>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 80020de:	6a38      	ldr	r0, [r7, #32]
 80020e0:	f000 f8a0 	bl	8002224 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80020e4:	f000 fb38 	bl	8002758 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80020e8:	6a38      	ldr	r0, [r7, #32]
 80020ea:	f000 f8ed 	bl	80022c8 <prvIsQueueEmpty>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f43f af3a 	beq.w	8001f6a <xQueueGenericReceive+0x16>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80020f6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3728      	adds	r7, #40	; 0x28
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	e000ed04 	.word	0xe000ed04

08002104 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002118:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10d      	bne.n	800213e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d14d      	bne.n	80021c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	4618      	mov	r0, r3
 8002130:	f000 ff16 	bl	8002f60 <xTaskPriorityDisinherit>
 8002134:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	605a      	str	r2, [r3, #4]
 800213c:	e043      	b.n	80021c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d119      	bne.n	8002178 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6898      	ldr	r0, [r3, #8]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	461a      	mov	r2, r3
 800214e:	68b9      	ldr	r1, [r7, #8]
 8002150:	f003 f826 	bl	80051a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	441a      	add	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	429a      	cmp	r2, r3
 800216c:	d32b      	bcc.n	80021c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	609a      	str	r2, [r3, #8]
 8002176:	e026      	b.n	80021c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	68d8      	ldr	r0, [r3, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002180:	461a      	mov	r2, r3
 8002182:	68b9      	ldr	r1, [r7, #8]
 8002184:	f003 f80c 	bl	80051a0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	425b      	negs	r3, r3
 8002192:	441a      	add	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	68da      	ldr	r2, [r3, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d207      	bcs.n	80021b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	425b      	negs	r3, r3
 80021ae:	441a      	add	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d105      	bne.n	80021c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d002      	beq.n	80021c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	3b01      	subs	r3, #1
 80021c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1c5a      	adds	r2, r3, #1
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80021ce:	697b      	ldr	r3, [r7, #20]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3718      	adds	r7, #24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d018      	beq.n	800221c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	441a      	add	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68da      	ldr	r2, [r3, #12]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	429a      	cmp	r2, r3
 8002202:	d303      	bcc.n	800220c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68d9      	ldr	r1, [r3, #12]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002214:	461a      	mov	r2, r3
 8002216:	6838      	ldr	r0, [r7, #0]
 8002218:	f002 ffc2 	bl	80051a0 <memcpy>
	}
}
 800221c:	bf00      	nop
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800222c:	f7ff fc44 	bl	8001ab8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002236:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002238:	e011      	b.n	800225e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	2b00      	cmp	r3, #0
 8002240:	d012      	beq.n	8002268 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3324      	adds	r3, #36	; 0x24
 8002246:	4618      	mov	r0, r3
 8002248:	f000 fc7a 	bl	8002b40 <xTaskRemoveFromEventList>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002252:	f000 fd25 	bl	8002ca0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002256:	7bfb      	ldrb	r3, [r7, #15]
 8002258:	3b01      	subs	r3, #1
 800225a:	b2db      	uxtb	r3, r3
 800225c:	73fb      	strb	r3, [r7, #15]
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800225e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002262:	2b00      	cmp	r3, #0
 8002264:	dce9      	bgt.n	800223a <prvUnlockQueue+0x16>
 8002266:	e000      	b.n	800226a <prvUnlockQueue+0x46>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
 8002268:	bf00      	nop
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	22ff      	movs	r2, #255	; 0xff
 800226e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002272:	f7ff fc3b 	bl	8001aec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002276:	f7ff fc1f 	bl	8001ab8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002280:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002282:	e011      	b.n	80022a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d012      	beq.n	80022b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3310      	adds	r3, #16
 8002290:	4618      	mov	r0, r3
 8002292:	f000 fc55 	bl	8002b40 <xTaskRemoveFromEventList>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800229c:	f000 fd00 	bl	8002ca0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80022a0:	7bbb      	ldrb	r3, [r7, #14]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	73bb      	strb	r3, [r7, #14]
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80022a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	dce9      	bgt.n	8002284 <prvUnlockQueue+0x60>
 80022b0:	e000      	b.n	80022b4 <prvUnlockQueue+0x90>

				--cRxLock;
			}
			else
			{
				break;
 80022b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	22ff      	movs	r2, #255	; 0xff
 80022b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80022bc:	f7ff fc16 	bl	8001aec <vPortExitCritical>
}
 80022c0:	bf00      	nop
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80022d0:	f7ff fbf2 	bl	8001ab8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d102      	bne.n	80022e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80022dc:	2301      	movs	r3, #1
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	e001      	b.n	80022e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80022e6:	f7ff fc01 	bl	8001aec <vPortExitCritical>

	return xReturn;
 80022ea:	68fb      	ldr	r3, [r7, #12]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80022fc:	f7ff fbdc 	bl	8001ab8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002308:	429a      	cmp	r2, r3
 800230a:	d102      	bne.n	8002312 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800230c:	2301      	movs	r3, #1
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	e001      	b.n	8002316 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002316:	f7ff fbe9 	bl	8001aec <vPortExitCritical>

	return xReturn;
 800231a:	68fb      	ldr	r3, [r7, #12]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002334:	f7ff fbc0 	bl	8001ab8 <vPortEnterCritical>
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800233e:	b25b      	sxtb	r3, r3
 8002340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002344:	d103      	bne.n	800234e <vQueueWaitForMessageRestricted+0x2a>
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002354:	b25b      	sxtb	r3, r3
 8002356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800235a:	d103      	bne.n	8002364 <vQueueWaitForMessageRestricted+0x40>
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002364:	f7ff fbc2 	bl	8001aec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236c:	2b00      	cmp	r3, #0
 800236e:	d106      	bne.n	800237e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	3324      	adds	r3, #36	; 0x24
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	68b9      	ldr	r1, [r7, #8]
 8002378:	4618      	mov	r0, r3
 800237a:	f000 fbc3 	bl	8002b04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800237e:	6978      	ldr	r0, [r7, #20]
 8002380:	f7ff ff50 	bl	8002224 <prvUnlockQueue>
	}
 8002384:	bf00      	nop
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08a      	sub	sp, #40	; 0x28
 8002390:	af04      	add	r7, sp, #16
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
 8002398:	603b      	str	r3, [r7, #0]
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
		configASSERT( pxTaskBuffer != NULL );

		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800239a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239c:	2b00      	cmp	r3, #0
 800239e:	d01e      	beq.n	80023de <xTaskCreateStatic+0x52>
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d01b      	beq.n	80023de <xTaskCreateStatic+0x52>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80023a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a8:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ae:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	2202      	movs	r2, #2
 80023b4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80023b8:	2300      	movs	r3, #0
 80023ba:	9303      	str	r3, [sp, #12]
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	9302      	str	r3, [sp, #8]
 80023c0:	f107 0310 	add.w	r3, r7, #16
 80023c4:	9301      	str	r3, [sp, #4]
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	68b9      	ldr	r1, [r7, #8]
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f000 f851 	bl	8002478 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80023d6:	6978      	ldr	r0, [r7, #20]
 80023d8:	f000 f8c6 	bl	8002568 <prvAddNewTaskToReadyList>
 80023dc:	e001      	b.n	80023e2 <xTaskCreateStatic+0x56>
		}
		else
		{
			xReturn = NULL;
 80023de:	2300      	movs	r3, #0
 80023e0:	613b      	str	r3, [r7, #16]
		}

		return xReturn;
 80023e2:	693b      	ldr	r3, [r7, #16]
	}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08c      	sub	sp, #48	; 0x30
 80023f0:	af04      	add	r7, sp, #16
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	603b      	str	r3, [r7, #0]
 80023f8:	4613      	mov	r3, r2
 80023fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023fc:	88fb      	ldrh	r3, [r7, #6]
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff f885 	bl	8001510 <pvPortMalloc>
 8002406:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00e      	beq.n	800242c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800240e:	205c      	movs	r0, #92	; 0x5c
 8002410:	f7ff f87e 	bl	8001510 <pvPortMalloc>
 8002414:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	631a      	str	r2, [r3, #48]	; 0x30
 8002422:	e005      	b.n	8002430 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002424:	6978      	ldr	r0, [r7, #20]
 8002426:	f7ff f907 	bl	8001638 <vPortFree>
 800242a:	e001      	b.n	8002430 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800242c:	2300      	movs	r3, #0
 800242e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d017      	beq.n	8002466 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800243e:	88fa      	ldrh	r2, [r7, #6]
 8002440:	2300      	movs	r3, #0
 8002442:	9303      	str	r3, [sp, #12]
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	9302      	str	r3, [sp, #8]
 8002448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244a:	9301      	str	r3, [sp, #4]
 800244c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	68b9      	ldr	r1, [r7, #8]
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f000 f80f 	bl	8002478 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800245a:	69f8      	ldr	r0, [r7, #28]
 800245c:	f000 f884 	bl	8002568 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002460:	2301      	movs	r3, #1
 8002462:	61bb      	str	r3, [r7, #24]
 8002464:	e002      	b.n	800246c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002466:	f04f 33ff 	mov.w	r3, #4294967295
 800246a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800246c:	69bb      	ldr	r3, [r7, #24]
	}
 800246e:	4618      	mov	r0, r3
 8002470:	3720      	adds	r7, #32
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop

08002478 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
 8002484:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002488:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	461a      	mov	r2, r3
 8002490:	21a5      	movs	r1, #165	; 0xa5
 8002492:	f002 fe90 	bl	80051b6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80024a0:	3b01      	subs	r3, #1
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	f023 0307 	bic.w	r3, r3, #7
 80024ae:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]
 80024b4:	e012      	b.n	80024dc <prvInitialiseNewTask+0x64>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	4413      	add	r3, r2
 80024bc:	7819      	ldrb	r1, [r3, #0]
 80024be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	4413      	add	r3, r2
 80024c4:	3334      	adds	r3, #52	; 0x34
 80024c6:	460a      	mov	r2, r1
 80024c8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80024ca:	68ba      	ldr	r2, [r7, #8]
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	4413      	add	r3, r2
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d006      	beq.n	80024e4 <prvInitialiseNewTask+0x6c>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	3301      	adds	r3, #1
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	2b0f      	cmp	r3, #15
 80024e0:	d9e9      	bls.n	80024b6 <prvInitialiseNewTask+0x3e>
 80024e2:	e000      	b.n	80024e6 <prvInitialiseNewTask+0x6e>
		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
		{
			break;
 80024e4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80024e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80024ee:	6a3b      	ldr	r3, [r7, #32]
 80024f0:	2b37      	cmp	r3, #55	; 0x37
 80024f2:	d901      	bls.n	80024f8 <prvInitialiseNewTask+0x80>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80024f4:	2337      	movs	r3, #55	; 0x37
 80024f6:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80024f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fa:	6a3a      	ldr	r2, [r7, #32]
 80024fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80024fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002500:	6a3a      	ldr	r2, [r7, #32]
 8002502:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002506:	2200      	movs	r2, #0
 8002508:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800250a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250c:	3304      	adds	r3, #4
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff f9a8 	bl	8001864 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002516:	3318      	adds	r3, #24
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff f9a3 	bl	8001864 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800251e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002520:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002522:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002524:	6a3b      	ldr	r3, [r7, #32]
 8002526:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800252a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800252c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800252e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002532:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002536:	2200      	movs	r2, #0
 8002538:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800253a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	68f9      	ldr	r1, [r7, #12]
 8002546:	6938      	ldr	r0, [r7, #16]
 8002548:	f7ff fa22 	bl	8001990 <pxPortInitialiseStack>
 800254c:	4602      	mov	r2, r0
 800254e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002550:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	2b00      	cmp	r3, #0
 8002556:	d002      	beq.n	800255e <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800255c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800255e:	bf00      	nop
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop

08002568 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002570:	f7ff faa2 	bl	8001ab8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002574:	4b2d      	ldr	r3, [pc, #180]	; (800262c <prvAddNewTaskToReadyList+0xc4>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	3301      	adds	r3, #1
 800257a:	4a2c      	ldr	r2, [pc, #176]	; (800262c <prvAddNewTaskToReadyList+0xc4>)
 800257c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800257e:	4b2c      	ldr	r3, [pc, #176]	; (8002630 <prvAddNewTaskToReadyList+0xc8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d109      	bne.n	800259a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002586:	4a2a      	ldr	r2, [pc, #168]	; (8002630 <prvAddNewTaskToReadyList+0xc8>)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800258c:	4b27      	ldr	r3, [pc, #156]	; (800262c <prvAddNewTaskToReadyList+0xc4>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d110      	bne.n	80025b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002594:	f000 fba8 	bl	8002ce8 <prvInitialiseTaskLists>
 8002598:	e00d      	b.n	80025b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800259a:	4b26      	ldr	r3, [pc, #152]	; (8002634 <prvAddNewTaskToReadyList+0xcc>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d109      	bne.n	80025b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80025a2:	4b23      	ldr	r3, [pc, #140]	; (8002630 <prvAddNewTaskToReadyList+0xc8>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d802      	bhi.n	80025b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80025b0:	4a1f      	ldr	r2, [pc, #124]	; (8002630 <prvAddNewTaskToReadyList+0xc8>)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80025b6:	4b20      	ldr	r3, [pc, #128]	; (8002638 <prvAddNewTaskToReadyList+0xd0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	3301      	adds	r3, #1
 80025bc:	4a1e      	ldr	r2, [pc, #120]	; (8002638 <prvAddNewTaskToReadyList+0xd0>)
 80025be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80025c0:	4b1d      	ldr	r3, [pc, #116]	; (8002638 <prvAddNewTaskToReadyList+0xd0>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025cc:	4b1b      	ldr	r3, [pc, #108]	; (800263c <prvAddNewTaskToReadyList+0xd4>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d903      	bls.n	80025dc <prvAddNewTaskToReadyList+0x74>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d8:	4a18      	ldr	r2, [pc, #96]	; (800263c <prvAddNewTaskToReadyList+0xd4>)
 80025da:	6013      	str	r3, [r2, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e0:	4613      	mov	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4a15      	ldr	r2, [pc, #84]	; (8002640 <prvAddNewTaskToReadyList+0xd8>)
 80025ea:	441a      	add	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3304      	adds	r3, #4
 80025f0:	4619      	mov	r1, r3
 80025f2:	4610      	mov	r0, r2
 80025f4:	f7ff f944 	bl	8001880 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80025f8:	f7ff fa78 	bl	8001aec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80025fc:	4b0d      	ldr	r3, [pc, #52]	; (8002634 <prvAddNewTaskToReadyList+0xcc>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00e      	beq.n	8002622 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002604:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <prvAddNewTaskToReadyList+0xc8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260e:	429a      	cmp	r2, r3
 8002610:	d207      	bcs.n	8002622 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002612:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <prvAddNewTaskToReadyList+0xdc>)
 8002614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	f3bf 8f4f 	dsb	sy
 800261e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002622:	bf00      	nop
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	20002998 	.word	0x20002998
 8002630:	200024c4 	.word	0x200024c4
 8002634:	200029a4 	.word	0x200029a4
 8002638:	200029b4 	.word	0x200029b4
 800263c:	200029a0 	.word	0x200029a0
 8002640:	200024c8 	.word	0x200024c8
 8002644:	e000ed04 	.word	0xe000ed04

08002648 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002650:	2300      	movs	r3, #0
 8002652:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d008      	beq.n	800266c <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 800265a:	f000 f86f 	bl	800273c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800265e:	2100      	movs	r1, #0
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 fcdd 	bl	8003020 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002666:	f000 f877 	bl	8002758 <xTaskResumeAll>
 800266a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d107      	bne.n	8002682 <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
 8002672:	4b06      	ldr	r3, [pc, #24]	; (800268c <vTaskDelay+0x44>)
 8002674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	f3bf 8f4f 	dsb	sy
 800267e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002682:	bf00      	nop
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	e000ed04 	.word	0xe000ed04

08002690 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08a      	sub	sp, #40	; 0x28
 8002694:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800269a:	2300      	movs	r3, #0
 800269c:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800269e:	1d3a      	adds	r2, r7, #4
 80026a0:	f107 0108 	add.w	r1, r7, #8
 80026a4:	f107 030c 	add.w	r3, r7, #12
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fd fe15 	bl	80002d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	9202      	str	r2, [sp, #8]
 80026b6:	9301      	str	r3, [sp, #4]
 80026b8:	2300      	movs	r3, #0
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	2300      	movs	r3, #0
 80026be:	460a      	mov	r2, r1
 80026c0:	4918      	ldr	r1, [pc, #96]	; (8002724 <vTaskStartScheduler+0x94>)
 80026c2:	4819      	ldr	r0, [pc, #100]	; (8002728 <vTaskStartScheduler+0x98>)
 80026c4:	f7ff fe62 	bl	800238c <xTaskCreateStatic>
 80026c8:	4602      	mov	r2, r0
 80026ca:	4b18      	ldr	r3, [pc, #96]	; (800272c <vTaskStartScheduler+0x9c>)
 80026cc:	601a      	str	r2, [r3, #0]
												( void * ) NULL,
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80026ce:	4b17      	ldr	r3, [pc, #92]	; (800272c <vTaskStartScheduler+0x9c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d002      	beq.n	80026dc <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
 80026d6:	2301      	movs	r3, #1
 80026d8:	617b      	str	r3, [r7, #20]
 80026da:	e001      	b.n	80026e0 <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d102      	bne.n	80026ec <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 80026e6:	f000 fcef 	bl	80030c8 <xTimerCreateTimerTask>
 80026ea:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d114      	bne.n	800271c <vTaskStartScheduler+0x8c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80026f2:	f04f 0310 	mov.w	r3, #16
 80026f6:	f383 8811 	msr	BASEPRI, r3
 80026fa:	f3bf 8f6f 	isb	sy
 80026fe:	f3bf 8f4f 	dsb	sy
 8002702:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002704:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <vTaskStartScheduler+0xa0>)
 8002706:	f04f 32ff 	mov.w	r2, #4294967295
 800270a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800270c:	4b09      	ldr	r3, [pc, #36]	; (8002734 <vTaskStartScheduler+0xa4>)
 800270e:	2201      	movs	r2, #1
 8002710:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002712:	4b09      	ldr	r3, [pc, #36]	; (8002738 <vTaskStartScheduler+0xa8>)
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002718:	f7ff f9a6 	bl	8001a68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800271c:	bf00      	nop
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	080060a8 	.word	0x080060a8
 8002728:	08002cb9 	.word	0x08002cb9
 800272c:	200029bc 	.word	0x200029bc
 8002730:	200029b8 	.word	0x200029b8
 8002734:	200029a4 	.word	0x200029a4
 8002738:	2000299c 	.word	0x2000299c

0800273c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002740:	4b04      	ldr	r3, [pc, #16]	; (8002754 <vTaskSuspendAll+0x18>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	3301      	adds	r3, #1
 8002746:	4a03      	ldr	r2, [pc, #12]	; (8002754 <vTaskSuspendAll+0x18>)
 8002748:	6013      	str	r3, [r2, #0]
}
 800274a:	bf00      	nop
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	200029c0 	.word	0x200029c0

08002758 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800275e:	2300      	movs	r3, #0
 8002760:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002762:	2300      	movs	r3, #0
 8002764:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002766:	f7ff f9a7 	bl	8001ab8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800276a:	4b39      	ldr	r3, [pc, #228]	; (8002850 <xTaskResumeAll+0xf8>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	3b01      	subs	r3, #1
 8002770:	4a37      	ldr	r2, [pc, #220]	; (8002850 <xTaskResumeAll+0xf8>)
 8002772:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002774:	4b36      	ldr	r3, [pc, #216]	; (8002850 <xTaskResumeAll+0xf8>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d162      	bne.n	8002842 <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800277c:	4b35      	ldr	r3, [pc, #212]	; (8002854 <xTaskResumeAll+0xfc>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d05e      	beq.n	8002842 <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002784:	e02f      	b.n	80027e6 <xTaskResumeAll+0x8e>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002786:	4b34      	ldr	r3, [pc, #208]	; (8002858 <xTaskResumeAll+0x100>)
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	3318      	adds	r3, #24
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff f8d2 	bl	800193c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	3304      	adds	r3, #4
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff f8cd 	bl	800193c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a6:	4b2d      	ldr	r3, [pc, #180]	; (800285c <xTaskResumeAll+0x104>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d903      	bls.n	80027b6 <xTaskResumeAll+0x5e>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b2:	4a2a      	ldr	r2, [pc, #168]	; (800285c <xTaskResumeAll+0x104>)
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ba:	4613      	mov	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4a27      	ldr	r2, [pc, #156]	; (8002860 <xTaskResumeAll+0x108>)
 80027c4:	441a      	add	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	3304      	adds	r3, #4
 80027ca:	4619      	mov	r1, r3
 80027cc:	4610      	mov	r0, r2
 80027ce:	f7ff f857 	bl	8001880 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d6:	4b23      	ldr	r3, [pc, #140]	; (8002864 <xTaskResumeAll+0x10c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027dc:	429a      	cmp	r2, r3
 80027de:	d302      	bcc.n	80027e6 <xTaskResumeAll+0x8e>
					{
						xYieldPending = pdTRUE;
 80027e0:	4b21      	ldr	r3, [pc, #132]	; (8002868 <xTaskResumeAll+0x110>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027e6:	4b1c      	ldr	r3, [pc, #112]	; (8002858 <xTaskResumeAll+0x100>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1cb      	bne.n	8002786 <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <xTaskResumeAll+0xa0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80027f4:	f000 fb12 	bl	8002e1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80027f8:	4b1c      	ldr	r3, [pc, #112]	; (800286c <xTaskResumeAll+0x114>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d010      	beq.n	8002826 <xTaskResumeAll+0xce>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002804:	f000 f846 	bl	8002894 <xTaskIncrementTick>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d002      	beq.n	8002814 <xTaskResumeAll+0xbc>
							{
								xYieldPending = pdTRUE;
 800280e:	4b16      	ldr	r3, [pc, #88]	; (8002868 <xTaskResumeAll+0x110>)
 8002810:	2201      	movs	r2, #1
 8002812:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3b01      	subs	r3, #1
 8002818:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1f1      	bne.n	8002804 <xTaskResumeAll+0xac>

						uxPendedTicks = 0;
 8002820:	4b12      	ldr	r3, [pc, #72]	; (800286c <xTaskResumeAll+0x114>)
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002826:	4b10      	ldr	r3, [pc, #64]	; (8002868 <xTaskResumeAll+0x110>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d009      	beq.n	8002842 <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800282e:	2301      	movs	r3, #1
 8002830:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002832:	4b0f      	ldr	r3, [pc, #60]	; (8002870 <xTaskResumeAll+0x118>)
 8002834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	f3bf 8f4f 	dsb	sy
 800283e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002842:	f7ff f953 	bl	8001aec <vPortExitCritical>

	return xAlreadyYielded;
 8002846:	68bb      	ldr	r3, [r7, #8]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	200029c0 	.word	0x200029c0
 8002854:	20002998 	.word	0x20002998
 8002858:	20002958 	.word	0x20002958
 800285c:	200029a0 	.word	0x200029a0
 8002860:	200024c8 	.word	0x200024c8
 8002864:	200024c4 	.word	0x200024c4
 8002868:	200029ac 	.word	0x200029ac
 800286c:	200029a8 	.word	0x200029a8
 8002870:	e000ed04 	.word	0xe000ed04

08002874 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800287a:	4b05      	ldr	r3, [pc, #20]	; (8002890 <xTaskGetTickCount+0x1c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002880:	687b      	ldr	r3, [r7, #4]
}
 8002882:	4618      	mov	r0, r3
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	2000299c 	.word	0x2000299c

08002894 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800289a:	2300      	movs	r3, #0
 800289c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800289e:	4b49      	ldr	r3, [pc, #292]	; (80029c4 <xTaskIncrementTick+0x130>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d17d      	bne.n	80029a2 <xTaskIncrementTick+0x10e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80028a6:	4b48      	ldr	r3, [pc, #288]	; (80029c8 <xTaskIncrementTick+0x134>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	3301      	adds	r3, #1
 80028ac:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80028ae:	4a46      	ldr	r2, [pc, #280]	; (80029c8 <xTaskIncrementTick+0x134>)
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d110      	bne.n	80028dc <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 80028ba:	4b44      	ldr	r3, [pc, #272]	; (80029cc <xTaskIncrementTick+0x138>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	4b43      	ldr	r3, [pc, #268]	; (80029d0 <xTaskIncrementTick+0x13c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a41      	ldr	r2, [pc, #260]	; (80029cc <xTaskIncrementTick+0x138>)
 80028c6:	6013      	str	r3, [r2, #0]
 80028c8:	4a41      	ldr	r2, [pc, #260]	; (80029d0 <xTaskIncrementTick+0x13c>)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	4b41      	ldr	r3, [pc, #260]	; (80029d4 <xTaskIncrementTick+0x140>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	3301      	adds	r3, #1
 80028d4:	4a3f      	ldr	r2, [pc, #252]	; (80029d4 <xTaskIncrementTick+0x140>)
 80028d6:	6013      	str	r3, [r2, #0]
 80028d8:	f000 faa0 	bl	8002e1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80028dc:	4b3e      	ldr	r3, [pc, #248]	; (80029d8 <xTaskIncrementTick+0x144>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d34e      	bcc.n	8002984 <xTaskIncrementTick+0xf0>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028e6:	4b39      	ldr	r3, [pc, #228]	; (80029cc <xTaskIncrementTick+0x138>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <xTaskIncrementTick+0x60>
 80028f0:	2301      	movs	r3, #1
 80028f2:	e000      	b.n	80028f6 <xTaskIncrementTick+0x62>
 80028f4:	2300      	movs	r3, #0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d004      	beq.n	8002904 <xTaskIncrementTick+0x70>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028fa:	4b37      	ldr	r3, [pc, #220]	; (80029d8 <xTaskIncrementTick+0x144>)
 80028fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002900:	601a      	str	r2, [r3, #0]
					break;
 8002902:	e03f      	b.n	8002984 <xTaskIncrementTick+0xf0>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002904:	4b31      	ldr	r3, [pc, #196]	; (80029cc <xTaskIncrementTick+0x138>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	429a      	cmp	r2, r3
 800291a:	d203      	bcs.n	8002924 <xTaskIncrementTick+0x90>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800291c:	4a2e      	ldr	r2, [pc, #184]	; (80029d8 <xTaskIncrementTick+0x144>)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6013      	str	r3, [r2, #0]
						break;
 8002922:	e02f      	b.n	8002984 <xTaskIncrementTick+0xf0>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	3304      	adds	r3, #4
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff f807 	bl	800193c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002932:	2b00      	cmp	r3, #0
 8002934:	d004      	beq.n	8002940 <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	3318      	adds	r3, #24
 800293a:	4618      	mov	r0, r3
 800293c:	f7fe fffe 	bl	800193c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002944:	4b25      	ldr	r3, [pc, #148]	; (80029dc <xTaskIncrementTick+0x148>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d903      	bls.n	8002954 <xTaskIncrementTick+0xc0>
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002950:	4a22      	ldr	r2, [pc, #136]	; (80029dc <xTaskIncrementTick+0x148>)
 8002952:	6013      	str	r3, [r2, #0]
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4a1f      	ldr	r2, [pc, #124]	; (80029e0 <xTaskIncrementTick+0x14c>)
 8002962:	441a      	add	r2, r3
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	3304      	adds	r3, #4
 8002968:	4619      	mov	r1, r3
 800296a:	4610      	mov	r0, r2
 800296c:	f7fe ff88 	bl	8001880 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002974:	4b1b      	ldr	r3, [pc, #108]	; (80029e4 <xTaskIncrementTick+0x150>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297a:	429a      	cmp	r2, r3
 800297c:	d3b3      	bcc.n	80028e6 <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 800297e:	2301      	movs	r3, #1
 8002980:	617b      	str	r3, [r7, #20]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
 8002982:	e7b0      	b.n	80028e6 <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002984:	4b17      	ldr	r3, [pc, #92]	; (80029e4 <xTaskIncrementTick+0x150>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800298a:	4915      	ldr	r1, [pc, #84]	; (80029e0 <xTaskIncrementTick+0x14c>)
 800298c:	4613      	mov	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d907      	bls.n	80029ac <xTaskIncrementTick+0x118>
			{
				xSwitchRequired = pdTRUE;
 800299c:	2301      	movs	r3, #1
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	e004      	b.n	80029ac <xTaskIncrementTick+0x118>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80029a2:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <xTaskIncrementTick+0x154>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	3301      	adds	r3, #1
 80029a8:	4a0f      	ldr	r2, [pc, #60]	; (80029e8 <xTaskIncrementTick+0x154>)
 80029aa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80029ac:	4b0f      	ldr	r3, [pc, #60]	; (80029ec <xTaskIncrementTick+0x158>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <xTaskIncrementTick+0x124>
		{
			xSwitchRequired = pdTRUE;
 80029b4:	2301      	movs	r3, #1
 80029b6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80029b8:	697b      	ldr	r3, [r7, #20]
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3718      	adds	r7, #24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	200029c0 	.word	0x200029c0
 80029c8:	2000299c 	.word	0x2000299c
 80029cc:	20002950 	.word	0x20002950
 80029d0:	20002954 	.word	0x20002954
 80029d4:	200029b0 	.word	0x200029b0
 80029d8:	200029b8 	.word	0x200029b8
 80029dc:	200029a0 	.word	0x200029a0
 80029e0:	200024c8 	.word	0x200024c8
 80029e4:	200024c4 	.word	0x200024c4
 80029e8:	200029a8 	.word	0x200029a8
 80029ec:	200029ac 	.word	0x200029ac

080029f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80029f6:	4b33      	ldr	r3, [pc, #204]	; (8002ac4 <vTaskSwitchContext+0xd4>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80029fe:	4b32      	ldr	r3, [pc, #200]	; (8002ac8 <vTaskSwitchContext+0xd8>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002a04:	e05a      	b.n	8002abc <vTaskSwitchContext+0xcc>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 8002a06:	4b30      	ldr	r3, [pc, #192]	; (8002ac8 <vTaskSwitchContext+0xd8>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
 8002a0c:	4b2f      	ldr	r3, [pc, #188]	; (8002acc <vTaskSwitchContext+0xdc>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	60bb      	str	r3, [r7, #8]
 8002a14:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8002a18:	607b      	str	r3, [r7, #4]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d111      	bne.n	8002a48 <vTaskSwitchContext+0x58>
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	3304      	adds	r3, #4
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d10b      	bne.n	8002a48 <vTaskSwitchContext+0x58>
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	3308      	adds	r3, #8
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d105      	bne.n	8002a48 <vTaskSwitchContext+0x58>
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	330c      	adds	r3, #12
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d008      	beq.n	8002a5a <vTaskSwitchContext+0x6a>
 8002a48:	4b20      	ldr	r3, [pc, #128]	; (8002acc <vTaskSwitchContext+0xdc>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4b1f      	ldr	r3, [pc, #124]	; (8002acc <vTaskSwitchContext+0xdc>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	3334      	adds	r3, #52	; 0x34
 8002a52:	4619      	mov	r1, r3
 8002a54:	4610      	mov	r0, r2
 8002a56:	f7fd fc33 	bl	80002c0 <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002a5a:	4b1d      	ldr	r3, [pc, #116]	; (8002ad0 <vTaskSwitchContext+0xe0>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	e002      	b.n	8002a68 <vTaskSwitchContext+0x78>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	3b01      	subs	r3, #1
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	491a      	ldr	r1, [pc, #104]	; (8002ad4 <vTaskSwitchContext+0xe4>)
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0f2      	beq.n	8002a62 <vTaskSwitchContext+0x72>
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4a13      	ldr	r2, [pc, #76]	; (8002ad4 <vTaskSwitchContext+0xe4>)
 8002a88:	4413      	add	r3, r2
 8002a8a:	603b      	str	r3, [r7, #0]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	3308      	adds	r3, #8
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d104      	bne.n	8002aac <vTaskSwitchContext+0xbc>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	605a      	str	r2, [r3, #4]
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	4a06      	ldr	r2, [pc, #24]	; (8002acc <vTaskSwitchContext+0xdc>)
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	4a06      	ldr	r2, [pc, #24]	; (8002ad0 <vTaskSwitchContext+0xe0>)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6013      	str	r3, [r2, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002abc:	bf00      	nop
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	200029c0 	.word	0x200029c0
 8002ac8:	200029ac 	.word	0x200029ac
 8002acc:	200024c4 	.word	0x200024c4
 8002ad0:	200029a0 	.word	0x200029a0
 8002ad4:	200024c8 	.word	0x200024c8

08002ad8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002ae2:	4b07      	ldr	r3, [pc, #28]	; (8002b00 <vTaskPlaceOnEventList+0x28>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	3318      	adds	r3, #24
 8002ae8:	4619      	mov	r1, r3
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7fe feec 	bl	80018c8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002af0:	2101      	movs	r1, #1
 8002af2:	6838      	ldr	r0, [r7, #0]
 8002af4:	f000 fa94 	bl	8003020 <prvAddCurrentTaskToDelayedList>
}
 8002af8:	bf00      	nop
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	200024c4 	.word	0x200024c4

08002b04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002b10:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <vTaskPlaceOnEventListRestricted+0x38>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	3318      	adds	r3, #24
 8002b16:	4619      	mov	r1, r3
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f7fe feb1 	bl	8001880 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d002      	beq.n	8002b2a <vTaskPlaceOnEventListRestricted+0x26>
		{
			xTicksToWait = portMAX_DELAY;
 8002b24:	f04f 33ff 	mov.w	r3, #4294967295
 8002b28:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	68b8      	ldr	r0, [r7, #8]
 8002b2e:	f000 fa77 	bl	8003020 <prvAddCurrentTaskToDelayedList>
	}
 8002b32:	bf00      	nop
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	200024c4 	.word	0x200024c4

08002b40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	3318      	adds	r3, #24
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fe fef1 	bl	800193c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b5a:	4b1e      	ldr	r3, [pc, #120]	; (8002bd4 <xTaskRemoveFromEventList+0x94>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d11d      	bne.n	8002b9e <xTaskRemoveFromEventList+0x5e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	3304      	adds	r3, #4
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe fee8 	bl	800193c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b70:	4b19      	ldr	r3, [pc, #100]	; (8002bd8 <xTaskRemoveFromEventList+0x98>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d903      	bls.n	8002b80 <xTaskRemoveFromEventList+0x40>
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7c:	4a16      	ldr	r2, [pc, #88]	; (8002bd8 <xTaskRemoveFromEventList+0x98>)
 8002b7e:	6013      	str	r3, [r2, #0]
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b84:	4613      	mov	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4a13      	ldr	r2, [pc, #76]	; (8002bdc <xTaskRemoveFromEventList+0x9c>)
 8002b8e:	441a      	add	r2, r3
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	3304      	adds	r3, #4
 8002b94:	4619      	mov	r1, r3
 8002b96:	4610      	mov	r0, r2
 8002b98:	f7fe fe72 	bl	8001880 <vListInsertEnd>
 8002b9c:	e005      	b.n	8002baa <xTaskRemoveFromEventList+0x6a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	3318      	adds	r3, #24
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	480e      	ldr	r0, [pc, #56]	; (8002be0 <xTaskRemoveFromEventList+0xa0>)
 8002ba6:	f7fe fe6b 	bl	8001880 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bae:	4b0d      	ldr	r3, [pc, #52]	; (8002be4 <xTaskRemoveFromEventList+0xa4>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d905      	bls.n	8002bc4 <xTaskRemoveFromEventList+0x84>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002bbc:	4b0a      	ldr	r3, [pc, #40]	; (8002be8 <xTaskRemoveFromEventList+0xa8>)
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	e001      	b.n	8002bc8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		xReturn = pdFALSE;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	200029c0 	.word	0x200029c0
 8002bd8:	200029a0 	.word	0x200029a0
 8002bdc:	200024c8 	.word	0x200024c8
 8002be0:	20002958 	.word	0x20002958
 8002be4:	200024c4 	.word	0x200024c4
 8002be8:	200029ac 	.word	0x200029ac

08002bec <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002bf4:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <vTaskSetTimeOutState+0x24>)
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002bfc:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <vTaskSetTimeOutState+0x28>)
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	605a      	str	r2, [r3, #4]
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	200029b0 	.word	0x200029b0
 8002c14:	2000299c 	.word	0x2000299c

08002c18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 8002c22:	f7fe ff49 	bl	8001ab8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002c26:	4b1c      	ldr	r3, [pc, #112]	; (8002c98 <xTaskCheckForTimeOut+0x80>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c34:	d102      	bne.n	8002c3c <xTaskCheckForTimeOut+0x24>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002c36:	2300      	movs	r3, #0
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	e026      	b.n	8002c8a <xTaskCheckForTimeOut+0x72>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	4b16      	ldr	r3, [pc, #88]	; (8002c9c <xTaskCheckForTimeOut+0x84>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d007      	beq.n	8002c58 <xTaskCheckForTimeOut+0x40>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d802      	bhi.n	8002c58 <xTaskCheckForTimeOut+0x40>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002c52:	2301      	movs	r3, #1
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	e018      	b.n	8002c8a <xTaskCheckForTimeOut+0x72>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	1ad2      	subs	r2, r2, r3
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d20e      	bcs.n	8002c86 <xTaskCheckForTimeOut+0x6e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6859      	ldr	r1, [r3, #4]
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	1acb      	subs	r3, r1, r3
 8002c74:	441a      	add	r2, r3
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7ff ffb6 	bl	8002bec <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	e001      	b.n	8002c8a <xTaskCheckForTimeOut+0x72>
		}
		else
		{
			xReturn = pdTRUE;
 8002c86:	2301      	movs	r3, #1
 8002c88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c8a:	f7fe ff2f 	bl	8001aec <vPortExitCritical>

	return xReturn;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	2000299c 	.word	0x2000299c
 8002c9c:	200029b0 	.word	0x200029b0

08002ca0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002ca4:	4b03      	ldr	r3, [pc, #12]	; (8002cb4 <vTaskMissedYield+0x14>)
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]
}
 8002caa:	bf00      	nop
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	200029ac 	.word	0x200029ac

08002cb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002cc0:	f000 f852 	bl	8002d68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002cc4:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <prvIdleTask+0x28>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d9f9      	bls.n	8002cc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002ccc:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <prvIdleTask+0x2c>)
 8002cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	f3bf 8f4f 	dsb	sy
 8002cd8:	f3bf 8f6f 	isb	sy
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8002cdc:	e7f0      	b.n	8002cc0 <prvIdleTask+0x8>
 8002cde:	bf00      	nop
 8002ce0:	200024c8 	.word	0x200024c8
 8002ce4:	e000ed04 	.word	0xe000ed04

08002ce8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002cee:	2300      	movs	r3, #0
 8002cf0:	607b      	str	r3, [r7, #4]
 8002cf2:	e00c      	b.n	8002d0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4a12      	ldr	r2, [pc, #72]	; (8002d48 <prvInitialiseTaskLists+0x60>)
 8002d00:	4413      	add	r3, r2
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fe fd8e 	bl	8001824 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	607b      	str	r3, [r7, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b37      	cmp	r3, #55	; 0x37
 8002d12:	d9ef      	bls.n	8002cf4 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8002d14:	480d      	ldr	r0, [pc, #52]	; (8002d4c <prvInitialiseTaskLists+0x64>)
 8002d16:	f7fe fd85 	bl	8001824 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002d1a:	480d      	ldr	r0, [pc, #52]	; (8002d50 <prvInitialiseTaskLists+0x68>)
 8002d1c:	f7fe fd82 	bl	8001824 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002d20:	480c      	ldr	r0, [pc, #48]	; (8002d54 <prvInitialiseTaskLists+0x6c>)
 8002d22:	f7fe fd7f 	bl	8001824 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002d26:	480c      	ldr	r0, [pc, #48]	; (8002d58 <prvInitialiseTaskLists+0x70>)
 8002d28:	f7fe fd7c 	bl	8001824 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002d2c:	480b      	ldr	r0, [pc, #44]	; (8002d5c <prvInitialiseTaskLists+0x74>)
 8002d2e:	f7fe fd79 	bl	8001824 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002d32:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <prvInitialiseTaskLists+0x78>)
 8002d34:	4a05      	ldr	r2, [pc, #20]	; (8002d4c <prvInitialiseTaskLists+0x64>)
 8002d36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002d38:	4b0a      	ldr	r3, [pc, #40]	; (8002d64 <prvInitialiseTaskLists+0x7c>)
 8002d3a:	4a05      	ldr	r2, [pc, #20]	; (8002d50 <prvInitialiseTaskLists+0x68>)
 8002d3c:	601a      	str	r2, [r3, #0]
}
 8002d3e:	bf00      	nop
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	200024c8 	.word	0x200024c8
 8002d4c:	20002928 	.word	0x20002928
 8002d50:	2000293c 	.word	0x2000293c
 8002d54:	20002958 	.word	0x20002958
 8002d58:	2000296c 	.word	0x2000296c
 8002d5c:	20002984 	.word	0x20002984
 8002d60:	20002950 	.word	0x20002950
 8002d64:	20002954 	.word	0x20002954

08002d68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d6e:	e028      	b.n	8002dc2 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8002d70:	f7ff fce4 	bl	800273c <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002d74:	4b17      	ldr	r3, [pc, #92]	; (8002dd4 <prvCheckTasksWaitingTermination+0x6c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	bf0c      	ite	eq
 8002d7c:	2301      	moveq	r3, #1
 8002d7e:	2300      	movne	r3, #0
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8002d84:	f7ff fce8 	bl	8002758 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d119      	bne.n	8002dc2 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8002d8e:	f7fe fe93 	bl	8001ab8 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002d92:	4b10      	ldr	r3, [pc, #64]	; (8002dd4 <prvCheckTasksWaitingTermination+0x6c>)
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fe fdcc 	bl	800193c <uxListRemove>
					--uxCurrentNumberOfTasks;
 8002da4:	4b0c      	ldr	r3, [pc, #48]	; (8002dd8 <prvCheckTasksWaitingTermination+0x70>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	3b01      	subs	r3, #1
 8002daa:	4a0b      	ldr	r2, [pc, #44]	; (8002dd8 <prvCheckTasksWaitingTermination+0x70>)
 8002dac:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8002dae:	4b0b      	ldr	r3, [pc, #44]	; (8002ddc <prvCheckTasksWaitingTermination+0x74>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	4a09      	ldr	r2, [pc, #36]	; (8002ddc <prvCheckTasksWaitingTermination+0x74>)
 8002db6:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8002db8:	f7fe fe98 	bl	8001aec <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8002dbc:	6838      	ldr	r0, [r7, #0]
 8002dbe:	f000 f80f 	bl	8002de0 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002dc2:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <prvCheckTasksWaitingTermination+0x74>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1d2      	bne.n	8002d70 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002dca:	bf00      	nop
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	2000296c 	.word	0x2000296c
 8002dd8:	20002998 	.word	0x20002998
 8002ddc:	20002980 	.word	0x20002980

08002de0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d108      	bne.n	8002e04 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fe fc1e 	bl	8001638 <vPortFree>
				vPortFree( pxTCB );
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f7fe fc1b 	bl	8001638 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002e02:	e007      	b.n	8002e14 <prvDeleteTCB+0x34>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d102      	bne.n	8002e14 <prvDeleteTCB+0x34>
			{
				/* Only the stack was statically allocated, so the TCB is the
				only memory that must be freed. */
				vPortFree( pxTCB );
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7fe fc12 	bl	8001638 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002e14:	bf00      	nop
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e22:	4b0f      	ldr	r3, [pc, #60]	; (8002e60 <prvResetNextTaskUnblockTime+0x44>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <prvResetNextTaskUnblockTime+0x14>
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e000      	b.n	8002e32 <prvResetNextTaskUnblockTime+0x16>
 8002e30:	2300      	movs	r3, #0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d004      	beq.n	8002e40 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002e36:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <prvResetNextTaskUnblockTime+0x48>)
 8002e38:	f04f 32ff 	mov.w	r2, #4294967295
 8002e3c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002e3e:	e008      	b.n	8002e52 <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002e40:	4b07      	ldr	r3, [pc, #28]	; (8002e60 <prvResetNextTaskUnblockTime+0x44>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	4a05      	ldr	r2, [pc, #20]	; (8002e64 <prvResetNextTaskUnblockTime+0x48>)
 8002e50:	6013      	str	r3, [r2, #0]
	}
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	20002950 	.word	0x20002950
 8002e64:	200029b8 	.word	0x200029b8

08002e68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002e6e:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <xTaskGetSchedulerState+0x34>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d102      	bne.n	8002e7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002e76:	2301      	movs	r3, #1
 8002e78:	607b      	str	r3, [r7, #4]
 8002e7a:	e008      	b.n	8002e8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e7c:	4b08      	ldr	r3, [pc, #32]	; (8002ea0 <xTaskGetSchedulerState+0x38>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d102      	bne.n	8002e8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002e84:	2302      	movs	r3, #2
 8002e86:	607b      	str	r3, [r7, #4]
 8002e88:	e001      	b.n	8002e8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002e8e:	687b      	ldr	r3, [r7, #4]
	}
 8002e90:	4618      	mov	r0, r3
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	200029a4 	.word	0x200029a4
 8002ea0:	200029c0 	.word	0x200029c0

08002ea4 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d04a      	beq.n	8002f4c <vTaskPriorityInherit+0xa8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eba:	4b26      	ldr	r3, [pc, #152]	; (8002f54 <vTaskPriorityInherit+0xb0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d243      	bcs.n	8002f4c <vTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	db06      	blt.n	8002eda <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ecc:	4b21      	ldr	r3, [pc, #132]	; (8002f54 <vTaskPriorityInherit+0xb0>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6959      	ldr	r1, [r3, #20]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4a1b      	ldr	r2, [pc, #108]	; (8002f58 <vTaskPriorityInherit+0xb4>)
 8002eec:	4413      	add	r3, r2
 8002eee:	4299      	cmp	r1, r3
 8002ef0:	d101      	bne.n	8002ef6 <vTaskPriorityInherit+0x52>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <vTaskPriorityInherit+0x54>
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d022      	beq.n	8002f42 <vTaskPriorityInherit+0x9e>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	3304      	adds	r3, #4
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7fe fd1b 	bl	800193c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002f06:	4b13      	ldr	r3, [pc, #76]	; (8002f54 <vTaskPriorityInherit+0xb0>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f14:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <vTaskPriorityInherit+0xb8>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d903      	bls.n	8002f24 <vTaskPriorityInherit+0x80>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f20:	4a0e      	ldr	r2, [pc, #56]	; (8002f5c <vTaskPriorityInherit+0xb8>)
 8002f22:	6013      	str	r3, [r2, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f28:	4613      	mov	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4a09      	ldr	r2, [pc, #36]	; (8002f58 <vTaskPriorityInherit+0xb4>)
 8002f32:	441a      	add	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	3304      	adds	r3, #4
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	f7fe fca0 	bl	8001880 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f40:	e004      	b.n	8002f4c <vTaskPriorityInherit+0xa8>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002f42:	4b04      	ldr	r3, [pc, #16]	; (8002f54 <vTaskPriorityInherit+0xb0>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f4c:	bf00      	nop
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	200024c4 	.word	0x200024c4
 8002f58:	200024c8 	.word	0x200024c8
 8002f5c:	200029a0 	.word	0x200029a0

08002f60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d037      	beq.n	8002fe6 <xTaskPriorityDisinherit+0x86>
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f7a:	1e5a      	subs	r2, r3, #1
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d02c      	beq.n	8002fe6 <xTaskPriorityDisinherit+0x86>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d128      	bne.n	8002fe6 <xTaskPriorityDisinherit+0x86>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	3304      	adds	r3, #4
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7fe fccf 	bl	800193c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002faa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb6:	4b0e      	ldr	r3, [pc, #56]	; (8002ff0 <xTaskPriorityDisinherit+0x90>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d903      	bls.n	8002fc6 <xTaskPriorityDisinherit+0x66>
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc2:	4a0b      	ldr	r2, [pc, #44]	; (8002ff0 <xTaskPriorityDisinherit+0x90>)
 8002fc4:	6013      	str	r3, [r2, #0]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4a08      	ldr	r2, [pc, #32]	; (8002ff4 <xTaskPriorityDisinherit+0x94>)
 8002fd4:	441a      	add	r2, r3
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4610      	mov	r0, r2
 8002fde:	f7fe fc4f 	bl	8001880 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
	}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	200029a0 	.word	0x200029a0
 8002ff4:	200024c8 	.word	0x200024c8

08002ff8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8002ffc:	4b07      	ldr	r3, [pc, #28]	; (800301c <pvTaskIncrementMutexHeldCount+0x24>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d004      	beq.n	800300e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003004:	4b05      	ldr	r3, [pc, #20]	; (800301c <pvTaskIncrementMutexHeldCount+0x24>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800300a:	3201      	adds	r2, #1
 800300c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800300e:	4b03      	ldr	r3, [pc, #12]	; (800301c <pvTaskIncrementMutexHeldCount+0x24>)
 8003010:	681b      	ldr	r3, [r3, #0]
	}
 8003012:	4618      	mov	r0, r3
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	200024c4 	.word	0x200024c4

08003020 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800302a:	4b21      	ldr	r3, [pc, #132]	; (80030b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003030:	4b20      	ldr	r3, [pc, #128]	; (80030b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	3304      	adds	r3, #4
 8003036:	4618      	mov	r0, r3
 8003038:	f7fe fc80 	bl	800193c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003042:	d10a      	bne.n	800305a <prvAddCurrentTaskToDelayedList+0x3a>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d007      	beq.n	800305a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800304a:	4b1a      	ldr	r3, [pc, #104]	; (80030b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	3304      	adds	r3, #4
 8003050:	4619      	mov	r1, r3
 8003052:	4819      	ldr	r0, [pc, #100]	; (80030b8 <prvAddCurrentTaskToDelayedList+0x98>)
 8003054:	f7fe fc14 	bl	8001880 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003058:	e026      	b.n	80030a8 <prvAddCurrentTaskToDelayedList+0x88>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4413      	add	r3, r2
 8003060:	60bb      	str	r3, [r7, #8]

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003062:	4b14      	ldr	r3, [pc, #80]	; (80030b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68ba      	ldr	r2, [r7, #8]
 8003068:	605a      	str	r2, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	429a      	cmp	r2, r3
 8003070:	d209      	bcs.n	8003086 <prvAddCurrentTaskToDelayedList+0x66>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003072:	4b12      	ldr	r3, [pc, #72]	; (80030bc <prvAddCurrentTaskToDelayedList+0x9c>)
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	4b0f      	ldr	r3, [pc, #60]	; (80030b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	3304      	adds	r3, #4
 800307c:	4619      	mov	r1, r3
 800307e:	4610      	mov	r0, r2
 8003080:	f7fe fc22 	bl	80018c8 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003084:	e010      	b.n	80030a8 <prvAddCurrentTaskToDelayedList+0x88>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003086:	4b0e      	ldr	r3, [pc, #56]	; (80030c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	4b0a      	ldr	r3, [pc, #40]	; (80030b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	3304      	adds	r3, #4
 8003090:	4619      	mov	r1, r3
 8003092:	4610      	mov	r0, r2
 8003094:	f7fe fc18 	bl	80018c8 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8003098:	4b0a      	ldr	r3, [pc, #40]	; (80030c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d202      	bcs.n	80030a8 <prvAddCurrentTaskToDelayedList+0x88>
				{
					xNextTaskUnblockTime = xTimeToWake;
 80030a2:	4a08      	ldr	r2, [pc, #32]	; (80030c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	6013      	str	r3, [r2, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80030a8:	bf00      	nop
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	2000299c 	.word	0x2000299c
 80030b4:	200024c4 	.word	0x200024c4
 80030b8:	20002984 	.word	0x20002984
 80030bc:	20002954 	.word	0x20002954
 80030c0:	20002950 	.word	0x20002950
 80030c4:	200029b8 	.word	0x200029b8

080030c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b088      	sub	sp, #32
 80030cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80030ce:	2300      	movs	r3, #0
 80030d0:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80030d2:	f000 fa69 	bl	80035a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80030d6:	4b15      	ldr	r3, [pc, #84]	; (800312c <xTimerCreateTimerTask+0x64>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d020      	beq.n	8003120 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80030e6:	463a      	mov	r2, r7
 80030e8:	1d39      	adds	r1, r7, #4
 80030ea:	f107 0308 	add.w	r3, r7, #8
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fd f90c 	bl	800030c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80030f4:	6839      	ldr	r1, [r7, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	9202      	str	r2, [sp, #8]
 80030fc:	9301      	str	r3, [sp, #4]
 80030fe:	2328      	movs	r3, #40	; 0x28
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	2300      	movs	r3, #0
 8003104:	460a      	mov	r2, r1
 8003106:	490a      	ldr	r1, [pc, #40]	; (8003130 <xTimerCreateTimerTask+0x68>)
 8003108:	480a      	ldr	r0, [pc, #40]	; (8003134 <xTimerCreateTimerTask+0x6c>)
 800310a:	f7ff f93f 	bl	800238c <xTaskCreateStatic>
 800310e:	4602      	mov	r2, r0
 8003110:	4b09      	ldr	r3, [pc, #36]	; (8003138 <xTimerCreateTimerTask+0x70>)
 8003112:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003114:	4b08      	ldr	r3, [pc, #32]	; (8003138 <xTimerCreateTimerTask+0x70>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800311c:	2301      	movs	r3, #1
 800311e:	60fb      	str	r3, [r7, #12]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
 8003120:	68fb      	ldr	r3, [r7, #12]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	200029f4 	.word	0x200029f4
 8003130:	080060b0 	.word	0x080060b0
 8003134:	08003221 	.word	0x08003221
 8003138:	200029f8 	.word	0x200029f8

0800313c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08a      	sub	sp, #40	; 0x28
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
 8003148:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800314a:	2300      	movs	r3, #0
 800314c:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800314e:	4b1a      	ldr	r3, [pc, #104]	; (80031b8 <xTimerGenericCommand+0x7c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d02a      	beq.n	80031ac <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2b05      	cmp	r3, #5
 8003166:	dc18      	bgt.n	800319a <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003168:	f7ff fe7e 	bl	8002e68 <xTaskGetSchedulerState>
 800316c:	4603      	mov	r3, r0
 800316e:	2b02      	cmp	r3, #2
 8003170:	d109      	bne.n	8003186 <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003172:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <xTimerGenericCommand+0x7c>)
 8003174:	6818      	ldr	r0, [r3, #0]
 8003176:	f107 0114 	add.w	r1, r7, #20
 800317a:	2300      	movs	r3, #0
 800317c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800317e:	f7fe fde7 	bl	8001d50 <xQueueGenericSend>
 8003182:	6278      	str	r0, [r7, #36]	; 0x24
 8003184:	e012      	b.n	80031ac <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003186:	4b0c      	ldr	r3, [pc, #48]	; (80031b8 <xTimerGenericCommand+0x7c>)
 8003188:	6818      	ldr	r0, [r3, #0]
 800318a:	f107 0114 	add.w	r1, r7, #20
 800318e:	2300      	movs	r3, #0
 8003190:	2200      	movs	r2, #0
 8003192:	f7fe fddd 	bl	8001d50 <xQueueGenericSend>
 8003196:	6278      	str	r0, [r7, #36]	; 0x24
 8003198:	e008      	b.n	80031ac <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800319a:	4b07      	ldr	r3, [pc, #28]	; (80031b8 <xTimerGenericCommand+0x7c>)
 800319c:	6818      	ldr	r0, [r3, #0]
 800319e:	f107 0114 	add.w	r1, r7, #20
 80031a2:	2300      	movs	r3, #0
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	f7fe fe7d 	bl	8001ea4 <xQueueGenericSendFromISR>
 80031aa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80031ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3728      	adds	r7, #40	; 0x28
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	200029f4 	.word	0x200029f4

080031bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af02      	add	r7, sp, #8
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80031c6:	4b15      	ldr	r3, [pc, #84]	; (800321c <prvProcessExpiredTimer+0x60>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	3304      	adds	r3, #4
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fe fbb1 	bl	800193c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d114      	bne.n	800320c <prvProcessExpiredTimer+0x50>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	699a      	ldr	r2, [r3, #24]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	18d1      	adds	r1, r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 f8ba 	bl	8003368 <prvInsertTimerInActiveList>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d008      	beq.n	800320c <prvProcessExpiredTimer+0x50>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80031fa:	2300      	movs	r3, #0
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	2300      	movs	r3, #0
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	2100      	movs	r1, #0
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f7ff ff99 	bl	800313c <xTimerGenericCommand>
 800320a:	60b8      	str	r0, [r7, #8]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	4798      	blx	r3
}
 8003214:	bf00      	nop
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	200029ec 	.word	0x200029ec

08003220 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003228:	f107 0308 	add.w	r3, r7, #8
 800322c:	4618      	mov	r0, r3
 800322e:	f000 f857 	bl	80032e0 <prvGetNextExpireTime>
 8003232:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	4619      	mov	r1, r3
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 f803 	bl	8003244 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800323e:	f000 f8d5 	bl	80033ec <prvProcessReceivedCommands>
	}
 8003242:	e7f1      	b.n	8003228 <prvTimerTask+0x8>

08003244 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800324e:	f7ff fa75 	bl	800273c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003252:	f107 0308 	add.w	r3, r7, #8
 8003256:	4618      	mov	r0, r3
 8003258:	f000 f866 	bl	8003328 <prvSampleTimeNow>
 800325c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d130      	bne.n	80032c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10a      	bne.n	8003280 <prvProcessTimerOrBlockTask+0x3c>
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	429a      	cmp	r2, r3
 8003270:	d806      	bhi.n	8003280 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003272:	f7ff fa71 	bl	8002758 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003276:	68f9      	ldr	r1, [r7, #12]
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7ff ff9f 	bl	80031bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800327e:	e024      	b.n	80032ca <prvProcessTimerOrBlockTask+0x86>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d008      	beq.n	8003298 <prvProcessTimerOrBlockTask+0x54>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003286:	4b13      	ldr	r3, [pc, #76]	; (80032d4 <prvProcessTimerOrBlockTask+0x90>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	bf0c      	ite	eq
 8003290:	2301      	moveq	r3, #1
 8003292:	2300      	movne	r3, #0
 8003294:	b2db      	uxtb	r3, r3
 8003296:	603b      	str	r3, [r7, #0]
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003298:	4b0f      	ldr	r3, [pc, #60]	; (80032d8 <prvProcessTimerOrBlockTask+0x94>)
 800329a:	6818      	ldr	r0, [r3, #0]
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	4619      	mov	r1, r3
 80032a6:	f7ff f83d 	bl	8002324 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 80032aa:	f7ff fa55 	bl	8002758 <xTaskResumeAll>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10a      	bne.n	80032ca <prvProcessTimerOrBlockTask+0x86>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 80032b4:	4b09      	ldr	r3, [pc, #36]	; (80032dc <prvProcessTimerOrBlockTask+0x98>)
 80032b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	f3bf 8f4f 	dsb	sy
 80032c0:	f3bf 8f6f 	isb	sy
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80032c4:	e001      	b.n	80032ca <prvProcessTimerOrBlockTask+0x86>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 80032c6:	f7ff fa47 	bl	8002758 <xTaskResumeAll>
		}
	}
}
 80032ca:	bf00      	nop
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	200029f0 	.word	0x200029f0
 80032d8:	200029f4 	.word	0x200029f4
 80032dc:	e000ed04 	.word	0xe000ed04

080032e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80032e8:	4b0e      	ldr	r3, [pc, #56]	; (8003324 <prvGetNextExpireTime+0x44>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	bf0c      	ite	eq
 80032f2:	2301      	moveq	r3, #1
 80032f4:	2300      	movne	r3, #0
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	461a      	mov	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d105      	bne.n	8003312 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003306:	4b07      	ldr	r3, [pc, #28]	; (8003324 <prvGetNextExpireTime+0x44>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	e001      	b.n	8003316 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003312:	2300      	movs	r3, #0
 8003314:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003316:	68fb      	ldr	r3, [r7, #12]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3714      	adds	r7, #20
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	200029ec 	.word	0x200029ec

08003328 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003330:	f7ff faa0 	bl	8002874 <xTaskGetTickCount>
 8003334:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003336:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <prvSampleTimeNow+0x3c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	429a      	cmp	r2, r3
 800333e:	d205      	bcs.n	800334c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003340:	f000 f8de 	bl	8003500 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	e002      	b.n	8003352 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003352:	4a04      	ldr	r2, [pc, #16]	; (8003364 <prvSampleTimeNow+0x3c>)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003358:	68fb      	ldr	r3, [r7, #12]
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	200029fc 	.word	0x200029fc

08003368 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
 8003374:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	429a      	cmp	r2, r3
 800338c:	d812      	bhi.n	80033b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	1ad2      	subs	r2, r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	429a      	cmp	r2, r3
 800339a:	d302      	bcc.n	80033a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800339c:	2301      	movs	r3, #1
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	e01b      	b.n	80033da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80033a2:	4b10      	ldr	r3, [pc, #64]	; (80033e4 <prvInsertTimerInActiveList+0x7c>)
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	3304      	adds	r3, #4
 80033aa:	4619      	mov	r1, r3
 80033ac:	4610      	mov	r0, r2
 80033ae:	f7fe fa8b 	bl	80018c8 <vListInsert>
 80033b2:	e012      	b.n	80033da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d206      	bcs.n	80033ca <prvInsertTimerInActiveList+0x62>
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d302      	bcc.n	80033ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80033c4:	2301      	movs	r3, #1
 80033c6:	617b      	str	r3, [r7, #20]
 80033c8:	e007      	b.n	80033da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80033ca:	4b07      	ldr	r3, [pc, #28]	; (80033e8 <prvInsertTimerInActiveList+0x80>)
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	3304      	adds	r3, #4
 80033d2:	4619      	mov	r1, r3
 80033d4:	4610      	mov	r0, r2
 80033d6:	f7fe fa77 	bl	80018c8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80033da:	697b      	ldr	r3, [r7, #20]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	200029f0 	.word	0x200029f0
 80033e8:	200029ec 	.word	0x200029ec

080033ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b08c      	sub	sp, #48	; 0x30
 80033f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80033f2:	e073      	b.n	80034dc <prvProcessReceivedCommands+0xf0>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	da0b      	bge.n	8003412 <prvProcessReceivedCommands+0x26>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80033fa:	f107 0308 	add.w	r3, r7, #8
 80033fe:	3304      	adds	r3, #4
 8003400:	627b      	str	r3, [r7, #36]	; 0x24
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003408:	6850      	ldr	r0, [r2, #4]
 800340a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800340c:	6892      	ldr	r2, [r2, #8]
 800340e:	4611      	mov	r1, r2
 8003410:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	db61      	blt.n	80034dc <prvProcessReceivedCommands+0xf0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d004      	beq.n	800342e <prvProcessReceivedCommands+0x42>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	3304      	adds	r3, #4
 8003428:	4618      	mov	r0, r3
 800342a:	f7fe fa87 	bl	800193c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800342e:	1d3b      	adds	r3, r7, #4
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff ff79 	bl	8003328 <prvSampleTimeNow>
 8003436:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	2b09      	cmp	r3, #9
 800343c:	d84d      	bhi.n	80034da <prvProcessReceivedCommands+0xee>
 800343e:	a201      	add	r2, pc, #4	; (adr r2, 8003444 <prvProcessReceivedCommands+0x58>)
 8003440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003444:	0800346d 	.word	0x0800346d
 8003448:	0800346d 	.word	0x0800346d
 800344c:	0800346d 	.word	0x0800346d
 8003450:	080034dd 	.word	0x080034dd
 8003454:	080034af 	.word	0x080034af
 8003458:	080034c9 	.word	0x080034c9
 800345c:	0800346d 	.word	0x0800346d
 8003460:	0800346d 	.word	0x0800346d
 8003464:	080034dd 	.word	0x080034dd
 8003468:	080034af 	.word	0x080034af
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	6a3b      	ldr	r3, [r7, #32]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	18d1      	adds	r1, r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	69fa      	ldr	r2, [r7, #28]
 8003478:	6a38      	ldr	r0, [r7, #32]
 800347a:	f7ff ff75 	bl	8003368 <prvInsertTimerInActiveList>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d02b      	beq.n	80034dc <prvProcessReceivedCommands+0xf0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	6a38      	ldr	r0, [r7, #32]
 800348a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	69db      	ldr	r3, [r3, #28]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d123      	bne.n	80034dc <prvProcessReceivedCommands+0xf0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	6a3b      	ldr	r3, [r7, #32]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	441a      	add	r2, r3
 800349c:	2300      	movs	r3, #0
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	2300      	movs	r3, #0
 80034a2:	2100      	movs	r1, #0
 80034a4:	6a38      	ldr	r0, [r7, #32]
 80034a6:	f7ff fe49 	bl	800313c <xTimerGenericCommand>
 80034aa:	61b8      	str	r0, [r7, #24]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 80034ac:	e016      	b.n	80034dc <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	619a      	str	r2, [r3, #24]
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80034b4:	6a3b      	ldr	r3, [r7, #32]
 80034b6:	699a      	ldr	r2, [r3, #24]
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	18d1      	adds	r1, r2, r3
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	69fa      	ldr	r2, [r7, #28]
 80034c0:	6a38      	ldr	r0, [r7, #32]
 80034c2:	f7ff ff51 	bl	8003368 <prvInsertTimerInActiveList>
					break;
 80034c6:	e009      	b.n	80034dc <prvProcessReceivedCommands+0xf0>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d104      	bne.n	80034dc <prvProcessReceivedCommands+0xf0>
						{
							vPortFree( pxTimer );
 80034d2:	6a38      	ldr	r0, [r7, #32]
 80034d4:	f7fe f8b0 	bl	8001638 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80034d8:	e000      	b.n	80034dc <prvProcessReceivedCommands+0xf0>

				default	:
					/* Don't expect to get here. */
					break;
 80034da:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80034dc:	4b07      	ldr	r3, [pc, #28]	; (80034fc <prvProcessReceivedCommands+0x110>)
 80034de:	6818      	ldr	r0, [r3, #0]
 80034e0:	f107 0108 	add.w	r1, r7, #8
 80034e4:	2300      	movs	r3, #0
 80034e6:	2200      	movs	r2, #0
 80034e8:	f7fe fd34 	bl	8001f54 <xQueueGenericReceive>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d180      	bne.n	80033f4 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
 80034f2:	bf00      	nop
 80034f4:	3728      	adds	r7, #40	; 0x28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	200029f4 	.word	0x200029f4

08003500 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b088      	sub	sp, #32
 8003504:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003506:	e037      	b.n	8003578 <prvSwitchTimerLists+0x78>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003508:	4b25      	ldr	r3, [pc, #148]	; (80035a0 <prvSwitchTimerLists+0xa0>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003512:	4b23      	ldr	r3, [pc, #140]	; (80035a0 <prvSwitchTimerLists+0xa0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	3304      	adds	r3, #4
 8003520:	4618      	mov	r0, r3
 8003522:	f7fe fa0b 	bl	800193c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	6938      	ldr	r0, [r7, #16]
 800352c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d120      	bne.n	8003578 <prvSwitchTimerLists+0x78>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	699a      	ldr	r2, [r3, #24]
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	4413      	add	r3, r2
 800353e:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	429a      	cmp	r2, r3
 8003546:	d90e      	bls.n	8003566 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003554:	4b12      	ldr	r3, [pc, #72]	; (80035a0 <prvSwitchTimerLists+0xa0>)
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	3304      	adds	r3, #4
 800355c:	4619      	mov	r1, r3
 800355e:	4610      	mov	r0, r2
 8003560:	f7fe f9b2 	bl	80018c8 <vListInsert>
 8003564:	e008      	b.n	8003578 <prvSwitchTimerLists+0x78>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003566:	2300      	movs	r3, #0
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	2300      	movs	r3, #0
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	2100      	movs	r1, #0
 8003570:	6938      	ldr	r0, [r7, #16]
 8003572:	f7ff fde3 	bl	800313c <xTimerGenericCommand>
 8003576:	60b8      	str	r0, [r7, #8]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003578:	4b09      	ldr	r3, [pc, #36]	; (80035a0 <prvSwitchTimerLists+0xa0>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1c2      	bne.n	8003508 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003582:	4b07      	ldr	r3, [pc, #28]	; (80035a0 <prvSwitchTimerLists+0xa0>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8003588:	4b06      	ldr	r3, [pc, #24]	; (80035a4 <prvSwitchTimerLists+0xa4>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a04      	ldr	r2, [pc, #16]	; (80035a0 <prvSwitchTimerLists+0xa0>)
 800358e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003590:	4a04      	ldr	r2, [pc, #16]	; (80035a4 <prvSwitchTimerLists+0xa4>)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6013      	str	r3, [r2, #0]
}
 8003596:	bf00      	nop
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	200029ec 	.word	0x200029ec
 80035a4:	200029f0 	.word	0x200029f0

080035a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80035ae:	f7fe fa83 	bl	8001ab8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80035b2:	4b10      	ldr	r3, [pc, #64]	; (80035f4 <prvCheckForValidListAndQueue+0x4c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d116      	bne.n	80035e8 <prvCheckForValidListAndQueue+0x40>
		{
			vListInitialise( &xActiveTimerList1 );
 80035ba:	480f      	ldr	r0, [pc, #60]	; (80035f8 <prvCheckForValidListAndQueue+0x50>)
 80035bc:	f7fe f932 	bl	8001824 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80035c0:	480e      	ldr	r0, [pc, #56]	; (80035fc <prvCheckForValidListAndQueue+0x54>)
 80035c2:	f7fe f92f 	bl	8001824 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80035c6:	4b0e      	ldr	r3, [pc, #56]	; (8003600 <prvCheckForValidListAndQueue+0x58>)
 80035c8:	4a0b      	ldr	r2, [pc, #44]	; (80035f8 <prvCheckForValidListAndQueue+0x50>)
 80035ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80035cc:	4b0d      	ldr	r3, [pc, #52]	; (8003604 <prvCheckForValidListAndQueue+0x5c>)
 80035ce:	4a0b      	ldr	r2, [pc, #44]	; (80035fc <prvCheckForValidListAndQueue+0x54>)
 80035d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue;
				static uint8_t ucStaticTimerQueueStorage[ configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ];

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80035d2:	2300      	movs	r3, #0
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	4b0c      	ldr	r3, [pc, #48]	; (8003608 <prvCheckForValidListAndQueue+0x60>)
 80035d8:	4a0c      	ldr	r2, [pc, #48]	; (800360c <prvCheckForValidListAndQueue+0x64>)
 80035da:	2110      	movs	r1, #16
 80035dc:	2005      	movs	r0, #5
 80035de:	f7fe fb73 	bl	8001cc8 <xQueueGenericCreateStatic>
 80035e2:	4602      	mov	r2, r0
 80035e4:	4b03      	ldr	r3, [pc, #12]	; (80035f4 <prvCheckForValidListAndQueue+0x4c>)
 80035e6:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80035e8:	f7fe fa80 	bl	8001aec <vPortExitCritical>
}
 80035ec:	bf00      	nop
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	200029f4 	.word	0x200029f4
 80035f8:	200029c4 	.word	0x200029c4
 80035fc:	200029d8 	.word	0x200029d8
 8003600:	200029ec 	.word	0x200029ec
 8003604:	200029f0 	.word	0x200029f0
 8003608:	20002a50 	.word	0x20002a50
 800360c:	20002a00 	.word	0x20002a00

08003610 <_ZN5LCD03D1Ev>:
LCD03::LCD03() {
	// TODO Auto-generated constructor stub

}

LCD03::~LCD03() {
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	4a08      	ldr	r2, [pc, #32]	; (800363c <_ZN5LCD03D1Ev+0x2c>)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4618      	mov	r0, r3
 8003622:	f000 f893 	bl	800374c <_ZN9LCD03PortD1Ev>
	// TODO Auto-generated destructor stub
}
 8003626:	2300      	movs	r3, #0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d002      	beq.n	8003632 <_ZN5LCD03D1Ev+0x22>
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f001 fd78 	bl	8005122 <_ZdlPv>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4618      	mov	r0, r3
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	08006130 	.word	0x08006130

08003640 <_ZN5LCD03D0Ev>:
LCD03::LCD03() {
	// TODO Auto-generated constructor stub

}

LCD03::~LCD03() {
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f7ff ffe1 	bl	8003610 <_ZN5LCD03D1Ev>
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f001 fd67 	bl	8005122 <_ZdlPv>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4618      	mov	r0, r3
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop

08003660 <_ZN5LCD03C1ENS_14COMM_MODE_ENUMENS_9SIZE_ENUMENS_16I2C_ADDRESS_ENUME>:


LCD03::LCD03(COMM_MODE_t mode = LCD03_SERIAL,LCD_SIZE_t type = LCD03_20_4,LCD03_I2C_ADDRESS_t addr = LCD03_I2C_ADDRESS_0xc8){
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	4608      	mov	r0, r1
 800366a:	4611      	mov	r1, r2
 800366c:	461a      	mov	r2, r3
 800366e:	4603      	mov	r3, r0
 8003670:	70fb      	strb	r3, [r7, #3]
 8003672:	460b      	mov	r3, r1
 8003674:	70bb      	strb	r3, [r7, #2]
 8003676:	4613      	mov	r3, r2
 8003678:	707b      	strb	r3, [r7, #1]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4618      	mov	r0, r3
 800367e:	f000 f855 	bl	800372c <_ZN9LCD03PortC1Ev>
 8003682:	4a0d      	ldr	r2, [pc, #52]	; (80036b8 <_ZN5LCD03C1ENS_14COMM_MODE_ENUMENS_9SIZE_ENUMENS_16I2C_ADDRESS_ENUME+0x58>)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	601a      	str	r2, [r3, #0]
	if(mode == LCD03_I2C){
 8003688:	78fb      	ldrb	r3, [r7, #3]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d106      	bne.n	800369c <_ZN5LCD03C1ENS_14COMM_MODE_ENUMENS_9SIZE_ENUMENS_16I2C_ADDRESS_ENUME+0x3c>
		psend = &LCD03::portI2CTransmit;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a0a      	ldr	r2, [pc, #40]	; (80036bc <_ZN5LCD03C1ENS_14COMM_MODE_ENUMENS_9SIZE_ENUMENS_16I2C_ADDRESS_ENUME+0x5c>)
 8003692:	605a      	str	r2, [r3, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	609a      	str	r2, [r3, #8]
 800369a:	e008      	b.n	80036ae <_ZN5LCD03C1ENS_14COMM_MODE_ENUMENS_9SIZE_ENUMENS_16I2C_ADDRESS_ENUME+0x4e>
	}
	else if (mode == LCD03_SERIAL){
 800369c:	78fb      	ldrb	r3, [r7, #3]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d105      	bne.n	80036ae <_ZN5LCD03C1ENS_14COMM_MODE_ENUMENS_9SIZE_ENUMENS_16I2C_ADDRESS_ENUME+0x4e>
		psend = &LCD03::portSerialTransmit;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a06      	ldr	r2, [pc, #24]	; (80036c0 <_ZN5LCD03C1ENS_14COMM_MODE_ENUMENS_9SIZE_ENUMENS_16I2C_ADDRESS_ENUME+0x60>)
 80036a6:	605a      	str	r2, [r3, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	609a      	str	r2, [r3, #8]
	}
}
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4618      	mov	r0, r3
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	08006130 	.word	0x08006130
 80036bc:	080038c5 	.word	0x080038c5
 80036c0:	0800389d 	.word	0x0800389d

080036c4 <_ZN5LCD0312send_commandENS_12COMMAND_ENUME>:

void LCD03::send_command(LCD03_COMMAND_t cmd){
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	460b      	mov	r3, r1
 80036ce:	70fb      	strb	r3, [r7, #3]
	(this->*psend) (cmd);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d102      	bne.n	80036e2 <_ZN5LCD0312send_commandENS_12COMMAND_ENUME+0x1e>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	e00a      	b.n	80036f8 <_ZN5LCD0312send_commandENS_12COMMAND_ENUME+0x34>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	105b      	asrs	r3, r3, #1
 80036e8:	461a      	mov	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4413      	add	r3, r2
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6852      	ldr	r2, [r2, #4]
 80036f4:	4413      	add	r3, r2
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6892      	ldr	r2, [r2, #8]
 80036fc:	1052      	asrs	r2, r2, #1
 80036fe:	4611      	mov	r1, r2
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	440a      	add	r2, r1
 8003704:	78f9      	ldrb	r1, [r7, #3]
 8003706:	4610      	mov	r0, r2
 8003708:	4798      	blx	r3
}
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop

08003714 <_ZN5LCD0312clear_screenEv>:
	send_command(LCD03_CMD_SMART_LINE_FEED);
}
void LCD03::vertical_tab(){
	send_command(LCD03_CMD_VERTICAL_TAB);
}
void LCD03::clear_screen(){
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
	send_command(LCD03_CMD_CLEAR_SCREEN);
 800371c:	210c      	movs	r1, #12
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7ff ffd0 	bl	80036c4 <_ZN5LCD0312send_commandENS_12COMMAND_ENUME>
}
 8003724:	bf00      	nop
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <_ZN9LCD03PortC1Ev>:

/* UART handler declaration */
UART_HandleTypeDef LCD03UartHandle;
GPIO_InitTypeDef  GPIO_InitStruct;

LCD03Port::LCD03Port() {
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	4a04      	ldr	r2, [pc, #16]	; (8003748 <_ZN9LCD03PortC1Ev+0x1c>)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4618      	mov	r0, r3
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	08006140 	.word	0x08006140

0800374c <_ZN9LCD03PortD1Ev>:

LCD03Port::~LCD03Port() {
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	4a06      	ldr	r2, [pc, #24]	; (8003770 <_ZN9LCD03PortD1Ev+0x24>)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800375a:	2300      	movs	r3, #0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <_ZN9LCD03PortD1Ev+0x1a>
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f001 fcde 	bl	8005122 <_ZdlPv>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4618      	mov	r0, r3
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	08006140 	.word	0x08006140

08003774 <_ZN9LCD03PortD0Ev>:
LCD03Port::LCD03Port() {
	// TODO Auto-generated constructor stub

}

LCD03Port::~LCD03Port() {
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
}
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7ff ffe5 	bl	800374c <_ZN9LCD03PortD1Ev>
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f001 fccd 	bl	8005122 <_ZdlPv>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4618      	mov	r0, r3
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop

08003794 <_ZN9LCD03Port14portSerialInitEv>:

int LCD03Port::portSerialInit(){
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]

	LCD03_USARTx_RX_GPIO_CLK_ENABLE();
 800379c:	2300      	movs	r3, #0
 800379e:	617b      	str	r3, [r7, #20]
 80037a0:	4a39      	ldr	r2, [pc, #228]	; (8003888 <_ZN9LCD03Port14portSerialInitEv+0xf4>)
 80037a2:	4b39      	ldr	r3, [pc, #228]	; (8003888 <_ZN9LCD03Port14portSerialInitEv+0xf4>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	f043 0301 	orr.w	r3, r3, #1
 80037aa:	6313      	str	r3, [r2, #48]	; 0x30
 80037ac:	4b36      	ldr	r3, [pc, #216]	; (8003888 <_ZN9LCD03Port14portSerialInitEv+0xf4>)
 80037ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	697b      	ldr	r3, [r7, #20]
	LCD03_USARTx_TX_GPIO_CLK_ENABLE();
 80037b8:	2300      	movs	r3, #0
 80037ba:	613b      	str	r3, [r7, #16]
 80037bc:	4a32      	ldr	r2, [pc, #200]	; (8003888 <_ZN9LCD03Port14portSerialInitEv+0xf4>)
 80037be:	4b32      	ldr	r3, [pc, #200]	; (8003888 <_ZN9LCD03Port14portSerialInitEv+0xf4>)
 80037c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c2:	f043 0301 	orr.w	r3, r3, #1
 80037c6:	6313      	str	r3, [r2, #48]	; 0x30
 80037c8:	4b2f      	ldr	r3, [pc, #188]	; (8003888 <_ZN9LCD03Port14portSerialInitEv+0xf4>)
 80037ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	613b      	str	r3, [r7, #16]
 80037d2:	693b      	ldr	r3, [r7, #16]
	LCD03_USARTx_CLK_ENABLE() ;
 80037d4:	2300      	movs	r3, #0
 80037d6:	60fb      	str	r3, [r7, #12]
 80037d8:	4a2b      	ldr	r2, [pc, #172]	; (8003888 <_ZN9LCD03Port14portSerialInitEv+0xf4>)
 80037da:	4b2b      	ldr	r3, [pc, #172]	; (8003888 <_ZN9LCD03Port14portSerialInitEv+0xf4>)
 80037dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037de:	f043 0310 	orr.w	r3, r3, #16
 80037e2:	6453      	str	r3, [r2, #68]	; 0x44
 80037e4:	4b28      	ldr	r3, [pc, #160]	; (8003888 <_ZN9LCD03Port14portSerialInitEv+0xf4>)
 80037e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e8:	f003 0310 	and.w	r3, r3, #16
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	68fb      	ldr	r3, [r7, #12]

	LCD03UartHandle.Instance          = LCD03_USARTx;
 80037f0:	4b26      	ldr	r3, [pc, #152]	; (800388c <_ZN9LCD03Port14portSerialInitEv+0xf8>)
 80037f2:	4a27      	ldr	r2, [pc, #156]	; (8003890 <_ZN9LCD03Port14portSerialInitEv+0xfc>)
 80037f4:	601a      	str	r2, [r3, #0]
	LCD03UartHandle.Init.BaudRate     = 9600;
 80037f6:	4b25      	ldr	r3, [pc, #148]	; (800388c <_ZN9LCD03Port14portSerialInitEv+0xf8>)
 80037f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80037fc:	605a      	str	r2, [r3, #4]
	LCD03UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 80037fe:	4b23      	ldr	r3, [pc, #140]	; (800388c <_ZN9LCD03Port14portSerialInitEv+0xf8>)
 8003800:	2200      	movs	r2, #0
 8003802:	609a      	str	r2, [r3, #8]
	LCD03UartHandle.Init.StopBits     = UART_STOPBITS_1;
 8003804:	4b21      	ldr	r3, [pc, #132]	; (800388c <_ZN9LCD03Port14portSerialInitEv+0xf8>)
 8003806:	2200      	movs	r2, #0
 8003808:	60da      	str	r2, [r3, #12]
	LCD03UartHandle.Init.Parity       = UART_PARITY_NONE;
 800380a:	4b20      	ldr	r3, [pc, #128]	; (800388c <_ZN9LCD03Port14portSerialInitEv+0xf8>)
 800380c:	2200      	movs	r2, #0
 800380e:	611a      	str	r2, [r3, #16]
	LCD03UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8003810:	4b1e      	ldr	r3, [pc, #120]	; (800388c <_ZN9LCD03Port14portSerialInitEv+0xf8>)
 8003812:	2200      	movs	r2, #0
 8003814:	619a      	str	r2, [r3, #24]
	LCD03UartHandle.Init.Mode         = UART_MODE_TX_RX;
 8003816:	4b1d      	ldr	r3, [pc, #116]	; (800388c <_ZN9LCD03Port14portSerialInitEv+0xf8>)
 8003818:	220c      	movs	r2, #12
 800381a:	615a      	str	r2, [r3, #20]
	LCD03UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 800381c:	4b1b      	ldr	r3, [pc, #108]	; (800388c <_ZN9LCD03Port14portSerialInitEv+0xf8>)
 800381e:	2200      	movs	r2, #0
 8003820:	61da      	str	r2, [r3, #28]


	/*##-2- Configure peripheral GPIO ##########################################*/
	/* UART TX GPIO pin configuration  */
	GPIO_InitStruct.Pin       = LCD03_USARTx_TX_PIN;
 8003822:	4b1c      	ldr	r3, [pc, #112]	; (8003894 <_ZN9LCD03Port14portSerialInitEv+0x100>)
 8003824:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003828:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800382a:	4b1a      	ldr	r3, [pc, #104]	; (8003894 <_ZN9LCD03Port14portSerialInitEv+0x100>)
 800382c:	2202      	movs	r2, #2
 800382e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8003830:	4b18      	ldr	r3, [pc, #96]	; (8003894 <_ZN9LCD03Port14portSerialInitEv+0x100>)
 8003832:	2201      	movs	r2, #1
 8003834:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8003836:	4b17      	ldr	r3, [pc, #92]	; (8003894 <_ZN9LCD03Port14portSerialInitEv+0x100>)
 8003838:	2202      	movs	r2, #2
 800383a:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Alternate = LCD03_USARTx_TX_AF;
 800383c:	4b15      	ldr	r3, [pc, #84]	; (8003894 <_ZN9LCD03Port14portSerialInitEv+0x100>)
 800383e:	2207      	movs	r2, #7
 8003840:	611a      	str	r2, [r3, #16]

	HAL_GPIO_Init(LCD03_USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8003842:	4914      	ldr	r1, [pc, #80]	; (8003894 <_ZN9LCD03Port14portSerialInitEv+0x100>)
 8003844:	4814      	ldr	r0, [pc, #80]	; (8003898 <_ZN9LCD03Port14portSerialInitEv+0x104>)
 8003846:	f7fc fdb1 	bl	80003ac <HAL_GPIO_Init>

	/* UART RX GPIO pin configuration  */
	GPIO_InitStruct.Pin = LCD03_USARTx_RX_PIN;
 800384a:	4b12      	ldr	r3, [pc, #72]	; (8003894 <_ZN9LCD03Port14portSerialInitEv+0x100>)
 800384c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003850:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003852:	4b10      	ldr	r3, [pc, #64]	; (8003894 <_ZN9LCD03Port14portSerialInitEv+0x100>)
 8003854:	2202      	movs	r2, #2
 8003856:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8003858:	4b0e      	ldr	r3, [pc, #56]	; (8003894 <_ZN9LCD03Port14portSerialInitEv+0x100>)
 800385a:	2201      	movs	r2, #1
 800385c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 800385e:	4b0d      	ldr	r3, [pc, #52]	; (8003894 <_ZN9LCD03Port14portSerialInitEv+0x100>)
 8003860:	2202      	movs	r2, #2
 8003862:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Alternate = LCD03_USARTx_RX_AF;
 8003864:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <_ZN9LCD03Port14portSerialInitEv+0x100>)
 8003866:	2207      	movs	r2, #7
 8003868:	611a      	str	r2, [r3, #16]

	HAL_GPIO_Init(LCD03_USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 800386a:	490a      	ldr	r1, [pc, #40]	; (8003894 <_ZN9LCD03Port14portSerialInitEv+0x100>)
 800386c:	480a      	ldr	r0, [pc, #40]	; (8003898 <_ZN9LCD03Port14portSerialInitEv+0x104>)
 800386e:	f7fc fd9d 	bl	80003ac <HAL_GPIO_Init>


	if(HAL_UART_Init(&LCD03UartHandle) != HAL_OK)
 8003872:	4806      	ldr	r0, [pc, #24]	; (800388c <_ZN9LCD03Port14portSerialInitEv+0xf8>)
 8003874:	f7fd fab6 	bl	8000de4 <HAL_UART_Init>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
	{
	/* Initialization Error */
	//Error_Handler();
	}

}
 800387c:	bf00      	nop
 800387e:	4618      	mov	r0, r3
 8003880:	3718      	adds	r7, #24
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	40023800 	.word	0x40023800
 800388c:	20002aa0 	.word	0x20002aa0
 8003890:	40011000 	.word	0x40011000
 8003894:	20002ae0 	.word	0x20002ae0
 8003898:	40020000 	.word	0x40020000

0800389c <_ZN9LCD03Port18portSerialTransmitEh>:
int LCD03Port::portSerialTransmit(uint8_t data){
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	460b      	mov	r3, r1
 80038a6:	70fb      	strb	r3, [r7, #3]
	return HAL_UART_Transmit(&LCD03UartHandle, &data, sizeof(uint8_t),0xFFFF);
 80038a8:	2201      	movs	r2, #1
 80038aa:	1cf9      	adds	r1, r7, #3
 80038ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038b0:	4803      	ldr	r0, [pc, #12]	; (80038c0 <_ZN9LCD03Port18portSerialTransmitEh+0x24>)
 80038b2:	f7fd faef 	bl	8000e94 <HAL_UART_Transmit>
 80038b6:	4603      	mov	r3, r0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	20002aa0 	.word	0x20002aa0

080038c4 <_ZN9LCD03Port15portI2CTransmitEh>:


int LCD03Port::portI2CInit(){

}
int LCD03Port::portI2CTransmit(uint8_t data){
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	460b      	mov	r3, r1
 80038ce:	70fb      	strb	r3, [r7, #3]

}
 80038d0:	bf00      	nop
 80038d2:	4618      	mov	r0, r3
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop

080038e0 <_ZN9NRF24L01pC1Ev>:
 */

#include "NRF24L01p.h"


NRF24L01p::NRF24L01p() {
 80038e0:	b5b0      	push	{r4, r5, r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 fbb4 	bl	8004058 <_ZN15NRF24L01pDriverC1Ev>
 80038f0:	4a85      	ldr	r2, [pc, #532]	; (8003b08 <_ZN9NRF24L01pC1Ev+0x228>)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	601a      	str	r2, [r3, #0]
    
    port_Initialize();
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f001 f887 	bl	8004a0c <_ZN13NRF24L01pPort15port_InitializeEv>
    //ResetConfigValues(_RadioConfig, _RxPipeConfig);
    
    
    port_Pin_CE(0);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2100      	movs	r1, #0
 8003902:	4618      	mov	r0, r3
 8003904:	f001 f952 	bl	8004bac <_ZN13NRF24L01pPort11port_Pin_CEEb>
    port_Pin_CSN(0);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2100      	movs	r1, #0
 800390c:	4618      	mov	r0, r3
 800390e:	f001 f95f 	bl	8004bd0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>

    port_DelayMs(_NRF24L01P_TIMING_PowerOnReset_ms);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2164      	movs	r1, #100	; 0x64
 8003916:	4618      	mov	r0, r3
 8003918:	f001 f984 	bl	8004c24 <_ZN13NRF24L01pPort12port_DelayMsEj>

    RadioMode(MODE_POWER_DOWN);
 800391c:	2101      	movs	r1, #1
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f9f8 	bl	8003d14 <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE>
    RadioMode(MODE_RX);
 8003924:	2103      	movs	r1, #3
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f9f4 	bl	8003d14 <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE>

    clear_data_ready_flag();
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4618      	mov	r0, r3
 8003930:	f000 feb6 	bl	80046a0 <_ZN15NRF24L01pDriver21clear_data_ready_flagEv>
    flush_rx();
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4618      	mov	r0, r3
 8003938:	f000 fcb4 	bl	80042a4 <_ZN15NRF24L01pDriver8flush_rxEv>
    flush_tx();
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4618      	mov	r0, r3
 8003940:	f000 fc94 	bl	800426c <_ZN15NRF24L01pDriver8flush_txEv>

    uint8_t status_rst_val = 0x70;//reset status
 8003944:	2370      	movs	r3, #112	; 0x70
 8003946:	72fb      	strb	r3, [r7, #11]
    write_register(_NRF24L01P_REG_STATUS, &status_rst_val,1);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f107 020b 	add.w	r2, r7, #11
 800394e:	2301      	movs	r3, #1
 8003950:	2107      	movs	r1, #7
 8003952:	f000 fc39 	bl	80041c8 <_ZN15NRF24L01pDriver14write_registerEhPhi>
    uint8_t config_rst_val = 0x0b;//reset config
 8003956:	230b      	movs	r3, #11
 8003958:	72bb      	strb	r3, [r7, #10]
    write_register(_NRF24L01P_REG_CONFIG, &config_rst_val,1);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f107 020a 	add.w	r2, r7, #10
 8003960:	2301      	movs	r3, #1
 8003962:	2100      	movs	r1, #0
 8003964:	f000 fc30 	bl	80041c8 <_ZN15NRF24L01pDriver14write_registerEhPhi>

    
        RadioConfig.DataReadyInterruptEnabled = 0;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	715a      	strb	r2, [r3, #5]
    RadioConfig.DataSentInterruptFlagEnabled = 0;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	719a      	strb	r2, [r3, #6]
    RadioConfig.MaxRetryInterruptFlagEnabled = 0;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	71da      	strb	r2, [r3, #7]
    RadioConfig.Crc = NRF24L01p::CONFIG_CRC_16BIT;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	220c      	movs	r2, #12
 800397e:	721a      	strb	r2, [r3, #8]
    RadioConfig.AutoReTransmissionCount = 15;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	220f      	movs	r2, #15
 8003984:	725a      	strb	r2, [r3, #9]
    RadioConfig.AutoReTransmitDelayX250us = 15;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	220f      	movs	r2, #15
 800398a:	729a      	strb	r2, [r3, #10]
    RadioConfig.frequencyOffset = 2;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	72da      	strb	r2, [r3, #11]
    RadioConfig.datarate = NRF24L01p::RF_SETUP_RF_DR_2MBPS;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2208      	movs	r2, #8
 8003996:	731a      	strb	r2, [r3, #12]
    RadioConfig.RfPower = NRF24L01p::RF_SETUP_RF_PWR_0DBM;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2206      	movs	r2, #6
 800399c:	735a      	strb	r2, [r3, #13]
    RadioConfig.PllLock = 0;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	739a      	strb	r2, [r3, #14]
    RadioConfig.ContWaveEnabled = 0;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	73da      	strb	r2, [r3, #15]
    RadioConfig.FeatureDynamicPayloadEnabled = 1;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	741a      	strb	r2, [r3, #16]
    RadioConfig.FeaturePayloadWithAckEnabled = 1;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	745a      	strb	r2, [r3, #17]
    RadioConfig.FeatureDynamicPayloadWithNoAckEnabled = 1;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	749a      	strb	r2, [r3, #18]
    
    RxPipeConfig[0].address = 0xe7e7e7e7e7;
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	f04f 33e7 	mov.w	r3, #3890735079	; 0xe7e7e7e7
 80039c2:	f04f 04e7 	mov.w	r4, #231	; 0xe7
 80039c6:	e9c2 3408 	strd	r3, r4, [r2, #32]
    RxPipeConfig[1].address = 0xc2c2c2c2c2;
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	f04f 33c2 	mov.w	r3, #3267543746	; 0xc2c2c2c2
 80039d0:	f04f 04c2 	mov.w	r4, #194	; 0xc2
 80039d4:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    RxPipeConfig[2].address = 0xc2c2c2c2c3;
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	4b4c      	ldr	r3, [pc, #304]	; (8003b0c <_ZN9NRF24L01pC1Ev+0x22c>)
 80039dc:	f04f 04c2 	mov.w	r4, #194	; 0xc2
 80039e0:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
    RxPipeConfig[3].address = 0xc2c2c2c2c4;
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	a444      	add	r4, pc, #272	; (adr r4, 8003af8 <_ZN9NRF24L01pC1Ev+0x218>)
 80039e8:	cc18      	ldmia	r4, {r3, r4}
 80039ea:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
    RxPipeConfig[4].address = 0xc2c2c2c2c5;
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	a443      	add	r4, pc, #268	; (adr r4, 8003b00 <_ZN9NRF24L01pC1Ev+0x220>)
 80039f2:	cc18      	ldmia	r4, {r3, r4}
 80039f4:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
    RxPipeConfig[5].address = 0xc2c2c2c2c6;
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	4b45      	ldr	r3, [pc, #276]	; (8003b10 <_ZN9NRF24L01pC1Ev+0x230>)
 80039fc:	f04f 04c2 	mov.w	r4, #194	; 0xc2
 8003a00:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
    
    enable_dynamic_payload(RadioConfig.FeatureDynamicPayloadEnabled);
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	7c1b      	ldrb	r3, [r3, #16]
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	4610      	mov	r0, r2
 8003a0e:	f000 ff3f 	bl	8004890 <_ZN15NRF24L01pDriver22enable_dynamic_payloadEb>
    enable_payload_with_ack(RadioConfig.FeaturePayloadWithAckEnabled);
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	7c5b      	ldrb	r3, [r3, #17]
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4610      	mov	r0, r2
 8003a1c:	f000 ff66 	bl	80048ec <_ZN15NRF24L01pDriver23enable_payload_with_ackEb>
    enable_dynamic_payload_with_no_ack(RadioConfig.FeatureDynamicPayloadWithNoAckEnabled);
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	7c9b      	ldrb	r3, [r3, #18]
 8003a26:	4619      	mov	r1, r3
 8003a28:	4610      	mov	r0, r2
 8003a2a:	f000 ff8d 	bl	8004948 <_ZN15NRF24L01pDriver34enable_dynamic_payload_with_no_ackEb>
    set_auto_retransmission_count(RadioConfig.AutoReTransmissionCount);
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	7a5b      	ldrb	r3, [r3, #9]
 8003a34:	4619      	mov	r1, r3
 8003a36:	4610      	mov	r0, r2
 8003a38:	f000 fd6c 	bl	8004514 <_ZN15NRF24L01pDriver29set_auto_retransmission_countEh>
    set_auto_retransmission_delay(RadioConfig.AutoReTransmitDelayX250us);        
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	7a9b      	ldrb	r3, [r3, #10]
 8003a42:	4619      	mov	r1, r3
 8003a44:	4610      	mov	r0, r2
 8003a46:	f000 fd83 	bl	8004550 <_ZN15NRF24L01pDriver29set_auto_retransmission_delayEh>
    set_DataRate(RadioConfig.datarate);
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	7b1b      	ldrb	r3, [r3, #12]
 8003a50:	4619      	mov	r1, r3
 8003a52:	4610      	mov	r0, r2
 8003a54:	f000 fdb2 	bl	80045bc <_ZN15NRF24L01pDriver12set_DataRateENS_10datarate_tE>
    
    int i;
    for(i=0;i<6;i++){
 8003a58:	2300      	movs	r3, #0
 8003a5a:	60fb      	str	r3, [r7, #12]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2b05      	cmp	r3, #5
 8003a60:	dc45      	bgt.n	8003aee <_ZN9NRF24L01pC1Ev+0x20e>
        enable_rx_on_pipe((pipe_t)i,RxPipeConfig[i].PipeEnabled );
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	b2dc      	uxtb	r4, r3
 8003a68:	6879      	ldr	r1, [r7, #4]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	1c5a      	adds	r2, r3, #1
 8003a6e:	4613      	mov	r3, r2
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	4413      	add	r3, r2
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	440b      	add	r3, r1
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	4621      	mov	r1, r4
 8003a7e:	f000 fd0b 	bl	8004498 <_ZN15NRF24L01pDriver17enable_rx_on_pipeENS_6pipe_tEb>
        enable_auto_ack((pipe_t)i,RxPipeConfig[i].autoAckEnabled );
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	b2dc      	uxtb	r4, r3
 8003a88:	6879      	ldr	r1, [r7, #4]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	1c5a      	adds	r2, r3, #1
 8003a8e:	4613      	mov	r3, r2
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	4413      	add	r3, r2
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	440b      	add	r3, r1
 8003a98:	3301      	adds	r3, #1
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4621      	mov	r1, r4
 8003aa0:	f000 fcbc 	bl	800441c <_ZN15NRF24L01pDriver15enable_auto_ackENS_6pipe_tEb>
        enable_dynamic_payload_pipe((pipe_t)i,RxPipeConfig[i].dynamicPayloadEnabled);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	b2dc      	uxtb	r4, r3
 8003aaa:	6879      	ldr	r1, [r7, #4]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	4413      	add	r3, r2
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	440b      	add	r3, r1
 8003ab8:	3329      	adds	r3, #41	; 0x29
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	461a      	mov	r2, r3
 8003abe:	4621      	mov	r1, r4
 8003ac0:	f000 fea8 	bl	8004814 <_ZN15NRF24L01pDriver27enable_dynamic_payload_pipeENS_6pipe_tEb>
        set_RX_pipe_address((pipe_t)i,RxPipeConfig[i].address);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	b2dd      	uxtb	r5, r3
 8003aca:	6879      	ldr	r1, [r7, #4]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	4413      	add	r3, r2
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	440b      	add	r3, r1
 8003ad8:	3320      	adds	r3, #32
 8003ada:	cb18      	ldmia	r3, {r3, r4}
 8003adc:	461a      	mov	r2, r3
 8003ade:	4623      	mov	r3, r4
 8003ae0:	4629      	mov	r1, r5
 8003ae2:	f000 fe01 	bl	80046e8 <_ZN15NRF24L01pDriver19set_RX_pipe_addressENS_6pipe_tEy>
    set_auto_retransmission_count(RadioConfig.AutoReTransmissionCount);
    set_auto_retransmission_delay(RadioConfig.AutoReTransmitDelayX250us);        
    set_DataRate(RadioConfig.datarate);
    
    int i;
    for(i=0;i<6;i++){
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	60fb      	str	r3, [r7, #12]
 8003aec:	e7b6      	b.n	8003a5c <_ZN9NRF24L01pC1Ev+0x17c>
        enable_dynamic_payload_pipe((pipe_t)i,RxPipeConfig[i].dynamicPayloadEnabled);
        set_RX_pipe_address((pipe_t)i,RxPipeConfig[i].address);
    }

    
}
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4618      	mov	r0, r3
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bdb0      	pop	{r4, r5, r7, pc}
 8003af8:	c2c2c2c4 	.word	0xc2c2c2c4
 8003afc:	000000c2 	.word	0x000000c2
 8003b00:	c2c2c2c5 	.word	0xc2c2c2c5
 8003b04:	000000c2 	.word	0x000000c2
 8003b08:	08006150 	.word	0x08006150
 8003b0c:	c2c2c2c3 	.word	0xc2c2c2c3
 8003b10:	c2c2c2c6 	.word	0xc2c2c2c6

08003b14 <_ZN9NRF24L01pD1Ev>:

NRF24L01p::NRF24L01p(const NRF24L01p& orig) {
}

NRF24L01p::~NRF24L01p() {
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	4a08      	ldr	r2, [pc, #32]	; (8003b40 <_ZN9NRF24L01pD1Ev+0x2c>)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	601a      	str	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 faa9 	bl	800407c <_ZN15NRF24L01pDriverD1Ev>
}
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d002      	beq.n	8003b36 <_ZN9NRF24L01pD1Ev+0x22>
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f001 faf6 	bl	8005122 <_ZdlPv>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	08006150 	.word	0x08006150

08003b44 <_ZN9NRF24L01pD0Ev>:
}

NRF24L01p::NRF24L01p(const NRF24L01p& orig) {
}

NRF24L01p::~NRF24L01p() {
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
}
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f7ff ffe1 	bl	8003b14 <_ZN9NRF24L01pD1Ev>
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f001 fae5 	bl	8005122 <_ZdlPv>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop

08003b64 <_ZN9NRF24L01p17ResetConfigValuesEPNS_13RadioConfig_tEPNS_14RxPipeConfig_tE>:


void NRF24L01p::ResetConfigValues(RadioConfig_t *_RadioConfig, RxPipeConfig_t *_RxPipeConfig){
 8003b64:	b5b0      	push	{r4, r5, r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]

    RadioConfig.DataReadyInterruptEnabled = _RadioConfig->DataReadyInterruptEnabled;
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	781a      	ldrb	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	715a      	strb	r2, [r3, #5]
    RadioConfig.DataSentInterruptFlagEnabled = _RadioConfig->DataSentInterruptFlagEnabled;
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	785a      	ldrb	r2, [r3, #1]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	719a      	strb	r2, [r3, #6]
    RadioConfig.MaxRetryInterruptFlagEnabled = _RadioConfig->MaxRetryInterruptFlagEnabled;
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	789a      	ldrb	r2, [r3, #2]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	71da      	strb	r2, [r3, #7]
    RadioConfig.Crc = _RadioConfig->Crc;
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	78da      	ldrb	r2, [r3, #3]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	721a      	strb	r2, [r3, #8]
    RadioConfig.AutoReTransmissionCount = _RadioConfig->AutoReTransmissionCount;
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	791a      	ldrb	r2, [r3, #4]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	725a      	strb	r2, [r3, #9]
    RadioConfig.AutoReTransmitDelayX250us = _RadioConfig->AutoReTransmitDelayX250us;
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	795a      	ldrb	r2, [r3, #5]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	729a      	strb	r2, [r3, #10]
    RadioConfig.frequencyOffset = _RadioConfig->frequencyOffset;
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	799a      	ldrb	r2, [r3, #6]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	72da      	strb	r2, [r3, #11]
    RadioConfig.datarate = _RadioConfig->datarate;
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	79da      	ldrb	r2, [r3, #7]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	731a      	strb	r2, [r3, #12]
    RadioConfig.RfPower = _RadioConfig->RfPower;
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	7a1a      	ldrb	r2, [r3, #8]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	735a      	strb	r2, [r3, #13]
    RadioConfig.PllLock = _RadioConfig->PllLock;
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	7a5a      	ldrb	r2, [r3, #9]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	739a      	strb	r2, [r3, #14]
    RadioConfig.ContWaveEnabled = _RadioConfig->ContWaveEnabled;
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	7a9a      	ldrb	r2, [r3, #10]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	73da      	strb	r2, [r3, #15]
    RadioConfig.FeatureDynamicPayloadEnabled = _RadioConfig->FeatureDynamicPayloadEnabled;
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	7ada      	ldrb	r2, [r3, #11]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	741a      	strb	r2, [r3, #16]
    RadioConfig.FeaturePayloadWithAckEnabled = _RadioConfig->FeaturePayloadWithAckEnabled;
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	7b1a      	ldrb	r2, [r3, #12]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	745a      	strb	r2, [r3, #17]
    RadioConfig.FeatureDynamicPayloadWithNoAckEnabled = _RadioConfig->FeatureDynamicPayloadWithNoAckEnabled;
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	7b5a      	ldrb	r2, [r3, #13]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	749a      	strb	r2, [r3, #18]

    int i;
    for(i=0;i<6;i++){
 8003be0:	2300      	movs	r3, #0
 8003be2:	617b      	str	r3, [r7, #20]
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	2b05      	cmp	r3, #5
 8003be8:	dc1b      	bgt.n	8003c22 <_ZN9NRF24L01p17ResetConfigValuesEPNS_13RadioConfig_tEPNS_14RxPipeConfig_tE+0xbe>
        RxPipeConfig[i] = _RxPipeConfig[i];
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4613      	mov	r3, r2
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	4413      	add	r3, r2
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	1898      	adds	r0, r3, r2
 8003bfa:	68f9      	ldr	r1, [r7, #12]
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	1c5a      	adds	r2, r3, #1
 8003c00:	4613      	mov	r3, r2
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	4413      	add	r3, r2
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	440b      	add	r3, r1
 8003c0a:	461c      	mov	r4, r3
 8003c0c:	4605      	mov	r5, r0
 8003c0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c12:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003c16:	e884 0003 	stmia.w	r4, {r0, r1}
    RadioConfig.FeatureDynamicPayloadEnabled = _RadioConfig->FeatureDynamicPayloadEnabled;
    RadioConfig.FeaturePayloadWithAckEnabled = _RadioConfig->FeaturePayloadWithAckEnabled;
    RadioConfig.FeatureDynamicPayloadWithNoAckEnabled = _RadioConfig->FeatureDynamicPayloadWithNoAckEnabled;

    int i;
    for(i=0;i<6;i++){
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	e7e0      	b.n	8003be4 <_ZN9NRF24L01p17ResetConfigValuesEPNS_13RadioConfig_tEPNS_14RxPipeConfig_tE+0x80>
        RxPipeConfig[i] = _RxPipeConfig[i];
    }

    
    enable_dynamic_payload(RadioConfig.FeatureDynamicPayloadEnabled);
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	7c1b      	ldrb	r3, [r3, #16]
 8003c28:	4619      	mov	r1, r3
 8003c2a:	4610      	mov	r0, r2
 8003c2c:	f000 fe30 	bl	8004890 <_ZN15NRF24L01pDriver22enable_dynamic_payloadEb>
    enable_payload_with_ack(RadioConfig.FeaturePayloadWithAckEnabled);
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	7c5b      	ldrb	r3, [r3, #17]
 8003c36:	4619      	mov	r1, r3
 8003c38:	4610      	mov	r0, r2
 8003c3a:	f000 fe57 	bl	80048ec <_ZN15NRF24L01pDriver23enable_payload_with_ackEb>
    enable_dynamic_payload_with_no_ack(RadioConfig.FeatureDynamicPayloadWithNoAckEnabled);
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	7c9b      	ldrb	r3, [r3, #18]
 8003c44:	4619      	mov	r1, r3
 8003c46:	4610      	mov	r0, r2
 8003c48:	f000 fe7e 	bl	8004948 <_ZN15NRF24L01pDriver34enable_dynamic_payload_with_no_ackEb>
    set_auto_retransmission_count(RadioConfig.AutoReTransmissionCount);
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	7a5b      	ldrb	r3, [r3, #9]
 8003c52:	4619      	mov	r1, r3
 8003c54:	4610      	mov	r0, r2
 8003c56:	f000 fc5d 	bl	8004514 <_ZN15NRF24L01pDriver29set_auto_retransmission_countEh>
    set_auto_retransmission_delay(RadioConfig.AutoReTransmitDelayX250us);        
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	7a9b      	ldrb	r3, [r3, #10]
 8003c60:	4619      	mov	r1, r3
 8003c62:	4610      	mov	r0, r2
 8003c64:	f000 fc74 	bl	8004550 <_ZN15NRF24L01pDriver29set_auto_retransmission_delayEh>
    set_DataRate(RadioConfig.datarate);
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	7b1b      	ldrb	r3, [r3, #12]
 8003c6e:	4619      	mov	r1, r3
 8003c70:	4610      	mov	r0, r2
 8003c72:	f000 fca3 	bl	80045bc <_ZN15NRF24L01pDriver12set_DataRateENS_10datarate_tE>
    
    for(i=0;i<6;i++){
 8003c76:	2300      	movs	r3, #0
 8003c78:	617b      	str	r3, [r7, #20]
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	2b05      	cmp	r3, #5
 8003c7e:	dc45      	bgt.n	8003d0c <_ZN9NRF24L01p17ResetConfigValuesEPNS_13RadioConfig_tEPNS_14RxPipeConfig_tE+0x1a8>
        enable_rx_on_pipe((pipe_t)i,RxPipeConfig[i].PipeEnabled );
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	b2dc      	uxtb	r4, r3
 8003c86:	68f9      	ldr	r1, [r7, #12]
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	4413      	add	r3, r2
 8003c92:	00db      	lsls	r3, r3, #3
 8003c94:	440b      	add	r3, r1
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	461a      	mov	r2, r3
 8003c9a:	4621      	mov	r1, r4
 8003c9c:	f000 fbfc 	bl	8004498 <_ZN15NRF24L01pDriver17enable_rx_on_pipeENS_6pipe_tEb>
        enable_auto_ack((pipe_t)i,RxPipeConfig[i].autoAckEnabled );
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	b2dc      	uxtb	r4, r3
 8003ca6:	68f9      	ldr	r1, [r7, #12]
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	1c5a      	adds	r2, r3, #1
 8003cac:	4613      	mov	r3, r2
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	4413      	add	r3, r2
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	440b      	add	r3, r1
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	4621      	mov	r1, r4
 8003cbe:	f000 fbad 	bl	800441c <_ZN15NRF24L01pDriver15enable_auto_ackENS_6pipe_tEb>
        enable_dynamic_payload_pipe((pipe_t)i,RxPipeConfig[i].dynamicPayloadEnabled);
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	b2dc      	uxtb	r4, r3
 8003cc8:	68f9      	ldr	r1, [r7, #12]
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	4413      	add	r3, r2
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	440b      	add	r3, r1
 8003cd6:	3329      	adds	r3, #41	; 0x29
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	4621      	mov	r1, r4
 8003cde:	f000 fd99 	bl	8004814 <_ZN15NRF24L01pDriver27enable_dynamic_payload_pipeENS_6pipe_tEb>
        set_RX_pipe_address((pipe_t)i,RxPipeConfig[i].address);
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	b2dd      	uxtb	r5, r3
 8003ce8:	68f9      	ldr	r1, [r7, #12]
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	4613      	mov	r3, r2
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	4413      	add	r3, r2
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	440b      	add	r3, r1
 8003cf6:	3320      	adds	r3, #32
 8003cf8:	cb18      	ldmia	r3, {r3, r4}
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	4623      	mov	r3, r4
 8003cfe:	4629      	mov	r1, r5
 8003d00:	f000 fcf2 	bl	80046e8 <_ZN15NRF24L01pDriver19set_RX_pipe_addressENS_6pipe_tEy>
    enable_dynamic_payload_with_no_ack(RadioConfig.FeatureDynamicPayloadWithNoAckEnabled);
    set_auto_retransmission_count(RadioConfig.AutoReTransmissionCount);
    set_auto_retransmission_delay(RadioConfig.AutoReTransmitDelayX250us);        
    set_DataRate(RadioConfig.datarate);
    
    for(i=0;i<6;i++){
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	3301      	adds	r3, #1
 8003d08:	617b      	str	r3, [r7, #20]
 8003d0a:	e7b6      	b.n	8003c7a <_ZN9NRF24L01p17ResetConfigValuesEPNS_13RadioConfig_tEPNS_14RxPipeConfig_tE+0x116>
        enable_rx_on_pipe((pipe_t)i,RxPipeConfig[i].PipeEnabled );
        enable_auto_ack((pipe_t)i,RxPipeConfig[i].autoAckEnabled );
        enable_dynamic_payload_pipe((pipe_t)i,RxPipeConfig[i].dynamicPayloadEnabled);
        set_RX_pipe_address((pipe_t)i,RxPipeConfig[i].address);
    }
}
 8003d0c:	bf00      	nop
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bdb0      	pop	{r4, r5, r7, pc}

08003d14 <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE>:

void NRF24L01p::RadioMode(NRF24L01p::RadioState_t mode){
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	70fb      	strb	r3, [r7, #3]
    switch(mode){
 8003d20:	78fb      	ldrb	r3, [r7, #3]
 8003d22:	3b01      	subs	r3, #1
 8003d24:	2b03      	cmp	r3, #3
 8003d26:	d869      	bhi.n	8003dfc <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE+0xe8>
 8003d28:	a201      	add	r2, pc, #4	; (adr r2, 8003d30 <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE+0x1c>)
 8003d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2e:	bf00      	nop
 8003d30:	08003d41 	.word	0x08003d41
 8003d34:	08003d5b 	.word	0x08003d5b
 8003d38:	08003d8b 	.word	0x08003d8b
 8003d3c:	08003dc1 	.word	0x08003dc1
        case MODE_POWER_DOWN: {
            power_down();
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 fb22 	bl	800438c <_ZN15NRF24L01pDriver10power_downEv>
            port_Pin_CE(0);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 ff2d 	bl	8004bac <_ZN13NRF24L01pPort11port_Pin_CEEb>
            RadioState = MODE_POWER_DOWN;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	711a      	strb	r2, [r3, #4]
            break;
 8003d58:	e050      	b.n	8003dfc <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE+0xe8>
        }
        case MODE_STANDBY: {
            if(RadioState == MODE_POWER_DOWN){
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	791b      	ldrb	r3, [r3, #4]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d10a      	bne.n	8003d78 <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE+0x64>
                    power_up();
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 faf9 	bl	800435c <_ZN15NRF24L01pDriver8power_upEv>
                    port_DelayUs(_NRF24L01P_TIMING_Tpd2stby_us);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f241 1194 	movw	r1, #4500	; 0x1194
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 ff63 	bl	8004c3c <_ZN13NRF24L01pPort12port_DelayUsEj>
 8003d76:	e004      	b.n	8003d82 <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE+0x6e>
            }
            else{
                    port_Pin_CE(0);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 ff15 	bl	8004bac <_ZN13NRF24L01pPort11port_Pin_CEEb>
            }
            RadioState = MODE_STANDBY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2202      	movs	r2, #2
 8003d86:	711a      	strb	r2, [r3, #4]
            break;
 8003d88:	e038      	b.n	8003dfc <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE+0xe8>
        }
        case MODE_RX: {
            if(RadioState != MODE_RX){
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	791b      	ldrb	r3, [r3, #4]
 8003d8e:	2b03      	cmp	r3, #3
 8003d90:	d031      	beq.n	8003df6 <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE+0xe2>
                port_Pin_CE(0);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2100      	movs	r1, #0
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 ff08 	bl	8004bac <_ZN13NRF24L01pPort11port_Pin_CEEb>
                rx_mode();
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 fb0c 	bl	80043bc <_ZN15NRF24L01pDriver7rx_modeEv>
                port_Pin_CE(1);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2101      	movs	r1, #1
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 feff 	bl	8004bac <_ZN13NRF24L01pPort11port_Pin_CEEb>
                port_DelayUs(_NRF24L01P_TIMING_Tstby2a_us);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2182      	movs	r1, #130	; 0x82
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 ff42 	bl	8004c3c <_ZN13NRF24L01pPort12port_DelayUsEj>
                RadioState = MODE_RX;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2203      	movs	r2, #3
 8003dbc:	711a      	strb	r2, [r3, #4]
            }
            break;
 8003dbe:	e01a      	b.n	8003df6 <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE+0xe2>
        }
        case MODE_TX: {
            if(RadioState != MODE_TX){
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	791b      	ldrb	r3, [r3, #4]
 8003dc4:	2b04      	cmp	r3, #4
 8003dc6:	d018      	beq.n	8003dfa <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE+0xe6>
                port_Pin_CE(0);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2100      	movs	r1, #0
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 feed 	bl	8004bac <_ZN13NRF24L01pPort11port_Pin_CEEb>
                tx_mode();
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 fb09 	bl	80043ec <_ZN15NRF24L01pDriver7tx_modeEv>
                port_Pin_CE(1);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2101      	movs	r1, #1
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 fee4 	bl	8004bac <_ZN13NRF24L01pPort11port_Pin_CEEb>
                port_DelayUs(_NRF24L01P_TIMING_Tstby2a_us);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2182      	movs	r1, #130	; 0x82
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 ff27 	bl	8004c3c <_ZN13NRF24L01pPort12port_DelayUsEj>
                RadioState = MODE_TX;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2204      	movs	r2, #4
 8003df2:	711a      	strb	r2, [r3, #4]
            }
            break;
 8003df4:	e001      	b.n	8003dfa <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE+0xe6>
                rx_mode();
                port_Pin_CE(1);
                port_DelayUs(_NRF24L01P_TIMING_Tstby2a_us);
                RadioState = MODE_RX;
            }
            break;
 8003df6:	bf00      	nop
 8003df8:	e000      	b.n	8003dfc <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE+0xe8>
                tx_mode();
                port_Pin_CE(1);
                port_DelayUs(_NRF24L01P_TIMING_Tstby2a_us);
                RadioState = MODE_TX;
            }
            break;
 8003dfa:	bf00      	nop
        }		
    }
}
 8003dfc:	bf00      	nop
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <_ZN9NRF24L01p8writableEv>:


bool NRF24L01p::readable(){
    return (get_data_ready_flag() || !get_fifo_flag_rx_empty())&& (get_rx_payload_pipe() != 7)  ; 
}
bool NRF24L01p::writable(){
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
    return !get_fifo_flag_tx_full();
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 fce6 	bl	80047e0 <_ZN15NRF24L01pDriver21get_fifo_flag_tx_fullEv>
 8003e14:	4603      	mov	r3, r0
 8003e16:	f083 0301 	eor.w	r3, r3, #1
 8003e1a:	b2db      	uxtb	r3, r3
    
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <_ZN9NRF24L01p12writePayloadEPNS_9Payload_tE>:
bool NRF24L01p::readableOnPipe(pipe_t pipe){
    
}


NRF24L01p::ErrorStatus_t NRF24L01p::writePayload(Payload_t *payload){
 8003e24:	b590      	push	{r4, r7, lr}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
    set_TX_pipe_address(payload->address);
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	cb18      	ldmia	r3, {r3, r4}
 8003e34:	461a      	mov	r2, r3
 8003e36:	4623      	mov	r3, r4
 8003e38:	4608      	mov	r0, r1
 8003e3a:	f000 fc9d 	bl	8004778 <_ZN15NRF24L01pDriver19set_TX_pipe_addressEy>
    if(payload->UseAck == 1){
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	7a5b      	ldrb	r3, [r3, #9]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d008      	beq.n	8003e58 <_ZN9NRF24L01p12writePayloadEPNS_9Payload_tE+0x34>
        write_tx_payload(payload->data,payload->length);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	68d9      	ldr	r1, [r3, #12]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	461a      	mov	r2, r3
 8003e52:	f000 f9e7 	bl	8004224 <_ZN15NRF24L01pDriver16write_tx_payloadEPhi>
 8003e56:	e00b      	b.n	8003e70 <_ZN9NRF24L01p12writePayloadEPNS_9Payload_tE+0x4c>
    }else{
        if(RadioConfig.FeatureDynamicPayloadWithNoAckEnabled == 1){
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	7c9b      	ldrb	r3, [r3, #18]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d007      	beq.n	8003e70 <_ZN9NRF24L01p12writePayloadEPNS_9Payload_tE+0x4c>
            write_tx_payload_noack(payload->data,payload->length); 
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	68d9      	ldr	r1, [r3, #12]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	f000 fa36 	bl	80042dc <_ZN15NRF24L01pDriver22write_tx_payload_noackEPhi>
        }
    }
}
 8003e70:	bf00      	nop
 8003e72:	4618      	mov	r0, r3
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd90      	pop	{r4, r7, pc}
 8003e7a:	bf00      	nop

08003e7c <_ZN9NRF24L01p15TransmitPayloadEPNS_9Payload_tE>:
    }
    return error;
}


NRF24L01p::ErrorStatus_t NRF24L01p::TransmitPayload(Payload_t *payload){
 8003e7c:	b590      	push	{r4, r7, lr}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
    ErrorStatus_t error;
    if(TxPipeAddress != payload->address){
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	e9d3 122a 	ldrd	r1, r2, [r3, #168]	; 0xa8
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	cb18      	ldmia	r3, {r3, r4}
 8003e90:	42a2      	cmp	r2, r4
 8003e92:	bf08      	it	eq
 8003e94:	4299      	cmpeq	r1, r3
 8003e96:	d00c      	beq.n	8003eb2 <_ZN9NRF24L01p15TransmitPayloadEPNS_9Payload_tE+0x36>
        set_TX_pipe_address(payload->address);
 8003e98:	6879      	ldr	r1, [r7, #4]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	cb18      	ldmia	r3, {r3, r4}
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	4623      	mov	r3, r4
 8003ea2:	4608      	mov	r0, r1
 8003ea4:	f000 fc68 	bl	8004778 <_ZN15NRF24L01pDriver19set_TX_pipe_addressEy>
        TxPipeAddress = payload->address;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	cb18      	ldmia	r3, {r3, r4}
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
    }

    if(payload->UseAck){
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	7a5b      	ldrb	r3, [r3, #9]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 8095 	beq.w	8003fe6 <_ZN9NRF24L01p15TransmitPayloadEPNS_9Payload_tE+0x16a>
        
        if(RxPipeConfig[PIPE_P0].autoAckEnabled == 0){
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	7e5b      	ldrb	r3, [r3, #25]
 8003ec0:	f083 0301 	eor.w	r3, r3, #1
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d005      	beq.n	8003ed6 <_ZN9NRF24L01p15TransmitPayloadEPNS_9Payload_tE+0x5a>
            enable_auto_ack(PIPE_P0, 1);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	2100      	movs	r1, #0
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 faa3 	bl	800441c <_ZN15NRF24L01pDriver15enable_auto_ackENS_6pipe_tEb>
        }
        if(RxPipeConfig[PIPE_P0].PipeEnabled == 0){
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	7e1b      	ldrb	r3, [r3, #24]
 8003eda:	f083 0301 	eor.w	r3, r3, #1
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d005      	beq.n	8003ef0 <_ZN9NRF24L01p15TransmitPayloadEPNS_9Payload_tE+0x74>
            enable_rx_on_pipe(PIPE_P0, 1);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	2100      	movs	r1, #0
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 fad4 	bl	8004498 <_ZN15NRF24L01pDriver17enable_rx_on_pipeENS_6pipe_tEb>
        }
        set_RX_pipe_address(PIPE_P0, payload->address);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	cb18      	ldmia	r3, {r3, r4}
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	4623      	mov	r3, r4
 8003efa:	2100      	movs	r1, #0
 8003efc:	f000 fbf4 	bl	80046e8 <_ZN15NRF24L01pDriver19set_RX_pipe_addressENS_6pipe_tEy>
        
        
        writePayload(payload);
 8003f00:	6839      	ldr	r1, [r7, #0]
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7ff ff8e 	bl	8003e24 <_ZN9NRF24L01p12writePayloadEPNS_9Payload_tE>
        
        RadioState_t originalState = RadioState;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	791b      	ldrb	r3, [r3, #4]
 8003f0c:	73bb      	strb	r3, [r7, #14]
        RadioMode(MODE_STANDBY);
 8003f0e:	2102      	movs	r1, #2
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7ff feff 	bl	8003d14 <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE>
        

        if(writable()){
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7ff ff74 	bl	8003e04 <_ZN9NRF24L01p8writableEv>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d038      	beq.n	8003f94 <_ZN9NRF24L01p15TransmitPayloadEPNS_9Payload_tE+0x118>
            clear_data_sent_flag();
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 fba9 	bl	800467c <_ZN15NRF24L01pDriver20clear_data_sent_flagEv>
            while(1){
                RadioMode(MODE_TX);   
 8003f2a:	2104      	movs	r1, #4
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7ff fef1 	bl	8003d14 <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE>
                RadioMode(MODE_STANDBY);
 8003f32:	2102      	movs	r1, #2
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f7ff feed 	bl	8003d14 <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE>
                
                if(get_data_sent_flag()){
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f000 fb85 	bl	800464c <_ZN15NRF24L01pDriver18get_data_sent_flagEv>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <_ZN9NRF24L01p15TransmitPayloadEPNS_9Payload_tE+0xd2>
                    error = SUCCESS;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	73fb      	strb	r3, [r7, #15]
                    break;
 8003f4c:	e022      	b.n	8003f94 <_ZN9NRF24L01p15TransmitPayloadEPNS_9Payload_tE+0x118>
                }
                if(get_max_retry_flag()){
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 fb51 	bl	80045f8 <_ZN15NRF24L01pDriver18get_max_retry_flagEv>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0e6      	beq.n	8003f2a <_ZN9NRF24L01p15TransmitPayloadEPNS_9Payload_tE+0xae>
                    clear_max_retry_flag();
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 fb62 	bl	8004628 <_ZN15NRF24L01pDriver20clear_max_retry_flagEv>
                    if(get_plos_count()>=payload->retransmitCount){
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 fbac 	bl	80046c4 <_ZN15NRF24L01pDriver14get_plos_countEv>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	461a      	mov	r2, r3
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	7d1b      	ldrb	r3, [r3, #20]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	bf2c      	ite	cs
 8003f78:	2301      	movcs	r3, #1
 8003f7a:	2300      	movcc	r3, #0
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0d3      	beq.n	8003f2a <_ZN9NRF24L01p15TransmitPayloadEPNS_9Payload_tE+0xae>
                        set_frequency_offset(RadioConfig.frequencyOffset);
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	7adb      	ldrb	r3, [r3, #11]
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4610      	mov	r0, r2
 8003f8c:	f000 fb02 	bl	8004594 <_ZN15NRF24L01pDriver20set_frequency_offsetEh>
                        error = ERROR;
 8003f90:	23ff      	movs	r3, #255	; 0xff
 8003f92:	73fb      	strb	r3, [r7, #15]
                }
            }

        }
        
        RadioMode(originalState);
 8003f94:	7bbb      	ldrb	r3, [r7, #14]
 8003f96:	4619      	mov	r1, r3
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f7ff febb 	bl	8003d14 <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE>
        
        set_RX_pipe_address(PIPE_P0, RxPipeConfig[PIPE_P0].address);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	4623      	mov	r3, r4
 8003faa:	2100      	movs	r1, #0
 8003fac:	f000 fb9c 	bl	80046e8 <_ZN15NRF24L01pDriver19set_RX_pipe_addressENS_6pipe_tEy>
        if(RxPipeConfig[PIPE_P0].autoAckEnabled == 0){
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	7e5b      	ldrb	r3, [r3, #25]
 8003fb4:	f083 0301 	eor.w	r3, r3, #1
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d005      	beq.n	8003fca <_ZN9NRF24L01p15TransmitPayloadEPNS_9Payload_tE+0x14e>
            enable_auto_ack(PIPE_P0, 0);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f000 fa29 	bl	800441c <_ZN15NRF24L01pDriver15enable_auto_ackENS_6pipe_tEb>
        }
        if(RxPipeConfig[PIPE_P0].PipeEnabled == 0){
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	7e1b      	ldrb	r3, [r3, #24]
 8003fce:	f083 0301 	eor.w	r3, r3, #1
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d035      	beq.n	8004044 <_ZN9NRF24L01p15TransmitPayloadEPNS_9Payload_tE+0x1c8>
            enable_rx_on_pipe(PIPE_P0, 0);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	2100      	movs	r1, #0
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 fa5a 	bl	8004498 <_ZN15NRF24L01pDriver17enable_rx_on_pipeENS_6pipe_tEb>
 8003fe4:	e02e      	b.n	8004044 <_ZN9NRF24L01p15TransmitPayloadEPNS_9Payload_tE+0x1c8>
        }
    }else{
        set_TX_pipe_address(payload->address);
 8003fe6:	6879      	ldr	r1, [r7, #4]
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	cb18      	ldmia	r3, {r3, r4}
 8003fec:	461a      	mov	r2, r3
 8003fee:	4623      	mov	r3, r4
 8003ff0:	4608      	mov	r0, r1
 8003ff2:	f000 fbc1 	bl	8004778 <_ZN15NRF24L01pDriver19set_TX_pipe_addressEy>
        writePayload(payload);
 8003ff6:	6839      	ldr	r1, [r7, #0]
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f7ff ff13 	bl	8003e24 <_ZN9NRF24L01p12writePayloadEPNS_9Payload_tE>
        RadioState_t originalState = RadioState;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	791b      	ldrb	r3, [r3, #4]
 8004002:	737b      	strb	r3, [r7, #13]
        if(writable()){
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7ff fefd 	bl	8003e04 <_ZN9NRF24L01p8writableEv>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d014      	beq.n	800403a <_ZN9NRF24L01p15TransmitPayloadEPNS_9Payload_tE+0x1be>
            clear_data_sent_flag();
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4618      	mov	r0, r3
 8004014:	f000 fb32 	bl	800467c <_ZN15NRF24L01pDriver20clear_data_sent_flagEv>
            while(1){
                RadioMode(MODE_TX);   
 8004018:	2104      	movs	r1, #4
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7ff fe7a 	bl	8003d14 <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE>
                RadioMode(MODE_STANDBY);
 8004020:	2102      	movs	r1, #2
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7ff fe76 	bl	8003d14 <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE>
                if(get_data_sent_flag()){
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4618      	mov	r0, r3
 800402c:	f000 fb0e 	bl	800464c <_ZN15NRF24L01pDriver18get_data_sent_flagEv>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0f0      	beq.n	8004018 <_ZN9NRF24L01p15TransmitPayloadEPNS_9Payload_tE+0x19c>
                    error = SUCCESS;
 8004036:	2300      	movs	r3, #0
 8004038:	73fb      	strb	r3, [r7, #15]
                break;
                }
            }
        }
        RadioMode(originalState);
 800403a:	7b7b      	ldrb	r3, [r7, #13]
 800403c:	4619      	mov	r1, r3
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7ff fe68 	bl	8003d14 <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE>
    }
    
    flush_tx();
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4618      	mov	r0, r3
 8004048:	f000 f910 	bl	800426c <_ZN15NRF24L01pDriver8flush_txEv>
    return error;
 800404c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004050:	4618      	mov	r0, r3
 8004052:	3714      	adds	r7, #20
 8004054:	46bd      	mov	sp, r7
 8004056:	bd90      	pop	{r4, r7, pc}

08004058 <_ZN15NRF24L01pDriverC1Ev>:
 * Created on January 29, 2017, 7:56 AM
 */

#include "NRF24L01pDriver.h"

NRF24L01pDriver::NRF24L01pDriver() {
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4618      	mov	r0, r3
 8004064:	f000 fc9e 	bl	80049a4 <_ZN13NRF24L01pPortC1Ev>
 8004068:	4a03      	ldr	r2, [pc, #12]	; (8004078 <_ZN15NRF24L01pDriverC1Ev+0x20>)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	601a      	str	r2, [r3, #0]
}
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4618      	mov	r0, r3
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	08006160 	.word	0x08006160

0800407c <_ZN15NRF24L01pDriverD1Ev>:

NRF24L01pDriver::NRF24L01pDriver(const NRF24L01pDriver& orig) {
}

NRF24L01pDriver::~NRF24L01pDriver() {
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	4a08      	ldr	r2, [pc, #32]	; (80040a8 <_ZN15NRF24L01pDriverD1Ev+0x2c>)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4618      	mov	r0, r3
 800408e:	f000 fc99 	bl	80049c4 <_ZN13NRF24L01pPortD1Ev>
}
 8004092:	2300      	movs	r3, #0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <_ZN15NRF24L01pDriverD1Ev+0x22>
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f001 f842 	bl	8005122 <_ZdlPv>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4618      	mov	r0, r3
 80040a2:	3708      	adds	r7, #8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	08006160 	.word	0x08006160

080040ac <_ZN15NRF24L01pDriverD0Ev>:
}

NRF24L01pDriver::NRF24L01pDriver(const NRF24L01pDriver& orig) {
}

NRF24L01pDriver::~NRF24L01pDriver() {
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
}
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f7ff ffe1 	bl	800407c <_ZN15NRF24L01pDriverD1Ev>
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f001 f831 	bl	8005122 <_ZdlPv>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4618      	mov	r0, r3
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop

080040cc <_ZN15NRF24L01pDriver13read_registerEh>:

uint8_t NRF24L01pDriver::read_register(uint8_t address){
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	460b      	mov	r3, r1
 80040d6:	70fb      	strb	r3, [r7, #3]
    port_Pin_CSN(0);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2100      	movs	r1, #0
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 fd77 	bl	8004bd0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>
    uint8_t temp = address&_NRF24L01P_REG_ADDRESS_MASK;
 80040e2:	78fb      	ldrb	r3, [r7, #3]
 80040e4:	f003 031f 	and.w	r3, r3, #31
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	73fb      	strb	r3, [r7, #15]
    port_SPI_Transcieve(&temp, 1);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f107 010f 	add.w	r1, r7, #15
 80040f2:	2201      	movs	r2, #1
 80040f4:	4618      	mov	r0, r3
 80040f6:	f000 fd7d 	bl	8004bf4 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>
    port_SPI_Transcieve(&temp, 1);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f107 010f 	add.w	r1, r7, #15
 8004100:	2201      	movs	r2, #1
 8004102:	4618      	mov	r0, r3
 8004104:	f000 fd76 	bl	8004bf4 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>
    port_Pin_CSN(1);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2101      	movs	r1, #1
 800410c:	4618      	mov	r0, r3
 800410e:	f000 fd5f 	bl	8004bd0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>
    return temp;
 8004112:	7bfb      	ldrb	r3, [r7, #15]
    
}
 8004114:	4618      	mov	r0, r3
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <_ZN15NRF24L01pDriver13read_registerEhPhi>:
void NRF24L01pDriver::read_register(uint8_t address, uint8_t *dataout, int len){
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	607a      	str	r2, [r7, #4]
 8004126:	603b      	str	r3, [r7, #0]
 8004128:	460b      	mov	r3, r1
 800412a:	72fb      	strb	r3, [r7, #11]
    port_Pin_CSN(0);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2100      	movs	r1, #0
 8004130:	4618      	mov	r0, r3
 8004132:	f000 fd4d 	bl	8004bd0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>
    uint8_t temp = address&_NRF24L01P_REG_ADDRESS_MASK;
 8004136:	7afb      	ldrb	r3, [r7, #11]
 8004138:	f003 031f 	and.w	r3, r3, #31
 800413c:	b2db      	uxtb	r3, r3
 800413e:	75fb      	strb	r3, [r7, #23]
    port_SPI_Transcieve(&temp, 1);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f107 0117 	add.w	r1, r7, #23
 8004146:	2201      	movs	r2, #1
 8004148:	4618      	mov	r0, r3
 800414a:	f000 fd53 	bl	8004bf4 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>
    port_SPI_Transcieve(dataout, len);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	6879      	ldr	r1, [r7, #4]
 8004154:	4618      	mov	r0, r3
 8004156:	f000 fd4d 	bl	8004bf4 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>
    port_Pin_CSN(1);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2101      	movs	r1, #1
 800415e:	4618      	mov	r0, r3
 8004160:	f000 fd36 	bl	8004bd0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>
}
 8004164:	bf00      	nop
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <_ZN15NRF24L01pDriver14write_registerEhh>:
void NRF24L01pDriver::write_register(uint8_t address, uint8_t datain){
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	460b      	mov	r3, r1
 8004176:	70fb      	strb	r3, [r7, #3]
 8004178:	4613      	mov	r3, r2
 800417a:	70bb      	strb	r3, [r7, #2]
    port_Pin_CSN(0);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2100      	movs	r1, #0
 8004180:	4618      	mov	r0, r3
 8004182:	f000 fd25 	bl	8004bd0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>
    uint8_t temp = (( _NRF24L01P_SPI_CMD_WR_REG | (address&(_NRF24L01P_REG_ADDRESS_MASK))));
 8004186:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800418a:	f003 031f 	and.w	r3, r3, #31
 800418e:	b25b      	sxtb	r3, r3
 8004190:	f043 0320 	orr.w	r3, r3, #32
 8004194:	b25b      	sxtb	r3, r3
 8004196:	b2db      	uxtb	r3, r3
 8004198:	73fb      	strb	r3, [r7, #15]
    port_SPI_Transcieve(&temp, 1);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f107 010f 	add.w	r1, r7, #15
 80041a0:	2201      	movs	r2, #1
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 fd26 	bl	8004bf4 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>
    port_SPI_Transcieve(&datain, 1);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	1cb9      	adds	r1, r7, #2
 80041ac:	2201      	movs	r2, #1
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 fd20 	bl	8004bf4 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>
    port_Pin_CSN(1);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2101      	movs	r1, #1
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 fd09 	bl	8004bd0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>
}
 80041be:	bf00      	nop
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop

080041c8 <_ZN15NRF24L01pDriver14write_registerEhPhi>:
void NRF24L01pDriver::write_register(uint8_t address, uint8_t *datain, int len){
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	607a      	str	r2, [r7, #4]
 80041d2:	603b      	str	r3, [r7, #0]
 80041d4:	460b      	mov	r3, r1
 80041d6:	72fb      	strb	r3, [r7, #11]
    port_Pin_CSN(0);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2100      	movs	r1, #0
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 fcf7 	bl	8004bd0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>
    uint8_t temp = (( _NRF24L01P_SPI_CMD_WR_REG | (address&(_NRF24L01P_REG_ADDRESS_MASK))));
 80041e2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80041e6:	f003 031f 	and.w	r3, r3, #31
 80041ea:	b25b      	sxtb	r3, r3
 80041ec:	f043 0320 	orr.w	r3, r3, #32
 80041f0:	b25b      	sxtb	r3, r3
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	75fb      	strb	r3, [r7, #23]
    port_SPI_Transcieve(&temp, 1);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f107 0117 	add.w	r1, r7, #23
 80041fc:	2201      	movs	r2, #1
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 fcf8 	bl	8004bf4 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>
    port_SPI_Transcieve(datain, len);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	6879      	ldr	r1, [r7, #4]
 800420a:	4618      	mov	r0, r3
 800420c:	f000 fcf2 	bl	8004bf4 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>
    port_Pin_CSN(1);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2101      	movs	r1, #1
 8004214:	4618      	mov	r0, r3
 8004216:	f000 fcdb 	bl	8004bd0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>
}
 800421a:	bf00      	nop
 800421c:	3718      	adds	r7, #24
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop

08004224 <_ZN15NRF24L01pDriver16write_tx_payloadEPhi>:
    uint8_t temp = (_NRF24L01P_SPI_CMD_RD_RX_PAYLOAD);
    port_SPI_Transcieve(&temp,1);
    port_SPI_Transcieve(dataout,pay_len);
    port_Pin_CSN(1);
}
void NRF24L01pDriver::write_tx_payload(uint8_t *datain, int pay_len){
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
    port_Pin_CSN(0);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2100      	movs	r1, #0
 8004234:	4618      	mov	r0, r3
 8004236:	f000 fccb 	bl	8004bd0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>
    uint8_t temp = (_NRF24L01P_SPI_CMD_WR_TX_PAYLOAD);
 800423a:	23a0      	movs	r3, #160	; 0xa0
 800423c:	75fb      	strb	r3, [r7, #23]
    port_SPI_Transcieve(&temp,1);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f107 0117 	add.w	r1, r7, #23
 8004244:	2201      	movs	r2, #1
 8004246:	4618      	mov	r0, r3
 8004248:	f000 fcd4 	bl	8004bf4 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>
    port_SPI_Transcieve(datain,pay_len);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	68b9      	ldr	r1, [r7, #8]
 8004252:	4618      	mov	r0, r3
 8004254:	f000 fcce 	bl	8004bf4 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>
    port_Pin_CSN(1);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2101      	movs	r1, #1
 800425c:	4618      	mov	r0, r3
 800425e:	f000 fcb7 	bl	8004bd0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>
}
 8004262:	bf00      	nop
 8004264:	3718      	adds	r7, #24
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop

0800426c <_ZN15NRF24L01pDriver8flush_txEv>:
void NRF24L01pDriver::flush_tx(){
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
    port_Pin_CSN(0);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2100      	movs	r1, #0
 8004278:	4618      	mov	r0, r3
 800427a:	f000 fca9 	bl	8004bd0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>
    uint8_t temp = (_NRF24L01P_SPI_CMD_FLUSH_TX);
 800427e:	23e1      	movs	r3, #225	; 0xe1
 8004280:	73fb      	strb	r3, [r7, #15]
    port_SPI_Transcieve(&temp,1);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f107 010f 	add.w	r1, r7, #15
 8004288:	2201      	movs	r2, #1
 800428a:	4618      	mov	r0, r3
 800428c:	f000 fcb2 	bl	8004bf4 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>
    port_Pin_CSN(1);  
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2101      	movs	r1, #1
 8004294:	4618      	mov	r0, r3
 8004296:	f000 fc9b 	bl	8004bd0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>
}
 800429a:	bf00      	nop
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop

080042a4 <_ZN15NRF24L01pDriver8flush_rxEv>:
void NRF24L01pDriver::flush_rx(){
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
    port_Pin_CSN(0);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2100      	movs	r1, #0
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 fc8d 	bl	8004bd0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>
    uint8_t temp = (_NRF24L01P_SPI_CMD_FLUSH_RX);
 80042b6:	23e2      	movs	r3, #226	; 0xe2
 80042b8:	73fb      	strb	r3, [r7, #15]
    port_SPI_Transcieve(&temp,1);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f107 010f 	add.w	r1, r7, #15
 80042c0:	2201      	movs	r2, #1
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 fc96 	bl	8004bf4 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>
    port_Pin_CSN(1);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2101      	movs	r1, #1
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 fc7f 	bl	8004bd0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>
}
 80042d2:	bf00      	nop
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop

080042dc <_ZN15NRF24L01pDriver22write_tx_payload_noackEPhi>:
    uint8_t temp = (_NRF24L01P_SPI_CMD_W_ACK_PAYLOAD | pipe);
    port_SPI_Transcieve(&temp,1);
    port_SPI_Transcieve(datain,pay_len);
    port_Pin_CSN(1);
}
void NRF24L01pDriver::write_tx_payload_noack(uint8_t *datain, int pay_len){
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
    port_Pin_CSN(0);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2100      	movs	r1, #0
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 fc6f 	bl	8004bd0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>
    uint8_t temp = (_NRF24L01P_SPI_CMD_W_TX_PYLD_NO_ACK);
 80042f2:	23b0      	movs	r3, #176	; 0xb0
 80042f4:	75fb      	strb	r3, [r7, #23]
    port_SPI_Transcieve(&temp,1);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f107 0117 	add.w	r1, r7, #23
 80042fc:	2201      	movs	r2, #1
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 fc78 	bl	8004bf4 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>
    port_SPI_Transcieve(datain,pay_len);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	68b9      	ldr	r1, [r7, #8]
 800430a:	4618      	mov	r0, r3
 800430c:	f000 fc72 	bl	8004bf4 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>
    port_Pin_CSN(1);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2101      	movs	r1, #1
 8004314:	4618      	mov	r0, r3
 8004316:	f000 fc5b 	bl	8004bd0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>
}
 800431a:	bf00      	nop
 800431c:	3718      	adds	r7, #24
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop

08004324 <_ZN15NRF24L01pDriver10get_statusEv>:
int NRF24L01pDriver::get_status(){
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
    port_Pin_CSN(0);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2100      	movs	r1, #0
 8004330:	4618      	mov	r0, r3
 8004332:	f000 fc4d 	bl	8004bd0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>
    uint8_t temp = (_NRF24L01P_SPI_CMD_NOP );
 8004336:	23ff      	movs	r3, #255	; 0xff
 8004338:	73fb      	strb	r3, [r7, #15]
    port_SPI_Transcieve(&temp,1);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f107 010f 	add.w	r1, r7, #15
 8004340:	2201      	movs	r2, #1
 8004342:	4618      	mov	r0, r3
 8004344:	f000 fc56 	bl	8004bf4 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>
    port_Pin_CSN(1);     
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2101      	movs	r1, #1
 800434c:	4618      	mov	r0, r3
 800434e:	f000 fc3f 	bl	8004bd0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>
    return temp;
 8004352:	7bfb      	ldrb	r3, [r7, #15]
}
 8004354:	4618      	mov	r0, r3
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <_ZN15NRF24L01pDriver8power_upEv>:


void NRF24L01pDriver::power_up(){
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
    uint8_t temp = read_register(_NRF24L01P_REG_CONFIG);
 8004364:	2100      	movs	r1, #0
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7ff feb0 	bl	80040cc <_ZN15NRF24L01pDriver13read_registerEh>
 800436c:	4603      	mov	r3, r0
 800436e:	73fb      	strb	r3, [r7, #15]
    temp |= _NRF24L01P_CONFIG_PWR_UP;
 8004370:	7bfb      	ldrb	r3, [r7, #15]
 8004372:	f043 0302 	orr.w	r3, r3, #2
 8004376:	73fb      	strb	r3, [r7, #15]
    write_register(_NRF24L01P_REG_CONFIG,temp);
 8004378:	7bfb      	ldrb	r3, [r7, #15]
 800437a:	461a      	mov	r2, r3
 800437c:	2100      	movs	r1, #0
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7ff fef4 	bl	800416c <_ZN15NRF24L01pDriver14write_registerEhh>
}
 8004384:	bf00      	nop
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <_ZN15NRF24L01pDriver10power_downEv>:
void NRF24L01pDriver::power_down(){
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
    uint8_t temp = read_register(_NRF24L01P_REG_CONFIG);
 8004394:	2100      	movs	r1, #0
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7ff fe98 	bl	80040cc <_ZN15NRF24L01pDriver13read_registerEh>
 800439c:	4603      	mov	r3, r0
 800439e:	73fb      	strb	r3, [r7, #15]
    temp &= ~_NRF24L01P_CONFIG_PWR_UP;
 80043a0:	7bfb      	ldrb	r3, [r7, #15]
 80043a2:	f023 0302 	bic.w	r3, r3, #2
 80043a6:	73fb      	strb	r3, [r7, #15]
    write_register(_NRF24L01P_REG_CONFIG,temp);
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
 80043aa:	461a      	mov	r2, r3
 80043ac:	2100      	movs	r1, #0
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7ff fedc 	bl	800416c <_ZN15NRF24L01pDriver14write_registerEhh>
}
 80043b4:	bf00      	nop
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <_ZN15NRF24L01pDriver7rx_modeEv>:
void NRF24L01pDriver::rx_mode(){
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
    uint8_t temp = read_register(_NRF24L01P_REG_CONFIG);
 80043c4:	2100      	movs	r1, #0
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7ff fe80 	bl	80040cc <_ZN15NRF24L01pDriver13read_registerEh>
 80043cc:	4603      	mov	r3, r0
 80043ce:	73fb      	strb	r3, [r7, #15]
    temp |= _NRF24L01P_CONFIG_PRIM_RX;
 80043d0:	7bfb      	ldrb	r3, [r7, #15]
 80043d2:	f043 0301 	orr.w	r3, r3, #1
 80043d6:	73fb      	strb	r3, [r7, #15]
    write_register(_NRF24L01P_REG_CONFIG,temp);
 80043d8:	7bfb      	ldrb	r3, [r7, #15]
 80043da:	461a      	mov	r2, r3
 80043dc:	2100      	movs	r1, #0
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7ff fec4 	bl	800416c <_ZN15NRF24L01pDriver14write_registerEhh>
}
 80043e4:	bf00      	nop
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <_ZN15NRF24L01pDriver7tx_modeEv>:
void NRF24L01pDriver::tx_mode(){
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
    uint8_t temp = read_register(_NRF24L01P_REG_CONFIG);
 80043f4:	2100      	movs	r1, #0
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7ff fe68 	bl	80040cc <_ZN15NRF24L01pDriver13read_registerEh>
 80043fc:	4603      	mov	r3, r0
 80043fe:	73fb      	strb	r3, [r7, #15]
    temp &= ~_NRF24L01P_CONFIG_PRIM_RX;
 8004400:	7bfb      	ldrb	r3, [r7, #15]
 8004402:	f023 0301 	bic.w	r3, r3, #1
 8004406:	73fb      	strb	r3, [r7, #15]
    write_register(_NRF24L01P_REG_CONFIG,temp);
 8004408:	7bfb      	ldrb	r3, [r7, #15]
 800440a:	461a      	mov	r2, r3
 800440c:	2100      	movs	r1, #0
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7ff feac 	bl	800416c <_ZN15NRF24L01pDriver14write_registerEhh>
}
 8004414:	bf00      	nop
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <_ZN15NRF24L01pDriver15enable_auto_ackENS_6pipe_tEb>:
void NRF24L01pDriver::enable_maxRetry_interrupt(bool sel){
    
}


void NRF24L01pDriver::enable_auto_ack(pipe_t pipe, bool sel){
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	460b      	mov	r3, r1
 8004426:	70fb      	strb	r3, [r7, #3]
 8004428:	4613      	mov	r3, r2
 800442a:	70bb      	strb	r3, [r7, #2]
    if (sel){
 800442c:	78bb      	ldrb	r3, [r7, #2]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d016      	beq.n	8004460 <_ZN15NRF24L01pDriver15enable_auto_ackENS_6pipe_tEb+0x44>
        uint8_t temp = read_register(_NRF24L01P_REG_EN_AA);
 8004432:	2101      	movs	r1, #1
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7ff fe49 	bl	80040cc <_ZN15NRF24L01pDriver13read_registerEh>
 800443a:	4603      	mov	r3, r0
 800443c:	73fb      	strb	r3, [r7, #15]
        _nrf24l01p_set_bit(temp,pipe);
 800443e:	78fb      	ldrb	r3, [r7, #3]
 8004440:	2201      	movs	r2, #1
 8004442:	fa02 f303 	lsl.w	r3, r2, r3
 8004446:	b25a      	sxtb	r2, r3
 8004448:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800444c:	4313      	orrs	r3, r2
 800444e:	b25b      	sxtb	r3, r3
 8004450:	73fb      	strb	r3, [r7, #15]
        write_register(_NRF24L01P_REG_EN_AA,temp); 
 8004452:	7bfb      	ldrb	r3, [r7, #15]
 8004454:	461a      	mov	r2, r3
 8004456:	2101      	movs	r1, #1
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f7ff fe87 	bl	800416c <_ZN15NRF24L01pDriver14write_registerEhh>
        uint8_t temp = read_register(_NRF24L01P_REG_EN_AA);
        _nrf24l01p_clr_bit(temp,pipe);
        write_register(_NRF24L01P_REG_EN_AA,temp); 
    }
  
}
 800445e:	e017      	b.n	8004490 <_ZN15NRF24L01pDriver15enable_auto_ackENS_6pipe_tEb+0x74>
    if (sel){
        uint8_t temp = read_register(_NRF24L01P_REG_EN_AA);
        _nrf24l01p_set_bit(temp,pipe);
        write_register(_NRF24L01P_REG_EN_AA,temp); 
    }else{
        uint8_t temp = read_register(_NRF24L01P_REG_EN_AA);
 8004460:	2101      	movs	r1, #1
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7ff fe32 	bl	80040cc <_ZN15NRF24L01pDriver13read_registerEh>
 8004468:	4603      	mov	r3, r0
 800446a:	73bb      	strb	r3, [r7, #14]
        _nrf24l01p_clr_bit(temp,pipe);
 800446c:	78fb      	ldrb	r3, [r7, #3]
 800446e:	2201      	movs	r2, #1
 8004470:	fa02 f303 	lsl.w	r3, r2, r3
 8004474:	b25b      	sxtb	r3, r3
 8004476:	43db      	mvns	r3, r3
 8004478:	b25a      	sxtb	r2, r3
 800447a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800447e:	4013      	ands	r3, r2
 8004480:	b25b      	sxtb	r3, r3
 8004482:	73bb      	strb	r3, [r7, #14]
        write_register(_NRF24L01P_REG_EN_AA,temp); 
 8004484:	7bbb      	ldrb	r3, [r7, #14]
 8004486:	461a      	mov	r2, r3
 8004488:	2101      	movs	r1, #1
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7ff fe6e 	bl	800416c <_ZN15NRF24L01pDriver14write_registerEhh>
    }
  
}
 8004490:	bf00      	nop
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <_ZN15NRF24L01pDriver17enable_rx_on_pipeENS_6pipe_tEb>:



void NRF24L01pDriver::enable_rx_on_pipe(pipe_t pipe, bool sel){
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	460b      	mov	r3, r1
 80044a2:	70fb      	strb	r3, [r7, #3]
 80044a4:	4613      	mov	r3, r2
 80044a6:	70bb      	strb	r3, [r7, #2]
    if(sel){
 80044a8:	78bb      	ldrb	r3, [r7, #2]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d016      	beq.n	80044dc <_ZN15NRF24L01pDriver17enable_rx_on_pipeENS_6pipe_tEb+0x44>
        uint8_t temp = read_register(_NRF24L01P_REG_EN_RXADDR);
 80044ae:	2102      	movs	r1, #2
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f7ff fe0b 	bl	80040cc <_ZN15NRF24L01pDriver13read_registerEh>
 80044b6:	4603      	mov	r3, r0
 80044b8:	73fb      	strb	r3, [r7, #15]
        _nrf24l01p_set_bit(temp,pipe);
 80044ba:	78fb      	ldrb	r3, [r7, #3]
 80044bc:	2201      	movs	r2, #1
 80044be:	fa02 f303 	lsl.w	r3, r2, r3
 80044c2:	b25a      	sxtb	r2, r3
 80044c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	b25b      	sxtb	r3, r3
 80044cc:	73fb      	strb	r3, [r7, #15]
        write_register(_NRF24L01P_REG_EN_RXADDR,temp);
 80044ce:	7bfb      	ldrb	r3, [r7, #15]
 80044d0:	461a      	mov	r2, r3
 80044d2:	2102      	movs	r1, #2
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f7ff fe49 	bl	800416c <_ZN15NRF24L01pDriver14write_registerEhh>
        uint8_t temp = read_register(_NRF24L01P_REG_EN_RXADDR);
        _nrf24l01p_clr_bit(temp,pipe);
        write_register(_NRF24L01P_REG_EN_RXADDR,temp);
    }

}
 80044da:	e017      	b.n	800450c <_ZN15NRF24L01pDriver17enable_rx_on_pipeENS_6pipe_tEb+0x74>
    if(sel){
        uint8_t temp = read_register(_NRF24L01P_REG_EN_RXADDR);
        _nrf24l01p_set_bit(temp,pipe);
        write_register(_NRF24L01P_REG_EN_RXADDR,temp);
    }else{
        uint8_t temp = read_register(_NRF24L01P_REG_EN_RXADDR);
 80044dc:	2102      	movs	r1, #2
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7ff fdf4 	bl	80040cc <_ZN15NRF24L01pDriver13read_registerEh>
 80044e4:	4603      	mov	r3, r0
 80044e6:	73bb      	strb	r3, [r7, #14]
        _nrf24l01p_clr_bit(temp,pipe);
 80044e8:	78fb      	ldrb	r3, [r7, #3]
 80044ea:	2201      	movs	r2, #1
 80044ec:	fa02 f303 	lsl.w	r3, r2, r3
 80044f0:	b25b      	sxtb	r3, r3
 80044f2:	43db      	mvns	r3, r3
 80044f4:	b25a      	sxtb	r2, r3
 80044f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80044fa:	4013      	ands	r3, r2
 80044fc:	b25b      	sxtb	r3, r3
 80044fe:	73bb      	strb	r3, [r7, #14]
        write_register(_NRF24L01P_REG_EN_RXADDR,temp);
 8004500:	7bbb      	ldrb	r3, [r7, #14]
 8004502:	461a      	mov	r2, r3
 8004504:	2102      	movs	r1, #2
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7ff fe30 	bl	800416c <_ZN15NRF24L01pDriver14write_registerEhh>
    }

}
 800450c:	bf00      	nop
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <_ZN15NRF24L01pDriver29set_auto_retransmission_countEh>:
}
NRF24L01pDriver::aw_t NRF24L01pDriver::get_address_width(){
    return (aw_t) read_register(_NRF24L01P_REG_SETUP_AW);  
}

void NRF24L01pDriver::set_auto_retransmission_count(uint8_t count){
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	460b      	mov	r3, r1
 800451e:	70fb      	strb	r3, [r7, #3]
    uint8_t temp = read_register(_NRF24L01P_REG_SETUP_RETR);
 8004520:	2104      	movs	r1, #4
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7ff fdd2 	bl	80040cc <_ZN15NRF24L01pDriver13read_registerEh>
 8004528:	4603      	mov	r3, r0
 800452a:	73fb      	strb	r3, [r7, #15]
    temp &= ~ 0x0F;
 800452c:	7bfb      	ldrb	r3, [r7, #15]
 800452e:	f023 030f 	bic.w	r3, r3, #15
 8004532:	73fb      	strb	r3, [r7, #15]
    temp |= (count<<0);
 8004534:	7bfa      	ldrb	r2, [r7, #15]
 8004536:	78fb      	ldrb	r3, [r7, #3]
 8004538:	4313      	orrs	r3, r2
 800453a:	73fb      	strb	r3, [r7, #15]
    write_register(_NRF24L01P_REG_SETUP_RETR,temp);
 800453c:	7bfb      	ldrb	r3, [r7, #15]
 800453e:	461a      	mov	r2, r3
 8004540:	2104      	movs	r1, #4
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7ff fe12 	bl	800416c <_ZN15NRF24L01pDriver14write_registerEhh>
}
 8004548:	bf00      	nop
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <_ZN15NRF24L01pDriver29set_auto_retransmission_delayEh>:
uint8_t NRF24L01pDriver::read_auto_retransmission_count(){
    uint8_t temp = read_register(_NRF24L01P_REG_SETUP_RETR);
    return temp & 0x0F; 
}

void NRF24L01pDriver::set_auto_retransmission_delay(uint8_t times250us){
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	460b      	mov	r3, r1
 800455a:	70fb      	strb	r3, [r7, #3]
    uint8_t temp = read_register(_NRF24L01P_REG_SETUP_RETR);
 800455c:	2104      	movs	r1, #4
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7ff fdb4 	bl	80040cc <_ZN15NRF24L01pDriver13read_registerEh>
 8004564:	4603      	mov	r3, r0
 8004566:	73fb      	strb	r3, [r7, #15]
    temp &= ~(0xF0);
 8004568:	7bfb      	ldrb	r3, [r7, #15]
 800456a:	f003 030f 	and.w	r3, r3, #15
 800456e:	73fb      	strb	r3, [r7, #15]
    temp |= (times250us<<4);
 8004570:	78fb      	ldrb	r3, [r7, #3]
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	b25a      	sxtb	r2, r3
 8004576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800457a:	4313      	orrs	r3, r2
 800457c:	b25b      	sxtb	r3, r3
 800457e:	73fb      	strb	r3, [r7, #15]
    write_register(_NRF24L01P_REG_SETUP_RETR,temp);
 8004580:	7bfb      	ldrb	r3, [r7, #15]
 8004582:	461a      	mov	r2, r3
 8004584:	2104      	movs	r1, #4
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7ff fdf0 	bl	800416c <_ZN15NRF24L01pDriver14write_registerEhh>
}
 800458c:	bf00      	nop
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <_ZN15NRF24L01pDriver20set_frequency_offsetEh>:
uint8_t NRF24L01pDriver::read_auto_retransmission_delay(){
    uint8_t temp = read_register(_NRF24L01P_REG_SETUP_RETR);
    return temp & 0xF0;
}

void NRF24L01pDriver::set_frequency_offset(uint8_t offset){
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	460b      	mov	r3, r1
 800459e:	70fb      	strb	r3, [r7, #3]
    if( (offset >=0)  && ( offset <= 125)){
 80045a0:	78fb      	ldrb	r3, [r7, #3]
 80045a2:	2b7d      	cmp	r3, #125	; 0x7d
 80045a4:	d805      	bhi.n	80045b2 <_ZN15NRF24L01pDriver20set_frequency_offsetEh+0x1e>
            write_register(_NRF24L01P_REG_RF_CH,offset);
 80045a6:	78fb      	ldrb	r3, [r7, #3]
 80045a8:	461a      	mov	r2, r3
 80045aa:	2105      	movs	r1, #5
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7ff fddd 	bl	800416c <_ZN15NRF24L01pDriver14write_registerEhh>
    }
}
 80045b2:	bf00      	nop
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop

080045bc <_ZN15NRF24L01pDriver12set_DataRateENS_10datarate_tE>:
uint8_t NRF24L01pDriver::get_frequency_offset(){
    return read_register(_NRF24L01P_REG_RF_CH);
}

void NRF24L01pDriver::set_DataRate(datarate_t DataRate){
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	460b      	mov	r3, r1
 80045c6:	70fb      	strb	r3, [r7, #3]
    uint8_t temp = read_register(_NRF24L01P_REG_RF_SETUP);
 80045c8:	2106      	movs	r1, #6
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7ff fd7e 	bl	80040cc <_ZN15NRF24L01pDriver13read_registerEh>
 80045d0:	4603      	mov	r3, r0
 80045d2:	73fb      	strb	r3, [r7, #15]
    temp &= ~_NRF24L01P_RF_SETUP_RF_DR_MASK;
 80045d4:	7bfb      	ldrb	r3, [r7, #15]
 80045d6:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80045da:	73fb      	strb	r3, [r7, #15]
    temp |= DataRate;
 80045dc:	7bfa      	ldrb	r2, [r7, #15]
 80045de:	78fb      	ldrb	r3, [r7, #3]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	73fb      	strb	r3, [r7, #15]
    write_register(_NRF24L01P_REG_RF_SETUP,temp);
 80045e4:	7bfb      	ldrb	r3, [r7, #15]
 80045e6:	461a      	mov	r2, r3
 80045e8:	2106      	movs	r1, #6
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7ff fdbe 	bl	800416c <_ZN15NRF24L01pDriver14write_registerEhh>
}
 80045f0:	bf00      	nop
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <_ZN15NRF24L01pDriver18get_max_retry_flagEv>:

bool NRF24L01pDriver::get_tx_fifo_full_flag(){
    if(get_status()&_NRF24L01P_STATUS_TX_FULL) return 1;
    else return 0;
}
bool NRF24L01pDriver::get_max_retry_flag(){
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
    if(get_status()&_NRF24L01P_STATUS_MAX_RT) return 1;
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f7ff fe8f 	bl	8004324 <_ZN15NRF24L01pDriver10get_statusEv>
 8004606:	4603      	mov	r3, r0
 8004608:	f003 0310 	and.w	r3, r3, #16
 800460c:	2b00      	cmp	r3, #0
 800460e:	bf14      	ite	ne
 8004610:	2301      	movne	r3, #1
 8004612:	2300      	moveq	r3, #0
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <_ZN15NRF24L01pDriver18get_max_retry_flagEv+0x26>
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <_ZN15NRF24L01pDriver18get_max_retry_flagEv+0x28>
    else return 0;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3708      	adds	r7, #8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <_ZN15NRF24L01pDriver20clear_max_retry_flagEv>:
void NRF24L01pDriver::clear_max_retry_flag(){
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
    uint8_t temp = _NRF24L01P_STATUS_MAX_RT;
 8004630:	2310      	movs	r3, #16
 8004632:	73fb      	strb	r3, [r7, #15]
    write_register(_NRF24L01P_REG_STATUS,&temp,sizeof(temp));
 8004634:	2301      	movs	r3, #1
 8004636:	f107 020f 	add.w	r2, r7, #15
 800463a:	2107      	movs	r1, #7
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f7ff fdc3 	bl	80041c8 <_ZN15NRF24L01pDriver14write_registerEhPhi>
}
 8004642:	bf00      	nop
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop

0800464c <_ZN15NRF24L01pDriver18get_data_sent_flagEv>:
bool NRF24L01pDriver::get_data_sent_flag(){
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
    if(get_status()&_NRF24L01P_STATUS_TX_DS) return 1;
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f7ff fe65 	bl	8004324 <_ZN15NRF24L01pDriver10get_statusEv>
 800465a:	4603      	mov	r3, r0
 800465c:	f003 0320 	and.w	r3, r3, #32
 8004660:	2b00      	cmp	r3, #0
 8004662:	bf14      	ite	ne
 8004664:	2301      	movne	r3, #1
 8004666:	2300      	moveq	r3, #0
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <_ZN15NRF24L01pDriver18get_data_sent_flagEv+0x26>
 800466e:	2301      	movs	r3, #1
 8004670:	e000      	b.n	8004674 <_ZN15NRF24L01pDriver18get_data_sent_flagEv+0x28>
    else return 0;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3708      	adds	r7, #8
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <_ZN15NRF24L01pDriver20clear_data_sent_flagEv>:
void NRF24L01pDriver::clear_data_sent_flag(){
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
    uint8_t temp = _NRF24L01P_STATUS_TX_DS;
 8004684:	2320      	movs	r3, #32
 8004686:	73fb      	strb	r3, [r7, #15]
    write_register(_NRF24L01P_REG_STATUS,&temp,sizeof(temp));
 8004688:	2301      	movs	r3, #1
 800468a:	f107 020f 	add.w	r2, r7, #15
 800468e:	2107      	movs	r1, #7
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f7ff fd99 	bl	80041c8 <_ZN15NRF24L01pDriver14write_registerEhPhi>
}
 8004696:	bf00      	nop
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop

080046a0 <_ZN15NRF24L01pDriver21clear_data_ready_flagEv>:
bool NRF24L01pDriver::get_data_ready_flag(){
    if(get_status()&_NRF24L01P_STATUS_RX_DR) return 1;
    else return 0;
}
void NRF24L01pDriver::clear_data_ready_flag(){
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
    uint8_t temp = _NRF24L01P_STATUS_RX_DR;
 80046a8:	2340      	movs	r3, #64	; 0x40
 80046aa:	73fb      	strb	r3, [r7, #15]
    write_register(_NRF24L01P_REG_STATUS,&temp,sizeof(temp));
 80046ac:	2301      	movs	r3, #1
 80046ae:	f107 020f 	add.w	r2, r7, #15
 80046b2:	2107      	movs	r1, #7
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7ff fd87 	bl	80041c8 <_ZN15NRF24L01pDriver14write_registerEhPhi>
}
 80046ba:	bf00      	nop
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop

080046c4 <_ZN15NRF24L01pDriver14get_plos_countEv>:
    uint8_t temp = read_register(_NRF24L01P_REG_OBSERVE_TX);
    return ((temp&_NRF24L01P_OBSERVE_TX_ARC_CNT_MASK)>>_NRF24L01P_OBSERVE_TX_ARC_CNT_BP);
    //return (temp&0x0F)>>0;

}
uint8_t NRF24L01pDriver::get_plos_count(){
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
    uint8_t temp;
    read_register(_NRF24L01P_REG_OBSERVE_TX,&temp,sizeof(temp));
 80046cc:	2301      	movs	r3, #1
 80046ce:	f107 020f 	add.w	r2, r7, #15
 80046d2:	2108      	movs	r1, #8
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7ff fd21 	bl	800411c <_ZN15NRF24L01pDriver13read_registerEhPhi>
    return ((temp&_NRF24L01P_OBSERVE_TX_PLOS_CNT_MASK)>>_NRF24L01P_OBSERVE_TX_PLOS_CNT_BP);
 80046da:	7bfb      	ldrb	r3, [r7, #15]
 80046dc:	091b      	lsrs	r3, r3, #4
 80046de:	b2db      	uxtb	r3, r3
    //return (temp&0xF0)>>4; 
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <_ZN15NRF24L01pDriver19set_RX_pipe_addressENS_6pipe_tEy>:
bool NRF24L01pDriver::get_rpd(){
    if(read_register(_NRF24L01P_REG_RPD)) return 1;
    else return 0;
}

void NRF24L01pDriver::set_RX_pipe_address(pipe_t pipe,PipeAddr_t address){
 80046e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ea:	b089      	sub	sp, #36	; 0x24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	e9c7 2300 	strd	r2, r3, [r7]
 80046f4:	460b      	mov	r3, r1
 80046f6:	72fb      	strb	r3, [r7, #11]
    int max_pipe_addr_width = 0;
 80046f8:	2300      	movs	r3, #0
 80046fa:	61fb      	str	r3, [r7, #28]
    if((pipe>=0) && (pipe<=1)   ){max_pipe_addr_width = 5;}
 80046fc:	7afb      	ldrb	r3, [r7, #11]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d802      	bhi.n	8004708 <_ZN15NRF24L01pDriver19set_RX_pipe_addressENS_6pipe_tEy+0x20>
 8004702:	2305      	movs	r3, #5
 8004704:	61fb      	str	r3, [r7, #28]
 8004706:	e007      	b.n	8004718 <_ZN15NRF24L01pDriver19set_RX_pipe_addressENS_6pipe_tEy+0x30>
    else if ((pipe>=2) && (pipe<=5)   ){max_pipe_addr_width = 1;}
 8004708:	7afb      	ldrb	r3, [r7, #11]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d904      	bls.n	8004718 <_ZN15NRF24L01pDriver19set_RX_pipe_addressENS_6pipe_tEy+0x30>
 800470e:	7afb      	ldrb	r3, [r7, #11]
 8004710:	2b05      	cmp	r3, #5
 8004712:	d801      	bhi.n	8004718 <_ZN15NRF24L01pDriver19set_RX_pipe_addressENS_6pipe_tEy+0x30>
 8004714:	2301      	movs	r3, #1
 8004716:	61fb      	str	r3, [r7, #28]
    uint8_t temp[5];
    int i;
    for(i=0;i<max_pipe_addr_width;i++){
 8004718:	2300      	movs	r3, #0
 800471a:	61bb      	str	r3, [r7, #24]
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	429a      	cmp	r2, r3
 8004722:	da1c      	bge.n	800475e <_ZN15NRF24L01pDriver19set_RX_pipe_addressENS_6pipe_tEy+0x76>
            temp[i] = (address>>(8*i))&0xFF;
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	00d9      	lsls	r1, r3, #3
 8004728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800472c:	f1c1 0620 	rsb	r6, r1, #32
 8004730:	f1a1 0020 	sub.w	r0, r1, #32
 8004734:	fa22 f401 	lsr.w	r4, r2, r1
 8004738:	fa03 f606 	lsl.w	r6, r3, r6
 800473c:	4334      	orrs	r4, r6
 800473e:	fa23 f000 	lsr.w	r0, r3, r0
 8004742:	4304      	orrs	r4, r0
 8004744:	fa23 f501 	lsr.w	r5, r3, r1
 8004748:	b2e1      	uxtb	r1, r4
 800474a:	f107 0210 	add.w	r2, r7, #16
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	4413      	add	r3, r2
 8004752:	460a      	mov	r2, r1
 8004754:	701a      	strb	r2, [r3, #0]
    int max_pipe_addr_width = 0;
    if((pipe>=0) && (pipe<=1)   ){max_pipe_addr_width = 5;}
    else if ((pipe>=2) && (pipe<=5)   ){max_pipe_addr_width = 1;}
    uint8_t temp[5];
    int i;
    for(i=0;i<max_pipe_addr_width;i++){
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	3301      	adds	r3, #1
 800475a:	61bb      	str	r3, [r7, #24]
 800475c:	e7de      	b.n	800471c <_ZN15NRF24L01pDriver19set_RX_pipe_addressENS_6pipe_tEy+0x34>
            temp[i] = (address>>(8*i))&0xFF;
    }
    write_register(_NRF24L01P_REG_RX_ADDR_P0 + pipe,temp,max_pipe_addr_width);
 800475e:	7afb      	ldrb	r3, [r7, #11]
 8004760:	330a      	adds	r3, #10
 8004762:	b2d9      	uxtb	r1, r3
 8004764:	f107 0210 	add.w	r2, r7, #16
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f7ff fd2c 	bl	80041c8 <_ZN15NRF24L01pDriver14write_registerEhPhi>
}
 8004770:	bf00      	nop
 8004772:	3724      	adds	r7, #36	; 0x24
 8004774:	46bd      	mov	sp, r7
 8004776:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004778 <_ZN15NRF24L01pDriver19set_TX_pipe_addressEy>:
    }

    return temp_addr;   
}

void NRF24L01pDriver::set_TX_pipe_address(PipeAddr_t address){
 8004778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800477a:	b089      	sub	sp, #36	; 0x24
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	e9c7 2300 	strd	r2, r3, [r7]
    uint8_t temp[5];
    int i;
    for( i=0;i<5;i++){
 8004784:	2300      	movs	r3, #0
 8004786:	61fb      	str	r3, [r7, #28]
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	2b04      	cmp	r3, #4
 800478c:	dc1c      	bgt.n	80047c8 <_ZN15NRF24L01pDriver19set_TX_pipe_addressEy+0x50>
            temp[i] = (address>>(8*i))&0xFF;
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	00d9      	lsls	r1, r3, #3
 8004792:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004796:	f1c1 0620 	rsb	r6, r1, #32
 800479a:	f1a1 0020 	sub.w	r0, r1, #32
 800479e:	fa22 f401 	lsr.w	r4, r2, r1
 80047a2:	fa03 f606 	lsl.w	r6, r3, r6
 80047a6:	4334      	orrs	r4, r6
 80047a8:	fa23 f000 	lsr.w	r0, r3, r0
 80047ac:	4304      	orrs	r4, r0
 80047ae:	fa23 f501 	lsr.w	r5, r3, r1
 80047b2:	b2e1      	uxtb	r1, r4
 80047b4:	f107 0214 	add.w	r2, r7, #20
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	4413      	add	r3, r2
 80047bc:	460a      	mov	r2, r1
 80047be:	701a      	strb	r2, [r3, #0]
}

void NRF24L01pDriver::set_TX_pipe_address(PipeAddr_t address){
    uint8_t temp[5];
    int i;
    for( i=0;i<5;i++){
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	3301      	adds	r3, #1
 80047c4:	61fb      	str	r3, [r7, #28]
 80047c6:	e7df      	b.n	8004788 <_ZN15NRF24L01pDriver19set_TX_pipe_addressEy+0x10>
            temp[i] = (address>>(8*i))&0xFF;
    }
    write_register(_NRF24L01P_REG_TX_ADDR,temp,5);   
 80047c8:	f107 0214 	add.w	r2, r7, #20
 80047cc:	2305      	movs	r3, #5
 80047ce:	2110      	movs	r1, #16
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f7ff fcf9 	bl	80041c8 <_ZN15NRF24L01pDriver14write_registerEhPhi>
}
 80047d6:	bf00      	nop
 80047d8:	3724      	adds	r7, #36	; 0x24
 80047da:	46bd      	mov	sp, r7
 80047dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047de:	bf00      	nop

080047e0 <_ZN15NRF24L01pDriver21get_fifo_flag_tx_fullEv>:
}
bool NRF24L01pDriver::get_fifo_flag_tx_empty(){
    if(read_register(_NRF24L01P_REG_FIFO_STATUS)&_NRF24L01P_FIFO_STATUS_TX_EMPTY ) return 1;
    else return 0;       
}
bool NRF24L01pDriver::get_fifo_flag_tx_full(){
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
    if(read_register(_NRF24L01P_REG_FIFO_STATUS)&_NRF24L01P_FIFO_STATUS_TX_FULL ) return 1;
 80047e8:	2117      	movs	r1, #23
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7ff fc6e 	bl	80040cc <_ZN15NRF24L01pDriver13read_registerEh>
 80047f0:	4603      	mov	r3, r0
 80047f2:	f003 0320 	and.w	r3, r3, #32
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	bf14      	ite	ne
 80047fa:	2301      	movne	r3, #1
 80047fc:	2300      	moveq	r3, #0
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <_ZN15NRF24L01pDriver21get_fifo_flag_tx_fullEv+0x28>
 8004804:	2301      	movs	r3, #1
 8004806:	e000      	b.n	800480a <_ZN15NRF24L01pDriver21get_fifo_flag_tx_fullEv+0x2a>
    else return 0;      
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop

08004814 <_ZN15NRF24L01pDriver27enable_dynamic_payload_pipeENS_6pipe_tEb>:
bool NRF24L01pDriver::get_fifo_flag_tx_reuse(){
    if(read_register(_NRF24L01P_REG_FIFO_STATUS)&_NRF24L01P_FIFO_STATUS_RX_REUSE ) return 1;
    else return 0;      
}

void NRF24L01pDriver::enable_dynamic_payload_pipe(pipe_t pipe, bool sel){
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	460b      	mov	r3, r1
 800481e:	70fb      	strb	r3, [r7, #3]
 8004820:	4613      	mov	r3, r2
 8004822:	70bb      	strb	r3, [r7, #2]
    if(sel){
 8004824:	78bb      	ldrb	r3, [r7, #2]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d016      	beq.n	8004858 <_ZN15NRF24L01pDriver27enable_dynamic_payload_pipeENS_6pipe_tEb+0x44>
          uint8_t temp = read_register(_NRF24L01P_REG_DYNPD);
 800482a:	211c      	movs	r1, #28
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f7ff fc4d 	bl	80040cc <_ZN15NRF24L01pDriver13read_registerEh>
 8004832:	4603      	mov	r3, r0
 8004834:	73fb      	strb	r3, [r7, #15]
        temp |= (1<<pipe);
 8004836:	78fb      	ldrb	r3, [r7, #3]
 8004838:	2201      	movs	r2, #1
 800483a:	fa02 f303 	lsl.w	r3, r2, r3
 800483e:	b25a      	sxtb	r2, r3
 8004840:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004844:	4313      	orrs	r3, r2
 8004846:	b25b      	sxtb	r3, r3
 8004848:	73fb      	strb	r3, [r7, #15]
        write_register(_NRF24L01P_REG_DYNPD,temp);   
 800484a:	7bfb      	ldrb	r3, [r7, #15]
 800484c:	461a      	mov	r2, r3
 800484e:	211c      	movs	r1, #28
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f7ff fc8b 	bl	800416c <_ZN15NRF24L01pDriver14write_registerEhh>
        uint8_t temp = read_register(_NRF24L01P_REG_DYNPD);
        temp &= ~(1<<pipe);
        write_register(_NRF24L01P_REG_DYNPD,temp);    
    }
   
}
 8004856:	e017      	b.n	8004888 <_ZN15NRF24L01pDriver27enable_dynamic_payload_pipeENS_6pipe_tEb+0x74>
    if(sel){
          uint8_t temp = read_register(_NRF24L01P_REG_DYNPD);
        temp |= (1<<pipe);
        write_register(_NRF24L01P_REG_DYNPD,temp);   
    }else{
        uint8_t temp = read_register(_NRF24L01P_REG_DYNPD);
 8004858:	211c      	movs	r1, #28
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7ff fc36 	bl	80040cc <_ZN15NRF24L01pDriver13read_registerEh>
 8004860:	4603      	mov	r3, r0
 8004862:	73bb      	strb	r3, [r7, #14]
        temp &= ~(1<<pipe);
 8004864:	78fb      	ldrb	r3, [r7, #3]
 8004866:	2201      	movs	r2, #1
 8004868:	fa02 f303 	lsl.w	r3, r2, r3
 800486c:	b25b      	sxtb	r3, r3
 800486e:	43db      	mvns	r3, r3
 8004870:	b25a      	sxtb	r2, r3
 8004872:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004876:	4013      	ands	r3, r2
 8004878:	b25b      	sxtb	r3, r3
 800487a:	73bb      	strb	r3, [r7, #14]
        write_register(_NRF24L01P_REG_DYNPD,temp);    
 800487c:	7bbb      	ldrb	r3, [r7, #14]
 800487e:	461a      	mov	r2, r3
 8004880:	211c      	movs	r1, #28
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7ff fc72 	bl	800416c <_ZN15NRF24L01pDriver14write_registerEhh>
    }
   
}
 8004888:	bf00      	nop
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <_ZN15NRF24L01pDriver22enable_dynamic_payloadEb>:



void NRF24L01pDriver::enable_dynamic_payload(bool sel){
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	460b      	mov	r3, r1
 800489a:	70fb      	strb	r3, [r7, #3]
    if(sel){
 800489c:	78fb      	ldrb	r3, [r7, #3]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d010      	beq.n	80048c4 <_ZN15NRF24L01pDriver22enable_dynamic_payloadEb+0x34>
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
 80048a2:	211d      	movs	r1, #29
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7ff fc11 	bl	80040cc <_ZN15NRF24L01pDriver13read_registerEh>
 80048aa:	4603      	mov	r3, r0
 80048ac:	73fb      	strb	r3, [r7, #15]
        temp |= _NRF24L01_FEATURE_EN_DPL;
 80048ae:	7bfb      	ldrb	r3, [r7, #15]
 80048b0:	f043 0304 	orr.w	r3, r3, #4
 80048b4:	73fb      	strb	r3, [r7, #15]
        write_register(_NRF24L01P_REG_FEATURE,temp);     
 80048b6:	7bfb      	ldrb	r3, [r7, #15]
 80048b8:	461a      	mov	r2, r3
 80048ba:	211d      	movs	r1, #29
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f7ff fc55 	bl	800416c <_ZN15NRF24L01pDriver14write_registerEhh>
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
        temp &= ~_NRF24L01_FEATURE_EN_DPL;
        write_register(_NRF24L01P_REG_FEATURE,temp);
    }
   
}
 80048c2:	e00f      	b.n	80048e4 <_ZN15NRF24L01pDriver22enable_dynamic_payloadEb+0x54>
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
        temp |= _NRF24L01_FEATURE_EN_DPL;
        write_register(_NRF24L01P_REG_FEATURE,temp);     
    }
    else{
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
 80048c4:	211d      	movs	r1, #29
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7ff fc00 	bl	80040cc <_ZN15NRF24L01pDriver13read_registerEh>
 80048cc:	4603      	mov	r3, r0
 80048ce:	73bb      	strb	r3, [r7, #14]
        temp &= ~_NRF24L01_FEATURE_EN_DPL;
 80048d0:	7bbb      	ldrb	r3, [r7, #14]
 80048d2:	f023 0304 	bic.w	r3, r3, #4
 80048d6:	73bb      	strb	r3, [r7, #14]
        write_register(_NRF24L01P_REG_FEATURE,temp);
 80048d8:	7bbb      	ldrb	r3, [r7, #14]
 80048da:	461a      	mov	r2, r3
 80048dc:	211d      	movs	r1, #29
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7ff fc44 	bl	800416c <_ZN15NRF24L01pDriver14write_registerEhh>
    }
   
}
 80048e4:	bf00      	nop
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <_ZN15NRF24L01pDriver23enable_payload_with_ackEb>:



void NRF24L01pDriver::enable_payload_with_ack(bool sel){
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	460b      	mov	r3, r1
 80048f6:	70fb      	strb	r3, [r7, #3]
    if(sel){
 80048f8:	78fb      	ldrb	r3, [r7, #3]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d010      	beq.n	8004920 <_ZN15NRF24L01pDriver23enable_payload_with_ackEb+0x34>
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
 80048fe:	211d      	movs	r1, #29
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7ff fbe3 	bl	80040cc <_ZN15NRF24L01pDriver13read_registerEh>
 8004906:	4603      	mov	r3, r0
 8004908:	73fb      	strb	r3, [r7, #15]
        temp |= _NRF24L01_FEATURE_EN_ACK_PAY;
 800490a:	7bfb      	ldrb	r3, [r7, #15]
 800490c:	f043 0302 	orr.w	r3, r3, #2
 8004910:	73fb      	strb	r3, [r7, #15]
        write_register(_NRF24L01P_REG_FEATURE,temp); 
 8004912:	7bfb      	ldrb	r3, [r7, #15]
 8004914:	461a      	mov	r2, r3
 8004916:	211d      	movs	r1, #29
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f7ff fc27 	bl	800416c <_ZN15NRF24L01pDriver14write_registerEhh>
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
        temp &= ~_NRF24L01_FEATURE_EN_ACK_PAY;
        write_register(_NRF24L01P_REG_FEATURE,temp); 
    }
     
}
 800491e:	e00f      	b.n	8004940 <_ZN15NRF24L01pDriver23enable_payload_with_ackEb+0x54>
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
        temp |= _NRF24L01_FEATURE_EN_ACK_PAY;
        write_register(_NRF24L01P_REG_FEATURE,temp); 
    }
    else{
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
 8004920:	211d      	movs	r1, #29
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7ff fbd2 	bl	80040cc <_ZN15NRF24L01pDriver13read_registerEh>
 8004928:	4603      	mov	r3, r0
 800492a:	73bb      	strb	r3, [r7, #14]
        temp &= ~_NRF24L01_FEATURE_EN_ACK_PAY;
 800492c:	7bbb      	ldrb	r3, [r7, #14]
 800492e:	f023 0302 	bic.w	r3, r3, #2
 8004932:	73bb      	strb	r3, [r7, #14]
        write_register(_NRF24L01P_REG_FEATURE,temp); 
 8004934:	7bbb      	ldrb	r3, [r7, #14]
 8004936:	461a      	mov	r2, r3
 8004938:	211d      	movs	r1, #29
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7ff fc16 	bl	800416c <_ZN15NRF24L01pDriver14write_registerEhh>
    }
     
}
 8004940:	bf00      	nop
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <_ZN15NRF24L01pDriver34enable_dynamic_payload_with_no_ackEb>:



void NRF24L01pDriver::enable_dynamic_payload_with_no_ack(bool sel){
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	460b      	mov	r3, r1
 8004952:	70fb      	strb	r3, [r7, #3]
    if(sel){
 8004954:	78fb      	ldrb	r3, [r7, #3]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d010      	beq.n	800497c <_ZN15NRF24L01pDriver34enable_dynamic_payload_with_no_ackEb+0x34>
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
 800495a:	211d      	movs	r1, #29
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f7ff fbb5 	bl	80040cc <_ZN15NRF24L01pDriver13read_registerEh>
 8004962:	4603      	mov	r3, r0
 8004964:	73fb      	strb	r3, [r7, #15]
        temp |= _NRF24L01_FEATURE_EN_DYN_ACK;
 8004966:	7bfb      	ldrb	r3, [r7, #15]
 8004968:	f043 0301 	orr.w	r3, r3, #1
 800496c:	73fb      	strb	r3, [r7, #15]
        write_register(_NRF24L01P_REG_FEATURE,temp);        
 800496e:	7bfb      	ldrb	r3, [r7, #15]
 8004970:	461a      	mov	r2, r3
 8004972:	211d      	movs	r1, #29
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7ff fbf9 	bl	800416c <_ZN15NRF24L01pDriver14write_registerEhh>
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
        temp &= ~_NRF24L01_FEATURE_EN_DYN_ACK;
        write_register(_NRF24L01P_REG_FEATURE,temp);  
    }
     
}
 800497a:	e00f      	b.n	800499c <_ZN15NRF24L01pDriver34enable_dynamic_payload_with_no_ackEb+0x54>
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
        temp |= _NRF24L01_FEATURE_EN_DYN_ACK;
        write_register(_NRF24L01P_REG_FEATURE,temp);        
    }
    else{
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
 800497c:	211d      	movs	r1, #29
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7ff fba4 	bl	80040cc <_ZN15NRF24L01pDriver13read_registerEh>
 8004984:	4603      	mov	r3, r0
 8004986:	73bb      	strb	r3, [r7, #14]
        temp &= ~_NRF24L01_FEATURE_EN_DYN_ACK;
 8004988:	7bbb      	ldrb	r3, [r7, #14]
 800498a:	f023 0301 	bic.w	r3, r3, #1
 800498e:	73bb      	strb	r3, [r7, #14]
        write_register(_NRF24L01P_REG_FEATURE,temp);  
 8004990:	7bbb      	ldrb	r3, [r7, #14]
 8004992:	461a      	mov	r2, r3
 8004994:	211d      	movs	r1, #29
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7ff fbe8 	bl	800416c <_ZN15NRF24L01pDriver14write_registerEhh>
    }
     
}
 800499c:	bf00      	nop
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <_ZN13NRF24L01pPortC1Ev>:
static GPIO_InitTypeDef nrf24l01p_CE_pin_Struct = {NRF24L01P_CE_PIN,GPIO_MODE_OUTPUT_PP,GPIO_PULLUP,GPIO_SPEED_FREQ_HIGH,};
static GPIO_InitTypeDef nrf24l01p_CSN_pin_Struct = {NRF24L01P_CSN_PIN,GPIO_MODE_OUTPUT_PP,GPIO_PULLUP,GPIO_SPEED_FREQ_HIGH,};



NRF24L01pPort::NRF24L01pPort() {
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	4a04      	ldr	r2, [pc, #16]	; (80049c0 <_ZN13NRF24L01pPortC1Ev+0x1c>)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	601a      	str	r2, [r3, #0]
}
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4618      	mov	r0, r3
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr
 80049c0:	08006170 	.word	0x08006170

080049c4 <_ZN13NRF24L01pPortD1Ev>:

NRF24L01pPort::NRF24L01pPort(const NRF24L01pPort& orig) {
}

NRF24L01pPort::~NRF24L01pPort() {
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	4a06      	ldr	r2, [pc, #24]	; (80049e8 <_ZN13NRF24L01pPortD1Ev+0x24>)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	601a      	str	r2, [r3, #0]
}
 80049d2:	2300      	movs	r3, #0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d002      	beq.n	80049de <_ZN13NRF24L01pPortD1Ev+0x1a>
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 fba2 	bl	8005122 <_ZdlPv>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4618      	mov	r0, r3
 80049e2:	3708      	adds	r7, #8
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	08006170 	.word	0x08006170

080049ec <_ZN13NRF24L01pPortD0Ev>:
}

NRF24L01pPort::NRF24L01pPort(const NRF24L01pPort& orig) {
}

NRF24L01pPort::~NRF24L01pPort() {
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
}
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f7ff ffe5 	bl	80049c4 <_ZN13NRF24L01pPortD1Ev>
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 fb91 	bl	8005122 <_ZdlPv>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4618      	mov	r0, r3
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop

08004a0c <_ZN13NRF24L01pPort15port_InitializeEv>:

void NRF24L01pPort::port_Initialize(){
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b08e      	sub	sp, #56	; 0x38
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
		/*##-1- Configure the SPI peripheral #######################################*/
		/* Set the SPI parameters */
		nrf24l01p_SpiHandle.Instance               = SPIx;
 8004a14:	4b5d      	ldr	r3, [pc, #372]	; (8004b8c <_ZN13NRF24L01pPort15port_InitializeEv+0x180>)
 8004a16:	4a5e      	ldr	r2, [pc, #376]	; (8004b90 <_ZN13NRF24L01pPort15port_InitializeEv+0x184>)
 8004a18:	601a      	str	r2, [r3, #0]
		nrf24l01p_SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004a1a:	4b5c      	ldr	r3, [pc, #368]	; (8004b8c <_ZN13NRF24L01pPort15port_InitializeEv+0x180>)
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	61da      	str	r2, [r3, #28]
		nrf24l01p_SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 8004a20:	4b5a      	ldr	r3, [pc, #360]	; (8004b8c <_ZN13NRF24L01pPort15port_InitializeEv+0x180>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	609a      	str	r2, [r3, #8]
		nrf24l01p_SpiHandle.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8004a26:	4b59      	ldr	r3, [pc, #356]	; (8004b8c <_ZN13NRF24L01pPort15port_InitializeEv+0x180>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	615a      	str	r2, [r3, #20]
		nrf24l01p_SpiHandle.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8004a2c:	4b57      	ldr	r3, [pc, #348]	; (8004b8c <_ZN13NRF24L01pPort15port_InitializeEv+0x180>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	611a      	str	r2, [r3, #16]
		nrf24l01p_SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 8004a32:	4b56      	ldr	r3, [pc, #344]	; (8004b8c <_ZN13NRF24L01pPort15port_InitializeEv+0x180>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	60da      	str	r2, [r3, #12]
		nrf24l01p_SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8004a38:	4b54      	ldr	r3, [pc, #336]	; (8004b8c <_ZN13NRF24L01pPort15port_InitializeEv+0x180>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	621a      	str	r2, [r3, #32]
		nrf24l01p_SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLE;
 8004a3e:	4b53      	ldr	r3, [pc, #332]	; (8004b8c <_ZN13NRF24L01pPort15port_InitializeEv+0x180>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	625a      	str	r2, [r3, #36]	; 0x24
		nrf24l01p_SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8004a44:	4b51      	ldr	r3, [pc, #324]	; (8004b8c <_ZN13NRF24L01pPort15port_InitializeEv+0x180>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	629a      	str	r2, [r3, #40]	; 0x28
		nrf24l01p_SpiHandle.Init.CRCPolynomial     = 7;
 8004a4a:	4b50      	ldr	r3, [pc, #320]	; (8004b8c <_ZN13NRF24L01pPort15port_InitializeEv+0x180>)
 8004a4c:	2207      	movs	r2, #7
 8004a4e:	62da      	str	r2, [r3, #44]	; 0x2c
		//nrf24l01p_SpiHandle.Init.CRCLength         = SPI_CRC_LENGTH_8BIT;
		nrf24l01p_SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 8004a50:	4b4e      	ldr	r3, [pc, #312]	; (8004b8c <_ZN13NRF24L01pPort15port_InitializeEv+0x180>)
 8004a52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a56:	619a      	str	r2, [r3, #24]
		//nrf24l01p_SpiHandle.Init.NSSPMode          = SPI_NSS_PULSE_DISABLE;

		nrf24l01p_SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8004a58:	4b4c      	ldr	r3, [pc, #304]	; (8004b8c <_ZN13NRF24L01pPort15port_InitializeEv+0x180>)
 8004a5a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004a5e:	605a      	str	r2, [r3, #4]

		GPIO_InitTypeDef  GPIO_InitStruct;

		/*##-1- Enable peripherals and GPIO Clocks #################################*/
		/* Enable GPIO TX/RX clock */
		SPIx_SCK_GPIO_CLK_ENABLE();
 8004a60:	2300      	movs	r3, #0
 8004a62:	623b      	str	r3, [r7, #32]
 8004a64:	4a4b      	ldr	r2, [pc, #300]	; (8004b94 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 8004a66:	4b4b      	ldr	r3, [pc, #300]	; (8004b94 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 8004a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6a:	f043 0301 	orr.w	r3, r3, #1
 8004a6e:	6313      	str	r3, [r2, #48]	; 0x30
 8004a70:	4b48      	ldr	r3, [pc, #288]	; (8004b94 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 8004a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	623b      	str	r3, [r7, #32]
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
		SPIx_MISO_GPIO_CLK_ENABLE();
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	61fb      	str	r3, [r7, #28]
 8004a80:	4a44      	ldr	r2, [pc, #272]	; (8004b94 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 8004a82:	4b44      	ldr	r3, [pc, #272]	; (8004b94 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 8004a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a86:	f043 0301 	orr.w	r3, r3, #1
 8004a8a:	6313      	str	r3, [r2, #48]	; 0x30
 8004a8c:	4b41      	ldr	r3, [pc, #260]	; (8004b94 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 8004a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	61fb      	str	r3, [r7, #28]
 8004a96:	69fb      	ldr	r3, [r7, #28]
		SPIx_MOSI_GPIO_CLK_ENABLE();
 8004a98:	2300      	movs	r3, #0
 8004a9a:	61bb      	str	r3, [r7, #24]
 8004a9c:	4a3d      	ldr	r2, [pc, #244]	; (8004b94 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 8004a9e:	4b3d      	ldr	r3, [pc, #244]	; (8004b94 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 8004aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa2:	f043 0301 	orr.w	r3, r3, #1
 8004aa6:	6313      	str	r3, [r2, #48]	; 0x30
 8004aa8:	4b3a      	ldr	r3, [pc, #232]	; (8004b94 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 8004aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	61bb      	str	r3, [r7, #24]
 8004ab2:	69bb      	ldr	r3, [r7, #24]
		/* Enable SPI clock */
		SPIx_CLK_ENABLE();
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	617b      	str	r3, [r7, #20]
 8004ab8:	4a36      	ldr	r2, [pc, #216]	; (8004b94 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 8004aba:	4b36      	ldr	r3, [pc, #216]	; (8004b94 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 8004abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ac2:	6453      	str	r3, [r2, #68]	; 0x44
 8004ac4:	4b33      	ldr	r3, [pc, #204]	; (8004b94 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 8004ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004acc:	617b      	str	r3, [r7, #20]
 8004ace:	697b      	ldr	r3, [r7, #20]

		/*##-2- Configure peripheral GPIO ##########################################*/
		/* SPI SCK GPIO pin configuration  */
		GPIO_InitStruct.Pin       = SPIx_SCK_PIN;
 8004ad0:	2320      	movs	r3, #32
 8004ad2:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 8004ad8:	2302      	movs	r3, #2
 8004ada:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004adc:	2302      	movs	r3, #2
 8004ade:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 8004ae0:	2305      	movs	r3, #5
 8004ae2:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8004ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ae8:	4619      	mov	r1, r3
 8004aea:	482b      	ldr	r0, [pc, #172]	; (8004b98 <_ZN13NRF24L01pPort15port_InitializeEv+0x18c>)
 8004aec:	f7fb fc5e 	bl	80003ac <HAL_GPIO_Init>

		/* SPI MISO GPIO pin configuration  */
		GPIO_InitStruct.Pin = SPIx_MISO_PIN;
 8004af0:	2340      	movs	r3, #64	; 0x40
 8004af2:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Alternate = SPIx_MISO_AF;
 8004af4:	2305      	movs	r3, #5
 8004af6:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 8004af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004afc:	4619      	mov	r1, r3
 8004afe:	4826      	ldr	r0, [pc, #152]	; (8004b98 <_ZN13NRF24L01pPort15port_InitializeEv+0x18c>)
 8004b00:	f7fb fc54 	bl	80003ac <HAL_GPIO_Init>

		/* SPI MOSI GPIO pin configuration  */
		GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 8004b04:	2380      	movs	r3, #128	; 0x80
 8004b06:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Alternate = SPIx_MOSI_AF;
 8004b08:	2305      	movs	r3, #5
 8004b0a:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b10:	4619      	mov	r1, r3
 8004b12:	4821      	ldr	r0, [pc, #132]	; (8004b98 <_ZN13NRF24L01pPort15port_InitializeEv+0x18c>)
 8004b14:	f7fb fc4a 	bl	80003ac <HAL_GPIO_Init>

		/* Enable GPIOA clock */
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8004b18:	2300      	movs	r3, #0
 8004b1a:	613b      	str	r3, [r7, #16]
 8004b1c:	4a1d      	ldr	r2, [pc, #116]	; (8004b94 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 8004b1e:	4b1d      	ldr	r3, [pc, #116]	; (8004b94 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 8004b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b22:	f043 0301 	orr.w	r3, r3, #1
 8004b26:	6313      	str	r3, [r2, #48]	; 0x30
 8004b28:	4b1a      	ldr	r3, [pc, #104]	; (8004b94 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 8004b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	613b      	str	r3, [r7, #16]
 8004b32:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8004b34:	2300      	movs	r3, #0
 8004b36:	60fb      	str	r3, [r7, #12]
 8004b38:	4a16      	ldr	r2, [pc, #88]	; (8004b94 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 8004b3a:	4b16      	ldr	r3, [pc, #88]	; (8004b94 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 8004b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3e:	f043 0302 	orr.w	r3, r3, #2
 8004b42:	6313      	str	r3, [r2, #48]	; 0x30
 8004b44:	4b13      	ldr	r3, [pc, #76]	; (8004b94 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 8004b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	60fb      	str	r3, [r7, #12]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8004b50:	2300      	movs	r3, #0
 8004b52:	60bb      	str	r3, [r7, #8]
 8004b54:	4a0f      	ldr	r2, [pc, #60]	; (8004b94 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 8004b56:	4b0f      	ldr	r3, [pc, #60]	; (8004b94 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 8004b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5a:	f043 0304 	orr.w	r3, r3, #4
 8004b5e:	6313      	str	r3, [r2, #48]	; 0x30
 8004b60:	4b0c      	ldr	r3, [pc, #48]	; (8004b94 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 8004b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	60bb      	str	r3, [r7, #8]
 8004b6a:	68bb      	ldr	r3, [r7, #8]


		HAL_SPI_Init(&nrf24l01p_SpiHandle);
 8004b6c:	4807      	ldr	r0, [pc, #28]	; (8004b8c <_ZN13NRF24L01pPort15port_InitializeEv+0x180>)
 8004b6e:	f7fb fe2b 	bl	80007c8 <HAL_SPI_Init>

		HAL_GPIO_Init(NRF24L01P_CE_PORT, &nrf24l01p_CE_pin_Struct);
 8004b72:	490a      	ldr	r1, [pc, #40]	; (8004b9c <_ZN13NRF24L01pPort15port_InitializeEv+0x190>)
 8004b74:	480a      	ldr	r0, [pc, #40]	; (8004ba0 <_ZN13NRF24L01pPort15port_InitializeEv+0x194>)
 8004b76:	f7fb fc19 	bl	80003ac <HAL_GPIO_Init>
		HAL_GPIO_Init(NRF24L01P_CSN_PORT, &nrf24l01p_CSN_pin_Struct);
 8004b7a:	490a      	ldr	r1, [pc, #40]	; (8004ba4 <_ZN13NRF24L01pPort15port_InitializeEv+0x198>)
 8004b7c:	480a      	ldr	r0, [pc, #40]	; (8004ba8 <_ZN13NRF24L01pPort15port_InitializeEv+0x19c>)
 8004b7e:	f7fb fc15 	bl	80003ac <HAL_GPIO_Init>
}
 8004b82:	bf00      	nop
 8004b84:	3738      	adds	r7, #56	; 0x38
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	20002af4 	.word	0x20002af4
 8004b90:	40013000 	.word	0x40013000
 8004b94:	40023800 	.word	0x40023800
 8004b98:	40020000 	.word	0x40020000
 8004b9c:	2000000c 	.word	0x2000000c
 8004ba0:	40020800 	.word	0x40020800
 8004ba4:	20000020 	.word	0x20000020
 8004ba8:	40020400 	.word	0x40020400

08004bac <_ZN13NRF24L01pPort11port_Pin_CEEb>:
void NRF24L01pPort::port_DeInitialize(){
    
}
void NRF24L01pPort::port_Pin_CE(bool val){
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(NRF24L01P_CE_PORT, NRF24L01P_CE_PIN, (GPIO_PinState)val);
 8004bb8:	78fb      	ldrb	r3, [r7, #3]
 8004bba:	461a      	mov	r2, r3
 8004bbc:	2180      	movs	r1, #128	; 0x80
 8004bbe:	4803      	ldr	r0, [pc, #12]	; (8004bcc <_ZN13NRF24L01pPort11port_Pin_CEEb+0x20>)
 8004bc0:	f7fb fd86 	bl	80006d0 <HAL_GPIO_WritePin>
}
 8004bc4:	bf00      	nop
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	40020800 	.word	0x40020800

08004bd0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>:
void NRF24L01pPort::port_Pin_CSN(bool val){
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	460b      	mov	r3, r1
 8004bda:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(NRF24L01P_CSN_PORT, NRF24L01P_CSN_PIN, (GPIO_PinState)val);
 8004bdc:	78fb      	ldrb	r3, [r7, #3]
 8004bde:	461a      	mov	r2, r3
 8004be0:	2140      	movs	r1, #64	; 0x40
 8004be2:	4803      	ldr	r0, [pc, #12]	; (8004bf0 <_ZN13NRF24L01pPort12port_Pin_CSNEb+0x20>)
 8004be4:	f7fb fd74 	bl	80006d0 <HAL_GPIO_WritePin>
}
 8004be8:	bf00      	nop
 8004bea:	3708      	adds	r7, #8
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	40020400 	.word	0x40020400

08004bf4 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>:
int NRF24L01pPort::port_SPI_Transcieve(uint8_t *dataInOut, unsigned int size){
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af02      	add	r7, sp, #8
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
	return HAL_SPI_TransmitReceive(&nrf24l01p_SpiHandle, dataInOut, dataInOut, size,1000);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	68b9      	ldr	r1, [r7, #8]
 8004c10:	4803      	ldr	r0, [pc, #12]	; (8004c20 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj+0x2c>)
 8004c12:	f7fb fe4d 	bl	80008b0 <HAL_SPI_TransmitReceive>
 8004c16:	4603      	mov	r3, r0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	20002af4 	.word	0x20002af4

08004c24 <_ZN13NRF24L01pPort12port_DelayMsEj>:
void NRF24L01pPort::port_DelayMs(unsigned int ms){
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
	vTaskDelay(ms);
 8004c2e:	6838      	ldr	r0, [r7, #0]
 8004c30:	f7fd fd0a 	bl	8002648 <vTaskDelay>
}
 8004c34:	bf00      	nop
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <_ZN13NRF24L01pPort12port_DelayUsEj>:
void NRF24L01pPort::port_DelayUs(unsigned int us){
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
	vTaskDelay(us/1000);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	4a05      	ldr	r2, [pc, #20]	; (8004c60 <_ZN13NRF24L01pPort12port_DelayUsEj+0x24>)
 8004c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4e:	099b      	lsrs	r3, r3, #6
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7fd fcf9 	bl	8002648 <vTaskDelay>
}
 8004c56:	bf00      	nop
 8004c58:	3708      	adds	r7, #8
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	10624dd3 	.word	0x10624dd3
 8004c64:	00000000 	.word	0x00000000

08004c68 <_Z10RadioResetv>:
static GPIO_InitTypeDef  GPIO_InitStruct;

NRF24L01p::RadioConfig_t RadioConfig;
NRF24L01p::RxPipeConfig_t RxPipeConfig[6];

void RadioReset(){
 8004c68:	b590      	push	{r4, r7, lr}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0

    RadioConfig.DataReadyInterruptEnabled = 0;
 8004c6e:	4b46      	ldr	r3, [pc, #280]	; (8004d88 <_Z10RadioResetv+0x120>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	701a      	strb	r2, [r3, #0]
    RadioConfig.DataSentInterruptFlagEnabled = 0;
 8004c74:	4b44      	ldr	r3, [pc, #272]	; (8004d88 <_Z10RadioResetv+0x120>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	705a      	strb	r2, [r3, #1]
    RadioConfig.MaxRetryInterruptFlagEnabled = 0;
 8004c7a:	4b43      	ldr	r3, [pc, #268]	; (8004d88 <_Z10RadioResetv+0x120>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	709a      	strb	r2, [r3, #2]
    RadioConfig.Crc = NRF24L01p::CONFIG_CRC_16BIT;
 8004c80:	4b41      	ldr	r3, [pc, #260]	; (8004d88 <_Z10RadioResetv+0x120>)
 8004c82:	220c      	movs	r2, #12
 8004c84:	70da      	strb	r2, [r3, #3]
    RadioConfig.AutoReTransmissionCount = 15;
 8004c86:	4b40      	ldr	r3, [pc, #256]	; (8004d88 <_Z10RadioResetv+0x120>)
 8004c88:	220f      	movs	r2, #15
 8004c8a:	711a      	strb	r2, [r3, #4]
    RadioConfig.AutoReTransmitDelayX250us = 15;
 8004c8c:	4b3e      	ldr	r3, [pc, #248]	; (8004d88 <_Z10RadioResetv+0x120>)
 8004c8e:	220f      	movs	r2, #15
 8004c90:	715a      	strb	r2, [r3, #5]
    RadioConfig.frequencyOffset = 2;
 8004c92:	4b3d      	ldr	r3, [pc, #244]	; (8004d88 <_Z10RadioResetv+0x120>)
 8004c94:	2202      	movs	r2, #2
 8004c96:	719a      	strb	r2, [r3, #6]
    RadioConfig.datarate = NRF24L01p::RF_SETUP_RF_DR_2MBPS;
 8004c98:	4b3b      	ldr	r3, [pc, #236]	; (8004d88 <_Z10RadioResetv+0x120>)
 8004c9a:	2208      	movs	r2, #8
 8004c9c:	71da      	strb	r2, [r3, #7]
    RadioConfig.RfPower = NRF24L01p::RF_SETUP_RF_PWR_0DBM;
 8004c9e:	4b3a      	ldr	r3, [pc, #232]	; (8004d88 <_Z10RadioResetv+0x120>)
 8004ca0:	2206      	movs	r2, #6
 8004ca2:	721a      	strb	r2, [r3, #8]
    RadioConfig.PllLock = 0;
 8004ca4:	4b38      	ldr	r3, [pc, #224]	; (8004d88 <_Z10RadioResetv+0x120>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	725a      	strb	r2, [r3, #9]
    RadioConfig.ContWaveEnabled = 0;
 8004caa:	4b37      	ldr	r3, [pc, #220]	; (8004d88 <_Z10RadioResetv+0x120>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	729a      	strb	r2, [r3, #10]
    RadioConfig.FeatureDynamicPayloadEnabled = 1;
 8004cb0:	4b35      	ldr	r3, [pc, #212]	; (8004d88 <_Z10RadioResetv+0x120>)
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	72da      	strb	r2, [r3, #11]
    RadioConfig.FeaturePayloadWithAckEnabled = 1;
 8004cb6:	4b34      	ldr	r3, [pc, #208]	; (8004d88 <_Z10RadioResetv+0x120>)
 8004cb8:	2201      	movs	r2, #1
 8004cba:	731a      	strb	r2, [r3, #12]
    RadioConfig.FeatureDynamicPayloadWithNoAckEnabled = 1;
 8004cbc:	4b32      	ldr	r3, [pc, #200]	; (8004d88 <_Z10RadioResetv+0x120>)
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	735a      	strb	r2, [r3, #13]

    RxPipeConfig[0].address = 0xAABBCCDDEE;
 8004cc2:	4a32      	ldr	r2, [pc, #200]	; (8004d8c <_Z10RadioResetv+0x124>)
 8004cc4:	a428      	add	r4, pc, #160	; (adr r4, 8004d68 <_Z10RadioResetv+0x100>)
 8004cc6:	cc18      	ldmia	r4, {r3, r4}
 8004cc8:	e9c2 3402 	strd	r3, r4, [r2, #8]
    RxPipeConfig[1].address = 0x6565656501;
 8004ccc:	4a2f      	ldr	r2, [pc, #188]	; (8004d8c <_Z10RadioResetv+0x124>)
 8004cce:	4b30      	ldr	r3, [pc, #192]	; (8004d90 <_Z10RadioResetv+0x128>)
 8004cd0:	f04f 0465 	mov.w	r4, #101	; 0x65
 8004cd4:	e9c2 3408 	strd	r3, r4, [r2, #32]
    RxPipeConfig[2].address = 0x6565656502;
 8004cd8:	4a2c      	ldr	r2, [pc, #176]	; (8004d8c <_Z10RadioResetv+0x124>)
 8004cda:	a425      	add	r4, pc, #148	; (adr r4, 8004d70 <_Z10RadioResetv+0x108>)
 8004cdc:	cc18      	ldmia	r4, {r3, r4}
 8004cde:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    RxPipeConfig[3].address = 0x6565656503;
 8004ce2:	4a2a      	ldr	r2, [pc, #168]	; (8004d8c <_Z10RadioResetv+0x124>)
 8004ce4:	a424      	add	r4, pc, #144	; (adr r4, 8004d78 <_Z10RadioResetv+0x110>)
 8004ce6:	cc18      	ldmia	r4, {r3, r4}
 8004ce8:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
    RxPipeConfig[4].address = 0x6565656509;
 8004cec:	4a27      	ldr	r2, [pc, #156]	; (8004d8c <_Z10RadioResetv+0x124>)
 8004cee:	a424      	add	r4, pc, #144	; (adr r4, 8004d80 <_Z10RadioResetv+0x118>)
 8004cf0:	cc18      	ldmia	r4, {r3, r4}
 8004cf2:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
    RxPipeConfig[5].address = 0x6565656505;
 8004cf6:	4a25      	ldr	r2, [pc, #148]	; (8004d8c <_Z10RadioResetv+0x124>)
 8004cf8:	4b26      	ldr	r3, [pc, #152]	; (8004d94 <_Z10RadioResetv+0x12c>)
 8004cfa:	f04f 0465 	mov.w	r4, #101	; 0x65
 8004cfe:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

    int i;
    for(i=0;i<6;i++){
 8004d02:	2300      	movs	r3, #0
 8004d04:	607b      	str	r3, [r7, #4]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b05      	cmp	r3, #5
 8004d0a:	dc20      	bgt.n	8004d4e <_Z10RadioResetv+0xe6>
        RxPipeConfig[i].PipeEnabled = 1;
 8004d0c:	491f      	ldr	r1, [pc, #124]	; (8004d8c <_Z10RadioResetv+0x124>)
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	4613      	mov	r3, r2
 8004d12:	005b      	lsls	r3, r3, #1
 8004d14:	4413      	add	r3, r2
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	440b      	add	r3, r1
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	701a      	strb	r2, [r3, #0]
        RxPipeConfig[i].autoAckEnabled = 1;
 8004d1e:	491b      	ldr	r1, [pc, #108]	; (8004d8c <_Z10RadioResetv+0x124>)
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	4613      	mov	r3, r2
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	4413      	add	r3, r2
 8004d28:	00db      	lsls	r3, r3, #3
 8004d2a:	440b      	add	r3, r1
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	2201      	movs	r2, #1
 8004d30:	701a      	strb	r2, [r3, #0]
        RxPipeConfig[i].dynamicPayloadEnabled = 1;
 8004d32:	4916      	ldr	r1, [pc, #88]	; (8004d8c <_Z10RadioResetv+0x124>)
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	4613      	mov	r3, r2
 8004d38:	005b      	lsls	r3, r3, #1
 8004d3a:	4413      	add	r3, r2
 8004d3c:	00db      	lsls	r3, r3, #3
 8004d3e:	440b      	add	r3, r1
 8004d40:	3311      	adds	r3, #17
 8004d42:	2201      	movs	r2, #1
 8004d44:	701a      	strb	r2, [r3, #0]
    RxPipeConfig[3].address = 0x6565656503;
    RxPipeConfig[4].address = 0x6565656509;
    RxPipeConfig[5].address = 0x6565656505;

    int i;
    for(i=0;i<6;i++){
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	607b      	str	r3, [r7, #4]
 8004d4c:	e7db      	b.n	8004d06 <_Z10RadioResetv+0x9e>
        RxPipeConfig[i].autoAckEnabled = 1;
        RxPipeConfig[i].dynamicPayloadEnabled = 1;
    }


    Radio->ResetConfigValues(&RadioConfig, RxPipeConfig);
 8004d4e:	4b12      	ldr	r3, [pc, #72]	; (8004d98 <_Z10RadioResetv+0x130>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a0e      	ldr	r2, [pc, #56]	; (8004d8c <_Z10RadioResetv+0x124>)
 8004d54:	490c      	ldr	r1, [pc, #48]	; (8004d88 <_Z10RadioResetv+0x120>)
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7fe ff04 	bl	8003b64 <_ZN9NRF24L01p17ResetConfigValuesEPNS_13RadioConfig_tEPNS_14RxPipeConfig_tE>
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd90      	pop	{r4, r7, pc}
 8004d64:	f3af 8000 	nop.w
 8004d68:	bbccddee 	.word	0xbbccddee
 8004d6c:	000000aa 	.word	0x000000aa
 8004d70:	65656502 	.word	0x65656502
 8004d74:	00000065 	.word	0x00000065
 8004d78:	65656503 	.word	0x65656503
 8004d7c:	00000065 	.word	0x00000065
 8004d80:	65656509 	.word	0x65656509
 8004d84:	00000065 	.word	0x00000065
 8004d88:	20002b74 	.word	0x20002b74
 8004d8c:	20002b88 	.word	0x20002b88
 8004d90:	65656501 	.word	0x65656501
 8004d94:	65656505 	.word	0x65656505
 8004d98:	20002b5c 	.word	0x20002b5c
 8004d9c:	00000000 	.word	0x00000000

08004da0 <_Z16nrf24l01p_threadPv>:




void nrf24l01p_thread(void * ptr)
{
 8004da0:	b590      	push	{r4, r7, lr}
 8004da2:	b0bf      	sub	sp, #252	; 0xfc
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
	/* -1- Enable GPIO Clock (to be able to program the configuration registers) */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004da8:	2300      	movs	r3, #0
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	4a4a      	ldr	r2, [pc, #296]	; (8004ed8 <_Z16nrf24l01p_threadPv+0x138>)
 8004dae:	4b4a      	ldr	r3, [pc, #296]	; (8004ed8 <_Z16nrf24l01p_threadPv+0x138>)
 8004db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db2:	f043 0301 	orr.w	r3, r3, #1
 8004db6:	6313      	str	r3, [r2, #48]	; 0x30
 8004db8:	4b47      	ldr	r3, [pc, #284]	; (8004ed8 <_Z16nrf24l01p_threadPv+0x138>)
 8004dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	60fb      	str	r3, [r7, #12]
 8004dc2:	68fb      	ldr	r3, [r7, #12]

	/* -2- Configure IO in output push-pull mode to drive external LEDs */
	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8004dc4:	4b45      	ldr	r3, [pc, #276]	; (8004edc <_Z16nrf24l01p_threadPv+0x13c>)
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8004dca:	4b44      	ldr	r3, [pc, #272]	; (8004edc <_Z16nrf24l01p_threadPv+0x13c>)
 8004dcc:	2201      	movs	r2, #1
 8004dce:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dd0:	4b42      	ldr	r3, [pc, #264]	; (8004edc <_Z16nrf24l01p_threadPv+0x13c>)
 8004dd2:	2203      	movs	r2, #3
 8004dd4:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004dd6:	4b41      	ldr	r3, [pc, #260]	; (8004edc <_Z16nrf24l01p_threadPv+0x13c>)
 8004dd8:	2220      	movs	r2, #32
 8004dda:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ddc:	493f      	ldr	r1, [pc, #252]	; (8004edc <_Z16nrf24l01p_threadPv+0x13c>)
 8004dde:	4840      	ldr	r0, [pc, #256]	; (8004ee0 <_Z16nrf24l01p_threadPv+0x140>)
 8004de0:	f7fb fae4 	bl	80003ac <HAL_GPIO_Init>

	NRF24L01p NrfRadio;
 8004de4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7fe fd79 	bl	80038e0 <_ZN9NRF24L01pC1Ev>
	Radio = &NrfRadio;
 8004dee:	4a3d      	ldr	r2, [pc, #244]	; (8004ee4 <_Z16nrf24l01p_threadPv+0x144>)
 8004df0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004df4:	6013      	str	r3, [r2, #0]

	RadioReset();
 8004df6:	f7ff ff37 	bl	8004c68 <_Z10RadioResetv>

	printf("DYNPD : %x\r\n", Radio->read_register(0x1c));
 8004dfa:	4b3a      	ldr	r3, [pc, #232]	; (8004ee4 <_Z16nrf24l01p_threadPv+0x144>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	211c      	movs	r1, #28
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7ff f963 	bl	80040cc <_ZN15NRF24L01pDriver13read_registerEh>
 8004e06:	4603      	mov	r3, r0
 8004e08:	4619      	mov	r1, r3
 8004e0a:	4837      	ldr	r0, [pc, #220]	; (8004ee8 <_Z16nrf24l01p_threadPv+0x148>)
 8004e0c:	f000 fa88 	bl	8005320 <iprintf>
	printf("FEATURE : %x\r\n", Radio->read_register(0x1d));
 8004e10:	4b34      	ldr	r3, [pc, #208]	; (8004ee4 <_Z16nrf24l01p_threadPv+0x144>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	211d      	movs	r1, #29
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7ff f958 	bl	80040cc <_ZN15NRF24L01pDriver13read_registerEh>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	4619      	mov	r1, r3
 8004e20:	4832      	ldr	r0, [pc, #200]	; (8004eec <_Z16nrf24l01p_threadPv+0x14c>)
 8004e22:	f000 fa7d 	bl	8005320 <iprintf>
	printf("FIFO : %x\r\n", Radio->read_register(0x17));
 8004e26:	4b2f      	ldr	r3, [pc, #188]	; (8004ee4 <_Z16nrf24l01p_threadPv+0x144>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2117      	movs	r1, #23
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7ff f94d 	bl	80040cc <_ZN15NRF24L01pDriver13read_registerEh>
 8004e32:	4603      	mov	r3, r0
 8004e34:	4619      	mov	r1, r3
 8004e36:	482e      	ldr	r0, [pc, #184]	; (8004ef0 <_Z16nrf24l01p_threadPv+0x150>)
 8004e38:	f000 fa72 	bl	8005320 <iprintf>
	printf("RF_SETUP : %x\r\n", Radio->read_register(0x06));
 8004e3c:	4b29      	ldr	r3, [pc, #164]	; (8004ee4 <_Z16nrf24l01p_threadPv+0x144>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2106      	movs	r1, #6
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7ff f942 	bl	80040cc <_ZN15NRF24L01pDriver13read_registerEh>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	4829      	ldr	r0, [pc, #164]	; (8004ef4 <_Z16nrf24l01p_threadPv+0x154>)
 8004e4e:	f000 fa67 	bl	8005320 <iprintf>

	char myMesg[32];
	NRF24L01p::Payload_t payload;

	payload.UseAck = 1;
 8004e52:	2301      	movs	r3, #1
 8004e54:	767b      	strb	r3, [r7, #25]


	payload.address = 0x11223344EE;
 8004e56:	a41e      	add	r4, pc, #120	; (adr r4, 8004ed0 <_Z16nrf24l01p_threadPv+0x130>)
 8004e58:	cc18      	ldmia	r4, {r3, r4}
 8004e5a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	payload.data = (uint8_t*)myMesg;
 8004e5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e62:	61fb      	str	r3, [r7, #28]
	payload.length = strlen(myMesg);
 8004e64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7fb f9d1 	bl	8000210 <strlen>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	623b      	str	r3, [r7, #32]
	payload.retransmitCount = 15;
 8004e72:	230f      	movs	r3, #15
 8004e74:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	sprintf((char*) payload.data, "light 1 0" );
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	491f      	ldr	r1, [pc, #124]	; (8004ef8 <_Z16nrf24l01p_threadPv+0x158>)
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	460b      	mov	r3, r1
 8004e80:	cb03      	ldmia	r3!, {r0, r1}
 8004e82:	6010      	str	r0, [r2, #0]
 8004e84:	6051      	str	r1, [r2, #4]
 8004e86:	881b      	ldrh	r3, [r3, #0]
 8004e88:	8113      	strh	r3, [r2, #8]
	payload.length = strlen((char*)payload.data);
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7fb f9bf 	bl	8000210 <strlen>
 8004e92:	4603      	mov	r3, r0
 8004e94:	623b      	str	r3, [r7, #32]
	Radio->TransmitPayload(&payload);
 8004e96:	4b13      	ldr	r3, [pc, #76]	; (8004ee4 <_Z16nrf24l01p_threadPv+0x144>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f107 0210 	add.w	r2, r7, #16
 8004e9e:	4611      	mov	r1, r2
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7fe ffeb 	bl	8003e7c <_ZN9NRF24L01p15TransmitPayloadEPNS_9Payload_tE>
	lcd.portSerialInit();
 8004ea6:	4815      	ldr	r0, [pc, #84]	; (8004efc <_Z16nrf24l01p_threadPv+0x15c>)
 8004ea8:	f7fe fc74 	bl	8003794 <_ZN9LCD03Port14portSerialInitEv>


	lcd.clear_screen();
 8004eac:	4813      	ldr	r0, [pc, #76]	; (8004efc <_Z16nrf24l01p_threadPv+0x15c>)
 8004eae:	f7fe fc31 	bl	8003714 <_ZN5LCD0312clear_screenEv>
	  while (1)
	  {
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8004eb2:	2120      	movs	r1, #32
 8004eb4:	480a      	ldr	r0, [pc, #40]	; (8004ee0 <_Z16nrf24l01p_threadPv+0x140>)
 8004eb6:	f7fb fc25 	bl	8000704 <HAL_GPIO_TogglePin>
			vTaskDelay(1000);
 8004eba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ebe:	f7fd fbc3 	bl	8002648 <vTaskDelay>
			printf("hello world\r\n");
 8004ec2:	480f      	ldr	r0, [pc, #60]	; (8004f00 <_Z16nrf24l01p_threadPv+0x160>)
 8004ec4:	f000 fa9e 	bl	8005404 <puts>
	Radio->TransmitPayload(&payload);
	lcd.portSerialInit();


	lcd.clear_screen();
	  while (1)
 8004ec8:	e7f3      	b.n	8004eb2 <_Z16nrf24l01p_threadPv+0x112>
 8004eca:	bf00      	nop
 8004ecc:	f3af 8000 	nop.w
 8004ed0:	223344ee 	.word	0x223344ee
 8004ed4:	00000011 	.word	0x00000011
 8004ed8:	40023800 	.word	0x40023800
 8004edc:	20002b60 	.word	0x20002b60
 8004ee0:	40020000 	.word	0x40020000
 8004ee4:	20002b5c 	.word	0x20002b5c
 8004ee8:	080060b8 	.word	0x080060b8
 8004eec:	080060c8 	.word	0x080060c8
 8004ef0:	080060d8 	.word	0x080060d8
 8004ef4:	080060e4 	.word	0x080060e4
 8004ef8:	080060f4 	.word	0x080060f4
 8004efc:	20002b4c 	.word	0x20002b4c
 8004f00:	08006100 	.word	0x08006100

08004f04 <main>:
}


/* main function */
int main(void)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af02      	add	r7, sp, #8
  // create 'thread' functions that start executing,
  // example: tid_name = osThreadCreate (osThread(name), NULL);
  osKernelStart ();                     // start thread execution
#endif

  xTaskCreate(nrf24l01p_thread,( const char * ) "t_gpio",configMINIMAL_STACK_SIZE*2,NULL,tskIDLE_PRIORITY+1 ,NULL );
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	9301      	str	r3, [sp, #4]
 8004f0e:	2301      	movs	r3, #1
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	2300      	movs	r3, #0
 8004f14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f18:	4904      	ldr	r1, [pc, #16]	; (8004f2c <main+0x28>)
 8004f1a:	4805      	ldr	r0, [pc, #20]	; (8004f30 <main+0x2c>)
 8004f1c:	f7fd fa66 	bl	80023ec <xTaskCreate>

  vTaskStartScheduler();
 8004f20:	f7fd fbb6 	bl	8002690 <vTaskStartScheduler>
  /* Infinite loop */
  while (1)
  {
   /* Add application code here */
	  //HAL_Delay(1000);
	  printf("hello world\r\n");
 8004f24:	4803      	ldr	r0, [pc, #12]	; (8004f34 <main+0x30>)
 8004f26:	f000 fa6d 	bl	8005404 <puts>

  xTaskCreate(nrf24l01p_thread,( const char * ) "t_gpio",configMINIMAL_STACK_SIZE*2,NULL,tskIDLE_PRIORITY+1 ,NULL );

  vTaskStartScheduler();
  /* Infinite loop */
  while (1)
 8004f2a:	e7fb      	b.n	8004f24 <main+0x20>
 8004f2c:	08006110 	.word	0x08006110
 8004f30:	08004da1 	.word	0x08004da1
 8004f34:	08006100 	.word	0x08006100

08004f38 <_Z41__static_initialization_and_destruction_0ii>:
static void Error_Handler(void)
{
  while(1)
  {
  }
}
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d10f      	bne.n	8004f68 <_Z41__static_initialization_and_destruction_0ii+0x30>
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d10a      	bne.n	8004f68 <_Z41__static_initialization_and_destruction_0ii+0x30>
#include "../components/components.h"

void SystemClock_Config(void);
static void Error_Handler(void);

LCD03 lcd(LCD03::LCD03_SERIAL,LCD03::LCD03_20_4,LCD03::LCD03_I2C_ADDRESS_0xc8);
 8004f52:	23c8      	movs	r3, #200	; 0xc8
 8004f54:	2201      	movs	r2, #1
 8004f56:	2101      	movs	r1, #1
 8004f58:	4805      	ldr	r0, [pc, #20]	; (8004f70 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8004f5a:	f7fe fb81 	bl	8003660 <_ZN5LCD03C1ENS_14COMM_MODE_ENUMENS_9SIZE_ENUMENS_16I2C_ADDRESS_ENUME>
 8004f5e:	4a05      	ldr	r2, [pc, #20]	; (8004f74 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8004f60:	4905      	ldr	r1, [pc, #20]	; (8004f78 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004f62:	4803      	ldr	r0, [pc, #12]	; (8004f70 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8004f64:	f000 f8d8 	bl	8005118 <__aeabi_atexit>
static void Error_Handler(void)
{
  while(1)
  {
  }
}
 8004f68:	bf00      	nop
 8004f6a:	3708      	adds	r7, #8
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	20002b4c 	.word	0x20002b4c
 8004f74:	20000000 	.word	0x20000000
 8004f78:	08003611 	.word	0x08003611

08004f7c <_GLOBAL__sub_I_lcd>:
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004f84:	2001      	movs	r0, #1
 8004f86:	f7ff ffd7 	bl	8004f38 <_Z41__static_initialization_and_destruction_0ii>
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004f94:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004f98:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d013      	beq.n	8004fcc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8004fa4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004fa8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8004fac:	f003 0301 	and.w	r3, r3, #1
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00b      	beq.n	8004fcc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8004fb4:	e000      	b.n	8004fb8 <ITM_SendChar+0x2c>
    {
      __NOP();
 8004fb6:	bf00      	nop
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8004fb8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d0f9      	beq.n	8004fb6 <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8004fc2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	b2d2      	uxtb	r2, r2
 8004fca:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8004fcc:	687b      	ldr	r3, [r7, #4]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop

08004fdc <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	/* return len; */
	int i;
	for(i=0;i<len;i++){
 8004fe8:	2300      	movs	r3, #0
 8004fea:	617b      	str	r3, [r7, #20]
 8004fec:	e009      	b.n	8005002 <_write+0x26>
		ITM_SendChar(*ptr++);
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	60ba      	str	r2, [r7, #8]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7ff ffc8 	bl	8004f8c <ITM_SendChar>
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
	/* Implement your write code here, this is used by puts and printf for example */
	/* return len; */
	int i;
	for(i=0;i<len;i++){
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	3301      	adds	r3, #1
 8005000:	617b      	str	r3, [r7, #20]
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	429a      	cmp	r2, r3
 8005008:	dbf1      	blt.n	8004fee <_write+0x12>
		ITM_SendChar(*ptr++);
	}
	errno = ENOSYS;
 800500a:	4b04      	ldr	r3, [pc, #16]	; (800501c <_write+0x40>)
 800500c:	2258      	movs	r2, #88	; 0x58
 800500e:	601a      	str	r2, [r3, #0]
	return len;
 8005010:	687b      	ldr	r3, [r7, #4]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3718      	adds	r7, #24
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	20002c28 	.word	0x20002c28

08005020 <_sbrk>:

void * _sbrk(int32_t incr)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8005028:	4b0b      	ldr	r3, [pc, #44]	; (8005058 <_sbrk+0x38>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d102      	bne.n	8005036 <_sbrk+0x16>
		heap_end = & end;
 8005030:	4b09      	ldr	r3, [pc, #36]	; (8005058 <_sbrk+0x38>)
 8005032:	4a0a      	ldr	r2, [pc, #40]	; (800505c <_sbrk+0x3c>)
 8005034:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 8005036:	4b08      	ldr	r3, [pc, #32]	; (8005058 <_sbrk+0x38>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 800503c:	4b06      	ldr	r3, [pc, #24]	; (8005058 <_sbrk+0x38>)
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4413      	add	r3, r2
 8005044:	4a04      	ldr	r2, [pc, #16]	; (8005058 <_sbrk+0x38>)
 8005046:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 8005048:	68fb      	ldr	r3, [r7, #12]
}
 800504a:	4618      	mov	r0, r3
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	20002c18 	.word	0x20002c18
 800505c:	20002c30 	.word	0x20002c30

08005060 <_close>:

int _close(int32_t file)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8005068:	4b05      	ldr	r3, [pc, #20]	; (8005080 <_close+0x20>)
 800506a:	2258      	movs	r2, #88	; 0x58
 800506c:	601a      	str	r2, [r3, #0]
	return -1;
 800506e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005072:	4618      	mov	r0, r3
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	20002c28 	.word	0x20002c28

08005084 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 800508e:	4b05      	ldr	r3, [pc, #20]	; (80050a4 <_fstat+0x20>)
 8005090:	2258      	movs	r2, #88	; 0x58
 8005092:	601a      	str	r2, [r3, #0]
	return -1;
 8005094:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005098:	4618      	mov	r0, r3
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	20002c28 	.word	0x20002c28

080050a8 <_isatty>:

int _isatty(int32_t file)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 80050b0:	4b04      	ldr	r3, [pc, #16]	; (80050c4 <_isatty+0x1c>)
 80050b2:	2258      	movs	r2, #88	; 0x58
 80050b4:	601a      	str	r2, [r3, #0]
	return 0;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	20002c28 	.word	0x20002c28

080050c8 <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 80050d4:	4b05      	ldr	r3, [pc, #20]	; (80050ec <_lseek+0x24>)
 80050d6:	2258      	movs	r2, #88	; 0x58
 80050d8:	601a      	str	r2, [r3, #0]
	return -1;
 80050da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3714      	adds	r7, #20
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	20002c28 	.word	0x20002c28

080050f0 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 80050fc:	4b05      	ldr	r3, [pc, #20]	; (8005114 <_read+0x24>)
 80050fe:	2258      	movs	r2, #88	; 0x58
 8005100:	601a      	str	r2, [r3, #0]
	return -1;
 8005102:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005106:	4618      	mov	r0, r3
 8005108:	3714      	adds	r7, #20
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	20002c28 	.word	0x20002c28

08005118 <__aeabi_atexit>:
 8005118:	460b      	mov	r3, r1
 800511a:	4601      	mov	r1, r0
 800511c:	4618      	mov	r0, r3
 800511e:	f000 b803 	b.w	8005128 <__cxa_atexit>

08005122 <_ZdlPv>:
 8005122:	f000 b835 	b.w	8005190 <free>
	...

08005128 <__cxa_atexit>:
 8005128:	b510      	push	{r4, lr}
 800512a:	4c05      	ldr	r4, [pc, #20]	; (8005140 <__cxa_atexit+0x18>)
 800512c:	4613      	mov	r3, r2
 800512e:	b12c      	cbz	r4, 800513c <__cxa_atexit+0x14>
 8005130:	460a      	mov	r2, r1
 8005132:	4601      	mov	r1, r0
 8005134:	2002      	movs	r0, #2
 8005136:	f3af 8000 	nop.w
 800513a:	bd10      	pop	{r4, pc}
 800513c:	4620      	mov	r0, r4
 800513e:	bd10      	pop	{r4, pc}
 8005140:	00000000 	.word	0x00000000

08005144 <__libc_init_array>:
 8005144:	b570      	push	{r4, r5, r6, lr}
 8005146:	4b0e      	ldr	r3, [pc, #56]	; (8005180 <__libc_init_array+0x3c>)
 8005148:	4c0e      	ldr	r4, [pc, #56]	; (8005184 <__libc_init_array+0x40>)
 800514a:	1ae4      	subs	r4, r4, r3
 800514c:	10a4      	asrs	r4, r4, #2
 800514e:	2500      	movs	r5, #0
 8005150:	461e      	mov	r6, r3
 8005152:	42a5      	cmp	r5, r4
 8005154:	d004      	beq.n	8005160 <__libc_init_array+0x1c>
 8005156:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800515a:	4798      	blx	r3
 800515c:	3501      	adds	r5, #1
 800515e:	e7f8      	b.n	8005152 <__libc_init_array+0xe>
 8005160:	f000 ff96 	bl	8006090 <_init>
 8005164:	4c08      	ldr	r4, [pc, #32]	; (8005188 <__libc_init_array+0x44>)
 8005166:	4b09      	ldr	r3, [pc, #36]	; (800518c <__libc_init_array+0x48>)
 8005168:	1ae4      	subs	r4, r4, r3
 800516a:	10a4      	asrs	r4, r4, #2
 800516c:	2500      	movs	r5, #0
 800516e:	461e      	mov	r6, r3
 8005170:	42a5      	cmp	r5, r4
 8005172:	d004      	beq.n	800517e <__libc_init_array+0x3a>
 8005174:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005178:	4798      	blx	r3
 800517a:	3501      	adds	r5, #1
 800517c:	e7f8      	b.n	8005170 <__libc_init_array+0x2c>
 800517e:	bd70      	pop	{r4, r5, r6, pc}
 8005180:	08006214 	.word	0x08006214
 8005184:	08006214 	.word	0x08006214
 8005188:	0800621c 	.word	0x0800621c
 800518c:	08006214 	.word	0x08006214

08005190 <free>:
 8005190:	4b02      	ldr	r3, [pc, #8]	; (800519c <free+0xc>)
 8005192:	4601      	mov	r1, r0
 8005194:	6818      	ldr	r0, [r3, #0]
 8005196:	f000 b817 	b.w	80051c8 <_free_r>
 800519a:	bf00      	nop
 800519c:	20000094 	.word	0x20000094

080051a0 <memcpy>:
 80051a0:	b510      	push	{r4, lr}
 80051a2:	1e43      	subs	r3, r0, #1
 80051a4:	440a      	add	r2, r1
 80051a6:	4291      	cmp	r1, r2
 80051a8:	d004      	beq.n	80051b4 <memcpy+0x14>
 80051aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051b2:	e7f8      	b.n	80051a6 <memcpy+0x6>
 80051b4:	bd10      	pop	{r4, pc}

080051b6 <memset>:
 80051b6:	4402      	add	r2, r0
 80051b8:	4603      	mov	r3, r0
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d002      	beq.n	80051c4 <memset+0xe>
 80051be:	f803 1b01 	strb.w	r1, [r3], #1
 80051c2:	e7fa      	b.n	80051ba <memset+0x4>
 80051c4:	4770      	bx	lr
	...

080051c8 <_free_r>:
 80051c8:	b538      	push	{r3, r4, r5, lr}
 80051ca:	4605      	mov	r5, r0
 80051cc:	2900      	cmp	r1, #0
 80051ce:	d046      	beq.n	800525e <_free_r+0x96>
 80051d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051d4:	1f0c      	subs	r4, r1, #4
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	bfb8      	it	lt
 80051da:	18e4      	addlt	r4, r4, r3
 80051dc:	f000 fbc8 	bl	8005970 <__malloc_lock>
 80051e0:	4a1f      	ldr	r2, [pc, #124]	; (8005260 <_free_r+0x98>)
 80051e2:	6813      	ldr	r3, [r2, #0]
 80051e4:	4611      	mov	r1, r2
 80051e6:	b913      	cbnz	r3, 80051ee <_free_r+0x26>
 80051e8:	6063      	str	r3, [r4, #4]
 80051ea:	6014      	str	r4, [r2, #0]
 80051ec:	e032      	b.n	8005254 <_free_r+0x8c>
 80051ee:	42a3      	cmp	r3, r4
 80051f0:	d90e      	bls.n	8005210 <_free_r+0x48>
 80051f2:	6822      	ldr	r2, [r4, #0]
 80051f4:	18a0      	adds	r0, r4, r2
 80051f6:	4283      	cmp	r3, r0
 80051f8:	bf04      	itt	eq
 80051fa:	6818      	ldreq	r0, [r3, #0]
 80051fc:	685b      	ldreq	r3, [r3, #4]
 80051fe:	6063      	str	r3, [r4, #4]
 8005200:	bf04      	itt	eq
 8005202:	1812      	addeq	r2, r2, r0
 8005204:	6022      	streq	r2, [r4, #0]
 8005206:	600c      	str	r4, [r1, #0]
 8005208:	e024      	b.n	8005254 <_free_r+0x8c>
 800520a:	42a2      	cmp	r2, r4
 800520c:	d803      	bhi.n	8005216 <_free_r+0x4e>
 800520e:	4613      	mov	r3, r2
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	2a00      	cmp	r2, #0
 8005214:	d1f9      	bne.n	800520a <_free_r+0x42>
 8005216:	6818      	ldr	r0, [r3, #0]
 8005218:	1819      	adds	r1, r3, r0
 800521a:	42a1      	cmp	r1, r4
 800521c:	d10b      	bne.n	8005236 <_free_r+0x6e>
 800521e:	6821      	ldr	r1, [r4, #0]
 8005220:	4401      	add	r1, r0
 8005222:	1858      	adds	r0, r3, r1
 8005224:	4282      	cmp	r2, r0
 8005226:	6019      	str	r1, [r3, #0]
 8005228:	d114      	bne.n	8005254 <_free_r+0x8c>
 800522a:	6810      	ldr	r0, [r2, #0]
 800522c:	6852      	ldr	r2, [r2, #4]
 800522e:	605a      	str	r2, [r3, #4]
 8005230:	4401      	add	r1, r0
 8005232:	6019      	str	r1, [r3, #0]
 8005234:	e00e      	b.n	8005254 <_free_r+0x8c>
 8005236:	d902      	bls.n	800523e <_free_r+0x76>
 8005238:	230c      	movs	r3, #12
 800523a:	602b      	str	r3, [r5, #0]
 800523c:	e00a      	b.n	8005254 <_free_r+0x8c>
 800523e:	6821      	ldr	r1, [r4, #0]
 8005240:	1860      	adds	r0, r4, r1
 8005242:	4282      	cmp	r2, r0
 8005244:	bf04      	itt	eq
 8005246:	6810      	ldreq	r0, [r2, #0]
 8005248:	6852      	ldreq	r2, [r2, #4]
 800524a:	6062      	str	r2, [r4, #4]
 800524c:	bf04      	itt	eq
 800524e:	1809      	addeq	r1, r1, r0
 8005250:	6021      	streq	r1, [r4, #0]
 8005252:	605c      	str	r4, [r3, #4]
 8005254:	4628      	mov	r0, r5
 8005256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800525a:	f000 bb8a 	b.w	8005972 <__malloc_unlock>
 800525e:	bd38      	pop	{r3, r4, r5, pc}
 8005260:	20002c20 	.word	0x20002c20

08005264 <_malloc_r>:
 8005264:	b570      	push	{r4, r5, r6, lr}
 8005266:	1ccd      	adds	r5, r1, #3
 8005268:	f025 0503 	bic.w	r5, r5, #3
 800526c:	3508      	adds	r5, #8
 800526e:	2d0c      	cmp	r5, #12
 8005270:	bf38      	it	cc
 8005272:	250c      	movcc	r5, #12
 8005274:	2d00      	cmp	r5, #0
 8005276:	4606      	mov	r6, r0
 8005278:	db01      	blt.n	800527e <_malloc_r+0x1a>
 800527a:	42a9      	cmp	r1, r5
 800527c:	d902      	bls.n	8005284 <_malloc_r+0x20>
 800527e:	230c      	movs	r3, #12
 8005280:	6033      	str	r3, [r6, #0]
 8005282:	e046      	b.n	8005312 <_malloc_r+0xae>
 8005284:	f000 fb74 	bl	8005970 <__malloc_lock>
 8005288:	4b23      	ldr	r3, [pc, #140]	; (8005318 <_malloc_r+0xb4>)
 800528a:	681c      	ldr	r4, [r3, #0]
 800528c:	461a      	mov	r2, r3
 800528e:	4621      	mov	r1, r4
 8005290:	b1a1      	cbz	r1, 80052bc <_malloc_r+0x58>
 8005292:	680b      	ldr	r3, [r1, #0]
 8005294:	1b5b      	subs	r3, r3, r5
 8005296:	d40e      	bmi.n	80052b6 <_malloc_r+0x52>
 8005298:	2b0b      	cmp	r3, #11
 800529a:	d903      	bls.n	80052a4 <_malloc_r+0x40>
 800529c:	600b      	str	r3, [r1, #0]
 800529e:	18cc      	adds	r4, r1, r3
 80052a0:	50cd      	str	r5, [r1, r3]
 80052a2:	e01e      	b.n	80052e2 <_malloc_r+0x7e>
 80052a4:	428c      	cmp	r4, r1
 80052a6:	bf0d      	iteet	eq
 80052a8:	6863      	ldreq	r3, [r4, #4]
 80052aa:	684b      	ldrne	r3, [r1, #4]
 80052ac:	6063      	strne	r3, [r4, #4]
 80052ae:	6013      	streq	r3, [r2, #0]
 80052b0:	bf18      	it	ne
 80052b2:	460c      	movne	r4, r1
 80052b4:	e015      	b.n	80052e2 <_malloc_r+0x7e>
 80052b6:	460c      	mov	r4, r1
 80052b8:	6849      	ldr	r1, [r1, #4]
 80052ba:	e7e9      	b.n	8005290 <_malloc_r+0x2c>
 80052bc:	4c17      	ldr	r4, [pc, #92]	; (800531c <_malloc_r+0xb8>)
 80052be:	6823      	ldr	r3, [r4, #0]
 80052c0:	b91b      	cbnz	r3, 80052ca <_malloc_r+0x66>
 80052c2:	4630      	mov	r0, r6
 80052c4:	f000 f8a6 	bl	8005414 <_sbrk_r>
 80052c8:	6020      	str	r0, [r4, #0]
 80052ca:	4629      	mov	r1, r5
 80052cc:	4630      	mov	r0, r6
 80052ce:	f000 f8a1 	bl	8005414 <_sbrk_r>
 80052d2:	1c43      	adds	r3, r0, #1
 80052d4:	d018      	beq.n	8005308 <_malloc_r+0xa4>
 80052d6:	1cc4      	adds	r4, r0, #3
 80052d8:	f024 0403 	bic.w	r4, r4, #3
 80052dc:	42a0      	cmp	r0, r4
 80052de:	d10d      	bne.n	80052fc <_malloc_r+0x98>
 80052e0:	6025      	str	r5, [r4, #0]
 80052e2:	4630      	mov	r0, r6
 80052e4:	f000 fb45 	bl	8005972 <__malloc_unlock>
 80052e8:	f104 000b 	add.w	r0, r4, #11
 80052ec:	1d23      	adds	r3, r4, #4
 80052ee:	f020 0007 	bic.w	r0, r0, #7
 80052f2:	1ac3      	subs	r3, r0, r3
 80052f4:	d00e      	beq.n	8005314 <_malloc_r+0xb0>
 80052f6:	425a      	negs	r2, r3
 80052f8:	50e2      	str	r2, [r4, r3]
 80052fa:	bd70      	pop	{r4, r5, r6, pc}
 80052fc:	1a21      	subs	r1, r4, r0
 80052fe:	4630      	mov	r0, r6
 8005300:	f000 f888 	bl	8005414 <_sbrk_r>
 8005304:	3001      	adds	r0, #1
 8005306:	d1eb      	bne.n	80052e0 <_malloc_r+0x7c>
 8005308:	230c      	movs	r3, #12
 800530a:	6033      	str	r3, [r6, #0]
 800530c:	4630      	mov	r0, r6
 800530e:	f000 fb30 	bl	8005972 <__malloc_unlock>
 8005312:	2000      	movs	r0, #0
 8005314:	bd70      	pop	{r4, r5, r6, pc}
 8005316:	bf00      	nop
 8005318:	20002c20 	.word	0x20002c20
 800531c:	20002c1c 	.word	0x20002c1c

08005320 <iprintf>:
 8005320:	b40f      	push	{r0, r1, r2, r3}
 8005322:	4b0a      	ldr	r3, [pc, #40]	; (800534c <iprintf+0x2c>)
 8005324:	b513      	push	{r0, r1, r4, lr}
 8005326:	681c      	ldr	r4, [r3, #0]
 8005328:	b124      	cbz	r4, 8005334 <iprintf+0x14>
 800532a:	69a3      	ldr	r3, [r4, #24]
 800532c:	b913      	cbnz	r3, 8005334 <iprintf+0x14>
 800532e:	4620      	mov	r0, r4
 8005330:	f000 fa34 	bl	800579c <__sinit>
 8005334:	ab05      	add	r3, sp, #20
 8005336:	9a04      	ldr	r2, [sp, #16]
 8005338:	68a1      	ldr	r1, [r4, #8]
 800533a:	9301      	str	r3, [sp, #4]
 800533c:	4620      	mov	r0, r4
 800533e:	f000 fb43 	bl	80059c8 <_vfiprintf_r>
 8005342:	b002      	add	sp, #8
 8005344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005348:	b004      	add	sp, #16
 800534a:	4770      	bx	lr
 800534c:	20000094 	.word	0x20000094

08005350 <_puts_r>:
 8005350:	b570      	push	{r4, r5, r6, lr}
 8005352:	460e      	mov	r6, r1
 8005354:	4605      	mov	r5, r0
 8005356:	b118      	cbz	r0, 8005360 <_puts_r+0x10>
 8005358:	6983      	ldr	r3, [r0, #24]
 800535a:	b90b      	cbnz	r3, 8005360 <_puts_r+0x10>
 800535c:	f000 fa1e 	bl	800579c <__sinit>
 8005360:	69ab      	ldr	r3, [r5, #24]
 8005362:	68ac      	ldr	r4, [r5, #8]
 8005364:	b913      	cbnz	r3, 800536c <_puts_r+0x1c>
 8005366:	4628      	mov	r0, r5
 8005368:	f000 fa18 	bl	800579c <__sinit>
 800536c:	4b22      	ldr	r3, [pc, #136]	; (80053f8 <_puts_r+0xa8>)
 800536e:	429c      	cmp	r4, r3
 8005370:	d101      	bne.n	8005376 <_puts_r+0x26>
 8005372:	686c      	ldr	r4, [r5, #4]
 8005374:	e008      	b.n	8005388 <_puts_r+0x38>
 8005376:	4b21      	ldr	r3, [pc, #132]	; (80053fc <_puts_r+0xac>)
 8005378:	429c      	cmp	r4, r3
 800537a:	d101      	bne.n	8005380 <_puts_r+0x30>
 800537c:	68ac      	ldr	r4, [r5, #8]
 800537e:	e003      	b.n	8005388 <_puts_r+0x38>
 8005380:	4b1f      	ldr	r3, [pc, #124]	; (8005400 <_puts_r+0xb0>)
 8005382:	429c      	cmp	r4, r3
 8005384:	bf08      	it	eq
 8005386:	68ec      	ldreq	r4, [r5, #12]
 8005388:	89a3      	ldrh	r3, [r4, #12]
 800538a:	071b      	lsls	r3, r3, #28
 800538c:	d501      	bpl.n	8005392 <_puts_r+0x42>
 800538e:	6923      	ldr	r3, [r4, #16]
 8005390:	b93b      	cbnz	r3, 80053a2 <_puts_r+0x52>
 8005392:	4621      	mov	r1, r4
 8005394:	4628      	mov	r0, r5
 8005396:	f000 f8a1 	bl	80054dc <__swsetup_r>
 800539a:	b110      	cbz	r0, 80053a2 <_puts_r+0x52>
 800539c:	f04f 30ff 	mov.w	r0, #4294967295
 80053a0:	bd70      	pop	{r4, r5, r6, pc}
 80053a2:	3e01      	subs	r6, #1
 80053a4:	68a3      	ldr	r3, [r4, #8]
 80053a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80053aa:	3b01      	subs	r3, #1
 80053ac:	60a3      	str	r3, [r4, #8]
 80053ae:	b191      	cbz	r1, 80053d6 <_puts_r+0x86>
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	da04      	bge.n	80053be <_puts_r+0x6e>
 80053b4:	69a2      	ldr	r2, [r4, #24]
 80053b6:	4293      	cmp	r3, r2
 80053b8:	db06      	blt.n	80053c8 <_puts_r+0x78>
 80053ba:	290a      	cmp	r1, #10
 80053bc:	d004      	beq.n	80053c8 <_puts_r+0x78>
 80053be:	6823      	ldr	r3, [r4, #0]
 80053c0:	1c5a      	adds	r2, r3, #1
 80053c2:	6022      	str	r2, [r4, #0]
 80053c4:	7019      	strb	r1, [r3, #0]
 80053c6:	e7ed      	b.n	80053a4 <_puts_r+0x54>
 80053c8:	4622      	mov	r2, r4
 80053ca:	4628      	mov	r0, r5
 80053cc:	f000 f832 	bl	8005434 <__swbuf_r>
 80053d0:	3001      	adds	r0, #1
 80053d2:	d1e7      	bne.n	80053a4 <_puts_r+0x54>
 80053d4:	e7e2      	b.n	800539c <_puts_r+0x4c>
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	da08      	bge.n	80053ec <_puts_r+0x9c>
 80053da:	4622      	mov	r2, r4
 80053dc:	210a      	movs	r1, #10
 80053de:	4628      	mov	r0, r5
 80053e0:	f000 f828 	bl	8005434 <__swbuf_r>
 80053e4:	3001      	adds	r0, #1
 80053e6:	d0d9      	beq.n	800539c <_puts_r+0x4c>
 80053e8:	200a      	movs	r0, #10
 80053ea:	bd70      	pop	{r4, r5, r6, pc}
 80053ec:	6823      	ldr	r3, [r4, #0]
 80053ee:	200a      	movs	r0, #10
 80053f0:	1c5a      	adds	r2, r3, #1
 80053f2:	6022      	str	r2, [r4, #0]
 80053f4:	7018      	strb	r0, [r3, #0]
 80053f6:	bd70      	pop	{r4, r5, r6, pc}
 80053f8:	08006180 	.word	0x08006180
 80053fc:	080061a0 	.word	0x080061a0
 8005400:	080061c0 	.word	0x080061c0

08005404 <puts>:
 8005404:	4b02      	ldr	r3, [pc, #8]	; (8005410 <puts+0xc>)
 8005406:	4601      	mov	r1, r0
 8005408:	6818      	ldr	r0, [r3, #0]
 800540a:	f7ff bfa1 	b.w	8005350 <_puts_r>
 800540e:	bf00      	nop
 8005410:	20000094 	.word	0x20000094

08005414 <_sbrk_r>:
 8005414:	b538      	push	{r3, r4, r5, lr}
 8005416:	4c06      	ldr	r4, [pc, #24]	; (8005430 <_sbrk_r+0x1c>)
 8005418:	2300      	movs	r3, #0
 800541a:	4605      	mov	r5, r0
 800541c:	4608      	mov	r0, r1
 800541e:	6023      	str	r3, [r4, #0]
 8005420:	f7ff fdfe 	bl	8005020 <_sbrk>
 8005424:	1c43      	adds	r3, r0, #1
 8005426:	d102      	bne.n	800542e <_sbrk_r+0x1a>
 8005428:	6823      	ldr	r3, [r4, #0]
 800542a:	b103      	cbz	r3, 800542e <_sbrk_r+0x1a>
 800542c:	602b      	str	r3, [r5, #0]
 800542e:	bd38      	pop	{r3, r4, r5, pc}
 8005430:	20002c28 	.word	0x20002c28

08005434 <__swbuf_r>:
 8005434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005436:	460f      	mov	r7, r1
 8005438:	4614      	mov	r4, r2
 800543a:	4606      	mov	r6, r0
 800543c:	b118      	cbz	r0, 8005446 <__swbuf_r+0x12>
 800543e:	6983      	ldr	r3, [r0, #24]
 8005440:	b90b      	cbnz	r3, 8005446 <__swbuf_r+0x12>
 8005442:	f000 f9ab 	bl	800579c <__sinit>
 8005446:	4b22      	ldr	r3, [pc, #136]	; (80054d0 <__swbuf_r+0x9c>)
 8005448:	429c      	cmp	r4, r3
 800544a:	d101      	bne.n	8005450 <__swbuf_r+0x1c>
 800544c:	6874      	ldr	r4, [r6, #4]
 800544e:	e008      	b.n	8005462 <__swbuf_r+0x2e>
 8005450:	4b20      	ldr	r3, [pc, #128]	; (80054d4 <__swbuf_r+0xa0>)
 8005452:	429c      	cmp	r4, r3
 8005454:	d101      	bne.n	800545a <__swbuf_r+0x26>
 8005456:	68b4      	ldr	r4, [r6, #8]
 8005458:	e003      	b.n	8005462 <__swbuf_r+0x2e>
 800545a:	4b1f      	ldr	r3, [pc, #124]	; (80054d8 <__swbuf_r+0xa4>)
 800545c:	429c      	cmp	r4, r3
 800545e:	bf08      	it	eq
 8005460:	68f4      	ldreq	r4, [r6, #12]
 8005462:	69a3      	ldr	r3, [r4, #24]
 8005464:	60a3      	str	r3, [r4, #8]
 8005466:	89a3      	ldrh	r3, [r4, #12]
 8005468:	071a      	lsls	r2, r3, #28
 800546a:	d509      	bpl.n	8005480 <__swbuf_r+0x4c>
 800546c:	6923      	ldr	r3, [r4, #16]
 800546e:	b13b      	cbz	r3, 8005480 <__swbuf_r+0x4c>
 8005470:	6823      	ldr	r3, [r4, #0]
 8005472:	6920      	ldr	r0, [r4, #16]
 8005474:	1a18      	subs	r0, r3, r0
 8005476:	6963      	ldr	r3, [r4, #20]
 8005478:	4298      	cmp	r0, r3
 800547a:	b2fd      	uxtb	r5, r7
 800547c:	db0f      	blt.n	800549e <__swbuf_r+0x6a>
 800547e:	e008      	b.n	8005492 <__swbuf_r+0x5e>
 8005480:	4621      	mov	r1, r4
 8005482:	4630      	mov	r0, r6
 8005484:	f000 f82a 	bl	80054dc <__swsetup_r>
 8005488:	2800      	cmp	r0, #0
 800548a:	d0f1      	beq.n	8005470 <__swbuf_r+0x3c>
 800548c:	f04f 30ff 	mov.w	r0, #4294967295
 8005490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005492:	4621      	mov	r1, r4
 8005494:	4630      	mov	r0, r6
 8005496:	f000 f917 	bl	80056c8 <_fflush_r>
 800549a:	2800      	cmp	r0, #0
 800549c:	d1f6      	bne.n	800548c <__swbuf_r+0x58>
 800549e:	68a3      	ldr	r3, [r4, #8]
 80054a0:	3b01      	subs	r3, #1
 80054a2:	60a3      	str	r3, [r4, #8]
 80054a4:	6823      	ldr	r3, [r4, #0]
 80054a6:	1c5a      	adds	r2, r3, #1
 80054a8:	6022      	str	r2, [r4, #0]
 80054aa:	701f      	strb	r7, [r3, #0]
 80054ac:	6962      	ldr	r2, [r4, #20]
 80054ae:	1c43      	adds	r3, r0, #1
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d004      	beq.n	80054be <__swbuf_r+0x8a>
 80054b4:	89a3      	ldrh	r3, [r4, #12]
 80054b6:	07db      	lsls	r3, r3, #31
 80054b8:	d507      	bpl.n	80054ca <__swbuf_r+0x96>
 80054ba:	2d0a      	cmp	r5, #10
 80054bc:	d105      	bne.n	80054ca <__swbuf_r+0x96>
 80054be:	4621      	mov	r1, r4
 80054c0:	4630      	mov	r0, r6
 80054c2:	f000 f901 	bl	80056c8 <_fflush_r>
 80054c6:	2800      	cmp	r0, #0
 80054c8:	d1e0      	bne.n	800548c <__swbuf_r+0x58>
 80054ca:	4628      	mov	r0, r5
 80054cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054ce:	bf00      	nop
 80054d0:	08006180 	.word	0x08006180
 80054d4:	080061a0 	.word	0x080061a0
 80054d8:	080061c0 	.word	0x080061c0

080054dc <__swsetup_r>:
 80054dc:	4b32      	ldr	r3, [pc, #200]	; (80055a8 <__swsetup_r+0xcc>)
 80054de:	b570      	push	{r4, r5, r6, lr}
 80054e0:	681d      	ldr	r5, [r3, #0]
 80054e2:	4606      	mov	r6, r0
 80054e4:	460c      	mov	r4, r1
 80054e6:	b125      	cbz	r5, 80054f2 <__swsetup_r+0x16>
 80054e8:	69ab      	ldr	r3, [r5, #24]
 80054ea:	b913      	cbnz	r3, 80054f2 <__swsetup_r+0x16>
 80054ec:	4628      	mov	r0, r5
 80054ee:	f000 f955 	bl	800579c <__sinit>
 80054f2:	4b2e      	ldr	r3, [pc, #184]	; (80055ac <__swsetup_r+0xd0>)
 80054f4:	429c      	cmp	r4, r3
 80054f6:	d101      	bne.n	80054fc <__swsetup_r+0x20>
 80054f8:	686c      	ldr	r4, [r5, #4]
 80054fa:	e008      	b.n	800550e <__swsetup_r+0x32>
 80054fc:	4b2c      	ldr	r3, [pc, #176]	; (80055b0 <__swsetup_r+0xd4>)
 80054fe:	429c      	cmp	r4, r3
 8005500:	d101      	bne.n	8005506 <__swsetup_r+0x2a>
 8005502:	68ac      	ldr	r4, [r5, #8]
 8005504:	e003      	b.n	800550e <__swsetup_r+0x32>
 8005506:	4b2b      	ldr	r3, [pc, #172]	; (80055b4 <__swsetup_r+0xd8>)
 8005508:	429c      	cmp	r4, r3
 800550a:	bf08      	it	eq
 800550c:	68ec      	ldreq	r4, [r5, #12]
 800550e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005512:	b29a      	uxth	r2, r3
 8005514:	0715      	lsls	r5, r2, #28
 8005516:	d41d      	bmi.n	8005554 <__swsetup_r+0x78>
 8005518:	06d0      	lsls	r0, r2, #27
 800551a:	d402      	bmi.n	8005522 <__swsetup_r+0x46>
 800551c:	2209      	movs	r2, #9
 800551e:	6032      	str	r2, [r6, #0]
 8005520:	e03a      	b.n	8005598 <__swsetup_r+0xbc>
 8005522:	0751      	lsls	r1, r2, #29
 8005524:	d512      	bpl.n	800554c <__swsetup_r+0x70>
 8005526:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005528:	b141      	cbz	r1, 800553c <__swsetup_r+0x60>
 800552a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800552e:	4299      	cmp	r1, r3
 8005530:	d002      	beq.n	8005538 <__swsetup_r+0x5c>
 8005532:	4630      	mov	r0, r6
 8005534:	f7ff fe48 	bl	80051c8 <_free_r>
 8005538:	2300      	movs	r3, #0
 800553a:	6363      	str	r3, [r4, #52]	; 0x34
 800553c:	89a3      	ldrh	r3, [r4, #12]
 800553e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005542:	81a3      	strh	r3, [r4, #12]
 8005544:	2300      	movs	r3, #0
 8005546:	6063      	str	r3, [r4, #4]
 8005548:	6923      	ldr	r3, [r4, #16]
 800554a:	6023      	str	r3, [r4, #0]
 800554c:	89a3      	ldrh	r3, [r4, #12]
 800554e:	f043 0308 	orr.w	r3, r3, #8
 8005552:	81a3      	strh	r3, [r4, #12]
 8005554:	6923      	ldr	r3, [r4, #16]
 8005556:	b94b      	cbnz	r3, 800556c <__swsetup_r+0x90>
 8005558:	89a3      	ldrh	r3, [r4, #12]
 800555a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800555e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005562:	d003      	beq.n	800556c <__swsetup_r+0x90>
 8005564:	4621      	mov	r1, r4
 8005566:	4630      	mov	r0, r6
 8005568:	f000 f9c6 	bl	80058f8 <__smakebuf_r>
 800556c:	89a2      	ldrh	r2, [r4, #12]
 800556e:	f012 0301 	ands.w	r3, r2, #1
 8005572:	d005      	beq.n	8005580 <__swsetup_r+0xa4>
 8005574:	2300      	movs	r3, #0
 8005576:	60a3      	str	r3, [r4, #8]
 8005578:	6963      	ldr	r3, [r4, #20]
 800557a:	425b      	negs	r3, r3
 800557c:	61a3      	str	r3, [r4, #24]
 800557e:	e003      	b.n	8005588 <__swsetup_r+0xac>
 8005580:	0792      	lsls	r2, r2, #30
 8005582:	bf58      	it	pl
 8005584:	6963      	ldrpl	r3, [r4, #20]
 8005586:	60a3      	str	r3, [r4, #8]
 8005588:	6923      	ldr	r3, [r4, #16]
 800558a:	b95b      	cbnz	r3, 80055a4 <__swsetup_r+0xc8>
 800558c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005590:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8005594:	b280      	uxth	r0, r0
 8005596:	b130      	cbz	r0, 80055a6 <__swsetup_r+0xca>
 8005598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800559c:	81a3      	strh	r3, [r4, #12]
 800559e:	f04f 30ff 	mov.w	r0, #4294967295
 80055a2:	bd70      	pop	{r4, r5, r6, pc}
 80055a4:	2000      	movs	r0, #0
 80055a6:	bd70      	pop	{r4, r5, r6, pc}
 80055a8:	20000094 	.word	0x20000094
 80055ac:	08006180 	.word	0x08006180
 80055b0:	080061a0 	.word	0x080061a0
 80055b4:	080061c0 	.word	0x080061c0

080055b8 <__sflush_r>:
 80055b8:	898a      	ldrh	r2, [r1, #12]
 80055ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055be:	4605      	mov	r5, r0
 80055c0:	0710      	lsls	r0, r2, #28
 80055c2:	460c      	mov	r4, r1
 80055c4:	d459      	bmi.n	800567a <__sflush_r+0xc2>
 80055c6:	684b      	ldr	r3, [r1, #4]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	dc02      	bgt.n	80055d2 <__sflush_r+0x1a>
 80055cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	dd17      	ble.n	8005602 <__sflush_r+0x4a>
 80055d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055d4:	b1ae      	cbz	r6, 8005602 <__sflush_r+0x4a>
 80055d6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80055da:	2300      	movs	r3, #0
 80055dc:	b292      	uxth	r2, r2
 80055de:	682f      	ldr	r7, [r5, #0]
 80055e0:	602b      	str	r3, [r5, #0]
 80055e2:	b10a      	cbz	r2, 80055e8 <__sflush_r+0x30>
 80055e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80055e6:	e015      	b.n	8005614 <__sflush_r+0x5c>
 80055e8:	6a21      	ldr	r1, [r4, #32]
 80055ea:	2301      	movs	r3, #1
 80055ec:	4628      	mov	r0, r5
 80055ee:	47b0      	blx	r6
 80055f0:	1c41      	adds	r1, r0, #1
 80055f2:	d10f      	bne.n	8005614 <__sflush_r+0x5c>
 80055f4:	682b      	ldr	r3, [r5, #0]
 80055f6:	b16b      	cbz	r3, 8005614 <__sflush_r+0x5c>
 80055f8:	2b1d      	cmp	r3, #29
 80055fa:	d001      	beq.n	8005600 <__sflush_r+0x48>
 80055fc:	2b16      	cmp	r3, #22
 80055fe:	d103      	bne.n	8005608 <__sflush_r+0x50>
 8005600:	602f      	str	r7, [r5, #0]
 8005602:	2000      	movs	r0, #0
 8005604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005608:	89a3      	ldrh	r3, [r4, #12]
 800560a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800560e:	81a3      	strh	r3, [r4, #12]
 8005610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005614:	89a3      	ldrh	r3, [r4, #12]
 8005616:	075a      	lsls	r2, r3, #29
 8005618:	d505      	bpl.n	8005626 <__sflush_r+0x6e>
 800561a:	6863      	ldr	r3, [r4, #4]
 800561c:	1ac0      	subs	r0, r0, r3
 800561e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005620:	b10b      	cbz	r3, 8005626 <__sflush_r+0x6e>
 8005622:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005624:	1ac0      	subs	r0, r0, r3
 8005626:	2300      	movs	r3, #0
 8005628:	4602      	mov	r2, r0
 800562a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800562c:	6a21      	ldr	r1, [r4, #32]
 800562e:	4628      	mov	r0, r5
 8005630:	47b0      	blx	r6
 8005632:	1c43      	adds	r3, r0, #1
 8005634:	89a3      	ldrh	r3, [r4, #12]
 8005636:	d106      	bne.n	8005646 <__sflush_r+0x8e>
 8005638:	6829      	ldr	r1, [r5, #0]
 800563a:	291d      	cmp	r1, #29
 800563c:	d83a      	bhi.n	80056b4 <__sflush_r+0xfc>
 800563e:	4a21      	ldr	r2, [pc, #132]	; (80056c4 <__sflush_r+0x10c>)
 8005640:	40ca      	lsrs	r2, r1
 8005642:	07d6      	lsls	r6, r2, #31
 8005644:	d536      	bpl.n	80056b4 <__sflush_r+0xfc>
 8005646:	2200      	movs	r2, #0
 8005648:	6062      	str	r2, [r4, #4]
 800564a:	04d9      	lsls	r1, r3, #19
 800564c:	6922      	ldr	r2, [r4, #16]
 800564e:	6022      	str	r2, [r4, #0]
 8005650:	d504      	bpl.n	800565c <__sflush_r+0xa4>
 8005652:	1c42      	adds	r2, r0, #1
 8005654:	d101      	bne.n	800565a <__sflush_r+0xa2>
 8005656:	682b      	ldr	r3, [r5, #0]
 8005658:	b903      	cbnz	r3, 800565c <__sflush_r+0xa4>
 800565a:	6560      	str	r0, [r4, #84]	; 0x54
 800565c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800565e:	602f      	str	r7, [r5, #0]
 8005660:	2900      	cmp	r1, #0
 8005662:	d0ce      	beq.n	8005602 <__sflush_r+0x4a>
 8005664:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005668:	4299      	cmp	r1, r3
 800566a:	d002      	beq.n	8005672 <__sflush_r+0xba>
 800566c:	4628      	mov	r0, r5
 800566e:	f7ff fdab 	bl	80051c8 <_free_r>
 8005672:	2000      	movs	r0, #0
 8005674:	6360      	str	r0, [r4, #52]	; 0x34
 8005676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800567a:	690f      	ldr	r7, [r1, #16]
 800567c:	2f00      	cmp	r7, #0
 800567e:	d0c0      	beq.n	8005602 <__sflush_r+0x4a>
 8005680:	0793      	lsls	r3, r2, #30
 8005682:	680e      	ldr	r6, [r1, #0]
 8005684:	bf08      	it	eq
 8005686:	694b      	ldreq	r3, [r1, #20]
 8005688:	600f      	str	r7, [r1, #0]
 800568a:	bf18      	it	ne
 800568c:	2300      	movne	r3, #0
 800568e:	ebc7 0806 	rsb	r8, r7, r6
 8005692:	608b      	str	r3, [r1, #8]
 8005694:	e002      	b.n	800569c <__sflush_r+0xe4>
 8005696:	4407      	add	r7, r0
 8005698:	ebc0 0808 	rsb	r8, r0, r8
 800569c:	f1b8 0f00 	cmp.w	r8, #0
 80056a0:	ddaf      	ble.n	8005602 <__sflush_r+0x4a>
 80056a2:	4643      	mov	r3, r8
 80056a4:	463a      	mov	r2, r7
 80056a6:	6a21      	ldr	r1, [r4, #32]
 80056a8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80056aa:	4628      	mov	r0, r5
 80056ac:	47b0      	blx	r6
 80056ae:	2800      	cmp	r0, #0
 80056b0:	dcf1      	bgt.n	8005696 <__sflush_r+0xde>
 80056b2:	89a3      	ldrh	r3, [r4, #12]
 80056b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056b8:	81a3      	strh	r3, [r4, #12]
 80056ba:	f04f 30ff 	mov.w	r0, #4294967295
 80056be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056c2:	bf00      	nop
 80056c4:	20400001 	.word	0x20400001

080056c8 <_fflush_r>:
 80056c8:	b538      	push	{r3, r4, r5, lr}
 80056ca:	690b      	ldr	r3, [r1, #16]
 80056cc:	4605      	mov	r5, r0
 80056ce:	460c      	mov	r4, r1
 80056d0:	b1db      	cbz	r3, 800570a <_fflush_r+0x42>
 80056d2:	b118      	cbz	r0, 80056dc <_fflush_r+0x14>
 80056d4:	6983      	ldr	r3, [r0, #24]
 80056d6:	b90b      	cbnz	r3, 80056dc <_fflush_r+0x14>
 80056d8:	f000 f860 	bl	800579c <__sinit>
 80056dc:	4b0c      	ldr	r3, [pc, #48]	; (8005710 <_fflush_r+0x48>)
 80056de:	429c      	cmp	r4, r3
 80056e0:	d101      	bne.n	80056e6 <_fflush_r+0x1e>
 80056e2:	686c      	ldr	r4, [r5, #4]
 80056e4:	e008      	b.n	80056f8 <_fflush_r+0x30>
 80056e6:	4b0b      	ldr	r3, [pc, #44]	; (8005714 <_fflush_r+0x4c>)
 80056e8:	429c      	cmp	r4, r3
 80056ea:	d101      	bne.n	80056f0 <_fflush_r+0x28>
 80056ec:	68ac      	ldr	r4, [r5, #8]
 80056ee:	e003      	b.n	80056f8 <_fflush_r+0x30>
 80056f0:	4b09      	ldr	r3, [pc, #36]	; (8005718 <_fflush_r+0x50>)
 80056f2:	429c      	cmp	r4, r3
 80056f4:	bf08      	it	eq
 80056f6:	68ec      	ldreq	r4, [r5, #12]
 80056f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056fc:	b12b      	cbz	r3, 800570a <_fflush_r+0x42>
 80056fe:	4621      	mov	r1, r4
 8005700:	4628      	mov	r0, r5
 8005702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005706:	f7ff bf57 	b.w	80055b8 <__sflush_r>
 800570a:	2000      	movs	r0, #0
 800570c:	bd38      	pop	{r3, r4, r5, pc}
 800570e:	bf00      	nop
 8005710:	08006180 	.word	0x08006180
 8005714:	080061a0 	.word	0x080061a0
 8005718:	080061c0 	.word	0x080061c0

0800571c <_cleanup_r>:
 800571c:	4901      	ldr	r1, [pc, #4]	; (8005724 <_cleanup_r+0x8>)
 800571e:	f000 b8a9 	b.w	8005874 <_fwalk_reent>
 8005722:	bf00      	nop
 8005724:	080056c9 	.word	0x080056c9

08005728 <std.isra.0>:
 8005728:	2300      	movs	r3, #0
 800572a:	b510      	push	{r4, lr}
 800572c:	4604      	mov	r4, r0
 800572e:	6003      	str	r3, [r0, #0]
 8005730:	6043      	str	r3, [r0, #4]
 8005732:	6083      	str	r3, [r0, #8]
 8005734:	8181      	strh	r1, [r0, #12]
 8005736:	6643      	str	r3, [r0, #100]	; 0x64
 8005738:	81c2      	strh	r2, [r0, #14]
 800573a:	6103      	str	r3, [r0, #16]
 800573c:	6143      	str	r3, [r0, #20]
 800573e:	6183      	str	r3, [r0, #24]
 8005740:	4619      	mov	r1, r3
 8005742:	2208      	movs	r2, #8
 8005744:	305c      	adds	r0, #92	; 0x5c
 8005746:	f7ff fd36 	bl	80051b6 <memset>
 800574a:	4b05      	ldr	r3, [pc, #20]	; (8005760 <std.isra.0+0x38>)
 800574c:	6263      	str	r3, [r4, #36]	; 0x24
 800574e:	4b05      	ldr	r3, [pc, #20]	; (8005764 <std.isra.0+0x3c>)
 8005750:	62a3      	str	r3, [r4, #40]	; 0x28
 8005752:	4b05      	ldr	r3, [pc, #20]	; (8005768 <std.isra.0+0x40>)
 8005754:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005756:	4b05      	ldr	r3, [pc, #20]	; (800576c <std.isra.0+0x44>)
 8005758:	6224      	str	r4, [r4, #32]
 800575a:	6323      	str	r3, [r4, #48]	; 0x30
 800575c:	bd10      	pop	{r4, pc}
 800575e:	bf00      	nop
 8005760:	08005f39 	.word	0x08005f39
 8005764:	08005f5b 	.word	0x08005f5b
 8005768:	08005f93 	.word	0x08005f93
 800576c:	08005fb7 	.word	0x08005fb7

08005770 <__sfmoreglue>:
 8005770:	b570      	push	{r4, r5, r6, lr}
 8005772:	2368      	movs	r3, #104	; 0x68
 8005774:	1e4d      	subs	r5, r1, #1
 8005776:	435d      	muls	r5, r3
 8005778:	460e      	mov	r6, r1
 800577a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800577e:	f7ff fd71 	bl	8005264 <_malloc_r>
 8005782:	4604      	mov	r4, r0
 8005784:	b140      	cbz	r0, 8005798 <__sfmoreglue+0x28>
 8005786:	2100      	movs	r1, #0
 8005788:	e880 0042 	stmia.w	r0, {r1, r6}
 800578c:	300c      	adds	r0, #12
 800578e:	60a0      	str	r0, [r4, #8]
 8005790:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005794:	f7ff fd0f 	bl	80051b6 <memset>
 8005798:	4620      	mov	r0, r4
 800579a:	bd70      	pop	{r4, r5, r6, pc}

0800579c <__sinit>:
 800579c:	6983      	ldr	r3, [r0, #24]
 800579e:	b510      	push	{r4, lr}
 80057a0:	4604      	mov	r4, r0
 80057a2:	bb33      	cbnz	r3, 80057f2 <__sinit+0x56>
 80057a4:	6483      	str	r3, [r0, #72]	; 0x48
 80057a6:	64c3      	str	r3, [r0, #76]	; 0x4c
 80057a8:	6503      	str	r3, [r0, #80]	; 0x50
 80057aa:	4b12      	ldr	r3, [pc, #72]	; (80057f4 <__sinit+0x58>)
 80057ac:	4a12      	ldr	r2, [pc, #72]	; (80057f8 <__sinit+0x5c>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6282      	str	r2, [r0, #40]	; 0x28
 80057b2:	4298      	cmp	r0, r3
 80057b4:	bf04      	itt	eq
 80057b6:	2301      	moveq	r3, #1
 80057b8:	6183      	streq	r3, [r0, #24]
 80057ba:	f000 f81f 	bl	80057fc <__sfp>
 80057be:	6060      	str	r0, [r4, #4]
 80057c0:	4620      	mov	r0, r4
 80057c2:	f000 f81b 	bl	80057fc <__sfp>
 80057c6:	60a0      	str	r0, [r4, #8]
 80057c8:	4620      	mov	r0, r4
 80057ca:	f000 f817 	bl	80057fc <__sfp>
 80057ce:	2200      	movs	r2, #0
 80057d0:	60e0      	str	r0, [r4, #12]
 80057d2:	2104      	movs	r1, #4
 80057d4:	6860      	ldr	r0, [r4, #4]
 80057d6:	f7ff ffa7 	bl	8005728 <std.isra.0>
 80057da:	2201      	movs	r2, #1
 80057dc:	2109      	movs	r1, #9
 80057de:	68a0      	ldr	r0, [r4, #8]
 80057e0:	f7ff ffa2 	bl	8005728 <std.isra.0>
 80057e4:	2202      	movs	r2, #2
 80057e6:	2112      	movs	r1, #18
 80057e8:	68e0      	ldr	r0, [r4, #12]
 80057ea:	f7ff ff9d 	bl	8005728 <std.isra.0>
 80057ee:	2301      	movs	r3, #1
 80057f0:	61a3      	str	r3, [r4, #24]
 80057f2:	bd10      	pop	{r4, pc}
 80057f4:	0800617c 	.word	0x0800617c
 80057f8:	0800571d 	.word	0x0800571d

080057fc <__sfp>:
 80057fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057fe:	4b1c      	ldr	r3, [pc, #112]	; (8005870 <__sfp+0x74>)
 8005800:	681e      	ldr	r6, [r3, #0]
 8005802:	69b3      	ldr	r3, [r6, #24]
 8005804:	4607      	mov	r7, r0
 8005806:	b913      	cbnz	r3, 800580e <__sfp+0x12>
 8005808:	4630      	mov	r0, r6
 800580a:	f7ff ffc7 	bl	800579c <__sinit>
 800580e:	3648      	adds	r6, #72	; 0x48
 8005810:	68b4      	ldr	r4, [r6, #8]
 8005812:	6873      	ldr	r3, [r6, #4]
 8005814:	3b01      	subs	r3, #1
 8005816:	d404      	bmi.n	8005822 <__sfp+0x26>
 8005818:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800581c:	b17d      	cbz	r5, 800583e <__sfp+0x42>
 800581e:	3468      	adds	r4, #104	; 0x68
 8005820:	e7f8      	b.n	8005814 <__sfp+0x18>
 8005822:	6833      	ldr	r3, [r6, #0]
 8005824:	b10b      	cbz	r3, 800582a <__sfp+0x2e>
 8005826:	6836      	ldr	r6, [r6, #0]
 8005828:	e7f2      	b.n	8005810 <__sfp+0x14>
 800582a:	2104      	movs	r1, #4
 800582c:	4638      	mov	r0, r7
 800582e:	f7ff ff9f 	bl	8005770 <__sfmoreglue>
 8005832:	6030      	str	r0, [r6, #0]
 8005834:	2800      	cmp	r0, #0
 8005836:	d1f6      	bne.n	8005826 <__sfp+0x2a>
 8005838:	230c      	movs	r3, #12
 800583a:	603b      	str	r3, [r7, #0]
 800583c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800583e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005842:	81e3      	strh	r3, [r4, #14]
 8005844:	2301      	movs	r3, #1
 8005846:	81a3      	strh	r3, [r4, #12]
 8005848:	6665      	str	r5, [r4, #100]	; 0x64
 800584a:	6025      	str	r5, [r4, #0]
 800584c:	60a5      	str	r5, [r4, #8]
 800584e:	6065      	str	r5, [r4, #4]
 8005850:	6125      	str	r5, [r4, #16]
 8005852:	6165      	str	r5, [r4, #20]
 8005854:	61a5      	str	r5, [r4, #24]
 8005856:	2208      	movs	r2, #8
 8005858:	4629      	mov	r1, r5
 800585a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800585e:	f7ff fcaa 	bl	80051b6 <memset>
 8005862:	6365      	str	r5, [r4, #52]	; 0x34
 8005864:	63a5      	str	r5, [r4, #56]	; 0x38
 8005866:	64a5      	str	r5, [r4, #72]	; 0x48
 8005868:	64e5      	str	r5, [r4, #76]	; 0x4c
 800586a:	4620      	mov	r0, r4
 800586c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800586e:	bf00      	nop
 8005870:	0800617c 	.word	0x0800617c

08005874 <_fwalk_reent>:
 8005874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005878:	4680      	mov	r8, r0
 800587a:	4689      	mov	r9, r1
 800587c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005880:	2600      	movs	r6, #0
 8005882:	b194      	cbz	r4, 80058aa <_fwalk_reent+0x36>
 8005884:	68a5      	ldr	r5, [r4, #8]
 8005886:	6867      	ldr	r7, [r4, #4]
 8005888:	3f01      	subs	r7, #1
 800588a:	d40c      	bmi.n	80058a6 <_fwalk_reent+0x32>
 800588c:	89ab      	ldrh	r3, [r5, #12]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d907      	bls.n	80058a2 <_fwalk_reent+0x2e>
 8005892:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005896:	3301      	adds	r3, #1
 8005898:	d003      	beq.n	80058a2 <_fwalk_reent+0x2e>
 800589a:	4629      	mov	r1, r5
 800589c:	4640      	mov	r0, r8
 800589e:	47c8      	blx	r9
 80058a0:	4306      	orrs	r6, r0
 80058a2:	3568      	adds	r5, #104	; 0x68
 80058a4:	e7f0      	b.n	8005888 <_fwalk_reent+0x14>
 80058a6:	6824      	ldr	r4, [r4, #0]
 80058a8:	e7eb      	b.n	8005882 <_fwalk_reent+0xe>
 80058aa:	4630      	mov	r0, r6
 80058ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080058b0 <__swhatbuf_r>:
 80058b0:	b570      	push	{r4, r5, r6, lr}
 80058b2:	460e      	mov	r6, r1
 80058b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058b8:	2900      	cmp	r1, #0
 80058ba:	b090      	sub	sp, #64	; 0x40
 80058bc:	4614      	mov	r4, r2
 80058be:	461d      	mov	r5, r3
 80058c0:	da06      	bge.n	80058d0 <__swhatbuf_r+0x20>
 80058c2:	2300      	movs	r3, #0
 80058c4:	602b      	str	r3, [r5, #0]
 80058c6:	89b3      	ldrh	r3, [r6, #12]
 80058c8:	061a      	lsls	r2, r3, #24
 80058ca:	d50e      	bpl.n	80058ea <__swhatbuf_r+0x3a>
 80058cc:	2340      	movs	r3, #64	; 0x40
 80058ce:	e00e      	b.n	80058ee <__swhatbuf_r+0x3e>
 80058d0:	aa01      	add	r2, sp, #4
 80058d2:	f000 fb97 	bl	8006004 <_fstat_r>
 80058d6:	2800      	cmp	r0, #0
 80058d8:	dbf3      	blt.n	80058c2 <__swhatbuf_r+0x12>
 80058da:	9a02      	ldr	r2, [sp, #8]
 80058dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80058e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80058e4:	425a      	negs	r2, r3
 80058e6:	415a      	adcs	r2, r3
 80058e8:	602a      	str	r2, [r5, #0]
 80058ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058ee:	2000      	movs	r0, #0
 80058f0:	6023      	str	r3, [r4, #0]
 80058f2:	b010      	add	sp, #64	; 0x40
 80058f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080058f8 <__smakebuf_r>:
 80058f8:	898b      	ldrh	r3, [r1, #12]
 80058fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80058fc:	079e      	lsls	r6, r3, #30
 80058fe:	4605      	mov	r5, r0
 8005900:	460c      	mov	r4, r1
 8005902:	d410      	bmi.n	8005926 <__smakebuf_r+0x2e>
 8005904:	ab01      	add	r3, sp, #4
 8005906:	466a      	mov	r2, sp
 8005908:	f7ff ffd2 	bl	80058b0 <__swhatbuf_r>
 800590c:	9900      	ldr	r1, [sp, #0]
 800590e:	4606      	mov	r6, r0
 8005910:	4628      	mov	r0, r5
 8005912:	f7ff fca7 	bl	8005264 <_malloc_r>
 8005916:	b968      	cbnz	r0, 8005934 <__smakebuf_r+0x3c>
 8005918:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800591c:	059a      	lsls	r2, r3, #22
 800591e:	d422      	bmi.n	8005966 <__smakebuf_r+0x6e>
 8005920:	f043 0302 	orr.w	r3, r3, #2
 8005924:	81a3      	strh	r3, [r4, #12]
 8005926:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800592a:	6023      	str	r3, [r4, #0]
 800592c:	6123      	str	r3, [r4, #16]
 800592e:	2301      	movs	r3, #1
 8005930:	6163      	str	r3, [r4, #20]
 8005932:	e018      	b.n	8005966 <__smakebuf_r+0x6e>
 8005934:	4b0d      	ldr	r3, [pc, #52]	; (800596c <__smakebuf_r+0x74>)
 8005936:	62ab      	str	r3, [r5, #40]	; 0x28
 8005938:	89a3      	ldrh	r3, [r4, #12]
 800593a:	6020      	str	r0, [r4, #0]
 800593c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005940:	81a3      	strh	r3, [r4, #12]
 8005942:	9b00      	ldr	r3, [sp, #0]
 8005944:	6163      	str	r3, [r4, #20]
 8005946:	9b01      	ldr	r3, [sp, #4]
 8005948:	6120      	str	r0, [r4, #16]
 800594a:	b14b      	cbz	r3, 8005960 <__smakebuf_r+0x68>
 800594c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005950:	4628      	mov	r0, r5
 8005952:	f000 fb69 	bl	8006028 <_isatty_r>
 8005956:	b118      	cbz	r0, 8005960 <__smakebuf_r+0x68>
 8005958:	89a3      	ldrh	r3, [r4, #12]
 800595a:	f043 0301 	orr.w	r3, r3, #1
 800595e:	81a3      	strh	r3, [r4, #12]
 8005960:	89a0      	ldrh	r0, [r4, #12]
 8005962:	4330      	orrs	r0, r6
 8005964:	81a0      	strh	r0, [r4, #12]
 8005966:	b002      	add	sp, #8
 8005968:	bd70      	pop	{r4, r5, r6, pc}
 800596a:	bf00      	nop
 800596c:	0800571d 	.word	0x0800571d

08005970 <__malloc_lock>:
 8005970:	4770      	bx	lr

08005972 <__malloc_unlock>:
 8005972:	4770      	bx	lr

08005974 <__sfputc_r>:
 8005974:	6893      	ldr	r3, [r2, #8]
 8005976:	3b01      	subs	r3, #1
 8005978:	2b00      	cmp	r3, #0
 800597a:	b410      	push	{r4}
 800597c:	6093      	str	r3, [r2, #8]
 800597e:	da09      	bge.n	8005994 <__sfputc_r+0x20>
 8005980:	6994      	ldr	r4, [r2, #24]
 8005982:	42a3      	cmp	r3, r4
 8005984:	db02      	blt.n	800598c <__sfputc_r+0x18>
 8005986:	b2cb      	uxtb	r3, r1
 8005988:	2b0a      	cmp	r3, #10
 800598a:	d103      	bne.n	8005994 <__sfputc_r+0x20>
 800598c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005990:	f7ff bd50 	b.w	8005434 <__swbuf_r>
 8005994:	6813      	ldr	r3, [r2, #0]
 8005996:	1c58      	adds	r0, r3, #1
 8005998:	6010      	str	r0, [r2, #0]
 800599a:	7019      	strb	r1, [r3, #0]
 800599c:	b2c8      	uxtb	r0, r1
 800599e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <__sfputs_r>:
 80059a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059a6:	4606      	mov	r6, r0
 80059a8:	460f      	mov	r7, r1
 80059aa:	4614      	mov	r4, r2
 80059ac:	18d5      	adds	r5, r2, r3
 80059ae:	42ac      	cmp	r4, r5
 80059b0:	d008      	beq.n	80059c4 <__sfputs_r+0x20>
 80059b2:	463a      	mov	r2, r7
 80059b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059b8:	4630      	mov	r0, r6
 80059ba:	f7ff ffdb 	bl	8005974 <__sfputc_r>
 80059be:	1c43      	adds	r3, r0, #1
 80059c0:	d1f5      	bne.n	80059ae <__sfputs_r+0xa>
 80059c2:	e000      	b.n	80059c6 <__sfputs_r+0x22>
 80059c4:	2000      	movs	r0, #0
 80059c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080059c8 <_vfiprintf_r>:
 80059c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059cc:	b09d      	sub	sp, #116	; 0x74
 80059ce:	460c      	mov	r4, r1
 80059d0:	4617      	mov	r7, r2
 80059d2:	9303      	str	r3, [sp, #12]
 80059d4:	4606      	mov	r6, r0
 80059d6:	b118      	cbz	r0, 80059e0 <_vfiprintf_r+0x18>
 80059d8:	6983      	ldr	r3, [r0, #24]
 80059da:	b90b      	cbnz	r3, 80059e0 <_vfiprintf_r+0x18>
 80059dc:	f7ff fede 	bl	800579c <__sinit>
 80059e0:	4b7f      	ldr	r3, [pc, #508]	; (8005be0 <_vfiprintf_r+0x218>)
 80059e2:	429c      	cmp	r4, r3
 80059e4:	d101      	bne.n	80059ea <_vfiprintf_r+0x22>
 80059e6:	6874      	ldr	r4, [r6, #4]
 80059e8:	e008      	b.n	80059fc <_vfiprintf_r+0x34>
 80059ea:	4b7e      	ldr	r3, [pc, #504]	; (8005be4 <_vfiprintf_r+0x21c>)
 80059ec:	429c      	cmp	r4, r3
 80059ee:	d101      	bne.n	80059f4 <_vfiprintf_r+0x2c>
 80059f0:	68b4      	ldr	r4, [r6, #8]
 80059f2:	e003      	b.n	80059fc <_vfiprintf_r+0x34>
 80059f4:	4b7c      	ldr	r3, [pc, #496]	; (8005be8 <_vfiprintf_r+0x220>)
 80059f6:	429c      	cmp	r4, r3
 80059f8:	bf08      	it	eq
 80059fa:	68f4      	ldreq	r4, [r6, #12]
 80059fc:	89a3      	ldrh	r3, [r4, #12]
 80059fe:	0718      	lsls	r0, r3, #28
 8005a00:	d50c      	bpl.n	8005a1c <_vfiprintf_r+0x54>
 8005a02:	6923      	ldr	r3, [r4, #16]
 8005a04:	b153      	cbz	r3, 8005a1c <_vfiprintf_r+0x54>
 8005a06:	2300      	movs	r3, #0
 8005a08:	9309      	str	r3, [sp, #36]	; 0x24
 8005a0a:	2320      	movs	r3, #32
 8005a0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a10:	2330      	movs	r3, #48	; 0x30
 8005a12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a16:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 8005bec <_vfiprintf_r+0x224>
 8005a1a:	e044      	b.n	8005aa6 <_vfiprintf_r+0xde>
 8005a1c:	4621      	mov	r1, r4
 8005a1e:	4630      	mov	r0, r6
 8005a20:	f7ff fd5c 	bl	80054dc <__swsetup_r>
 8005a24:	2800      	cmp	r0, #0
 8005a26:	d0ee      	beq.n	8005a06 <_vfiprintf_r+0x3e>
 8005a28:	f04f 30ff 	mov.w	r0, #4294967295
 8005a2c:	e0d5      	b.n	8005bda <_vfiprintf_r+0x212>
 8005a2e:	9a03      	ldr	r2, [sp, #12]
 8005a30:	1d11      	adds	r1, r2, #4
 8005a32:	6812      	ldr	r2, [r2, #0]
 8005a34:	9103      	str	r1, [sp, #12]
 8005a36:	2a00      	cmp	r2, #0
 8005a38:	f280 808c 	bge.w	8005b54 <_vfiprintf_r+0x18c>
 8005a3c:	4252      	negs	r2, r2
 8005a3e:	f043 0002 	orr.w	r0, r3, #2
 8005a42:	9207      	str	r2, [sp, #28]
 8005a44:	9004      	str	r0, [sp, #16]
 8005a46:	f898 3000 	ldrb.w	r3, [r8]
 8005a4a:	2b2e      	cmp	r3, #46	; 0x2e
 8005a4c:	f000 8084 	beq.w	8005b58 <_vfiprintf_r+0x190>
 8005a50:	2203      	movs	r2, #3
 8005a52:	f898 1000 	ldrb.w	r1, [r8]
 8005a56:	4865      	ldr	r0, [pc, #404]	; (8005bec <_vfiprintf_r+0x224>)
 8005a58:	f7fa fbe2 	bl	8000220 <memchr>
 8005a5c:	b148      	cbz	r0, 8005a72 <_vfiprintf_r+0xaa>
 8005a5e:	2340      	movs	r3, #64	; 0x40
 8005a60:	ebcb 0000 	rsb	r0, fp, r0
 8005a64:	fa03 f000 	lsl.w	r0, r3, r0
 8005a68:	9b04      	ldr	r3, [sp, #16]
 8005a6a:	4318      	orrs	r0, r3
 8005a6c:	9004      	str	r0, [sp, #16]
 8005a6e:	f108 0801 	add.w	r8, r8, #1
 8005a72:	f898 1000 	ldrb.w	r1, [r8]
 8005a76:	485e      	ldr	r0, [pc, #376]	; (8005bf0 <_vfiprintf_r+0x228>)
 8005a78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a7c:	2206      	movs	r2, #6
 8005a7e:	f108 0701 	add.w	r7, r8, #1
 8005a82:	f7fa fbcd 	bl	8000220 <memchr>
 8005a86:	2800      	cmp	r0, #0
 8005a88:	f000 8095 	beq.w	8005bb6 <_vfiprintf_r+0x1ee>
 8005a8c:	4b59      	ldr	r3, [pc, #356]	; (8005bf4 <_vfiprintf_r+0x22c>)
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f040 8088 	bne.w	8005ba4 <_vfiprintf_r+0x1dc>
 8005a94:	9b03      	ldr	r3, [sp, #12]
 8005a96:	3307      	adds	r3, #7
 8005a98:	f023 0307 	bic.w	r3, r3, #7
 8005a9c:	3308      	adds	r3, #8
 8005a9e:	9303      	str	r3, [sp, #12]
 8005aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aa2:	4453      	add	r3, sl
 8005aa4:	9309      	str	r3, [sp, #36]	; 0x24
 8005aa6:	46b8      	mov	r8, r7
 8005aa8:	4645      	mov	r5, r8
 8005aaa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005aae:	b91b      	cbnz	r3, 8005ab8 <_vfiprintf_r+0xf0>
 8005ab0:	ebb8 0907 	subs.w	r9, r8, r7
 8005ab4:	d00f      	beq.n	8005ad6 <_vfiprintf_r+0x10e>
 8005ab6:	e003      	b.n	8005ac0 <_vfiprintf_r+0xf8>
 8005ab8:	2b25      	cmp	r3, #37	; 0x25
 8005aba:	d0f9      	beq.n	8005ab0 <_vfiprintf_r+0xe8>
 8005abc:	46a8      	mov	r8, r5
 8005abe:	e7f3      	b.n	8005aa8 <_vfiprintf_r+0xe0>
 8005ac0:	464b      	mov	r3, r9
 8005ac2:	463a      	mov	r2, r7
 8005ac4:	4621      	mov	r1, r4
 8005ac6:	4630      	mov	r0, r6
 8005ac8:	f7ff ff6c 	bl	80059a4 <__sfputs_r>
 8005acc:	3001      	adds	r0, #1
 8005ace:	d07f      	beq.n	8005bd0 <_vfiprintf_r+0x208>
 8005ad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ad2:	444b      	add	r3, r9
 8005ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ad6:	f898 3000 	ldrb.w	r3, [r8]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d078      	beq.n	8005bd0 <_vfiprintf_r+0x208>
 8005ade:	2300      	movs	r3, #0
 8005ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ae4:	9304      	str	r3, [sp, #16]
 8005ae6:	9307      	str	r3, [sp, #28]
 8005ae8:	9205      	str	r2, [sp, #20]
 8005aea:	9306      	str	r3, [sp, #24]
 8005aec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005af0:	931a      	str	r3, [sp, #104]	; 0x68
 8005af2:	2701      	movs	r7, #1
 8005af4:	2205      	movs	r2, #5
 8005af6:	7829      	ldrb	r1, [r5, #0]
 8005af8:	483f      	ldr	r0, [pc, #252]	; (8005bf8 <_vfiprintf_r+0x230>)
 8005afa:	f7fa fb91 	bl	8000220 <memchr>
 8005afe:	f105 0801 	add.w	r8, r5, #1
 8005b02:	9b04      	ldr	r3, [sp, #16]
 8005b04:	b138      	cbz	r0, 8005b16 <_vfiprintf_r+0x14e>
 8005b06:	4a3c      	ldr	r2, [pc, #240]	; (8005bf8 <_vfiprintf_r+0x230>)
 8005b08:	1a80      	subs	r0, r0, r2
 8005b0a:	fa07 f000 	lsl.w	r0, r7, r0
 8005b0e:	4318      	orrs	r0, r3
 8005b10:	9004      	str	r0, [sp, #16]
 8005b12:	4645      	mov	r5, r8
 8005b14:	e7ee      	b.n	8005af4 <_vfiprintf_r+0x12c>
 8005b16:	06d9      	lsls	r1, r3, #27
 8005b18:	bf44      	itt	mi
 8005b1a:	2220      	movmi	r2, #32
 8005b1c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005b20:	071a      	lsls	r2, r3, #28
 8005b22:	bf44      	itt	mi
 8005b24:	222b      	movmi	r2, #43	; 0x2b
 8005b26:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005b2a:	782a      	ldrb	r2, [r5, #0]
 8005b2c:	2a2a      	cmp	r2, #42	; 0x2a
 8005b2e:	f43f af7e 	beq.w	8005a2e <_vfiprintf_r+0x66>
 8005b32:	9a07      	ldr	r2, [sp, #28]
 8005b34:	2100      	movs	r1, #0
 8005b36:	200a      	movs	r0, #10
 8005b38:	46a8      	mov	r8, r5
 8005b3a:	3501      	adds	r5, #1
 8005b3c:	f898 3000 	ldrb.w	r3, [r8]
 8005b40:	3b30      	subs	r3, #48	; 0x30
 8005b42:	2b09      	cmp	r3, #9
 8005b44:	d803      	bhi.n	8005b4e <_vfiprintf_r+0x186>
 8005b46:	fb00 3202 	mla	r2, r0, r2, r3
 8005b4a:	2101      	movs	r1, #1
 8005b4c:	e7f4      	b.n	8005b38 <_vfiprintf_r+0x170>
 8005b4e:	2900      	cmp	r1, #0
 8005b50:	f43f af79 	beq.w	8005a46 <_vfiprintf_r+0x7e>
 8005b54:	9207      	str	r2, [sp, #28]
 8005b56:	e776      	b.n	8005a46 <_vfiprintf_r+0x7e>
 8005b58:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005b5c:	2b2a      	cmp	r3, #42	; 0x2a
 8005b5e:	d10b      	bne.n	8005b78 <_vfiprintf_r+0x1b0>
 8005b60:	9b03      	ldr	r3, [sp, #12]
 8005b62:	1d1a      	adds	r2, r3, #4
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	9203      	str	r2, [sp, #12]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	bfb8      	it	lt
 8005b6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b70:	f108 0802 	add.w	r8, r8, #2
 8005b74:	9305      	str	r3, [sp, #20]
 8005b76:	e76b      	b.n	8005a50 <_vfiprintf_r+0x88>
 8005b78:	2300      	movs	r3, #0
 8005b7a:	9305      	str	r3, [sp, #20]
 8005b7c:	f108 0001 	add.w	r0, r8, #1
 8005b80:	4619      	mov	r1, r3
 8005b82:	250a      	movs	r5, #10
 8005b84:	4680      	mov	r8, r0
 8005b86:	3001      	adds	r0, #1
 8005b88:	f898 2000 	ldrb.w	r2, [r8]
 8005b8c:	3a30      	subs	r2, #48	; 0x30
 8005b8e:	2a09      	cmp	r2, #9
 8005b90:	d803      	bhi.n	8005b9a <_vfiprintf_r+0x1d2>
 8005b92:	fb05 2101 	mla	r1, r5, r1, r2
 8005b96:	2301      	movs	r3, #1
 8005b98:	e7f4      	b.n	8005b84 <_vfiprintf_r+0x1bc>
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f43f af58 	beq.w	8005a50 <_vfiprintf_r+0x88>
 8005ba0:	9105      	str	r1, [sp, #20]
 8005ba2:	e755      	b.n	8005a50 <_vfiprintf_r+0x88>
 8005ba4:	ab03      	add	r3, sp, #12
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	4622      	mov	r2, r4
 8005baa:	4b14      	ldr	r3, [pc, #80]	; (8005bfc <_vfiprintf_r+0x234>)
 8005bac:	a904      	add	r1, sp, #16
 8005bae:	4630      	mov	r0, r6
 8005bb0:	f3af 8000 	nop.w
 8005bb4:	e007      	b.n	8005bc6 <_vfiprintf_r+0x1fe>
 8005bb6:	ab03      	add	r3, sp, #12
 8005bb8:	9300      	str	r3, [sp, #0]
 8005bba:	4622      	mov	r2, r4
 8005bbc:	4b0f      	ldr	r3, [pc, #60]	; (8005bfc <_vfiprintf_r+0x234>)
 8005bbe:	a904      	add	r1, sp, #16
 8005bc0:	4630      	mov	r0, r6
 8005bc2:	f000 f893 	bl	8005cec <_printf_i>
 8005bc6:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005bca:	4682      	mov	sl, r0
 8005bcc:	f47f af68 	bne.w	8005aa0 <_vfiprintf_r+0xd8>
 8005bd0:	89a3      	ldrh	r3, [r4, #12]
 8005bd2:	065b      	lsls	r3, r3, #25
 8005bd4:	f53f af28 	bmi.w	8005a28 <_vfiprintf_r+0x60>
 8005bd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bda:	b01d      	add	sp, #116	; 0x74
 8005bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005be0:	08006180 	.word	0x08006180
 8005be4:	080061a0 	.word	0x080061a0
 8005be8:	080061c0 	.word	0x080061c0
 8005bec:	080061e6 	.word	0x080061e6
 8005bf0:	080061ea 	.word	0x080061ea
 8005bf4:	00000000 	.word	0x00000000
 8005bf8:	080061e0 	.word	0x080061e0
 8005bfc:	080059a5 	.word	0x080059a5

08005c00 <_printf_common>:
 8005c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c04:	4691      	mov	r9, r2
 8005c06:	461f      	mov	r7, r3
 8005c08:	690a      	ldr	r2, [r1, #16]
 8005c0a:	688b      	ldr	r3, [r1, #8]
 8005c0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c10:	4293      	cmp	r3, r2
 8005c12:	bfb8      	it	lt
 8005c14:	4613      	movlt	r3, r2
 8005c16:	f8c9 3000 	str.w	r3, [r9]
 8005c1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c1e:	4606      	mov	r6, r0
 8005c20:	460c      	mov	r4, r1
 8005c22:	b112      	cbz	r2, 8005c2a <_printf_common+0x2a>
 8005c24:	3301      	adds	r3, #1
 8005c26:	f8c9 3000 	str.w	r3, [r9]
 8005c2a:	6823      	ldr	r3, [r4, #0]
 8005c2c:	0699      	lsls	r1, r3, #26
 8005c2e:	bf42      	ittt	mi
 8005c30:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005c34:	3302      	addmi	r3, #2
 8005c36:	f8c9 3000 	strmi.w	r3, [r9]
 8005c3a:	6825      	ldr	r5, [r4, #0]
 8005c3c:	f015 0506 	ands.w	r5, r5, #6
 8005c40:	d110      	bne.n	8005c64 <_printf_common+0x64>
 8005c42:	f104 0a19 	add.w	sl, r4, #25
 8005c46:	e007      	b.n	8005c58 <_printf_common+0x58>
 8005c48:	2301      	movs	r3, #1
 8005c4a:	4652      	mov	r2, sl
 8005c4c:	4639      	mov	r1, r7
 8005c4e:	4630      	mov	r0, r6
 8005c50:	47c0      	blx	r8
 8005c52:	3001      	adds	r0, #1
 8005c54:	d01a      	beq.n	8005c8c <_printf_common+0x8c>
 8005c56:	3501      	adds	r5, #1
 8005c58:	68e3      	ldr	r3, [r4, #12]
 8005c5a:	f8d9 2000 	ldr.w	r2, [r9]
 8005c5e:	1a9b      	subs	r3, r3, r2
 8005c60:	429d      	cmp	r5, r3
 8005c62:	dbf1      	blt.n	8005c48 <_printf_common+0x48>
 8005c64:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005c68:	6822      	ldr	r2, [r4, #0]
 8005c6a:	3300      	adds	r3, #0
 8005c6c:	bf18      	it	ne
 8005c6e:	2301      	movne	r3, #1
 8005c70:	0692      	lsls	r2, r2, #26
 8005c72:	d50f      	bpl.n	8005c94 <_printf_common+0x94>
 8005c74:	18e1      	adds	r1, r4, r3
 8005c76:	1c5a      	adds	r2, r3, #1
 8005c78:	2030      	movs	r0, #48	; 0x30
 8005c7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c7e:	4422      	add	r2, r4
 8005c80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c88:	3302      	adds	r3, #2
 8005c8a:	e003      	b.n	8005c94 <_printf_common+0x94>
 8005c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c98:	4639      	mov	r1, r7
 8005c9a:	4630      	mov	r0, r6
 8005c9c:	47c0      	blx	r8
 8005c9e:	3001      	adds	r0, #1
 8005ca0:	d0f4      	beq.n	8005c8c <_printf_common+0x8c>
 8005ca2:	6822      	ldr	r2, [r4, #0]
 8005ca4:	f8d9 5000 	ldr.w	r5, [r9]
 8005ca8:	68e3      	ldr	r3, [r4, #12]
 8005caa:	f002 0206 	and.w	r2, r2, #6
 8005cae:	2a04      	cmp	r2, #4
 8005cb0:	bf08      	it	eq
 8005cb2:	1b5d      	subeq	r5, r3, r5
 8005cb4:	6922      	ldr	r2, [r4, #16]
 8005cb6:	68a3      	ldr	r3, [r4, #8]
 8005cb8:	bf0c      	ite	eq
 8005cba:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cbe:	2500      	movne	r5, #0
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	bfc4      	itt	gt
 8005cc4:	1a9b      	subgt	r3, r3, r2
 8005cc6:	18ed      	addgt	r5, r5, r3
 8005cc8:	f04f 0900 	mov.w	r9, #0
 8005ccc:	341a      	adds	r4, #26
 8005cce:	454d      	cmp	r5, r9
 8005cd0:	d009      	beq.n	8005ce6 <_printf_common+0xe6>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	4622      	mov	r2, r4
 8005cd6:	4639      	mov	r1, r7
 8005cd8:	4630      	mov	r0, r6
 8005cda:	47c0      	blx	r8
 8005cdc:	3001      	adds	r0, #1
 8005cde:	d0d5      	beq.n	8005c8c <_printf_common+0x8c>
 8005ce0:	f109 0901 	add.w	r9, r9, #1
 8005ce4:	e7f3      	b.n	8005cce <_printf_common+0xce>
 8005ce6:	2000      	movs	r0, #0
 8005ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005cec <_printf_i>:
 8005cec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005cf0:	4617      	mov	r7, r2
 8005cf2:	7e0a      	ldrb	r2, [r1, #24]
 8005cf4:	b085      	sub	sp, #20
 8005cf6:	2a6e      	cmp	r2, #110	; 0x6e
 8005cf8:	4698      	mov	r8, r3
 8005cfa:	4606      	mov	r6, r0
 8005cfc:	460c      	mov	r4, r1
 8005cfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d00:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005d04:	f000 80ae 	beq.w	8005e64 <_printf_i+0x178>
 8005d08:	d811      	bhi.n	8005d2e <_printf_i+0x42>
 8005d0a:	2a63      	cmp	r2, #99	; 0x63
 8005d0c:	d022      	beq.n	8005d54 <_printf_i+0x68>
 8005d0e:	d809      	bhi.n	8005d24 <_printf_i+0x38>
 8005d10:	2a00      	cmp	r2, #0
 8005d12:	f000 80bb 	beq.w	8005e8c <_printf_i+0x1a0>
 8005d16:	2a58      	cmp	r2, #88	; 0x58
 8005d18:	f040 80ca 	bne.w	8005eb0 <_printf_i+0x1c4>
 8005d1c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005d20:	4983      	ldr	r1, [pc, #524]	; (8005f30 <_printf_i+0x244>)
 8005d22:	e055      	b.n	8005dd0 <_printf_i+0xe4>
 8005d24:	2a64      	cmp	r2, #100	; 0x64
 8005d26:	d01e      	beq.n	8005d66 <_printf_i+0x7a>
 8005d28:	2a69      	cmp	r2, #105	; 0x69
 8005d2a:	d01c      	beq.n	8005d66 <_printf_i+0x7a>
 8005d2c:	e0c0      	b.n	8005eb0 <_printf_i+0x1c4>
 8005d2e:	2a73      	cmp	r2, #115	; 0x73
 8005d30:	f000 80b0 	beq.w	8005e94 <_printf_i+0x1a8>
 8005d34:	d809      	bhi.n	8005d4a <_printf_i+0x5e>
 8005d36:	2a6f      	cmp	r2, #111	; 0x6f
 8005d38:	d02e      	beq.n	8005d98 <_printf_i+0xac>
 8005d3a:	2a70      	cmp	r2, #112	; 0x70
 8005d3c:	f040 80b8 	bne.w	8005eb0 <_printf_i+0x1c4>
 8005d40:	680a      	ldr	r2, [r1, #0]
 8005d42:	f042 0220 	orr.w	r2, r2, #32
 8005d46:	600a      	str	r2, [r1, #0]
 8005d48:	e03e      	b.n	8005dc8 <_printf_i+0xdc>
 8005d4a:	2a75      	cmp	r2, #117	; 0x75
 8005d4c:	d024      	beq.n	8005d98 <_printf_i+0xac>
 8005d4e:	2a78      	cmp	r2, #120	; 0x78
 8005d50:	d03a      	beq.n	8005dc8 <_printf_i+0xdc>
 8005d52:	e0ad      	b.n	8005eb0 <_printf_i+0x1c4>
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8005d5a:	1d11      	adds	r1, r2, #4
 8005d5c:	6019      	str	r1, [r3, #0]
 8005d5e:	6813      	ldr	r3, [r2, #0]
 8005d60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d64:	e0a8      	b.n	8005eb8 <_printf_i+0x1cc>
 8005d66:	6821      	ldr	r1, [r4, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005d6e:	d002      	beq.n	8005d76 <_printf_i+0x8a>
 8005d70:	1d11      	adds	r1, r2, #4
 8005d72:	6019      	str	r1, [r3, #0]
 8005d74:	e008      	b.n	8005d88 <_printf_i+0x9c>
 8005d76:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005d7a:	f102 0104 	add.w	r1, r2, #4
 8005d7e:	6019      	str	r1, [r3, #0]
 8005d80:	d002      	beq.n	8005d88 <_printf_i+0x9c>
 8005d82:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005d86:	e000      	b.n	8005d8a <_printf_i+0x9e>
 8005d88:	6813      	ldr	r3, [r2, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	da3c      	bge.n	8005e08 <_printf_i+0x11c>
 8005d8e:	222d      	movs	r2, #45	; 0x2d
 8005d90:	425b      	negs	r3, r3
 8005d92:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005d96:	e037      	b.n	8005e08 <_printf_i+0x11c>
 8005d98:	6821      	ldr	r1, [r4, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005da0:	d002      	beq.n	8005da8 <_printf_i+0xbc>
 8005da2:	1d11      	adds	r1, r2, #4
 8005da4:	6019      	str	r1, [r3, #0]
 8005da6:	e007      	b.n	8005db8 <_printf_i+0xcc>
 8005da8:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005dac:	f102 0104 	add.w	r1, r2, #4
 8005db0:	6019      	str	r1, [r3, #0]
 8005db2:	d001      	beq.n	8005db8 <_printf_i+0xcc>
 8005db4:	8813      	ldrh	r3, [r2, #0]
 8005db6:	e000      	b.n	8005dba <_printf_i+0xce>
 8005db8:	6813      	ldr	r3, [r2, #0]
 8005dba:	7e22      	ldrb	r2, [r4, #24]
 8005dbc:	495c      	ldr	r1, [pc, #368]	; (8005f30 <_printf_i+0x244>)
 8005dbe:	2a6f      	cmp	r2, #111	; 0x6f
 8005dc0:	bf14      	ite	ne
 8005dc2:	220a      	movne	r2, #10
 8005dc4:	2208      	moveq	r2, #8
 8005dc6:	e01b      	b.n	8005e00 <_printf_i+0x114>
 8005dc8:	2278      	movs	r2, #120	; 0x78
 8005dca:	495a      	ldr	r1, [pc, #360]	; (8005f34 <_printf_i+0x248>)
 8005dcc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005dd0:	6822      	ldr	r2, [r4, #0]
 8005dd2:	6818      	ldr	r0, [r3, #0]
 8005dd4:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005dd8:	f100 0504 	add.w	r5, r0, #4
 8005ddc:	601d      	str	r5, [r3, #0]
 8005dde:	d103      	bne.n	8005de8 <_printf_i+0xfc>
 8005de0:	0655      	lsls	r5, r2, #25
 8005de2:	d501      	bpl.n	8005de8 <_printf_i+0xfc>
 8005de4:	8803      	ldrh	r3, [r0, #0]
 8005de6:	e000      	b.n	8005dea <_printf_i+0xfe>
 8005de8:	6803      	ldr	r3, [r0, #0]
 8005dea:	07d0      	lsls	r0, r2, #31
 8005dec:	bf44      	itt	mi
 8005dee:	f042 0220 	orrmi.w	r2, r2, #32
 8005df2:	6022      	strmi	r2, [r4, #0]
 8005df4:	b91b      	cbnz	r3, 8005dfe <_printf_i+0x112>
 8005df6:	6822      	ldr	r2, [r4, #0]
 8005df8:	f022 0220 	bic.w	r2, r2, #32
 8005dfc:	6022      	str	r2, [r4, #0]
 8005dfe:	2210      	movs	r2, #16
 8005e00:	2000      	movs	r0, #0
 8005e02:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8005e06:	e001      	b.n	8005e0c <_printf_i+0x120>
 8005e08:	4949      	ldr	r1, [pc, #292]	; (8005f30 <_printf_i+0x244>)
 8005e0a:	220a      	movs	r2, #10
 8005e0c:	6865      	ldr	r5, [r4, #4]
 8005e0e:	60a5      	str	r5, [r4, #8]
 8005e10:	2d00      	cmp	r5, #0
 8005e12:	db08      	blt.n	8005e26 <_printf_i+0x13a>
 8005e14:	6820      	ldr	r0, [r4, #0]
 8005e16:	f020 0004 	bic.w	r0, r0, #4
 8005e1a:	6020      	str	r0, [r4, #0]
 8005e1c:	b92b      	cbnz	r3, 8005e2a <_printf_i+0x13e>
 8005e1e:	2d00      	cmp	r5, #0
 8005e20:	d17d      	bne.n	8005f1e <_printf_i+0x232>
 8005e22:	4675      	mov	r5, lr
 8005e24:	e00c      	b.n	8005e40 <_printf_i+0x154>
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d079      	beq.n	8005f1e <_printf_i+0x232>
 8005e2a:	4675      	mov	r5, lr
 8005e2c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005e30:	fb02 3310 	mls	r3, r2, r0, r3
 8005e34:	5ccb      	ldrb	r3, [r1, r3]
 8005e36:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	d1f5      	bne.n	8005e2c <_printf_i+0x140>
 8005e40:	2a08      	cmp	r2, #8
 8005e42:	d10b      	bne.n	8005e5c <_printf_i+0x170>
 8005e44:	6823      	ldr	r3, [r4, #0]
 8005e46:	07da      	lsls	r2, r3, #31
 8005e48:	d508      	bpl.n	8005e5c <_printf_i+0x170>
 8005e4a:	6923      	ldr	r3, [r4, #16]
 8005e4c:	6862      	ldr	r2, [r4, #4]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	bfde      	ittt	le
 8005e52:	2330      	movle	r3, #48	; 0x30
 8005e54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e58:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e5c:	ebc5 030e 	rsb	r3, r5, lr
 8005e60:	6123      	str	r3, [r4, #16]
 8005e62:	e02e      	b.n	8005ec2 <_printf_i+0x1d6>
 8005e64:	6808      	ldr	r0, [r1, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	6949      	ldr	r1, [r1, #20]
 8005e6a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005e6e:	d003      	beq.n	8005e78 <_printf_i+0x18c>
 8005e70:	1d10      	adds	r0, r2, #4
 8005e72:	6018      	str	r0, [r3, #0]
 8005e74:	6813      	ldr	r3, [r2, #0]
 8005e76:	e008      	b.n	8005e8a <_printf_i+0x19e>
 8005e78:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e7c:	f102 0004 	add.w	r0, r2, #4
 8005e80:	6018      	str	r0, [r3, #0]
 8005e82:	6813      	ldr	r3, [r2, #0]
 8005e84:	d001      	beq.n	8005e8a <_printf_i+0x19e>
 8005e86:	8019      	strh	r1, [r3, #0]
 8005e88:	e000      	b.n	8005e8c <_printf_i+0x1a0>
 8005e8a:	6019      	str	r1, [r3, #0]
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	6123      	str	r3, [r4, #16]
 8005e90:	4675      	mov	r5, lr
 8005e92:	e016      	b.n	8005ec2 <_printf_i+0x1d6>
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	1d11      	adds	r1, r2, #4
 8005e98:	6019      	str	r1, [r3, #0]
 8005e9a:	6815      	ldr	r5, [r2, #0]
 8005e9c:	6862      	ldr	r2, [r4, #4]
 8005e9e:	2100      	movs	r1, #0
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	f7fa f9bd 	bl	8000220 <memchr>
 8005ea6:	b108      	cbz	r0, 8005eac <_printf_i+0x1c0>
 8005ea8:	1b40      	subs	r0, r0, r5
 8005eaa:	6060      	str	r0, [r4, #4]
 8005eac:	6863      	ldr	r3, [r4, #4]
 8005eae:	e004      	b.n	8005eba <_printf_i+0x1ce>
 8005eb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005eb4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005eb8:	2301      	movs	r3, #1
 8005eba:	6123      	str	r3, [r4, #16]
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ec2:	f8cd 8000 	str.w	r8, [sp]
 8005ec6:	463b      	mov	r3, r7
 8005ec8:	aa03      	add	r2, sp, #12
 8005eca:	4621      	mov	r1, r4
 8005ecc:	4630      	mov	r0, r6
 8005ece:	f7ff fe97 	bl	8005c00 <_printf_common>
 8005ed2:	3001      	adds	r0, #1
 8005ed4:	d102      	bne.n	8005edc <_printf_i+0x1f0>
 8005ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8005eda:	e026      	b.n	8005f2a <_printf_i+0x23e>
 8005edc:	6923      	ldr	r3, [r4, #16]
 8005ede:	462a      	mov	r2, r5
 8005ee0:	4639      	mov	r1, r7
 8005ee2:	4630      	mov	r0, r6
 8005ee4:	47c0      	blx	r8
 8005ee6:	3001      	adds	r0, #1
 8005ee8:	d0f5      	beq.n	8005ed6 <_printf_i+0x1ea>
 8005eea:	6823      	ldr	r3, [r4, #0]
 8005eec:	079b      	lsls	r3, r3, #30
 8005eee:	d510      	bpl.n	8005f12 <_printf_i+0x226>
 8005ef0:	2500      	movs	r5, #0
 8005ef2:	f104 0919 	add.w	r9, r4, #25
 8005ef6:	e007      	b.n	8005f08 <_printf_i+0x21c>
 8005ef8:	2301      	movs	r3, #1
 8005efa:	464a      	mov	r2, r9
 8005efc:	4639      	mov	r1, r7
 8005efe:	4630      	mov	r0, r6
 8005f00:	47c0      	blx	r8
 8005f02:	3001      	adds	r0, #1
 8005f04:	d0e7      	beq.n	8005ed6 <_printf_i+0x1ea>
 8005f06:	3501      	adds	r5, #1
 8005f08:	68e3      	ldr	r3, [r4, #12]
 8005f0a:	9a03      	ldr	r2, [sp, #12]
 8005f0c:	1a9b      	subs	r3, r3, r2
 8005f0e:	429d      	cmp	r5, r3
 8005f10:	dbf2      	blt.n	8005ef8 <_printf_i+0x20c>
 8005f12:	68e0      	ldr	r0, [r4, #12]
 8005f14:	9b03      	ldr	r3, [sp, #12]
 8005f16:	4298      	cmp	r0, r3
 8005f18:	bfb8      	it	lt
 8005f1a:	4618      	movlt	r0, r3
 8005f1c:	e005      	b.n	8005f2a <_printf_i+0x23e>
 8005f1e:	780b      	ldrb	r3, [r1, #0]
 8005f20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f28:	e78a      	b.n	8005e40 <_printf_i+0x154>
 8005f2a:	b005      	add	sp, #20
 8005f2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f30:	080061f1 	.word	0x080061f1
 8005f34:	08006202 	.word	0x08006202

08005f38 <__sread>:
 8005f38:	b510      	push	{r4, lr}
 8005f3a:	460c      	mov	r4, r1
 8005f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f40:	f000 f894 	bl	800606c <_read_r>
 8005f44:	2800      	cmp	r0, #0
 8005f46:	bfab      	itete	ge
 8005f48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005f4a:	89a3      	ldrhlt	r3, [r4, #12]
 8005f4c:	181b      	addge	r3, r3, r0
 8005f4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005f52:	bfac      	ite	ge
 8005f54:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f56:	81a3      	strhlt	r3, [r4, #12]
 8005f58:	bd10      	pop	{r4, pc}

08005f5a <__swrite>:
 8005f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f5e:	461f      	mov	r7, r3
 8005f60:	898b      	ldrh	r3, [r1, #12]
 8005f62:	05db      	lsls	r3, r3, #23
 8005f64:	4605      	mov	r5, r0
 8005f66:	460c      	mov	r4, r1
 8005f68:	4616      	mov	r6, r2
 8005f6a:	d505      	bpl.n	8005f78 <__swrite+0x1e>
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f74:	f000 f868 	bl	8006048 <_lseek_r>
 8005f78:	89a3      	ldrh	r3, [r4, #12]
 8005f7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f82:	81a3      	strh	r3, [r4, #12]
 8005f84:	4632      	mov	r2, r6
 8005f86:	463b      	mov	r3, r7
 8005f88:	4628      	mov	r0, r5
 8005f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f8e:	f000 b817 	b.w	8005fc0 <_write_r>

08005f92 <__sseek>:
 8005f92:	b510      	push	{r4, lr}
 8005f94:	460c      	mov	r4, r1
 8005f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f9a:	f000 f855 	bl	8006048 <_lseek_r>
 8005f9e:	1c43      	adds	r3, r0, #1
 8005fa0:	89a3      	ldrh	r3, [r4, #12]
 8005fa2:	bf15      	itete	ne
 8005fa4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005fa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005faa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005fae:	81a3      	strheq	r3, [r4, #12]
 8005fb0:	bf18      	it	ne
 8005fb2:	81a3      	strhne	r3, [r4, #12]
 8005fb4:	bd10      	pop	{r4, pc}

08005fb6 <__sclose>:
 8005fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fba:	f000 b813 	b.w	8005fe4 <_close_r>
	...

08005fc0 <_write_r>:
 8005fc0:	b538      	push	{r3, r4, r5, lr}
 8005fc2:	4c07      	ldr	r4, [pc, #28]	; (8005fe0 <_write_r+0x20>)
 8005fc4:	4605      	mov	r5, r0
 8005fc6:	4608      	mov	r0, r1
 8005fc8:	4611      	mov	r1, r2
 8005fca:	2200      	movs	r2, #0
 8005fcc:	6022      	str	r2, [r4, #0]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	f7ff f804 	bl	8004fdc <_write>
 8005fd4:	1c43      	adds	r3, r0, #1
 8005fd6:	d102      	bne.n	8005fde <_write_r+0x1e>
 8005fd8:	6823      	ldr	r3, [r4, #0]
 8005fda:	b103      	cbz	r3, 8005fde <_write_r+0x1e>
 8005fdc:	602b      	str	r3, [r5, #0]
 8005fde:	bd38      	pop	{r3, r4, r5, pc}
 8005fe0:	20002c28 	.word	0x20002c28

08005fe4 <_close_r>:
 8005fe4:	b538      	push	{r3, r4, r5, lr}
 8005fe6:	4c06      	ldr	r4, [pc, #24]	; (8006000 <_close_r+0x1c>)
 8005fe8:	2300      	movs	r3, #0
 8005fea:	4605      	mov	r5, r0
 8005fec:	4608      	mov	r0, r1
 8005fee:	6023      	str	r3, [r4, #0]
 8005ff0:	f7ff f836 	bl	8005060 <_close>
 8005ff4:	1c43      	adds	r3, r0, #1
 8005ff6:	d102      	bne.n	8005ffe <_close_r+0x1a>
 8005ff8:	6823      	ldr	r3, [r4, #0]
 8005ffa:	b103      	cbz	r3, 8005ffe <_close_r+0x1a>
 8005ffc:	602b      	str	r3, [r5, #0]
 8005ffe:	bd38      	pop	{r3, r4, r5, pc}
 8006000:	20002c28 	.word	0x20002c28

08006004 <_fstat_r>:
 8006004:	b538      	push	{r3, r4, r5, lr}
 8006006:	4c07      	ldr	r4, [pc, #28]	; (8006024 <_fstat_r+0x20>)
 8006008:	2300      	movs	r3, #0
 800600a:	4605      	mov	r5, r0
 800600c:	4608      	mov	r0, r1
 800600e:	4611      	mov	r1, r2
 8006010:	6023      	str	r3, [r4, #0]
 8006012:	f7ff f837 	bl	8005084 <_fstat>
 8006016:	1c43      	adds	r3, r0, #1
 8006018:	d102      	bne.n	8006020 <_fstat_r+0x1c>
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	b103      	cbz	r3, 8006020 <_fstat_r+0x1c>
 800601e:	602b      	str	r3, [r5, #0]
 8006020:	bd38      	pop	{r3, r4, r5, pc}
 8006022:	bf00      	nop
 8006024:	20002c28 	.word	0x20002c28

08006028 <_isatty_r>:
 8006028:	b538      	push	{r3, r4, r5, lr}
 800602a:	4c06      	ldr	r4, [pc, #24]	; (8006044 <_isatty_r+0x1c>)
 800602c:	2300      	movs	r3, #0
 800602e:	4605      	mov	r5, r0
 8006030:	4608      	mov	r0, r1
 8006032:	6023      	str	r3, [r4, #0]
 8006034:	f7ff f838 	bl	80050a8 <_isatty>
 8006038:	1c43      	adds	r3, r0, #1
 800603a:	d102      	bne.n	8006042 <_isatty_r+0x1a>
 800603c:	6823      	ldr	r3, [r4, #0]
 800603e:	b103      	cbz	r3, 8006042 <_isatty_r+0x1a>
 8006040:	602b      	str	r3, [r5, #0]
 8006042:	bd38      	pop	{r3, r4, r5, pc}
 8006044:	20002c28 	.word	0x20002c28

08006048 <_lseek_r>:
 8006048:	b538      	push	{r3, r4, r5, lr}
 800604a:	4c07      	ldr	r4, [pc, #28]	; (8006068 <_lseek_r+0x20>)
 800604c:	4605      	mov	r5, r0
 800604e:	4608      	mov	r0, r1
 8006050:	4611      	mov	r1, r2
 8006052:	2200      	movs	r2, #0
 8006054:	6022      	str	r2, [r4, #0]
 8006056:	461a      	mov	r2, r3
 8006058:	f7ff f836 	bl	80050c8 <_lseek>
 800605c:	1c43      	adds	r3, r0, #1
 800605e:	d102      	bne.n	8006066 <_lseek_r+0x1e>
 8006060:	6823      	ldr	r3, [r4, #0]
 8006062:	b103      	cbz	r3, 8006066 <_lseek_r+0x1e>
 8006064:	602b      	str	r3, [r5, #0]
 8006066:	bd38      	pop	{r3, r4, r5, pc}
 8006068:	20002c28 	.word	0x20002c28

0800606c <_read_r>:
 800606c:	b538      	push	{r3, r4, r5, lr}
 800606e:	4c07      	ldr	r4, [pc, #28]	; (800608c <_read_r+0x20>)
 8006070:	4605      	mov	r5, r0
 8006072:	4608      	mov	r0, r1
 8006074:	4611      	mov	r1, r2
 8006076:	2200      	movs	r2, #0
 8006078:	6022      	str	r2, [r4, #0]
 800607a:	461a      	mov	r2, r3
 800607c:	f7ff f838 	bl	80050f0 <_read>
 8006080:	1c43      	adds	r3, r0, #1
 8006082:	d102      	bne.n	800608a <_read_r+0x1e>
 8006084:	6823      	ldr	r3, [r4, #0]
 8006086:	b103      	cbz	r3, 800608a <_read_r+0x1e>
 8006088:	602b      	str	r3, [r5, #0]
 800608a:	bd38      	pop	{r3, r4, r5, pc}
 800608c:	20002c28 	.word	0x20002c28

08006090 <_init>:
 8006090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006092:	bf00      	nop
 8006094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006096:	bc08      	pop	{r3}
 8006098:	469e      	mov	lr, r3
 800609a:	4770      	bx	lr

0800609c <_fini>:
 800609c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800609e:	bf00      	nop
 80060a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060a2:	bc08      	pop	{r3}
 80060a4:	469e      	mov	lr, r3
 80060a6:	4770      	bx	lr
