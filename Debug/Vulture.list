
C:\Users\emon1\Atollic\TrueSTUDIO\ARM_workspace_7.1.2\Vulture\Debug\Vulture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005420  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  080055f0  080055f0  000155f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005728  08005728  00015728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800572c  0800572c  0001572c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000094  20000000  08005730  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002b2c  20000098  080057c4  00020098  2**3
                  ALLOC
  7 ._user_heap_stack 00000604  20002bc4  080057c4  00022bc4  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000ee9e  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000021c4  00000000  00000000  0002ef62  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000e80  00000000  00000000  00031128  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000d68  00000000  00000000  00031fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000718b  00000000  00000000  00032d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000643c  00000000  00000000  00039e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  000402d7  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00004308  00000000  00000000  00040358  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000098 	.word	0x20000098
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080055d8 	.word	0x080055d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000009c 	.word	0x2000009c
 800020c:	080055d8 	.word	0x080055d8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <vApplicationStackOverflowHook>:

/**
  Dummy implementation of the callback function vApplicationStackOverflowHook().
*/
#if (configCHECK_FOR_STACK_OVERFLOW > 0)
__WEAK void vApplicationStackOverflowHook (TaskHandle_t xTask, signed char *pcTaskName) {
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
  (void)xTask;
  (void)pcTaskName;
}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop

080002d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
 80002de:	60f8      	str	r0, [r7, #12]
 80002e0:	60b9      	str	r1, [r7, #8]
 80002e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	4a07      	ldr	r2, [pc, #28]	; (8000304 <vApplicationGetIdleTaskMemory+0x2c>)
 80002e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	4a06      	ldr	r2, [pc, #24]	; (8000308 <vApplicationGetIdleTaskMemory+0x30>)
 80002ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	2280      	movs	r2, #128	; 0x80
 80002f4:	601a      	str	r2, [r3, #0]
}
 80002f6:	bf00      	nop
 80002f8:	3714      	adds	r7, #20
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	200000b4 	.word	0x200000b4
 8000308:	20000110 	.word	0x20000110

0800030c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
 8000312:	60f8      	str	r0, [r7, #12]
 8000314:	60b9      	str	r1, [r7, #8]
 8000316:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	4a07      	ldr	r2, [pc, #28]	; (8000338 <vApplicationGetTimerTaskMemory+0x2c>)
 800031c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800031e:	68bb      	ldr	r3, [r7, #8]
 8000320:	4a06      	ldr	r2, [pc, #24]	; (800033c <vApplicationGetTimerTaskMemory+0x30>)
 8000322:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	2250      	movs	r2, #80	; 0x50
 8000328:	601a      	str	r2, [r3, #0]
}
 800032a:	bf00      	nop
 800032c:	3714      	adds	r7, #20
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	20000310 	.word	0x20000310
 800033c:	2000036c 	.word	0x2000036c

08000340 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000340:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000378 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000344:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000346:	e003      	b.n	8000350 <LoopCopyDataInit>

08000348 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000348:	4b0c      	ldr	r3, [pc, #48]	; (800037c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800034a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800034c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800034e:	3104      	adds	r1, #4

08000350 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000350:	480b      	ldr	r0, [pc, #44]	; (8000380 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000352:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000354:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000356:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000358:	d3f6      	bcc.n	8000348 <CopyDataInit>
  ldr  r2, =_sbss
 800035a:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800035c:	e002      	b.n	8000364 <LoopFillZerobss>

0800035e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800035e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000360:	f842 3b04 	str.w	r3, [r2], #4

08000364 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000364:	4b09      	ldr	r3, [pc, #36]	; (800038c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000366:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000368:	d3f9      	bcc.n	800035e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800036a:	f000 fceb 	bl	8000d44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800036e:	f004 f98d 	bl	800468c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000372:	f004 f8a9 	bl	80044c8 <main>
  bx  lr    
 8000376:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000378:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 800037c:	08005730 	.word	0x08005730
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000380:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000384:	20000094 	.word	0x20000094
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000388:	20000098 	.word	0x20000098
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800038c:	20002bc4 	.word	0x20002bc4

08000390 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000390:	e7fe      	b.n	8000390 <ADC_IRQHandler>
	...

08000394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  return uwTick;
 8000398:	4b03      	ldr	r3, [pc, #12]	; (80003a8 <HAL_GetTick+0x14>)
 800039a:	681b      	ldr	r3, [r3, #0]
}
 800039c:	4618      	mov	r0, r3
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	20002bbc 	.word	0x20002bbc

080003ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b089      	sub	sp, #36	; 0x24
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
 80003b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80003b6:	2300      	movs	r3, #0
 80003b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80003ba:	2300      	movs	r3, #0
 80003bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80003be:	2300      	movs	r3, #0
 80003c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80003c2:	2300      	movs	r3, #0
 80003c4:	61fb      	str	r3, [r7, #28]
 80003c6:	e165      	b.n	8000694 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 80003c8:	2201      	movs	r2, #1
 80003ca:	69fb      	ldr	r3, [r7, #28]
 80003cc:	fa02 f303 	lsl.w	r3, r2, r3
 80003d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003d2:	683b      	ldr	r3, [r7, #0]
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	697b      	ldr	r3, [r7, #20]
 80003d8:	4013      	ands	r3, r2
 80003da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80003dc:	693a      	ldr	r2, [r7, #16]
 80003de:	697b      	ldr	r3, [r7, #20]
 80003e0:	429a      	cmp	r2, r3
 80003e2:	f040 8154 	bne.w	800068e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	685b      	ldr	r3, [r3, #4]
 80003ea:	2b02      	cmp	r3, #2
 80003ec:	d003      	beq.n	80003f6 <HAL_GPIO_Init+0x4a>
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	685b      	ldr	r3, [r3, #4]
 80003f2:	2b12      	cmp	r3, #18
 80003f4:	d123      	bne.n	800043e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80003f6:	69fb      	ldr	r3, [r7, #28]
 80003f8:	08da      	lsrs	r2, r3, #3
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	3208      	adds	r2, #8
 80003fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000404:	69fb      	ldr	r3, [r7, #28]
 8000406:	f003 0307 	and.w	r3, r3, #7
 800040a:	009b      	lsls	r3, r3, #2
 800040c:	220f      	movs	r2, #15
 800040e:	fa02 f303 	lsl.w	r3, r2, r3
 8000412:	43db      	mvns	r3, r3
 8000414:	69ba      	ldr	r2, [r7, #24]
 8000416:	4013      	ands	r3, r2
 8000418:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800041a:	683b      	ldr	r3, [r7, #0]
 800041c:	691a      	ldr	r2, [r3, #16]
 800041e:	69fb      	ldr	r3, [r7, #28]
 8000420:	f003 0307 	and.w	r3, r3, #7
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	fa02 f303 	lsl.w	r3, r2, r3
 800042a:	69ba      	ldr	r2, [r7, #24]
 800042c:	4313      	orrs	r3, r2
 800042e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000430:	69fb      	ldr	r3, [r7, #28]
 8000432:	08da      	lsrs	r2, r3, #3
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	3208      	adds	r2, #8
 8000438:	69b9      	ldr	r1, [r7, #24]
 800043a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000444:	69fb      	ldr	r3, [r7, #28]
 8000446:	005b      	lsls	r3, r3, #1
 8000448:	2203      	movs	r2, #3
 800044a:	fa02 f303 	lsl.w	r3, r2, r3
 800044e:	43db      	mvns	r3, r3
 8000450:	69ba      	ldr	r2, [r7, #24]
 8000452:	4013      	ands	r3, r2
 8000454:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	685b      	ldr	r3, [r3, #4]
 800045a:	f003 0203 	and.w	r2, r3, #3
 800045e:	69fb      	ldr	r3, [r7, #28]
 8000460:	005b      	lsls	r3, r3, #1
 8000462:	fa02 f303 	lsl.w	r3, r2, r3
 8000466:	69ba      	ldr	r2, [r7, #24]
 8000468:	4313      	orrs	r3, r2
 800046a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	69ba      	ldr	r2, [r7, #24]
 8000470:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	685b      	ldr	r3, [r3, #4]
 8000476:	2b01      	cmp	r3, #1
 8000478:	d00b      	beq.n	8000492 <HAL_GPIO_Init+0xe6>
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	685b      	ldr	r3, [r3, #4]
 800047e:	2b02      	cmp	r3, #2
 8000480:	d007      	beq.n	8000492 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	685b      	ldr	r3, [r3, #4]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000486:	2b11      	cmp	r3, #17
 8000488:	d003      	beq.n	8000492 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	685b      	ldr	r3, [r3, #4]
 800048e:	2b12      	cmp	r3, #18
 8000490:	d130      	bne.n	80004f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	689b      	ldr	r3, [r3, #8]
 8000496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000498:	69fb      	ldr	r3, [r7, #28]
 800049a:	005b      	lsls	r3, r3, #1
 800049c:	2203      	movs	r2, #3
 800049e:	fa02 f303 	lsl.w	r3, r2, r3
 80004a2:	43db      	mvns	r3, r3
 80004a4:	69ba      	ldr	r2, [r7, #24]
 80004a6:	4013      	ands	r3, r2
 80004a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	68da      	ldr	r2, [r3, #12]
 80004ae:	69fb      	ldr	r3, [r7, #28]
 80004b0:	005b      	lsls	r3, r3, #1
 80004b2:	fa02 f303 	lsl.w	r3, r2, r3
 80004b6:	69ba      	ldr	r2, [r7, #24]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	69ba      	ldr	r2, [r7, #24]
 80004c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	685b      	ldr	r3, [r3, #4]
 80004c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80004c8:	2201      	movs	r2, #1
 80004ca:	69fb      	ldr	r3, [r7, #28]
 80004cc:	fa02 f303 	lsl.w	r3, r2, r3
 80004d0:	43db      	mvns	r3, r3
 80004d2:	69ba      	ldr	r2, [r7, #24]
 80004d4:	4013      	ands	r3, r2
 80004d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	091b      	lsrs	r3, r3, #4
 80004de:	f003 0201 	and.w	r2, r3, #1
 80004e2:	69fb      	ldr	r3, [r7, #28]
 80004e4:	fa02 f303 	lsl.w	r3, r2, r3
 80004e8:	69ba      	ldr	r2, [r7, #24]
 80004ea:	4313      	orrs	r3, r2
 80004ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	69ba      	ldr	r2, [r7, #24]
 80004f2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	68db      	ldr	r3, [r3, #12]
 80004f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80004fa:	69fb      	ldr	r3, [r7, #28]
 80004fc:	005b      	lsls	r3, r3, #1
 80004fe:	2203      	movs	r2, #3
 8000500:	fa02 f303 	lsl.w	r3, r2, r3
 8000504:	43db      	mvns	r3, r3
 8000506:	69ba      	ldr	r2, [r7, #24]
 8000508:	4013      	ands	r3, r2
 800050a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	689a      	ldr	r2, [r3, #8]
 8000510:	69fb      	ldr	r3, [r7, #28]
 8000512:	005b      	lsls	r3, r3, #1
 8000514:	fa02 f303 	lsl.w	r3, r2, r3
 8000518:	69ba      	ldr	r2, [r7, #24]
 800051a:	4313      	orrs	r3, r2
 800051c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	69ba      	ldr	r2, [r7, #24]
 8000522:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800052c:	2b00      	cmp	r3, #0
 800052e:	f000 80ae 	beq.w	800068e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	4a5c      	ldr	r2, [pc, #368]	; (80006a8 <HAL_GPIO_Init+0x2fc>)
 8000538:	4b5b      	ldr	r3, [pc, #364]	; (80006a8 <HAL_GPIO_Init+0x2fc>)
 800053a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800053c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000540:	6453      	str	r3, [r2, #68]	; 0x44
 8000542:	4b59      	ldr	r3, [pc, #356]	; (80006a8 <HAL_GPIO_Init+0x2fc>)
 8000544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800054e:	4a57      	ldr	r2, [pc, #348]	; (80006ac <HAL_GPIO_Init+0x300>)
 8000550:	69fb      	ldr	r3, [r7, #28]
 8000552:	089b      	lsrs	r3, r3, #2
 8000554:	3302      	adds	r3, #2
 8000556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800055a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800055c:	69fb      	ldr	r3, [r7, #28]
 800055e:	f003 0303 	and.w	r3, r3, #3
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	220f      	movs	r2, #15
 8000566:	fa02 f303 	lsl.w	r3, r2, r3
 800056a:	43db      	mvns	r3, r3
 800056c:	69ba      	ldr	r2, [r7, #24]
 800056e:	4013      	ands	r3, r2
 8000570:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4a4e      	ldr	r2, [pc, #312]	; (80006b0 <HAL_GPIO_Init+0x304>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d025      	beq.n	80005c6 <HAL_GPIO_Init+0x21a>
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4a4d      	ldr	r2, [pc, #308]	; (80006b4 <HAL_GPIO_Init+0x308>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d01f      	beq.n	80005c2 <HAL_GPIO_Init+0x216>
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4a4c      	ldr	r2, [pc, #304]	; (80006b8 <HAL_GPIO_Init+0x30c>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d019      	beq.n	80005be <HAL_GPIO_Init+0x212>
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4a4b      	ldr	r2, [pc, #300]	; (80006bc <HAL_GPIO_Init+0x310>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d013      	beq.n	80005ba <HAL_GPIO_Init+0x20e>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4a4a      	ldr	r2, [pc, #296]	; (80006c0 <HAL_GPIO_Init+0x314>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d00d      	beq.n	80005b6 <HAL_GPIO_Init+0x20a>
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a49      	ldr	r2, [pc, #292]	; (80006c4 <HAL_GPIO_Init+0x318>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d007      	beq.n	80005b2 <HAL_GPIO_Init+0x206>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4a48      	ldr	r2, [pc, #288]	; (80006c8 <HAL_GPIO_Init+0x31c>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d101      	bne.n	80005ae <HAL_GPIO_Init+0x202>
 80005aa:	2306      	movs	r3, #6
 80005ac:	e00c      	b.n	80005c8 <HAL_GPIO_Init+0x21c>
 80005ae:	2307      	movs	r3, #7
 80005b0:	e00a      	b.n	80005c8 <HAL_GPIO_Init+0x21c>
 80005b2:	2305      	movs	r3, #5
 80005b4:	e008      	b.n	80005c8 <HAL_GPIO_Init+0x21c>
 80005b6:	2304      	movs	r3, #4
 80005b8:	e006      	b.n	80005c8 <HAL_GPIO_Init+0x21c>
 80005ba:	2303      	movs	r3, #3
 80005bc:	e004      	b.n	80005c8 <HAL_GPIO_Init+0x21c>
 80005be:	2302      	movs	r3, #2
 80005c0:	e002      	b.n	80005c8 <HAL_GPIO_Init+0x21c>
 80005c2:	2301      	movs	r3, #1
 80005c4:	e000      	b.n	80005c8 <HAL_GPIO_Init+0x21c>
 80005c6:	2300      	movs	r3, #0
 80005c8:	69fa      	ldr	r2, [r7, #28]
 80005ca:	f002 0203 	and.w	r2, r2, #3
 80005ce:	0092      	lsls	r2, r2, #2
 80005d0:	4093      	lsls	r3, r2
 80005d2:	69ba      	ldr	r2, [r7, #24]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80005d8:	4934      	ldr	r1, [pc, #208]	; (80006ac <HAL_GPIO_Init+0x300>)
 80005da:	69fb      	ldr	r3, [r7, #28]
 80005dc:	089b      	lsrs	r3, r3, #2
 80005de:	3302      	adds	r3, #2
 80005e0:	69ba      	ldr	r2, [r7, #24]
 80005e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80005e6:	4b39      	ldr	r3, [pc, #228]	; (80006cc <HAL_GPIO_Init+0x320>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80005ec:	693b      	ldr	r3, [r7, #16]
 80005ee:	43db      	mvns	r3, r3
 80005f0:	69ba      	ldr	r2, [r7, #24]
 80005f2:	4013      	ands	r3, r2
 80005f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	685b      	ldr	r3, [r3, #4]
 80005fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d003      	beq.n	800060a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000602:	69ba      	ldr	r2, [r7, #24]
 8000604:	693b      	ldr	r3, [r7, #16]
 8000606:	4313      	orrs	r3, r2
 8000608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800060a:	4a30      	ldr	r2, [pc, #192]	; (80006cc <HAL_GPIO_Init+0x320>)
 800060c:	69bb      	ldr	r3, [r7, #24]
 800060e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000610:	4b2e      	ldr	r3, [pc, #184]	; (80006cc <HAL_GPIO_Init+0x320>)
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	43db      	mvns	r3, r3
 800061a:	69ba      	ldr	r2, [r7, #24]
 800061c:	4013      	ands	r3, r2
 800061e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000628:	2b00      	cmp	r3, #0
 800062a:	d003      	beq.n	8000634 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800062c:	69ba      	ldr	r2, [r7, #24]
 800062e:	693b      	ldr	r3, [r7, #16]
 8000630:	4313      	orrs	r3, r2
 8000632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000634:	4a25      	ldr	r2, [pc, #148]	; (80006cc <HAL_GPIO_Init+0x320>)
 8000636:	69bb      	ldr	r3, [r7, #24]
 8000638:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800063a:	4b24      	ldr	r3, [pc, #144]	; (80006cc <HAL_GPIO_Init+0x320>)
 800063c:	689b      	ldr	r3, [r3, #8]
 800063e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000640:	693b      	ldr	r3, [r7, #16]
 8000642:	43db      	mvns	r3, r3
 8000644:	69ba      	ldr	r2, [r7, #24]
 8000646:	4013      	ands	r3, r2
 8000648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	685b      	ldr	r3, [r3, #4]
 800064e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000652:	2b00      	cmp	r3, #0
 8000654:	d003      	beq.n	800065e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000656:	69ba      	ldr	r2, [r7, #24]
 8000658:	693b      	ldr	r3, [r7, #16]
 800065a:	4313      	orrs	r3, r2
 800065c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800065e:	4a1b      	ldr	r2, [pc, #108]	; (80006cc <HAL_GPIO_Init+0x320>)
 8000660:	69bb      	ldr	r3, [r7, #24]
 8000662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000664:	4b19      	ldr	r3, [pc, #100]	; (80006cc <HAL_GPIO_Init+0x320>)
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800066a:	693b      	ldr	r3, [r7, #16]
 800066c:	43db      	mvns	r3, r3
 800066e:	69ba      	ldr	r2, [r7, #24]
 8000670:	4013      	ands	r3, r2
 8000672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800067c:	2b00      	cmp	r3, #0
 800067e:	d003      	beq.n	8000688 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000680:	69ba      	ldr	r2, [r7, #24]
 8000682:	693b      	ldr	r3, [r7, #16]
 8000684:	4313      	orrs	r3, r2
 8000686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000688:	4a10      	ldr	r2, [pc, #64]	; (80006cc <HAL_GPIO_Init+0x320>)
 800068a:	69bb      	ldr	r3, [r7, #24]
 800068c:	60d3      	str	r3, [r2, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800068e:	69fb      	ldr	r3, [r7, #28]
 8000690:	3301      	adds	r3, #1
 8000692:	61fb      	str	r3, [r7, #28]
 8000694:	69fb      	ldr	r3, [r7, #28]
 8000696:	2b0f      	cmp	r3, #15
 8000698:	f67f ae96 	bls.w	80003c8 <HAL_GPIO_Init+0x1c>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 800069c:	bf00      	nop
 800069e:	3724      	adds	r7, #36	; 0x24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40013800 	.word	0x40013800
 80006b0:	40020000 	.word	0x40020000
 80006b4:	40020400 	.word	0x40020400
 80006b8:	40020800 	.word	0x40020800
 80006bc:	40020c00 	.word	0x40020c00
 80006c0:	40021000 	.word	0x40021000
 80006c4:	40021400 	.word	0x40021400
 80006c8:	40021800 	.word	0x40021800
 80006cc:	40013c00 	.word	0x40013c00

080006d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	460b      	mov	r3, r1
 80006da:	807b      	strh	r3, [r7, #2]
 80006dc:	4613      	mov	r3, r2
 80006de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80006e0:	787b      	ldrb	r3, [r7, #1]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d003      	beq.n	80006ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80006e6:	887a      	ldrh	r2, [r7, #2]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80006ec:	e003      	b.n	80006f6 <HAL_GPIO_WritePin+0x26>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80006ee:	887b      	ldrh	r3, [r7, #2]
 80006f0:	041a      	lsls	r2, r3, #16
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	619a      	str	r2, [r3, #24]
  }
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	460b      	mov	r3, r1
 800070e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	695a      	ldr	r2, [r3, #20]
 8000714:	887b      	ldrh	r3, [r7, #2]
 8000716:	405a      	eors	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	615a      	str	r2, [r3, #20]
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d101      	bne.n	800073a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8000736:	2301      	movs	r3, #1
 8000738:	e05c      	b.n	80007f4 <HAL_SPI_Init+0xcc>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000740:	b2db      	uxtb	r3, r3
 8000742:	2b00      	cmp	r3, #0
 8000744:	d106      	bne.n	8000754 <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2200      	movs	r2, #0
 800074a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f000 f854 	bl	80007fc <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2202      	movs	r2, #2
 8000758:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	6812      	ldr	r2, [r2, #0]
 8000764:	6812      	ldr	r2, [r2, #0]
 8000766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800076a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	6851      	ldr	r1, [r2, #4]
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	6892      	ldr	r2, [r2, #8]
 8000778:	4311      	orrs	r1, r2
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	68d2      	ldr	r2, [r2, #12]
 800077e:	4311      	orrs	r1, r2
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	6912      	ldr	r2, [r2, #16]
 8000784:	4311      	orrs	r1, r2
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	6952      	ldr	r2, [r2, #20]
 800078a:	4311      	orrs	r1, r2
 800078c:	687a      	ldr	r2, [r7, #4]
 800078e:	6992      	ldr	r2, [r2, #24]
 8000790:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000794:	4311      	orrs	r1, r2
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	69d2      	ldr	r2, [r2, #28]
 800079a:	4311      	orrs	r1, r2
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	6a12      	ldr	r2, [r2, #32]
 80007a0:	4311      	orrs	r1, r2
 80007a2:	687a      	ldr	r2, [r7, #4]
 80007a4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80007a6:	430a      	orrs	r2, r1
 80007a8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	6992      	ldr	r2, [r2, #24]
 80007b2:	0c12      	lsrs	r2, r2, #16
 80007b4:	f002 0104 	and.w	r1, r2, #4
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80007bc:	430a      	orrs	r2, r1
 80007be:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007c8:	d104      	bne.n	80007d4 <HAL_SPI_Init+0xac>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80007d2:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	6812      	ldr	r2, [r2, #0]
 80007dc:	69d2      	ldr	r2, [r2, #28]
 80007de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80007e2:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2200      	movs	r2, #0
 80007e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2201      	movs	r2, #1
 80007ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80007f2:	2300      	movs	r3, #0
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
  */
}
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent and received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08e      	sub	sp, #56	; 0x38
 8000814:	af02      	add	r7, sp, #8
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
 800081c:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 800081e:	2300      	movs	r3, #0
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
 8000822:	2300      	movs	r3, #0
 8000824:	623b      	str	r3, [r7, #32]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
 8000826:	2300      	movs	r3, #0
 8000828:	837b      	strh	r3, [r7, #26]
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 800082e:	2301      	movs	r3, #1
 8000830:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef errorcode = HAL_OK;
 8000832:	2300      	movs	r3, #0
 8000834:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800083e:	2b01      	cmp	r3, #1
 8000840:	d101      	bne.n	8000846 <HAL_SPI_TransmitReceive+0x36>
 8000842:	2302      	movs	r3, #2
 8000844:	e1f1      	b.n	8000c2a <HAL_SPI_TransmitReceive+0x41a>
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	2201      	movs	r2, #1
 800084a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800084e:	f7ff fda1 	bl	8000394 <HAL_GetTick>
 8000852:	61f8      	str	r0, [r7, #28]
  
  tmp  = hspi->State;
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800085a:	b2db      	uxtb	r3, r3
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp1 = hspi->Init.Mode;
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	623b      	str	r3, [r7, #32]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8000864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000866:	2b01      	cmp	r3, #1
 8000868:	d00e      	beq.n	8000888 <HAL_SPI_TransmitReceive+0x78>
 800086a:	6a3b      	ldr	r3, [r7, #32]
 800086c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000870:	d106      	bne.n	8000880 <HAL_SPI_TransmitReceive+0x70>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	689b      	ldr	r3, [r3, #8]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d102      	bne.n	8000880 <HAL_SPI_TransmitReceive+0x70>
 800087a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087c:	2b04      	cmp	r3, #4
 800087e:	d003      	beq.n	8000888 <HAL_SPI_TransmitReceive+0x78>
  {
    errorcode = HAL_BUSY;
 8000880:	2302      	movs	r3, #2
 8000882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8000886:	e1c6      	b.n	8000c16 <HAL_SPI_TransmitReceive+0x406>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d005      	beq.n	800089a <HAL_SPI_TransmitReceive+0x8a>
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d002      	beq.n	800089a <HAL_SPI_TransmitReceive+0x8a>
 8000894:	887b      	ldrh	r3, [r7, #2]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d103      	bne.n	80008a2 <HAL_SPI_TransmitReceive+0x92>
  {
    errorcode = HAL_ERROR;
 800089a:	2301      	movs	r3, #1
 800089c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80008a0:	e1b9      	b.n	8000c16 <HAL_SPI_TransmitReceive+0x406>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d103      	bne.n	80008b6 <HAL_SPI_TransmitReceive+0xa6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	2205      	movs	r2, #5
 80008b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	2200      	movs	r2, #0
 80008ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	887a      	ldrh	r2, [r7, #2]
 80008c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	887a      	ldrh	r2, [r7, #2]
 80008cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	68ba      	ldr	r2, [r7, #8]
 80008d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	887a      	ldrh	r2, [r7, #2]
 80008d8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	887a      	ldrh	r2, [r7, #2]
 80008de:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	2200      	movs	r2, #0
 80008e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	2200      	movs	r2, #0
 80008ea:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008f4:	d110      	bne.n	8000918 <HAL_SPI_TransmitReceive+0x108>
  {
    SPI_RESET_CRC(hspi);
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	6819      	ldr	r1, [r3, #0]
 8000900:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8000904:	400b      	ands	r3, r1
 8000906:	6013      	str	r3, [r2, #0]
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	68fa      	ldr	r2, [r7, #12]
 800090e:	6812      	ldr	r2, [r2, #0]
 8000910:	6812      	ldr	r2, [r2, #0]
 8000912:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000916:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000922:	2b00      	cmp	r3, #0
 8000924:	d107      	bne.n	8000936 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	68fa      	ldr	r2, [r7, #12]
 800092c:	6812      	ldr	r2, [r2, #0]
 800092e:	6812      	ldr	r2, [r2, #0]
 8000930:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000934:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	68db      	ldr	r3, [r3, #12]
 800093a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800093e:	f040 8084 	bne.w	8000a4a <HAL_SPI_TransmitReceive+0x23a>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d004      	beq.n	8000954 <HAL_SPI_TransmitReceive+0x144>
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800094e:	b29b      	uxth	r3, r3
 8000950:	2b01      	cmp	r3, #1
 8000952:	d16f      	bne.n	8000a34 <HAL_SPI_TransmitReceive+0x224>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	68ba      	ldr	r2, [r7, #8]
 800095a:	8812      	ldrh	r2, [r2, #0]
 800095c:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	3302      	adds	r3, #2
 8000962:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000968:	b29b      	uxth	r3, r3
 800096a:	3b01      	subs	r3, #1
 800096c:	b29a      	uxth	r2, r3
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000972:	e05f      	b.n	8000a34 <HAL_SPI_TransmitReceive+0x224>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8000974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000976:	2b00      	cmp	r3, #0
 8000978:	d02e      	beq.n	80009d8 <HAL_SPI_TransmitReceive+0x1c8>
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800097e:	b29b      	uxth	r3, r3
 8000980:	2b00      	cmp	r3, #0
 8000982:	d029      	beq.n	80009d8 <HAL_SPI_TransmitReceive+0x1c8>
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	2b00      	cmp	r3, #0
 8000990:	d022      	beq.n	80009d8 <HAL_SPI_TransmitReceive+0x1c8>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	68ba      	ldr	r2, [r7, #8]
 8000998:	8812      	ldrh	r2, [r2, #0]
 800099a:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	3302      	adds	r3, #2
 80009a0:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	3b01      	subs	r3, #1
 80009aa:	b29a      	uxth	r2, r3
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d10c      	bne.n	80009d8 <HAL_SPI_TransmitReceive+0x1c8>
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009c6:	d107      	bne.n	80009d8 <HAL_SPI_TransmitReceive+0x1c8>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	68fa      	ldr	r2, [r7, #12]
 80009ce:	6812      	ldr	r2, [r2, #0]
 80009d0:	6812      	ldr	r2, [r2, #0]
 80009d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80009d6:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80009dc:	b29b      	uxth	r3, r3
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d018      	beq.n	8000a14 <HAL_SPI_TransmitReceive+0x204>
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d011      	beq.n	8000a14 <HAL_SPI_TransmitReceive+0x204>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	68db      	ldr	r3, [r3, #12]
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3302      	adds	r3, #2
 8000a00:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	3b01      	subs	r3, #1
 8000a0a:	b29a      	uxth	r2, r3
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8000a10:	2301      	movs	r3, #1
 8000a12:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8000a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a1a:	d00b      	beq.n	8000a34 <HAL_SPI_TransmitReceive+0x224>
 8000a1c:	f7ff fcba 	bl	8000394 <HAL_GetTick>
 8000a20:	4602      	mov	r2, r0
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	1ad2      	subs	r2, r2, r3
 8000a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d303      	bcc.n	8000a34 <HAL_SPI_TransmitReceive+0x224>
      {
        errorcode = HAL_TIMEOUT;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8000a32:	e0f0      	b.n	8000c16 <HAL_SPI_TransmitReceive+0x406>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
      pTxData += sizeof(uint16_t);
      hspi->TxXferCount--;
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d19a      	bne.n	8000974 <HAL_SPI_TransmitReceive+0x164>
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d195      	bne.n	8000974 <HAL_SPI_TransmitReceive+0x164>
 8000a48:	e083      	b.n	8000b52 <HAL_SPI_TransmitReceive+0x342>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d004      	beq.n	8000a5c <HAL_SPI_TransmitReceive+0x24c>
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d170      	bne.n	8000b3e <HAL_SPI_TransmitReceive+0x32e>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	330c      	adds	r3, #12
 8000a62:	68ba      	ldr	r2, [r7, #8]
 8000a64:	7812      	ldrb	r2, [r2, #0]
 8000a66:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	3b01      	subs	r3, #1
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000a7c:	e05f      	b.n	8000b3e <HAL_SPI_TransmitReceive+0x32e>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8000a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d02f      	beq.n	8000ae4 <HAL_SPI_TransmitReceive+0x2d4>
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d02a      	beq.n	8000ae4 <HAL_SPI_TransmitReceive+0x2d4>
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	f003 0302 	and.w	r3, r3, #2
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d023      	beq.n	8000ae4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f103 020c 	add.w	r2, r3, #12
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	1c59      	adds	r1, r3, #1
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	3b01      	subs	r3, #1
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d10c      	bne.n	8000ae4 <HAL_SPI_TransmitReceive+0x2d4>
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ace:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ad2:	d107      	bne.n	8000ae4 <HAL_SPI_TransmitReceive+0x2d4>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	68fa      	ldr	r2, [r7, #12]
 8000ada:	6812      	ldr	r2, [r2, #0]
 8000adc:	6812      	ldr	r2, [r2, #0]
 8000ade:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ae2:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d017      	beq.n	8000b1e <HAL_SPI_TransmitReceive+0x30e>
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d010      	beq.n	8000b1e <HAL_SPI_TransmitReceive+0x30e>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	1c5a      	adds	r2, r3, #1
 8000b00:	607a      	str	r2, [r7, #4]
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	6812      	ldr	r2, [r2, #0]
 8000b06:	68d2      	ldr	r2, [r2, #12]
 8000b08:	b2d2      	uxtb	r2, r2
 8000b0a:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	3b01      	subs	r3, #1
 8000b14:	b29a      	uxth	r2, r3
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8000b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b24:	d00b      	beq.n	8000b3e <HAL_SPI_TransmitReceive+0x32e>
 8000b26:	f7ff fc35 	bl	8000394 <HAL_GetTick>
 8000b2a:	4602      	mov	r2, r0
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	1ad2      	subs	r2, r2, r3
 8000b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d303      	bcc.n	8000b3e <HAL_SPI_TransmitReceive+0x32e>
      {
        errorcode = HAL_TIMEOUT;
 8000b36:	2303      	movs	r3, #3
 8000b38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8000b3c:	e06b      	b.n	8000c16 <HAL_SPI_TransmitReceive+0x406>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
      pTxData += sizeof(uint8_t);
      hspi->TxXferCount--;
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d19a      	bne.n	8000a7e <HAL_SPI_TransmitReceive+0x26e>
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d195      	bne.n	8000a7e <HAL_SPI_TransmitReceive+0x26e>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b5a:	d11a      	bne.n	8000b92 <HAL_SPI_TransmitReceive+0x382>
  {
    /* Wait until TXE flag */
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b62:	2201      	movs	r2, #1
 8000b64:	2101      	movs	r1, #1
 8000b66:	68f8      	ldr	r0, [r7, #12]
 8000b68:	f000 f864 	bl	8000c34 <SPI_WaitFlagStateUntilTimeout>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d009      	beq.n	8000b86 <HAL_SPI_TransmitReceive+0x376>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b76:	f043 0202 	orr.w	r2, r3, #2
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 8000b84:	e047      	b.n	8000c16 <HAL_SPI_TransmitReceive+0x406>
    }
    /* Read CRC */
    tmpreg1 = hspi->Instance->DR;
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	837b      	strh	r3, [r7, #26]
    /* To avoid GCC warning */
    UNUSED(tmpreg1);
 8000b90:	8b7b      	ldrh	r3, [r7, #26]
  }

  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	f003 0310 	and.w	r3, r3, #16
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d00d      	beq.n	8000bbc <HAL_SPI_TransmitReceive+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ba4:	f043 0202 	orr.w	r2, r3, #2
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8000bb4:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	9300      	str	r3, [sp, #0]
 8000bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	2102      	movs	r1, #2
 8000bc6:	68f8      	ldr	r0, [r7, #12]
 8000bc8:	f000 f834 	bl	8000c34 <SPI_WaitFlagStateUntilTimeout>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d003      	beq.n	8000bda <HAL_SPI_TransmitReceive+0x3ca>
  {
    errorcode = HAL_TIMEOUT;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8000bd8:	e01d      	b.n	8000c16 <HAL_SPI_TransmitReceive+0x406>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8000bda:	69fa      	ldr	r2, [r7, #28]
 8000bdc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000bde:	68f8      	ldr	r0, [r7, #12]
 8000be0:	f000 f892 	bl	8000d08 <SPI_CheckFlag_BSY>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d006      	beq.n	8000bf8 <HAL_SPI_TransmitReceive+0x3e8>
  {
    errorcode = HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	2220      	movs	r2, #32
 8000bf4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8000bf6:	e00e      	b.n	8000c16 <HAL_SPI_TransmitReceive+0x406>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	689b      	ldr	r3, [r3, #8]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d10a      	bne.n	8000c16 <HAL_SPI_TransmitReceive+0x406>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	68db      	ldr	r3, [r3, #12]
 8000c0a:	617b      	str	r3, [r7, #20]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	697b      	ldr	r3, [r7, #20]
  }
  
error :
  hspi->State = HAL_SPI_STATE_READY;
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	2201      	movs	r2, #1
 8000c1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	2200      	movs	r2, #0
 8000c22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8000c26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3730      	adds	r7, #48	; 0x30
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop

08000c34 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
 8000c40:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000c42:	e04d      	b.n	8000ce0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c4a:	d049      	beq.n	8000ce0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d007      	beq.n	8000c62 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8000c52:	f7ff fb9f 	bl	8000394 <HAL_GetTick>
 8000c56:	4602      	mov	r2, r0
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	1ad2      	subs	r2, r2, r3
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d33e      	bcc.n	8000ce0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	68fa      	ldr	r2, [r7, #12]
 8000c68:	6812      	ldr	r2, [r2, #0]
 8000c6a:	6852      	ldr	r2, [r2, #4]
 8000c6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000c70:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000c7a:	d111      	bne.n	8000ca0 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c84:	d004      	beq.n	8000c90 <SPI_WaitFlagStateUntilTimeout+0x5c>
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c8e:	d107      	bne.n	8000ca0 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	68fa      	ldr	r2, [r7, #12]
 8000c96:	6812      	ldr	r2, [r2, #0]
 8000c98:	6812      	ldr	r2, [r2, #0]
 8000c9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ca8:	d110      	bne.n	8000ccc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	6819      	ldr	r1, [r3, #0]
 8000cb4:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8000cb8:	400b      	ands	r3, r1
 8000cba:	6013      	str	r3, [r2, #0]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	68fa      	ldr	r2, [r7, #12]
 8000cc2:	6812      	ldr	r2, [r2, #0]
 8000cc4:	6812      	ldr	r2, [r2, #0]
 8000cc6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000cca:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	2201      	movs	r2, #1
 8000cd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	e00e      	b.n	8000cfe <SPI_WaitFlagStateUntilTimeout+0xca>
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	689a      	ldr	r2, [r3, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	401a      	ands	r2, r3
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d101      	bne.n	8000cf4 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	e000      	b.n	8000cf6 <SPI_WaitFlagStateUntilTimeout+0xc2>
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d1a3      	bne.n	8000c44 <SPI_WaitFlagStateUntilTimeout+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop

08000d08 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af02      	add	r7, sp, #8
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2180      	movs	r1, #128	; 0x80
 8000d1e:	68f8      	ldr	r0, [r7, #12]
 8000d20:	f7ff ff88 	bl	8000c34 <SPI_WaitFlagStateUntilTimeout>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d007      	beq.n	8000d3a <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d2e:	f043 0220 	orr.w	r2, r3, #32
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8000d36:	2303      	movs	r3, #3
 8000d38:	e000      	b.n	8000d3c <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 8000d3a:	2300      	movs	r3, #0
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3710      	adds	r7, #16
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d48:	4a16      	ldr	r2, [pc, #88]	; (8000da4 <SystemInit+0x60>)
 8000d4a:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <SystemInit+0x60>)
 8000d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000d58:	4a13      	ldr	r2, [pc, #76]	; (8000da8 <SystemInit+0x64>)
 8000d5a:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <SystemInit+0x64>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d64:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <SystemInit+0x64>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000d6a:	4a0f      	ldr	r2, [pc, #60]	; (8000da8 <SystemInit+0x64>)
 8000d6c:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <SystemInit+0x64>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000d74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d78:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <SystemInit+0x64>)
 8000d7c:	4a0b      	ldr	r2, [pc, #44]	; (8000dac <SystemInit+0x68>)
 8000d7e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000d80:	4a09      	ldr	r2, [pc, #36]	; (8000da8 <SystemInit+0x64>)
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <SystemInit+0x64>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d8a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <SystemInit+0x64>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d92:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <SystemInit+0x60>)
 8000d94:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d98:	609a      	str	r2, [r3, #8]
#endif
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00
 8000da8:	40023800 	.word	0x40023800
 8000dac:	24003010 	.word	0x24003010

08000db0 <SysTick_Handler>:
extern void xPortSysTickHandler (void);

/*
  SysTick handler implementation that also clears overflow flag.
*/
void SysTick_Handler (void) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8000db4:	4b02      	ldr	r3, [pc, #8]	; (8000dc0 <SysTick_Handler+0x10>)
 8000db6:	681b      	ldr	r3, [r3, #0]

  /* Call tick handler */
  xPortSysTickHandler();
 8000db8:	f000 fb3e 	bl	8001438 <xPortSysTickHandler>
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	e000e010 	.word	0xe000e010

08000dc4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8000dd0:	f001 f90c 	bl	8001fec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000dd4:	4b40      	ldr	r3, [pc, #256]	; (8000ed8 <pvPortMalloc+0x114>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d101      	bne.n	8000de0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8000ddc:	f000 f8c0 	bl	8000f60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000de0:	4b3e      	ldr	r3, [pc, #248]	; (8000edc <pvPortMalloc+0x118>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4013      	ands	r3, r2
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d16d      	bne.n	8000ec8 <pvPortMalloc+0x104>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d00d      	beq.n	8000e0e <pvPortMalloc+0x4a>
			{
				xWantedSize += xHeapStructSize;
 8000df2:	2208      	movs	r2, #8
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4413      	add	r3, r2
 8000df8:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f003 0307 	and.w	r3, r3, #7
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d004      	beq.n	8000e0e <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f023 0307 	bic.w	r3, r3, #7
 8000e0a:	3308      	adds	r3, #8
 8000e0c:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d059      	beq.n	8000ec8 <pvPortMalloc+0x104>
 8000e14:	4b32      	ldr	r3, [pc, #200]	; (8000ee0 <pvPortMalloc+0x11c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d854      	bhi.n	8000ec8 <pvPortMalloc+0x104>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000e1e:	4b31      	ldr	r3, [pc, #196]	; (8000ee4 <pvPortMalloc+0x120>)
 8000e20:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8000e22:	4b30      	ldr	r3, [pc, #192]	; (8000ee4 <pvPortMalloc+0x120>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000e28:	e004      	b.n	8000e34 <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	617b      	str	r3, [r7, #20]
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	685a      	ldr	r2, [r3, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d203      	bcs.n	8000e46 <pvPortMalloc+0x82>
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d1f1      	bne.n	8000e2a <pvPortMalloc+0x66>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000e46:	4b24      	ldr	r3, [pc, #144]	; (8000ed8 <pvPortMalloc+0x114>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	697a      	ldr	r2, [r7, #20]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d03b      	beq.n	8000ec8 <pvPortMalloc+0x104>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2208      	movs	r2, #8
 8000e56:	4413      	add	r3, r2
 8000e58:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	685a      	ldr	r2, [r3, #4]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	1ad2      	subs	r2, r2, r3
 8000e6a:	2308      	movs	r3, #8
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d90f      	bls.n	8000e92 <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4413      	add	r3, r2
 8000e78:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	1ad2      	subs	r2, r2, r3
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000e8c:	68b8      	ldr	r0, [r7, #8]
 8000e8e:	f000 f8c9 	bl	8001024 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000e92:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <pvPortMalloc+0x11c>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	4a10      	ldr	r2, [pc, #64]	; (8000ee0 <pvPortMalloc+0x11c>)
 8000e9e:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <pvPortMalloc+0x11c>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <pvPortMalloc+0x124>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d203      	bcs.n	8000eb4 <pvPortMalloc+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <pvPortMalloc+0x11c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ee8 <pvPortMalloc+0x124>)
 8000eb2:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	685a      	ldr	r2, [r3, #4]
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <pvPortMalloc+0x118>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	431a      	orrs	r2, r3
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000ec8:	f001 f89e 	bl	8002008 <xTaskResumeAll>
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	200024b4 	.word	0x200024b4
 8000edc:	200024c0 	.word	0x200024c0
 8000ee0:	200024b8 	.word	0x200024b8
 8000ee4:	200024ac 	.word	0x200024ac
 8000ee8:	200024bc 	.word	0x200024bc

08000eec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d027      	beq.n	8000f4e <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000efe:	2308      	movs	r3, #8
 8000f00:	425b      	negs	r3, r3
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	4413      	add	r3, r2
 8000f06:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	685a      	ldr	r2, [r3, #4]
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <vPortFree+0x6c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4013      	ands	r3, r2
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d019      	beq.n	8000f4e <vPortFree+0x62>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d115      	bne.n	8000f4e <vPortFree+0x62>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	685a      	ldr	r2, [r3, #4]
 8000f26:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <vPortFree+0x6c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	401a      	ands	r2, r3
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000f32:	f001 f85b 	bl	8001fec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	685a      	ldr	r2, [r3, #4]
 8000f3a:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <vPortFree+0x70>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	4a06      	ldr	r2, [pc, #24]	; (8000f5c <vPortFree+0x70>)
 8000f42:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000f44:	68b8      	ldr	r0, [r7, #8]
 8000f46:	f000 f86d 	bl	8001024 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000f4a:	f001 f85d 	bl	8002008 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200024c0 	.word	0x200024c0
 8000f5c:	200024b8 	.word	0x200024b8

08000f60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000f66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000f6c:	4b27      	ldr	r3, [pc, #156]	; (800100c <prvHeapInit+0xac>)
 8000f6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d00c      	beq.n	8000f94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	3307      	adds	r3, #7
 8000f7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f023 0307 	bic.w	r3, r3, #7
 8000f86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000f88:	68ba      	ldr	r2, [r7, #8]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	4a1f      	ldr	r2, [pc, #124]	; (800100c <prvHeapInit+0xac>)
 8000f90:	4413      	add	r3, r2
 8000f92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000f98:	4a1d      	ldr	r2, [pc, #116]	; (8001010 <prvHeapInit+0xb0>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000f9e:	4b1c      	ldr	r3, [pc, #112]	; (8001010 <prvHeapInit+0xb0>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	4413      	add	r3, r2
 8000faa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000fac:	2208      	movs	r2, #8
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	1a9b      	subs	r3, r3, r2
 8000fb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f023 0307 	bic.w	r3, r3, #7
 8000fba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4a15      	ldr	r2, [pc, #84]	; (8001014 <prvHeapInit+0xb4>)
 8000fc0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000fc2:	4b14      	ldr	r3, [pc, #80]	; (8001014 <prvHeapInit+0xb4>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000fca:	4b12      	ldr	r3, [pc, #72]	; (8001014 <prvHeapInit+0xb4>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	68fa      	ldr	r2, [r7, #12]
 8000fda:	1ad2      	subs	r2, r2, r3
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <prvHeapInit+0xb4>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <prvHeapInit+0xb8>)
 8000fee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	4a09      	ldr	r2, [pc, #36]	; (800101c <prvHeapInit+0xbc>)
 8000ff6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <prvHeapInit+0xc0>)
 8000ffa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000ffe:	601a      	str	r2, [r3, #0]
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	200004ac 	.word	0x200004ac
 8001010:	200024ac 	.word	0x200024ac
 8001014:	200024b4 	.word	0x200024b4
 8001018:	200024bc 	.word	0x200024bc
 800101c:	200024b8 	.word	0x200024b8
 8001020:	200024c0 	.word	0x200024c0

08001024 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800102c:	4b28      	ldr	r3, [pc, #160]	; (80010d0 <prvInsertBlockIntoFreeList+0xac>)
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	e002      	b.n	8001038 <prvInsertBlockIntoFreeList+0x14>
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	429a      	cmp	r2, r3
 8001040:	d3f7      	bcc.n	8001032 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	441a      	add	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	429a      	cmp	r2, r3
 8001052:	d108      	bne.n	8001066 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	441a      	add	r2, r3
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	68ba      	ldr	r2, [r7, #8]
 8001070:	441a      	add	r2, r3
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	429a      	cmp	r2, r3
 8001078:	d118      	bne.n	80010ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <prvInsertBlockIntoFreeList+0xb0>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	429a      	cmp	r2, r3
 8001084:	d00d      	beq.n	80010a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	441a      	add	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	e008      	b.n	80010b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <prvInsertBlockIntoFreeList+0xb0>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	e003      	b.n	80010b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80010b4:	68fa      	ldr	r2, [r7, #12]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d002      	beq.n	80010c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80010c2:	bf00      	nop
 80010c4:	3714      	adds	r7, #20
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	200024ac 	.word	0x200024ac
 80010d4:	200024b4 	.word	0x200024b4

080010d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f103 0208 	add.w	r2, r3, #8
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f04f 32ff 	mov.w	r2, #4294967295
 80010f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f103 0208 	add.w	r2, r3, #8
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f103 0208 	add.w	r2, r3, #8
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop

08001134 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	1c5a      	adds	r2, r3, #1
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	601a      	str	r2, [r3, #0]
}
 8001170:	bf00      	nop
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001192:	d103      	bne.n	800119c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	e00c      	b.n	80011b6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3308      	adds	r3, #8
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	e002      	b.n	80011aa <vListInsert+0x2e>
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d9f6      	bls.n	80011a4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	683a      	ldr	r2, [r7, #0]
 80011d0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	1c5a      	adds	r2, r3, #1
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	601a      	str	r2, [r3, #0]
}
 80011e2:	bf00      	nop
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop

080011f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	6892      	ldr	r2, [r2, #8]
 8001206:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	6852      	ldr	r2, [r2, #4]
 8001210:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	429a      	cmp	r2, r3
 800121a:	d103      	bne.n	8001224 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	1e5a      	subs	r2, r3, #1
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	3b04      	subs	r3, #4
 8001254:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800125c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	3b04      	subs	r3, #4
 8001262:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	f023 0201 	bic.w	r2, r3, #1
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	3b04      	subs	r3, #4
 8001272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001274:	4a0c      	ldr	r2, [pc, #48]	; (80012a8 <pxPortInitialiseStack+0x64>)
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	3b14      	subs	r3, #20
 800127e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	3b04      	subs	r3, #4
 800128a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f06f 0202 	mvn.w	r2, #2
 8001292:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	3b20      	subs	r3, #32
 8001298:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800129a:	68fb      	ldr	r3, [r7, #12]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	080012ad 	.word	0x080012ad

080012ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80012b2:	f04f 0310 	mov.w	r3, #16
 80012b6:	f383 8811 	msr	BASEPRI, r3
 80012ba:	f3bf 8f6f 	isb	sy
 80012be:	f3bf 8f4f 	dsb	sy
 80012c2:	607b      	str	r3, [r7, #4]

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	for( ;; );
 80012c4:	e7fe      	b.n	80012c4 <prvTaskExitError+0x18>
 80012c6:	bf00      	nop
	...

080012d0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <pxCurrentTCBConst2>)
 80012d2:	6819      	ldr	r1, [r3, #0]
 80012d4:	6808      	ldr	r0, [r1, #0]
 80012d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012da:	f380 8809 	msr	PSP, r0
 80012de:	f3bf 8f6f 	isb	sy
 80012e2:	f04f 0000 	mov.w	r0, #0
 80012e6:	f380 8811 	msr	BASEPRI, r0
 80012ea:	4770      	bx	lr
 80012ec:	f3af 8000 	nop.w

080012f0 <pxCurrentTCBConst2>:
 80012f0:	200024c4 	.word	0x200024c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop

080012f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80012f8:	4806      	ldr	r0, [pc, #24]	; (8001314 <prvPortStartFirstTask+0x1c>)
 80012fa:	6800      	ldr	r0, [r0, #0]
 80012fc:	6800      	ldr	r0, [r0, #0]
 80012fe:	f380 8808 	msr	MSP, r0
 8001302:	b662      	cpsie	i
 8001304:	b661      	cpsie	f
 8001306:	f3bf 8f4f 	dsb	sy
 800130a:	f3bf 8f6f 	isb	sy
 800130e:	df00      	svc	0
 8001310:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8001312:	bf00      	nop
 8001314:	e000ed08 	.word	0xe000ed08

08001318 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800131c:	4a0f      	ldr	r2, [pc, #60]	; (800135c <xPortStartScheduler+0x44>)
 800131e:	4b0f      	ldr	r3, [pc, #60]	; (800135c <xPortStartScheduler+0x44>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001326:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001328:	4a0c      	ldr	r2, [pc, #48]	; (800135c <xPortStartScheduler+0x44>)
 800132a:	4b0c      	ldr	r3, [pc, #48]	; (800135c <xPortStartScheduler+0x44>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001332:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001334:	f000 f8a0 	bl	8001478 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <xPortStartScheduler+0x48>)
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800133e:	f000 f8b7 	bl	80014b0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001342:	4a08      	ldr	r2, [pc, #32]	; (8001364 <xPortStartScheduler+0x4c>)
 8001344:	4b07      	ldr	r3, [pc, #28]	; (8001364 <xPortStartScheduler+0x4c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800134c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800134e:	f7ff ffd3 	bl	80012f8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8001352:	f7ff ffab 	bl	80012ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	bd80      	pop	{r7, pc}
 800135c:	e000ed20 	.word	0xe000ed20
 8001360:	20000004 	.word	0x20000004
 8001364:	e000ef34 	.word	0xe000ef34

08001368 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	f04f 0310 	mov.w	r3, #16
 8001372:	f383 8811 	msr	BASEPRI, r3
 8001376:	f3bf 8f6f 	isb	sy
 800137a:	f3bf 8f4f 	dsb	sy
 800137e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <vPortEnterCritical+0x30>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	3301      	adds	r3, #1
 8001386:	4a04      	ldr	r2, [pc, #16]	; (8001398 <vPortEnterCritical+0x30>)
 8001388:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	20000004 	.word	0x20000004

0800139c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <vPortExitCritical+0x30>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	4a08      	ldr	r2, [pc, #32]	; (80013cc <vPortExitCritical+0x30>)
 80013aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80013ac:	4b07      	ldr	r3, [pc, #28]	; (80013cc <vPortExitCritical+0x30>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d104      	bne.n	80013be <vPortExitCritical+0x22>
 80013b4:	2300      	movs	r3, #0
 80013b6:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000004 	.word	0x20000004

080013d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80013d0:	f3ef 8009 	mrs	r0, PSP
 80013d4:	f3bf 8f6f 	isb	sy
 80013d8:	4b15      	ldr	r3, [pc, #84]	; (8001430 <pxCurrentTCBConst>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	f01e 0f10 	tst.w	lr, #16
 80013e0:	bf08      	it	eq
 80013e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80013e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013ea:	6010      	str	r0, [r2, #0]
 80013ec:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80013f0:	f04f 0010 	mov.w	r0, #16
 80013f4:	f380 8811 	msr	BASEPRI, r0
 80013f8:	f3bf 8f4f 	dsb	sy
 80013fc:	f3bf 8f6f 	isb	sy
 8001400:	f000 ff4e 	bl	80022a0 <vTaskSwitchContext>
 8001404:	f04f 0000 	mov.w	r0, #0
 8001408:	f380 8811 	msr	BASEPRI, r0
 800140c:	bc08      	pop	{r3}
 800140e:	6819      	ldr	r1, [r3, #0]
 8001410:	6808      	ldr	r0, [r1, #0]
 8001412:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001416:	f01e 0f10 	tst.w	lr, #16
 800141a:	bf08      	it	eq
 800141c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001420:	f380 8809 	msr	PSP, r0
 8001424:	f3bf 8f6f 	isb	sy
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	f3af 8000 	nop.w

08001430 <pxCurrentTCBConst>:
 8001430:	200024c4 	.word	0x200024c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001434:	bf00      	nop
 8001436:	bf00      	nop

08001438 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800143e:	f04f 0310 	mov.w	r3, #16
 8001442:	f383 8811 	msr	BASEPRI, r3
 8001446:	f3bf 8f6f 	isb	sy
 800144a:	f3bf 8f4f 	dsb	sy
 800144e:	603b      	str	r3, [r7, #0]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001450:	f000 fe78 	bl	8002144 <xTaskIncrementTick>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <xPortSysTickHandler+0x3c>)
 800145c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	e000ed04 	.word	0xe000ed04

08001478 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800147c:	4a08      	ldr	r2, [pc, #32]	; (80014a0 <vPortSetupTimerInterrupt+0x28>)
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <vPortSetupTimerInterrupt+0x2c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4909      	ldr	r1, [pc, #36]	; (80014a8 <vPortSetupTimerInterrupt+0x30>)
 8001484:	fba1 1303 	umull	r1, r3, r1, r3
 8001488:	099b      	lsrs	r3, r3, #6
 800148a:	3b01      	subs	r3, #1
 800148c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800148e:	4b07      	ldr	r3, [pc, #28]	; (80014ac <vPortSetupTimerInterrupt+0x34>)
 8001490:	2207      	movs	r2, #7
 8001492:	601a      	str	r2, [r3, #0]
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000e014 	.word	0xe000e014
 80014a4:	20000000 	.word	0x20000000
 80014a8:	10624dd3 	.word	0x10624dd3
 80014ac:	e000e010 	.word	0xe000e010

080014b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80014b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80014c0 <vPortEnableVFP+0x10>
 80014b4:	6801      	ldr	r1, [r0, #0]
 80014b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80014ba:	6001      	str	r1, [r0, #0]
 80014bc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80014be:	bf00      	nop
 80014c0:	e000ed88 	.word	0xe000ed88

080014c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 80014d2:	f7ff ff49 	bl	8001368 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014de:	68f9      	ldr	r1, [r7, #12]
 80014e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80014e2:	fb01 f303 	mul.w	r3, r1, r3
 80014e6:	441a      	add	r2, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2200      	movs	r2, #0
 80014f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001502:	3b01      	subs	r3, #1
 8001504:	68f9      	ldr	r1, [r7, #12]
 8001506:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001508:	fb01 f303 	mul.w	r3, r1, r3
 800150c:	441a      	add	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	22ff      	movs	r2, #255	; 0xff
 8001516:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	22ff      	movs	r2, #255	; 0xff
 800151e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d114      	bne.n	8001552 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d01a      	beq.n	8001566 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	3310      	adds	r3, #16
 8001534:	4618      	mov	r0, r3
 8001536:	f000 ff5b 	bl	80023f0 <xTaskRemoveFromEventList>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d012      	beq.n	8001566 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <xQueueGenericReset+0xb0>)
 8001542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	f3bf 8f4f 	dsb	sy
 800154c:	f3bf 8f6f 	isb	sy
 8001550:	e009      	b.n	8001566 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	3310      	adds	r3, #16
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fdbe 	bl	80010d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	3324      	adds	r3, #36	; 0x24
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fdb9 	bl	80010d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001566:	f7ff ff19 	bl	800139c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800156a:	2301      	movs	r3, #1
}
 800156c:	4618      	mov	r0, r3
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	e000ed04 	.word	0xe000ed04

08001578 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af02      	add	r7, sp, #8
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
 8001584:	603b      	str	r3, [r7, #0]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d00d      	beq.n	80015ac <xQueueGenericCreateStatic+0x34>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001598:	f897 2020 	ldrb.w	r2, [r7, #32]
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	4613      	mov	r3, r2
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	68b9      	ldr	r1, [r7, #8]
 80015a6:	68f8      	ldr	r0, [r7, #12]
 80015a8:	f000 f806 	bl	80015b8 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 80015ac:	697b      	ldr	r3, [r7, #20]
	}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop

080015b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
 80015c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d103      	bne.n	80015d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	e002      	b.n	80015da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80015e6:	2101      	movs	r1, #1
 80015e8:	69b8      	ldr	r0, [r7, #24]
 80015ea:	f7ff ff6b 	bl	80014c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	78fa      	ldrb	r2, [r7, #3]
 80015f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80015f6:	bf00      	nop
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop

08001600 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
 800160c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800160e:	2300      	movs	r3, #0
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	623b      	str	r3, [r7, #32]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001616:	f7ff fea7 	bl	8001368 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800161a:	6a3b      	ldr	r3, [r7, #32]
 800161c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800161e:	6a3b      	ldr	r3, [r7, #32]
 8001620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001622:	429a      	cmp	r2, r3
 8001624:	d302      	bcc.n	800162c <xQueueGenericSend+0x2c>
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	2b02      	cmp	r3, #2
 800162a:	d129      	bne.n	8001680 <xQueueGenericSend+0x80>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	68b9      	ldr	r1, [r7, #8]
 8001630:	6a38      	ldr	r0, [r7, #32]
 8001632:	f000 f9bf 	bl	80019b4 <prvCopyDataToQueue>
 8001636:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001638:	6a3b      	ldr	r3, [r7, #32]
 800163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163c:	2b00      	cmp	r3, #0
 800163e:	d010      	beq.n	8001662 <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001640:	6a3b      	ldr	r3, [r7, #32]
 8001642:	3324      	adds	r3, #36	; 0x24
 8001644:	4618      	mov	r0, r3
 8001646:	f000 fed3 	bl	80023f0 <xTaskRemoveFromEventList>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d013      	beq.n	8001678 <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001650:	4b3f      	ldr	r3, [pc, #252]	; (8001750 <xQueueGenericSend+0x150>)
 8001652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	f3bf 8f4f 	dsb	sy
 800165c:	f3bf 8f6f 	isb	sy
 8001660:	e00a      	b.n	8001678 <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d007      	beq.n	8001678 <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001668:	4b39      	ldr	r3, [pc, #228]	; (8001750 <xQueueGenericSend+0x150>)
 800166a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	f3bf 8f4f 	dsb	sy
 8001674:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001678:	f7ff fe90 	bl	800139c <vPortExitCritical>
				return pdPASS;
 800167c:	2301      	movs	r3, #1
 800167e:	e063      	b.n	8001748 <xQueueGenericSend+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d103      	bne.n	800168e <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001686:	f7ff fe89 	bl	800139c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800168a:	2300      	movs	r3, #0
 800168c:	e05c      	b.n	8001748 <xQueueGenericSend+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	2b00      	cmp	r3, #0
 8001692:	d106      	bne.n	80016a2 <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	4618      	mov	r0, r3
 800169a:	f000 feff 	bl	800249c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800169e:	2301      	movs	r3, #1
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80016a2:	f7ff fe7b 	bl	800139c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80016a6:	f000 fca1 	bl	8001fec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80016aa:	f7ff fe5d 	bl	8001368 <vPortEnterCritical>
 80016ae:	6a3b      	ldr	r3, [r7, #32]
 80016b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016b4:	b25b      	sxtb	r3, r3
 80016b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ba:	d103      	bne.n	80016c4 <xQueueGenericSend+0xc4>
 80016bc:	6a3b      	ldr	r3, [r7, #32]
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80016c4:	6a3b      	ldr	r3, [r7, #32]
 80016c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016ca:	b25b      	sxtb	r3, r3
 80016cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d0:	d103      	bne.n	80016da <xQueueGenericSend+0xda>
 80016d2:	6a3b      	ldr	r3, [r7, #32]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80016da:	f7ff fe5f 	bl	800139c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80016de:	1d3a      	adds	r2, r7, #4
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4611      	mov	r1, r2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 feee 	bl	80024c8 <xTaskCheckForTimeOut>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d124      	bne.n	800173c <xQueueGenericSend+0x13c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80016f2:	6a38      	ldr	r0, [r7, #32]
 80016f4:	f000 fa56 	bl	8001ba4 <prvIsQueueFull>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d018      	beq.n	8001730 <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80016fe:	6a3b      	ldr	r3, [r7, #32]
 8001700:	3310      	adds	r3, #16
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	4611      	mov	r1, r2
 8001706:	4618      	mov	r0, r3
 8001708:	f000 fe3e 	bl	8002388 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800170c:	6a38      	ldr	r0, [r7, #32]
 800170e:	f000 f9e1 	bl	8001ad4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001712:	f000 fc79 	bl	8002008 <xTaskResumeAll>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	f47f af7c 	bne.w	8001616 <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
 800171e:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <xQueueGenericSend+0x150>)
 8001720:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	f3bf 8f4f 	dsb	sy
 800172a:	f3bf 8f6f 	isb	sy
 800172e:	e772      	b.n	8001616 <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001730:	6a38      	ldr	r0, [r7, #32]
 8001732:	f000 f9cf 	bl	8001ad4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001736:	f000 fc67 	bl	8002008 <xTaskResumeAll>
 800173a:	e76c      	b.n	8001616 <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800173c:	6a38      	ldr	r0, [r7, #32]
 800173e:	f000 f9c9 	bl	8001ad4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001742:	f000 fc61 	bl	8002008 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001746:	2300      	movs	r3, #0
		}
	}
}
 8001748:	4618      	mov	r0, r3
 800174a:	3728      	adds	r7, #40	; 0x28
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	e000ed04 	.word	0xe000ed04

08001754 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08c      	sub	sp, #48	; 0x30
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
 8001760:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	62bb      	str	r3, [r7, #40]	; 0x28

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001766:	f3ef 8211 	mrs	r2, BASEPRI
 800176a:	f04f 0310 	mov.w	r3, #16
 800176e:	f383 8811 	msr	BASEPRI, r3
 8001772:	f3bf 8f6f 	isb	sy
 8001776:	f3bf 8f4f 	dsb	sy
 800177a:	61ba      	str	r2, [r7, #24]
 800177c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800177e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001780:	623b      	str	r3, [r7, #32]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001784:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800178a:	429a      	cmp	r2, r3
 800178c:	d302      	bcc.n	8001794 <xQueueGenericSendFromISR+0x40>
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	2b02      	cmp	r3, #2
 8001792:	d12a      	bne.n	80017ea <xQueueGenericSendFromISR+0x96>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001796:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800179a:	77fb      	strb	r3, [r7, #31]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	68b9      	ldr	r1, [r7, #8]
 80017a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80017a2:	f000 f907 	bl	80019b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80017a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80017aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ae:	d112      	bne.n	80017d6 <xQueueGenericSendFromISR+0x82>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80017b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d015      	beq.n	80017e4 <xQueueGenericSendFromISR+0x90>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80017b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ba:	3324      	adds	r3, #36	; 0x24
 80017bc:	4618      	mov	r0, r3
 80017be:	f000 fe17 	bl	80023f0 <xTaskRemoveFromEventList>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00d      	beq.n	80017e4 <xQueueGenericSendFromISR+0x90>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d00a      	beq.n	80017e4 <xQueueGenericSendFromISR+0x90>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2201      	movs	r2, #1
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	e006      	b.n	80017e4 <xQueueGenericSendFromISR+0x90>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80017d6:	7ffb      	ldrb	r3, [r7, #31]
 80017d8:	3301      	adds	r3, #1
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	b25a      	sxtb	r2, r3
 80017de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80017e4:	2301      	movs	r3, #1
 80017e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
 80017e8:	e001      	b.n	80017ee <xQueueGenericSendFromISR+0x9a>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017ee:	6a3b      	ldr	r3, [r7, #32]
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80017f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3730      	adds	r7, #48	; 0x30
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop

08001804 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08a      	sub	sp, #40	; 0x28
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
 8001810:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8001812:	2300      	movs	r3, #0
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	623b      	str	r3, [r7, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800181a:	f7ff fda5 	bl	8001368 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800181e:	6a3b      	ldr	r3, [r7, #32]
 8001820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001822:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d046      	beq.n	80018b8 <xQueueGenericReceive+0xb4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800182a:	6a3b      	ldr	r3, [r7, #32]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001830:	68b9      	ldr	r1, [r7, #8]
 8001832:	6a38      	ldr	r0, [r7, #32]
 8001834:	f000 f928 	bl	8001a88 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d121      	bne.n	8001882 <xQueueGenericReceive+0x7e>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	1e5a      	subs	r2, r3, #1
 8001842:	6a3b      	ldr	r3, [r7, #32]
 8001844:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001846:	6a3b      	ldr	r3, [r7, #32]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d104      	bne.n	8001858 <xQueueGenericReceive+0x54>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800184e:	f001 f82b 	bl	80028a8 <pvTaskIncrementMutexHeldCount>
 8001852:	4602      	mov	r2, r0
 8001854:	6a3b      	ldr	r3, [r7, #32]
 8001856:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001858:	6a3b      	ldr	r3, [r7, #32]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d027      	beq.n	80018b0 <xQueueGenericReceive+0xac>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001860:	6a3b      	ldr	r3, [r7, #32]
 8001862:	3310      	adds	r3, #16
 8001864:	4618      	mov	r0, r3
 8001866:	f000 fdc3 	bl	80023f0 <xTaskRemoveFromEventList>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d01f      	beq.n	80018b0 <xQueueGenericReceive+0xac>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8001870:	4b4f      	ldr	r3, [pc, #316]	; (80019b0 <xQueueGenericReceive+0x1ac>)
 8001872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	f3bf 8f4f 	dsb	sy
 800187c:	f3bf 8f6f 	isb	sy
 8001880:	e016      	b.n	80018b0 <xQueueGenericReceive+0xac>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8001882:	6a3b      	ldr	r3, [r7, #32]
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001888:	6a3b      	ldr	r3, [r7, #32]
 800188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188c:	2b00      	cmp	r3, #0
 800188e:	d00f      	beq.n	80018b0 <xQueueGenericReceive+0xac>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001890:	6a3b      	ldr	r3, [r7, #32]
 8001892:	3324      	adds	r3, #36	; 0x24
 8001894:	4618      	mov	r0, r3
 8001896:	f000 fdab 	bl	80023f0 <xTaskRemoveFromEventList>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d007      	beq.n	80018b0 <xQueueGenericReceive+0xac>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 80018a0:	4b43      	ldr	r3, [pc, #268]	; (80019b0 <xQueueGenericReceive+0x1ac>)
 80018a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	f3bf 8f4f 	dsb	sy
 80018ac:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 80018b0:	f7ff fd74 	bl	800139c <vPortExitCritical>
				return pdPASS;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e077      	b.n	80019a8 <xQueueGenericReceive+0x1a4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d103      	bne.n	80018c6 <xQueueGenericReceive+0xc2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80018be:	f7ff fd6d 	bl	800139c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80018c2:	2300      	movs	r3, #0
 80018c4:	e070      	b.n	80019a8 <xQueueGenericReceive+0x1a4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d106      	bne.n	80018da <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80018cc:	f107 0310 	add.w	r3, r7, #16
 80018d0:	4618      	mov	r0, r3
 80018d2:	f000 fde3 	bl	800249c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80018d6:	2301      	movs	r3, #1
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80018da:	f7ff fd5f 	bl	800139c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80018de:	f000 fb85 	bl	8001fec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80018e2:	f7ff fd41 	bl	8001368 <vPortEnterCritical>
 80018e6:	6a3b      	ldr	r3, [r7, #32]
 80018e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018ec:	b25b      	sxtb	r3, r3
 80018ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f2:	d103      	bne.n	80018fc <xQueueGenericReceive+0xf8>
 80018f4:	6a3b      	ldr	r3, [r7, #32]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80018fc:	6a3b      	ldr	r3, [r7, #32]
 80018fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001902:	b25b      	sxtb	r3, r3
 8001904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001908:	d103      	bne.n	8001912 <xQueueGenericReceive+0x10e>
 800190a:	6a3b      	ldr	r3, [r7, #32]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001912:	f7ff fd43 	bl	800139c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001916:	1d3a      	adds	r2, r7, #4
 8001918:	f107 0310 	add.w	r3, r7, #16
 800191c:	4611      	mov	r1, r2
 800191e:	4618      	mov	r0, r3
 8001920:	f000 fdd2 	bl	80024c8 <xTaskCheckForTimeOut>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d131      	bne.n	800198e <xQueueGenericReceive+0x18a>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800192a:	6a38      	ldr	r0, [r7, #32]
 800192c:	f000 f924 	bl	8001b78 <prvIsQueueEmpty>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d025      	beq.n	8001982 <xQueueGenericReceive+0x17e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001936:	6a3b      	ldr	r3, [r7, #32]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d108      	bne.n	8001950 <xQueueGenericReceive+0x14c>
					{
						taskENTER_CRITICAL();
 800193e:	f7ff fd13 	bl	8001368 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8001942:	6a3b      	ldr	r3, [r7, #32]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	4618      	mov	r0, r3
 8001948:	f000 ff04 	bl	8002754 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 800194c:	f7ff fd26 	bl	800139c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001950:	6a3b      	ldr	r3, [r7, #32]
 8001952:	3324      	adds	r3, #36	; 0x24
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	4611      	mov	r1, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f000 fd15 	bl	8002388 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800195e:	6a38      	ldr	r0, [r7, #32]
 8001960:	f000 f8b8 	bl	8001ad4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001964:	f000 fb50 	bl	8002008 <xTaskResumeAll>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	f47f af55 	bne.w	800181a <xQueueGenericReceive+0x16>
				{
					portYIELD_WITHIN_API();
 8001970:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <xQueueGenericReceive+0x1ac>)
 8001972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	f3bf 8f4f 	dsb	sy
 800197c:	f3bf 8f6f 	isb	sy
 8001980:	e74b      	b.n	800181a <xQueueGenericReceive+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001982:	6a38      	ldr	r0, [r7, #32]
 8001984:	f000 f8a6 	bl	8001ad4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001988:	f000 fb3e 	bl	8002008 <xTaskResumeAll>
 800198c:	e745      	b.n	800181a <xQueueGenericReceive+0x16>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800198e:	6a38      	ldr	r0, [r7, #32]
 8001990:	f000 f8a0 	bl	8001ad4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001994:	f000 fb38 	bl	8002008 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001998:	6a38      	ldr	r0, [r7, #32]
 800199a:	f000 f8ed 	bl	8001b78 <prvIsQueueEmpty>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f43f af3a 	beq.w	800181a <xQueueGenericReceive+0x16>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80019a6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3728      	adds	r7, #40	; 0x28
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	e000ed04 	.word	0xe000ed04

080019b4 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10d      	bne.n	80019ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d14d      	bne.n	8001a76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 ff16 	bl	8002810 <xTaskPriorityDisinherit>
 80019e4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2200      	movs	r2, #0
 80019ea:	605a      	str	r2, [r3, #4]
 80019ec:	e043      	b.n	8001a76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d119      	bne.n	8001a28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6898      	ldr	r0, [r3, #8]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	461a      	mov	r2, r3
 80019fe:	68b9      	ldr	r1, [r7, #8]
 8001a00:	f002 fe72 	bl	80046e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0c:	441a      	add	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d32b      	bcc.n	8001a76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	e026      	b.n	8001a76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	68d8      	ldr	r0, [r3, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a30:	461a      	mov	r2, r3
 8001a32:	68b9      	ldr	r1, [r7, #8]
 8001a34:	f002 fe58 	bl	80046e8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	68da      	ldr	r2, [r3, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	425b      	negs	r3, r3
 8001a42:	441a      	add	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	68da      	ldr	r2, [r3, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d207      	bcs.n	8001a64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	425b      	negs	r3, r3
 8001a5e:	441a      	add	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d105      	bne.n	8001a76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d002      	beq.n	8001a76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1c5a      	adds	r2, r3, #1
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8001a7e:	697b      	ldr	r3, [r7, #20]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d018      	beq.n	8001acc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68da      	ldr	r2, [r3, #12]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	441a      	add	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68da      	ldr	r2, [r3, #12]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d303      	bcc.n	8001abc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68d9      	ldr	r1, [r3, #12]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	6838      	ldr	r0, [r7, #0]
 8001ac8:	f002 fe0e 	bl	80046e8 <memcpy>
	}
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001adc:	f7ff fc44 	bl	8001368 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ae6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001ae8:	e011      	b.n	8001b0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d012      	beq.n	8001b18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3324      	adds	r3, #36	; 0x24
 8001af6:	4618      	mov	r0, r3
 8001af8:	f000 fc7a 	bl	80023f0 <xTaskRemoveFromEventList>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001b02:	f000 fd25 	bl	8002550 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	73fb      	strb	r3, [r7, #15]
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	dce9      	bgt.n	8001aea <prvUnlockQueue+0x16>
 8001b16:	e000      	b.n	8001b1a <prvUnlockQueue+0x46>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
 8001b18:	bf00      	nop
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	22ff      	movs	r2, #255	; 0xff
 8001b1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001b22:	f7ff fc3b 	bl	800139c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001b26:	f7ff fc1f 	bl	8001368 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001b32:	e011      	b.n	8001b58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d012      	beq.n	8001b62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3310      	adds	r3, #16
 8001b40:	4618      	mov	r0, r3
 8001b42:	f000 fc55 	bl	80023f0 <xTaskRemoveFromEventList>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001b4c:	f000 fd00 	bl	8002550 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001b50:	7bbb      	ldrb	r3, [r7, #14]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	73bb      	strb	r3, [r7, #14]
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001b58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	dce9      	bgt.n	8001b34 <prvUnlockQueue+0x60>
 8001b60:	e000      	b.n	8001b64 <prvUnlockQueue+0x90>

				--cRxLock;
			}
			else
			{
				break;
 8001b62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	22ff      	movs	r2, #255	; 0xff
 8001b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001b6c:	f7ff fc16 	bl	800139c <vPortExitCritical>
}
 8001b70:	bf00      	nop
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001b80:	f7ff fbf2 	bl	8001368 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d102      	bne.n	8001b92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	e001      	b.n	8001b96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001b96:	f7ff fc01 	bl	800139c <vPortExitCritical>

	return xReturn;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001bac:	f7ff fbdc 	bl	8001368 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d102      	bne.n	8001bc2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	e001      	b.n	8001bc6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001bc6:	f7ff fbe9 	bl	800139c <vPortExitCritical>

	return xReturn;
 8001bca:	68fb      	ldr	r3, [r7, #12]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001be4:	f7ff fbc0 	bl	8001368 <vPortEnterCritical>
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001bee:	b25b      	sxtb	r3, r3
 8001bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf4:	d103      	bne.n	8001bfe <vQueueWaitForMessageRestricted+0x2a>
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c04:	b25b      	sxtb	r3, r3
 8001c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0a:	d103      	bne.n	8001c14 <vQueueWaitForMessageRestricted+0x40>
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c14:	f7ff fbc2 	bl	800139c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d106      	bne.n	8001c2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	3324      	adds	r3, #36	; 0x24
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	68b9      	ldr	r1, [r7, #8]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f000 fbc3 	bl	80023b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001c2e:	6978      	ldr	r0, [r7, #20]
 8001c30:	f7ff ff50 	bl	8001ad4 <prvUnlockQueue>
	}
 8001c34:	bf00      	nop
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08a      	sub	sp, #40	; 0x28
 8001c40:	af04      	add	r7, sp, #16
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
 8001c48:	603b      	str	r3, [r7, #0]
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
		configASSERT( pxTaskBuffer != NULL );

		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d01e      	beq.n	8001c8e <xTaskCreateStatic+0x52>
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d01b      	beq.n	8001c8e <xTaskCreateStatic+0x52>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c58:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c5e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	2202      	movs	r2, #2
 8001c64:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001c68:	2300      	movs	r3, #0
 8001c6a:	9303      	str	r3, [sp, #12]
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	9302      	str	r3, [sp, #8]
 8001c70:	f107 0310 	add.w	r3, r7, #16
 8001c74:	9301      	str	r3, [sp, #4]
 8001c76:	6a3b      	ldr	r3, [r7, #32]
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	68b9      	ldr	r1, [r7, #8]
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f000 f851 	bl	8001d28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001c86:	6978      	ldr	r0, [r7, #20]
 8001c88:	f000 f8c6 	bl	8001e18 <prvAddNewTaskToReadyList>
 8001c8c:	e001      	b.n	8001c92 <xTaskCreateStatic+0x56>
		}
		else
		{
			xReturn = NULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]
		}

		return xReturn;
 8001c92:	693b      	ldr	r3, [r7, #16]
	}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08c      	sub	sp, #48	; 0x30
 8001ca0:	af04      	add	r7, sp, #16
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	603b      	str	r3, [r7, #0]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001cac:	88fb      	ldrh	r3, [r7, #6]
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff f887 	bl	8000dc4 <pvPortMalloc>
 8001cb6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00e      	beq.n	8001cdc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001cbe:	205c      	movs	r0, #92	; 0x5c
 8001cc0:	f7ff f880 	bl	8000dc4 <pvPortMalloc>
 8001cc4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	631a      	str	r2, [r3, #48]	; 0x30
 8001cd2:	e005      	b.n	8001ce0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001cd4:	6978      	ldr	r0, [r7, #20]
 8001cd6:	f7ff f909 	bl	8000eec <vPortFree>
 8001cda:	e001      	b.n	8001ce0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d017      	beq.n	8001d16 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001cee:	88fa      	ldrh	r2, [r7, #6]
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	9303      	str	r3, [sp, #12]
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	9302      	str	r3, [sp, #8]
 8001cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cfa:	9301      	str	r3, [sp, #4]
 8001cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	68b9      	ldr	r1, [r7, #8]
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f000 f80f 	bl	8001d28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001d0a:	69f8      	ldr	r0, [r7, #28]
 8001d0c:	f000 f884 	bl	8001e18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001d10:	2301      	movs	r3, #1
 8001d12:	61bb      	str	r3, [r7, #24]
 8001d14:	e002      	b.n	8001d1c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001d16:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001d1c:	69bb      	ldr	r3, [r7, #24]
	}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3720      	adds	r7, #32
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop

08001d28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
 8001d34:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	461a      	mov	r2, r3
 8001d40:	21a5      	movs	r1, #165	; 0xa5
 8001d42:	f002 fcdc 	bl	80046fe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001d50:	3b01      	subs	r3, #1
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	f023 0307 	bic.w	r3, r3, #7
 8001d5e:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	e012      	b.n	8001d8c <prvInitialiseNewTask+0x64>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	7819      	ldrb	r1, [r3, #0]
 8001d6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	4413      	add	r3, r2
 8001d74:	3334      	adds	r3, #52	; 0x34
 8001d76:	460a      	mov	r2, r1
 8001d78:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	4413      	add	r3, r2
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d006      	beq.n	8001d94 <prvInitialiseNewTask+0x6c>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	2b0f      	cmp	r3, #15
 8001d90:	d9e9      	bls.n	8001d66 <prvInitialiseNewTask+0x3e>
 8001d92:	e000      	b.n	8001d96 <prvInitialiseNewTask+0x6e>
		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
		{
			break;
 8001d94:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	2b37      	cmp	r3, #55	; 0x37
 8001da2:	d901      	bls.n	8001da8 <prvInitialiseNewTask+0x80>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001da4:	2337      	movs	r3, #55	; 0x37
 8001da6:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001daa:	6a3a      	ldr	r2, [r7, #32]
 8001dac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db0:	6a3a      	ldr	r2, [r7, #32]
 8001db2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8001db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db6:	2200      	movs	r2, #0
 8001db8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff f9aa 	bl	8001118 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc6:	3318      	adds	r3, #24
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff f9a5 	bl	8001118 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001dd2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001dd4:	6a3b      	ldr	r3, [r7, #32]
 8001dd6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8001dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ddc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001de2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de6:	2200      	movs	r2, #0
 8001de8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	68f9      	ldr	r1, [r7, #12]
 8001df6:	6938      	ldr	r0, [r7, #16]
 8001df8:	f7ff fa24 	bl	8001244 <pxPortInitialiseStack>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e00:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d002      	beq.n	8001e0e <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001e0e:	bf00      	nop
 8001e10:	3718      	adds	r7, #24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop

08001e18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001e20:	f7ff faa2 	bl	8001368 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001e24:	4b2d      	ldr	r3, [pc, #180]	; (8001edc <prvAddNewTaskToReadyList+0xc4>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	4a2c      	ldr	r2, [pc, #176]	; (8001edc <prvAddNewTaskToReadyList+0xc4>)
 8001e2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001e2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ee0 <prvAddNewTaskToReadyList+0xc8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d109      	bne.n	8001e4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001e36:	4a2a      	ldr	r2, [pc, #168]	; (8001ee0 <prvAddNewTaskToReadyList+0xc8>)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001e3c:	4b27      	ldr	r3, [pc, #156]	; (8001edc <prvAddNewTaskToReadyList+0xc4>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d110      	bne.n	8001e66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001e44:	f000 fba8 	bl	8002598 <prvInitialiseTaskLists>
 8001e48:	e00d      	b.n	8001e66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001e4a:	4b26      	ldr	r3, [pc, #152]	; (8001ee4 <prvAddNewTaskToReadyList+0xcc>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d109      	bne.n	8001e66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001e52:	4b23      	ldr	r3, [pc, #140]	; (8001ee0 <prvAddNewTaskToReadyList+0xc8>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d802      	bhi.n	8001e66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001e60:	4a1f      	ldr	r2, [pc, #124]	; (8001ee0 <prvAddNewTaskToReadyList+0xc8>)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001e66:	4b20      	ldr	r3, [pc, #128]	; (8001ee8 <prvAddNewTaskToReadyList+0xd0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	4a1e      	ldr	r2, [pc, #120]	; (8001ee8 <prvAddNewTaskToReadyList+0xd0>)
 8001e6e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001e70:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <prvAddNewTaskToReadyList+0xd0>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e7c:	4b1b      	ldr	r3, [pc, #108]	; (8001eec <prvAddNewTaskToReadyList+0xd4>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d903      	bls.n	8001e8c <prvAddNewTaskToReadyList+0x74>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e88:	4a18      	ldr	r2, [pc, #96]	; (8001eec <prvAddNewTaskToReadyList+0xd4>)
 8001e8a:	6013      	str	r3, [r2, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e90:	4613      	mov	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4a15      	ldr	r2, [pc, #84]	; (8001ef0 <prvAddNewTaskToReadyList+0xd8>)
 8001e9a:	441a      	add	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3304      	adds	r3, #4
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	f7ff f946 	bl	8001134 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001ea8:	f7ff fa78 	bl	800139c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001eac:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <prvAddNewTaskToReadyList+0xcc>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00e      	beq.n	8001ed2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001eb4:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <prvAddNewTaskToReadyList+0xc8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d207      	bcs.n	8001ed2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001ec2:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <prvAddNewTaskToReadyList+0xdc>)
 8001ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	f3bf 8f4f 	dsb	sy
 8001ece:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20002998 	.word	0x20002998
 8001ee0:	200024c4 	.word	0x200024c4
 8001ee4:	200029a4 	.word	0x200029a4
 8001ee8:	200029b4 	.word	0x200029b4
 8001eec:	200029a0 	.word	0x200029a0
 8001ef0:	200024c8 	.word	0x200024c8
 8001ef4:	e000ed04 	.word	0xe000ed04

08001ef8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d008      	beq.n	8001f1c <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 8001f0a:	f000 f86f 	bl	8001fec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001f0e:	2100      	movs	r1, #0
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 fcdd 	bl	80028d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001f16:	f000 f877 	bl	8002008 <xTaskResumeAll>
 8001f1a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d107      	bne.n	8001f32 <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
 8001f22:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <vTaskDelay+0x44>)
 8001f24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	f3bf 8f4f 	dsb	sy
 8001f2e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001f32:	bf00      	nop
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	e000ed04 	.word	0xe000ed04

08001f40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08a      	sub	sp, #40	; 0x28
 8001f44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001f4e:	1d3a      	adds	r2, r7, #4
 8001f50:	f107 0108 	add.w	r1, r7, #8
 8001f54:	f107 030c 	add.w	r3, r7, #12
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7fe f9bd 	bl	80002d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	9202      	str	r2, [sp, #8]
 8001f66:	9301      	str	r3, [sp, #4]
 8001f68:	2300      	movs	r3, #0
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	460a      	mov	r2, r1
 8001f70:	4918      	ldr	r1, [pc, #96]	; (8001fd4 <vTaskStartScheduler+0x94>)
 8001f72:	4819      	ldr	r0, [pc, #100]	; (8001fd8 <vTaskStartScheduler+0x98>)
 8001f74:	f7ff fe62 	bl	8001c3c <xTaskCreateStatic>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <vTaskStartScheduler+0x9c>)
 8001f7c:	601a      	str	r2, [r3, #0]
												( void * ) NULL,
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001f7e:	4b17      	ldr	r3, [pc, #92]	; (8001fdc <vTaskStartScheduler+0x9c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d002      	beq.n	8001f8c <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
 8001f86:	2301      	movs	r3, #1
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	e001      	b.n	8001f90 <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d102      	bne.n	8001f9c <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8001f96:	f000 fcef 	bl	8002978 <xTimerCreateTimerTask>
 8001f9a:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d114      	bne.n	8001fcc <vTaskStartScheduler+0x8c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001fa2:	f04f 0310 	mov.w	r3, #16
 8001fa6:	f383 8811 	msr	BASEPRI, r3
 8001faa:	f3bf 8f6f 	isb	sy
 8001fae:	f3bf 8f4f 	dsb	sy
 8001fb2:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <vTaskStartScheduler+0xa0>)
 8001fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8001fba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001fbc:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <vTaskStartScheduler+0xa4>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001fc2:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <vTaskStartScheduler+0xa8>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001fc8:	f7ff f9a6 	bl	8001318 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001fcc:	bf00      	nop
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	080055f0 	.word	0x080055f0
 8001fd8:	08002569 	.word	0x08002569
 8001fdc:	200029bc 	.word	0x200029bc
 8001fe0:	200029b8 	.word	0x200029b8
 8001fe4:	200029a4 	.word	0x200029a4
 8001fe8:	2000299c 	.word	0x2000299c

08001fec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001ff0:	4b04      	ldr	r3, [pc, #16]	; (8002004 <vTaskSuspendAll+0x18>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	4a03      	ldr	r2, [pc, #12]	; (8002004 <vTaskSuspendAll+0x18>)
 8001ff8:	6013      	str	r3, [r2, #0]
}
 8001ffa:	bf00      	nop
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	200029c0 	.word	0x200029c0

08002008 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002012:	2300      	movs	r3, #0
 8002014:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002016:	f7ff f9a7 	bl	8001368 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800201a:	4b39      	ldr	r3, [pc, #228]	; (8002100 <xTaskResumeAll+0xf8>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	3b01      	subs	r3, #1
 8002020:	4a37      	ldr	r2, [pc, #220]	; (8002100 <xTaskResumeAll+0xf8>)
 8002022:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002024:	4b36      	ldr	r3, [pc, #216]	; (8002100 <xTaskResumeAll+0xf8>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d162      	bne.n	80020f2 <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800202c:	4b35      	ldr	r3, [pc, #212]	; (8002104 <xTaskResumeAll+0xfc>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d05e      	beq.n	80020f2 <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002034:	e02f      	b.n	8002096 <xTaskResumeAll+0x8e>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002036:	4b34      	ldr	r3, [pc, #208]	; (8002108 <xTaskResumeAll+0x100>)
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	3318      	adds	r3, #24
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff f8d4 	bl	80011f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	3304      	adds	r3, #4
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff f8cf 	bl	80011f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002056:	4b2d      	ldr	r3, [pc, #180]	; (800210c <xTaskResumeAll+0x104>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	429a      	cmp	r2, r3
 800205c:	d903      	bls.n	8002066 <xTaskResumeAll+0x5e>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002062:	4a2a      	ldr	r2, [pc, #168]	; (800210c <xTaskResumeAll+0x104>)
 8002064:	6013      	str	r3, [r2, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800206a:	4613      	mov	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4a27      	ldr	r2, [pc, #156]	; (8002110 <xTaskResumeAll+0x108>)
 8002074:	441a      	add	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	3304      	adds	r3, #4
 800207a:	4619      	mov	r1, r3
 800207c:	4610      	mov	r0, r2
 800207e:	f7ff f859 	bl	8001134 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002086:	4b23      	ldr	r3, [pc, #140]	; (8002114 <xTaskResumeAll+0x10c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208c:	429a      	cmp	r2, r3
 800208e:	d302      	bcc.n	8002096 <xTaskResumeAll+0x8e>
					{
						xYieldPending = pdTRUE;
 8002090:	4b21      	ldr	r3, [pc, #132]	; (8002118 <xTaskResumeAll+0x110>)
 8002092:	2201      	movs	r2, #1
 8002094:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002096:	4b1c      	ldr	r3, [pc, #112]	; (8002108 <xTaskResumeAll+0x100>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1cb      	bne.n	8002036 <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <xTaskResumeAll+0xa0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80020a4:	f000 fb12 	bl	80026cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80020a8:	4b1c      	ldr	r3, [pc, #112]	; (800211c <xTaskResumeAll+0x114>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d010      	beq.n	80020d6 <xTaskResumeAll+0xce>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80020b4:	f000 f846 	bl	8002144 <xTaskIncrementTick>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d002      	beq.n	80020c4 <xTaskResumeAll+0xbc>
							{
								xYieldPending = pdTRUE;
 80020be:	4b16      	ldr	r3, [pc, #88]	; (8002118 <xTaskResumeAll+0x110>)
 80020c0:	2201      	movs	r2, #1
 80020c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1f1      	bne.n	80020b4 <xTaskResumeAll+0xac>

						uxPendedTicks = 0;
 80020d0:	4b12      	ldr	r3, [pc, #72]	; (800211c <xTaskResumeAll+0x114>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80020d6:	4b10      	ldr	r3, [pc, #64]	; (8002118 <xTaskResumeAll+0x110>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d009      	beq.n	80020f2 <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80020de:	2301      	movs	r3, #1
 80020e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80020e2:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <xTaskResumeAll+0x118>)
 80020e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	f3bf 8f4f 	dsb	sy
 80020ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80020f2:	f7ff f953 	bl	800139c <vPortExitCritical>

	return xAlreadyYielded;
 80020f6:	68bb      	ldr	r3, [r7, #8]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	200029c0 	.word	0x200029c0
 8002104:	20002998 	.word	0x20002998
 8002108:	20002958 	.word	0x20002958
 800210c:	200029a0 	.word	0x200029a0
 8002110:	200024c8 	.word	0x200024c8
 8002114:	200024c4 	.word	0x200024c4
 8002118:	200029ac 	.word	0x200029ac
 800211c:	200029a8 	.word	0x200029a8
 8002120:	e000ed04 	.word	0xe000ed04

08002124 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800212a:	4b05      	ldr	r3, [pc, #20]	; (8002140 <xTaskGetTickCount+0x1c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002130:	687b      	ldr	r3, [r7, #4]
}
 8002132:	4618      	mov	r0, r3
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	2000299c 	.word	0x2000299c

08002144 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800214e:	4b49      	ldr	r3, [pc, #292]	; (8002274 <xTaskIncrementTick+0x130>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d17d      	bne.n	8002252 <xTaskIncrementTick+0x10e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8002156:	4b48      	ldr	r3, [pc, #288]	; (8002278 <xTaskIncrementTick+0x134>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	3301      	adds	r3, #1
 800215c:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800215e:	4a46      	ldr	r2, [pc, #280]	; (8002278 <xTaskIncrementTick+0x134>)
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d110      	bne.n	800218c <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 800216a:	4b44      	ldr	r3, [pc, #272]	; (800227c <xTaskIncrementTick+0x138>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	4b43      	ldr	r3, [pc, #268]	; (8002280 <xTaskIncrementTick+0x13c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a41      	ldr	r2, [pc, #260]	; (800227c <xTaskIncrementTick+0x138>)
 8002176:	6013      	str	r3, [r2, #0]
 8002178:	4a41      	ldr	r2, [pc, #260]	; (8002280 <xTaskIncrementTick+0x13c>)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	4b41      	ldr	r3, [pc, #260]	; (8002284 <xTaskIncrementTick+0x140>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	3301      	adds	r3, #1
 8002184:	4a3f      	ldr	r2, [pc, #252]	; (8002284 <xTaskIncrementTick+0x140>)
 8002186:	6013      	str	r3, [r2, #0]
 8002188:	f000 faa0 	bl	80026cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800218c:	4b3e      	ldr	r3, [pc, #248]	; (8002288 <xTaskIncrementTick+0x144>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	429a      	cmp	r2, r3
 8002194:	d34e      	bcc.n	8002234 <xTaskIncrementTick+0xf0>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002196:	4b39      	ldr	r3, [pc, #228]	; (800227c <xTaskIncrementTick+0x138>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <xTaskIncrementTick+0x60>
 80021a0:	2301      	movs	r3, #1
 80021a2:	e000      	b.n	80021a6 <xTaskIncrementTick+0x62>
 80021a4:	2300      	movs	r3, #0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d004      	beq.n	80021b4 <xTaskIncrementTick+0x70>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021aa:	4b37      	ldr	r3, [pc, #220]	; (8002288 <xTaskIncrementTick+0x144>)
 80021ac:	f04f 32ff 	mov.w	r2, #4294967295
 80021b0:	601a      	str	r2, [r3, #0]
					break;
 80021b2:	e03f      	b.n	8002234 <xTaskIncrementTick+0xf0>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80021b4:	4b31      	ldr	r3, [pc, #196]	; (800227c <xTaskIncrementTick+0x138>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d203      	bcs.n	80021d4 <xTaskIncrementTick+0x90>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80021cc:	4a2e      	ldr	r2, [pc, #184]	; (8002288 <xTaskIncrementTick+0x144>)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6013      	str	r3, [r2, #0]
						break;
 80021d2:	e02f      	b.n	8002234 <xTaskIncrementTick+0xf0>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	3304      	adds	r3, #4
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff f809 	bl	80011f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d004      	beq.n	80021f0 <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	3318      	adds	r3, #24
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff f800 	bl	80011f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021f4:	4b25      	ldr	r3, [pc, #148]	; (800228c <xTaskIncrementTick+0x148>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d903      	bls.n	8002204 <xTaskIncrementTick+0xc0>
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002200:	4a22      	ldr	r2, [pc, #136]	; (800228c <xTaskIncrementTick+0x148>)
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002208:	4613      	mov	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4a1f      	ldr	r2, [pc, #124]	; (8002290 <xTaskIncrementTick+0x14c>)
 8002212:	441a      	add	r2, r3
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	3304      	adds	r3, #4
 8002218:	4619      	mov	r1, r3
 800221a:	4610      	mov	r0, r2
 800221c:	f7fe ff8a 	bl	8001134 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002224:	4b1b      	ldr	r3, [pc, #108]	; (8002294 <xTaskIncrementTick+0x150>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222a:	429a      	cmp	r2, r3
 800222c:	d3b3      	bcc.n	8002196 <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 800222e:	2301      	movs	r3, #1
 8002230:	617b      	str	r3, [r7, #20]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
 8002232:	e7b0      	b.n	8002196 <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002234:	4b17      	ldr	r3, [pc, #92]	; (8002294 <xTaskIncrementTick+0x150>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800223a:	4915      	ldr	r1, [pc, #84]	; (8002290 <xTaskIncrementTick+0x14c>)
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d907      	bls.n	800225c <xTaskIncrementTick+0x118>
			{
				xSwitchRequired = pdTRUE;
 800224c:	2301      	movs	r3, #1
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	e004      	b.n	800225c <xTaskIncrementTick+0x118>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002252:	4b11      	ldr	r3, [pc, #68]	; (8002298 <xTaskIncrementTick+0x154>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	3301      	adds	r3, #1
 8002258:	4a0f      	ldr	r2, [pc, #60]	; (8002298 <xTaskIncrementTick+0x154>)
 800225a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800225c:	4b0f      	ldr	r3, [pc, #60]	; (800229c <xTaskIncrementTick+0x158>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <xTaskIncrementTick+0x124>
		{
			xSwitchRequired = pdTRUE;
 8002264:	2301      	movs	r3, #1
 8002266:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002268:	697b      	ldr	r3, [r7, #20]
}
 800226a:	4618      	mov	r0, r3
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	200029c0 	.word	0x200029c0
 8002278:	2000299c 	.word	0x2000299c
 800227c:	20002950 	.word	0x20002950
 8002280:	20002954 	.word	0x20002954
 8002284:	200029b0 	.word	0x200029b0
 8002288:	200029b8 	.word	0x200029b8
 800228c:	200029a0 	.word	0x200029a0
 8002290:	200024c8 	.word	0x200024c8
 8002294:	200024c4 	.word	0x200024c4
 8002298:	200029a8 	.word	0x200029a8
 800229c:	200029ac 	.word	0x200029ac

080022a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80022a6:	4b33      	ldr	r3, [pc, #204]	; (8002374 <vTaskSwitchContext+0xd4>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80022ae:	4b32      	ldr	r3, [pc, #200]	; (8002378 <vTaskSwitchContext+0xd8>)
 80022b0:	2201      	movs	r2, #1
 80022b2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80022b4:	e05a      	b.n	800236c <vTaskSwitchContext+0xcc>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 80022b6:	4b30      	ldr	r3, [pc, #192]	; (8002378 <vTaskSwitchContext+0xd8>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
 80022bc:	4b2f      	ldr	r3, [pc, #188]	; (800237c <vTaskSwitchContext+0xdc>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80022c8:	607b      	str	r3, [r7, #4]
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d111      	bne.n	80022f8 <vTaskSwitchContext+0x58>
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	3304      	adds	r3, #4
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d10b      	bne.n	80022f8 <vTaskSwitchContext+0x58>
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	3308      	adds	r3, #8
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d105      	bne.n	80022f8 <vTaskSwitchContext+0x58>
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	330c      	adds	r3, #12
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d008      	beq.n	800230a <vTaskSwitchContext+0x6a>
 80022f8:	4b20      	ldr	r3, [pc, #128]	; (800237c <vTaskSwitchContext+0xdc>)
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	4b1f      	ldr	r3, [pc, #124]	; (800237c <vTaskSwitchContext+0xdc>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	3334      	adds	r3, #52	; 0x34
 8002302:	4619      	mov	r1, r3
 8002304:	4610      	mov	r0, r2
 8002306:	f7fd ffdb 	bl	80002c0 <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800230a:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <vTaskSwitchContext+0xe0>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	e002      	b.n	8002318 <vTaskSwitchContext+0x78>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	3b01      	subs	r3, #1
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	491a      	ldr	r1, [pc, #104]	; (8002384 <vTaskSwitchContext+0xe4>)
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	4613      	mov	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0f2      	beq.n	8002312 <vTaskSwitchContext+0x72>
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	4613      	mov	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4a13      	ldr	r2, [pc, #76]	; (8002384 <vTaskSwitchContext+0xe4>)
 8002338:	4413      	add	r3, r2
 800233a:	603b      	str	r3, [r7, #0]
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	3308      	adds	r3, #8
 800234e:	429a      	cmp	r2, r3
 8002350:	d104      	bne.n	800235c <vTaskSwitchContext+0xbc>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	605a      	str	r2, [r3, #4]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	4a06      	ldr	r2, [pc, #24]	; (800237c <vTaskSwitchContext+0xdc>)
 8002364:	6013      	str	r3, [r2, #0]
 8002366:	4a06      	ldr	r2, [pc, #24]	; (8002380 <vTaskSwitchContext+0xe0>)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6013      	str	r3, [r2, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800236c:	bf00      	nop
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	200029c0 	.word	0x200029c0
 8002378:	200029ac 	.word	0x200029ac
 800237c:	200024c4 	.word	0x200024c4
 8002380:	200029a0 	.word	0x200029a0
 8002384:	200024c8 	.word	0x200024c8

08002388 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002392:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <vTaskPlaceOnEventList+0x28>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	3318      	adds	r3, #24
 8002398:	4619      	mov	r1, r3
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7fe feee 	bl	800117c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80023a0:	2101      	movs	r1, #1
 80023a2:	6838      	ldr	r0, [r7, #0]
 80023a4:	f000 fa94 	bl	80028d0 <prvAddCurrentTaskToDelayedList>
}
 80023a8:	bf00      	nop
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	200024c4 	.word	0x200024c4

080023b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80023c0:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <vTaskPlaceOnEventListRestricted+0x38>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	3318      	adds	r3, #24
 80023c6:	4619      	mov	r1, r3
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f7fe feb3 	bl	8001134 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d002      	beq.n	80023da <vTaskPlaceOnEventListRestricted+0x26>
		{
			xTicksToWait = portMAX_DELAY;
 80023d4:	f04f 33ff 	mov.w	r3, #4294967295
 80023d8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	68b8      	ldr	r0, [r7, #8]
 80023de:	f000 fa77 	bl	80028d0 <prvAddCurrentTaskToDelayedList>
	}
 80023e2:	bf00      	nop
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	200024c4 	.word	0x200024c4

080023f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	3318      	adds	r3, #24
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe fef3 	bl	80011f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800240a:	4b1e      	ldr	r3, [pc, #120]	; (8002484 <xTaskRemoveFromEventList+0x94>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d11d      	bne.n	800244e <xTaskRemoveFromEventList+0x5e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	3304      	adds	r3, #4
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe feea 	bl	80011f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002420:	4b19      	ldr	r3, [pc, #100]	; (8002488 <xTaskRemoveFromEventList+0x98>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	429a      	cmp	r2, r3
 8002426:	d903      	bls.n	8002430 <xTaskRemoveFromEventList+0x40>
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242c:	4a16      	ldr	r2, [pc, #88]	; (8002488 <xTaskRemoveFromEventList+0x98>)
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002434:	4613      	mov	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4413      	add	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4a13      	ldr	r2, [pc, #76]	; (800248c <xTaskRemoveFromEventList+0x9c>)
 800243e:	441a      	add	r2, r3
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	3304      	adds	r3, #4
 8002444:	4619      	mov	r1, r3
 8002446:	4610      	mov	r0, r2
 8002448:	f7fe fe74 	bl	8001134 <vListInsertEnd>
 800244c:	e005      	b.n	800245a <xTaskRemoveFromEventList+0x6a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	3318      	adds	r3, #24
 8002452:	4619      	mov	r1, r3
 8002454:	480e      	ldr	r0, [pc, #56]	; (8002490 <xTaskRemoveFromEventList+0xa0>)
 8002456:	f7fe fe6d 	bl	8001134 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800245e:	4b0d      	ldr	r3, [pc, #52]	; (8002494 <xTaskRemoveFromEventList+0xa4>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002464:	429a      	cmp	r2, r3
 8002466:	d905      	bls.n	8002474 <xTaskRemoveFromEventList+0x84>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002468:	2301      	movs	r3, #1
 800246a:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800246c:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <xTaskRemoveFromEventList+0xa8>)
 800246e:	2201      	movs	r2, #1
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	e001      	b.n	8002478 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		xReturn = pdFALSE;
 8002474:	2300      	movs	r3, #0
 8002476:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002478:	68fb      	ldr	r3, [r7, #12]
}
 800247a:	4618      	mov	r0, r3
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	200029c0 	.word	0x200029c0
 8002488:	200029a0 	.word	0x200029a0
 800248c:	200024c8 	.word	0x200024c8
 8002490:	20002958 	.word	0x20002958
 8002494:	200024c4 	.word	0x200024c4
 8002498:	200029ac 	.word	0x200029ac

0800249c <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80024a4:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <vTaskSetTimeOutState+0x24>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80024ac:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <vTaskSetTimeOutState+0x28>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	605a      	str	r2, [r3, #4]
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	200029b0 	.word	0x200029b0
 80024c4:	2000299c 	.word	0x2000299c

080024c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 80024d2:	f7fe ff49 	bl	8001368 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80024d6:	4b1c      	ldr	r3, [pc, #112]	; (8002548 <xTaskCheckForTimeOut+0x80>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e4:	d102      	bne.n	80024ec <xTaskCheckForTimeOut+0x24>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80024e6:	2300      	movs	r3, #0
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	e026      	b.n	800253a <xTaskCheckForTimeOut+0x72>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	4b16      	ldr	r3, [pc, #88]	; (800254c <xTaskCheckForTimeOut+0x84>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d007      	beq.n	8002508 <xTaskCheckForTimeOut+0x40>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d802      	bhi.n	8002508 <xTaskCheckForTimeOut+0x40>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002502:	2301      	movs	r3, #1
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	e018      	b.n	800253a <xTaskCheckForTimeOut+0x72>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	1ad2      	subs	r2, r2, r3
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	429a      	cmp	r2, r3
 8002516:	d20e      	bcs.n	8002536 <xTaskCheckForTimeOut+0x6e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6859      	ldr	r1, [r3, #4]
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	1acb      	subs	r3, r1, r3
 8002524:	441a      	add	r2, r3
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7ff ffb6 	bl	800249c <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8002530:	2300      	movs	r3, #0
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	e001      	b.n	800253a <xTaskCheckForTimeOut+0x72>
		}
		else
		{
			xReturn = pdTRUE;
 8002536:	2301      	movs	r3, #1
 8002538:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800253a:	f7fe ff2f 	bl	800139c <vPortExitCritical>

	return xReturn;
 800253e:	68fb      	ldr	r3, [r7, #12]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	2000299c 	.word	0x2000299c
 800254c:	200029b0 	.word	0x200029b0

08002550 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002554:	4b03      	ldr	r3, [pc, #12]	; (8002564 <vTaskMissedYield+0x14>)
 8002556:	2201      	movs	r2, #1
 8002558:	601a      	str	r2, [r3, #0]
}
 800255a:	bf00      	nop
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	200029ac 	.word	0x200029ac

08002568 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002570:	f000 f852 	bl	8002618 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002574:	4b06      	ldr	r3, [pc, #24]	; (8002590 <prvIdleTask+0x28>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d9f9      	bls.n	8002570 <prvIdleTask+0x8>
			{
				taskYIELD();
 800257c:	4b05      	ldr	r3, [pc, #20]	; (8002594 <prvIdleTask+0x2c>)
 800257e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	f3bf 8f4f 	dsb	sy
 8002588:	f3bf 8f6f 	isb	sy
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 800258c:	e7f0      	b.n	8002570 <prvIdleTask+0x8>
 800258e:	bf00      	nop
 8002590:	200024c8 	.word	0x200024c8
 8002594:	e000ed04 	.word	0xe000ed04

08002598 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800259e:	2300      	movs	r3, #0
 80025a0:	607b      	str	r3, [r7, #4]
 80025a2:	e00c      	b.n	80025be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4a12      	ldr	r2, [pc, #72]	; (80025f8 <prvInitialiseTaskLists+0x60>)
 80025b0:	4413      	add	r3, r2
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fe fd90 	bl	80010d8 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3301      	adds	r3, #1
 80025bc:	607b      	str	r3, [r7, #4]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b37      	cmp	r3, #55	; 0x37
 80025c2:	d9ef      	bls.n	80025a4 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 80025c4:	480d      	ldr	r0, [pc, #52]	; (80025fc <prvInitialiseTaskLists+0x64>)
 80025c6:	f7fe fd87 	bl	80010d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80025ca:	480d      	ldr	r0, [pc, #52]	; (8002600 <prvInitialiseTaskLists+0x68>)
 80025cc:	f7fe fd84 	bl	80010d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80025d0:	480c      	ldr	r0, [pc, #48]	; (8002604 <prvInitialiseTaskLists+0x6c>)
 80025d2:	f7fe fd81 	bl	80010d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80025d6:	480c      	ldr	r0, [pc, #48]	; (8002608 <prvInitialiseTaskLists+0x70>)
 80025d8:	f7fe fd7e 	bl	80010d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80025dc:	480b      	ldr	r0, [pc, #44]	; (800260c <prvInitialiseTaskLists+0x74>)
 80025de:	f7fe fd7b 	bl	80010d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80025e2:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <prvInitialiseTaskLists+0x78>)
 80025e4:	4a05      	ldr	r2, [pc, #20]	; (80025fc <prvInitialiseTaskLists+0x64>)
 80025e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80025e8:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <prvInitialiseTaskLists+0x7c>)
 80025ea:	4a05      	ldr	r2, [pc, #20]	; (8002600 <prvInitialiseTaskLists+0x68>)
 80025ec:	601a      	str	r2, [r3, #0]
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	200024c8 	.word	0x200024c8
 80025fc:	20002928 	.word	0x20002928
 8002600:	2000293c 	.word	0x2000293c
 8002604:	20002958 	.word	0x20002958
 8002608:	2000296c 	.word	0x2000296c
 800260c:	20002984 	.word	0x20002984
 8002610:	20002950 	.word	0x20002950
 8002614:	20002954 	.word	0x20002954

08002618 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800261e:	e028      	b.n	8002672 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8002620:	f7ff fce4 	bl	8001fec <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002624:	4b17      	ldr	r3, [pc, #92]	; (8002684 <prvCheckTasksWaitingTermination+0x6c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	bf0c      	ite	eq
 800262c:	2301      	moveq	r3, #1
 800262e:	2300      	movne	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8002634:	f7ff fce8 	bl	8002008 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d119      	bne.n	8002672 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800263e:	f7fe fe93 	bl	8001368 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002642:	4b10      	ldr	r3, [pc, #64]	; (8002684 <prvCheckTasksWaitingTermination+0x6c>)
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	3304      	adds	r3, #4
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe fdce 	bl	80011f0 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8002654:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <prvCheckTasksWaitingTermination+0x70>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	3b01      	subs	r3, #1
 800265a:	4a0b      	ldr	r2, [pc, #44]	; (8002688 <prvCheckTasksWaitingTermination+0x70>)
 800265c:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 800265e:	4b0b      	ldr	r3, [pc, #44]	; (800268c <prvCheckTasksWaitingTermination+0x74>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	3b01      	subs	r3, #1
 8002664:	4a09      	ldr	r2, [pc, #36]	; (800268c <prvCheckTasksWaitingTermination+0x74>)
 8002666:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8002668:	f7fe fe98 	bl	800139c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 800266c:	6838      	ldr	r0, [r7, #0]
 800266e:	f000 f80f 	bl	8002690 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002672:	4b06      	ldr	r3, [pc, #24]	; (800268c <prvCheckTasksWaitingTermination+0x74>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1d2      	bne.n	8002620 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	2000296c 	.word	0x2000296c
 8002688:	20002998 	.word	0x20002998
 800268c:	20002980 	.word	0x20002980

08002690 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d108      	bne.n	80026b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7fe fc20 	bl	8000eec <vPortFree>
				vPortFree( pxTCB );
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7fe fc1d 	bl	8000eec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80026b2:	e007      	b.n	80026c4 <prvDeleteTCB+0x34>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d102      	bne.n	80026c4 <prvDeleteTCB+0x34>
			{
				/* Only the stack was statically allocated, so the TCB is the
				only memory that must be freed. */
				vPortFree( pxTCB );
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7fe fc14 	bl	8000eec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80026c4:	bf00      	nop
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026d2:	4b0f      	ldr	r3, [pc, #60]	; (8002710 <prvResetNextTaskUnblockTime+0x44>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <prvResetNextTaskUnblockTime+0x14>
 80026dc:	2301      	movs	r3, #1
 80026de:	e000      	b.n	80026e2 <prvResetNextTaskUnblockTime+0x16>
 80026e0:	2300      	movs	r3, #0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d004      	beq.n	80026f0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80026e6:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <prvResetNextTaskUnblockTime+0x48>)
 80026e8:	f04f 32ff 	mov.w	r2, #4294967295
 80026ec:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80026ee:	e008      	b.n	8002702 <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80026f0:	4b07      	ldr	r3, [pc, #28]	; (8002710 <prvResetNextTaskUnblockTime+0x44>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	4a05      	ldr	r2, [pc, #20]	; (8002714 <prvResetNextTaskUnblockTime+0x48>)
 8002700:	6013      	str	r3, [r2, #0]
	}
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	20002950 	.word	0x20002950
 8002714:	200029b8 	.word	0x200029b8

08002718 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800271e:	4b0b      	ldr	r3, [pc, #44]	; (800274c <xTaskGetSchedulerState+0x34>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d102      	bne.n	800272c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002726:	2301      	movs	r3, #1
 8002728:	607b      	str	r3, [r7, #4]
 800272a:	e008      	b.n	800273e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800272c:	4b08      	ldr	r3, [pc, #32]	; (8002750 <xTaskGetSchedulerState+0x38>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d102      	bne.n	800273a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002734:	2302      	movs	r3, #2
 8002736:	607b      	str	r3, [r7, #4]
 8002738:	e001      	b.n	800273e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800273a:	2300      	movs	r3, #0
 800273c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800273e:	687b      	ldr	r3, [r7, #4]
	}
 8002740:	4618      	mov	r0, r3
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	200029a4 	.word	0x200029a4
 8002750:	200029c0 	.word	0x200029c0

08002754 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d04a      	beq.n	80027fc <vTaskPriorityInherit+0xa8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800276a:	4b26      	ldr	r3, [pc, #152]	; (8002804 <vTaskPriorityInherit+0xb0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002770:	429a      	cmp	r2, r3
 8002772:	d243      	bcs.n	80027fc <vTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	2b00      	cmp	r3, #0
 800277a:	db06      	blt.n	800278a <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800277c:	4b21      	ldr	r3, [pc, #132]	; (8002804 <vTaskPriorityInherit+0xb0>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002782:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6959      	ldr	r1, [r3, #20]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002792:	4613      	mov	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4a1b      	ldr	r2, [pc, #108]	; (8002808 <vTaskPriorityInherit+0xb4>)
 800279c:	4413      	add	r3, r2
 800279e:	4299      	cmp	r1, r3
 80027a0:	d101      	bne.n	80027a6 <vTaskPriorityInherit+0x52>
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <vTaskPriorityInherit+0x54>
 80027a6:	2300      	movs	r3, #0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d022      	beq.n	80027f2 <vTaskPriorityInherit+0x9e>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	3304      	adds	r3, #4
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fe fd1d 	bl	80011f0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80027b6:	4b13      	ldr	r3, [pc, #76]	; (8002804 <vTaskPriorityInherit+0xb0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c4:	4b11      	ldr	r3, [pc, #68]	; (800280c <vTaskPriorityInherit+0xb8>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d903      	bls.n	80027d4 <vTaskPriorityInherit+0x80>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	4a0e      	ldr	r2, [pc, #56]	; (800280c <vTaskPriorityInherit+0xb8>)
 80027d2:	6013      	str	r3, [r2, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d8:	4613      	mov	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4a09      	ldr	r2, [pc, #36]	; (8002808 <vTaskPriorityInherit+0xb4>)
 80027e2:	441a      	add	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	3304      	adds	r3, #4
 80027e8:	4619      	mov	r1, r3
 80027ea:	4610      	mov	r0, r2
 80027ec:	f7fe fca2 	bl	8001134 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80027f0:	e004      	b.n	80027fc <vTaskPriorityInherit+0xa8>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80027f2:	4b04      	ldr	r3, [pc, #16]	; (8002804 <vTaskPriorityInherit+0xb0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80027fc:	bf00      	nop
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	200024c4 	.word	0x200024c4
 8002808:	200024c8 	.word	0x200024c8
 800280c:	200029a0 	.word	0x200029a0

08002810 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800281c:	2300      	movs	r3, #0
 800281e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d037      	beq.n	8002896 <xTaskPriorityDisinherit+0x86>
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800282a:	1e5a      	subs	r2, r3, #1
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002838:	429a      	cmp	r2, r3
 800283a:	d02c      	beq.n	8002896 <xTaskPriorityDisinherit+0x86>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002840:	2b00      	cmp	r3, #0
 8002842:	d128      	bne.n	8002896 <xTaskPriorityDisinherit+0x86>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	3304      	adds	r3, #4
 8002848:	4618      	mov	r0, r3
 800284a:	f7fe fcd1 	bl	80011f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002866:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <xTaskPriorityDisinherit+0x90>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	429a      	cmp	r2, r3
 800286c:	d903      	bls.n	8002876 <xTaskPriorityDisinherit+0x66>
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002872:	4a0b      	ldr	r2, [pc, #44]	; (80028a0 <xTaskPriorityDisinherit+0x90>)
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800287a:	4613      	mov	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4413      	add	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4a08      	ldr	r2, [pc, #32]	; (80028a4 <xTaskPriorityDisinherit+0x94>)
 8002884:	441a      	add	r2, r3
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	3304      	adds	r3, #4
 800288a:	4619      	mov	r1, r3
 800288c:	4610      	mov	r0, r2
 800288e:	f7fe fc51 	bl	8001134 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002892:	2301      	movs	r3, #1
 8002894:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002896:	68fb      	ldr	r3, [r7, #12]
	}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	200029a0 	.word	0x200029a0
 80028a4:	200024c8 	.word	0x200024c8

080028a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80028ac:	4b07      	ldr	r3, [pc, #28]	; (80028cc <pvTaskIncrementMutexHeldCount+0x24>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d004      	beq.n	80028be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80028b4:	4b05      	ldr	r3, [pc, #20]	; (80028cc <pvTaskIncrementMutexHeldCount+0x24>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028ba:	3201      	adds	r2, #1
 80028bc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80028be:	4b03      	ldr	r3, [pc, #12]	; (80028cc <pvTaskIncrementMutexHeldCount+0x24>)
 80028c0:	681b      	ldr	r3, [r3, #0]
	}
 80028c2:	4618      	mov	r0, r3
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	200024c4 	.word	0x200024c4

080028d0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80028da:	4b21      	ldr	r3, [pc, #132]	; (8002960 <prvAddCurrentTaskToDelayedList+0x90>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80028e0:	4b20      	ldr	r3, [pc, #128]	; (8002964 <prvAddCurrentTaskToDelayedList+0x94>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	3304      	adds	r3, #4
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fe fc82 	bl	80011f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f2:	d10a      	bne.n	800290a <prvAddCurrentTaskToDelayedList+0x3a>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d007      	beq.n	800290a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80028fa:	4b1a      	ldr	r3, [pc, #104]	; (8002964 <prvAddCurrentTaskToDelayedList+0x94>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	3304      	adds	r3, #4
 8002900:	4619      	mov	r1, r3
 8002902:	4819      	ldr	r0, [pc, #100]	; (8002968 <prvAddCurrentTaskToDelayedList+0x98>)
 8002904:	f7fe fc16 	bl	8001134 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002908:	e026      	b.n	8002958 <prvAddCurrentTaskToDelayedList+0x88>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4413      	add	r3, r2
 8002910:	60bb      	str	r3, [r7, #8]

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002912:	4b14      	ldr	r3, [pc, #80]	; (8002964 <prvAddCurrentTaskToDelayedList+0x94>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	605a      	str	r2, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	429a      	cmp	r2, r3
 8002920:	d209      	bcs.n	8002936 <prvAddCurrentTaskToDelayedList+0x66>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002922:	4b12      	ldr	r3, [pc, #72]	; (800296c <prvAddCurrentTaskToDelayedList+0x9c>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	4b0f      	ldr	r3, [pc, #60]	; (8002964 <prvAddCurrentTaskToDelayedList+0x94>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	3304      	adds	r3, #4
 800292c:	4619      	mov	r1, r3
 800292e:	4610      	mov	r0, r2
 8002930:	f7fe fc24 	bl	800117c <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002934:	e010      	b.n	8002958 <prvAddCurrentTaskToDelayedList+0x88>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002936:	4b0e      	ldr	r3, [pc, #56]	; (8002970 <prvAddCurrentTaskToDelayedList+0xa0>)
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <prvAddCurrentTaskToDelayedList+0x94>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	3304      	adds	r3, #4
 8002940:	4619      	mov	r1, r3
 8002942:	4610      	mov	r0, r2
 8002944:	f7fe fc1a 	bl	800117c <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8002948:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <prvAddCurrentTaskToDelayedList+0xa4>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68ba      	ldr	r2, [r7, #8]
 800294e:	429a      	cmp	r2, r3
 8002950:	d202      	bcs.n	8002958 <prvAddCurrentTaskToDelayedList+0x88>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8002952:	4a08      	ldr	r2, [pc, #32]	; (8002974 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	6013      	str	r3, [r2, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002958:	bf00      	nop
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	2000299c 	.word	0x2000299c
 8002964:	200024c4 	.word	0x200024c4
 8002968:	20002984 	.word	0x20002984
 800296c:	20002954 	.word	0x20002954
 8002970:	20002950 	.word	0x20002950
 8002974:	200029b8 	.word	0x200029b8

08002978 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b088      	sub	sp, #32
 800297c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800297e:	2300      	movs	r3, #0
 8002980:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002982:	f000 fa69 	bl	8002e58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002986:	4b15      	ldr	r3, [pc, #84]	; (80029dc <xTimerCreateTimerTask+0x64>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d020      	beq.n	80029d0 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800298e:	2300      	movs	r3, #0
 8002990:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8002992:	2300      	movs	r3, #0
 8002994:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002996:	463a      	mov	r2, r7
 8002998:	1d39      	adds	r1, r7, #4
 800299a:	f107 0308 	add.w	r3, r7, #8
 800299e:	4618      	mov	r0, r3
 80029a0:	f7fd fcb4 	bl	800030c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80029a4:	6839      	ldr	r1, [r7, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	9202      	str	r2, [sp, #8]
 80029ac:	9301      	str	r3, [sp, #4]
 80029ae:	2328      	movs	r3, #40	; 0x28
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	2300      	movs	r3, #0
 80029b4:	460a      	mov	r2, r1
 80029b6:	490a      	ldr	r1, [pc, #40]	; (80029e0 <xTimerCreateTimerTask+0x68>)
 80029b8:	480a      	ldr	r0, [pc, #40]	; (80029e4 <xTimerCreateTimerTask+0x6c>)
 80029ba:	f7ff f93f 	bl	8001c3c <xTaskCreateStatic>
 80029be:	4602      	mov	r2, r0
 80029c0:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <xTimerCreateTimerTask+0x70>)
 80029c2:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80029c4:	4b08      	ldr	r3, [pc, #32]	; (80029e8 <xTimerCreateTimerTask+0x70>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 80029cc:	2301      	movs	r3, #1
 80029ce:	60fb      	str	r3, [r7, #12]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
 80029d0:	68fb      	ldr	r3, [r7, #12]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	200029f4 	.word	0x200029f4
 80029e0:	080055f8 	.word	0x080055f8
 80029e4:	08002ad1 	.word	0x08002ad1
 80029e8:	200029f8 	.word	0x200029f8

080029ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08a      	sub	sp, #40	; 0x28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
 80029f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80029fa:	2300      	movs	r3, #0
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80029fe:	4b1a      	ldr	r3, [pc, #104]	; (8002a68 <xTimerGenericCommand+0x7c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d02a      	beq.n	8002a5c <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2b05      	cmp	r3, #5
 8002a16:	dc18      	bgt.n	8002a4a <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002a18:	f7ff fe7e 	bl	8002718 <xTaskGetSchedulerState>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d109      	bne.n	8002a36 <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002a22:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <xTimerGenericCommand+0x7c>)
 8002a24:	6818      	ldr	r0, [r3, #0]
 8002a26:	f107 0114 	add.w	r1, r7, #20
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a2e:	f7fe fde7 	bl	8001600 <xQueueGenericSend>
 8002a32:	6278      	str	r0, [r7, #36]	; 0x24
 8002a34:	e012      	b.n	8002a5c <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002a36:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <xTimerGenericCommand+0x7c>)
 8002a38:	6818      	ldr	r0, [r3, #0]
 8002a3a:	f107 0114 	add.w	r1, r7, #20
 8002a3e:	2300      	movs	r3, #0
 8002a40:	2200      	movs	r2, #0
 8002a42:	f7fe fddd 	bl	8001600 <xQueueGenericSend>
 8002a46:	6278      	str	r0, [r7, #36]	; 0x24
 8002a48:	e008      	b.n	8002a5c <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002a4a:	4b07      	ldr	r3, [pc, #28]	; (8002a68 <xTimerGenericCommand+0x7c>)
 8002a4c:	6818      	ldr	r0, [r3, #0]
 8002a4e:	f107 0114 	add.w	r1, r7, #20
 8002a52:	2300      	movs	r3, #0
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	f7fe fe7d 	bl	8001754 <xQueueGenericSendFromISR>
 8002a5a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3728      	adds	r7, #40	; 0x28
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	200029f4 	.word	0x200029f4

08002a6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af02      	add	r7, sp, #8
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002a76:	4b15      	ldr	r3, [pc, #84]	; (8002acc <prvProcessExpiredTimer+0x60>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	3304      	adds	r3, #4
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fe fbb3 	bl	80011f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d114      	bne.n	8002abc <prvProcessExpiredTimer+0x50>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	699a      	ldr	r2, [r3, #24]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	18d1      	adds	r1, r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 f8ba 	bl	8002c18 <prvInsertTimerInActiveList>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d008      	beq.n	8002abc <prvProcessExpiredTimer+0x50>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002aaa:	2300      	movs	r3, #0
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	2300      	movs	r3, #0
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f7ff ff99 	bl	80029ec <xTimerGenericCommand>
 8002aba:	60b8      	str	r0, [r7, #8]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	4798      	blx	r3
}
 8002ac4:	bf00      	nop
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	200029ec 	.word	0x200029ec

08002ad0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002ad8:	f107 0308 	add.w	r3, r7, #8
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 f857 	bl	8002b90 <prvGetNextExpireTime>
 8002ae2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 f803 	bl	8002af4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002aee:	f000 f8d5 	bl	8002c9c <prvProcessReceivedCommands>
	}
 8002af2:	e7f1      	b.n	8002ad8 <prvTimerTask+0x8>

08002af4 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002afe:	f7ff fa75 	bl	8001fec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002b02:	f107 0308 	add.w	r3, r7, #8
 8002b06:	4618      	mov	r0, r3
 8002b08:	f000 f866 	bl	8002bd8 <prvSampleTimeNow>
 8002b0c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d130      	bne.n	8002b76 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10a      	bne.n	8002b30 <prvProcessTimerOrBlockTask+0x3c>
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d806      	bhi.n	8002b30 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002b22:	f7ff fa71 	bl	8002008 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002b26:	68f9      	ldr	r1, [r7, #12]
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7ff ff9f 	bl	8002a6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002b2e:	e024      	b.n	8002b7a <prvProcessTimerOrBlockTask+0x86>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d008      	beq.n	8002b48 <prvProcessTimerOrBlockTask+0x54>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002b36:	4b13      	ldr	r3, [pc, #76]	; (8002b84 <prvProcessTimerOrBlockTask+0x90>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	bf0c      	ite	eq
 8002b40:	2301      	moveq	r3, #1
 8002b42:	2300      	movne	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	603b      	str	r3, [r7, #0]
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002b48:	4b0f      	ldr	r3, [pc, #60]	; (8002b88 <prvProcessTimerOrBlockTask+0x94>)
 8002b4a:	6818      	ldr	r0, [r3, #0]
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	4619      	mov	r1, r3
 8002b56:	f7ff f83d 	bl	8001bd4 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 8002b5a:	f7ff fa55 	bl	8002008 <xTaskResumeAll>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10a      	bne.n	8002b7a <prvProcessTimerOrBlockTask+0x86>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 8002b64:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <prvProcessTimerOrBlockTask+0x98>)
 8002b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	f3bf 8f4f 	dsb	sy
 8002b70:	f3bf 8f6f 	isb	sy
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002b74:	e001      	b.n	8002b7a <prvProcessTimerOrBlockTask+0x86>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 8002b76:	f7ff fa47 	bl	8002008 <xTaskResumeAll>
		}
	}
}
 8002b7a:	bf00      	nop
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	200029f0 	.word	0x200029f0
 8002b88:	200029f4 	.word	0x200029f4
 8002b8c:	e000ed04 	.word	0xe000ed04

08002b90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002b98:	4b0e      	ldr	r3, [pc, #56]	; (8002bd4 <prvGetNextExpireTime+0x44>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	bf0c      	ite	eq
 8002ba2:	2301      	moveq	r3, #1
 8002ba4:	2300      	movne	r3, #0
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	461a      	mov	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d105      	bne.n	8002bc2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002bb6:	4b07      	ldr	r3, [pc, #28]	; (8002bd4 <prvGetNextExpireTime+0x44>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	e001      	b.n	8002bc6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	200029ec 	.word	0x200029ec

08002bd8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002be0:	f7ff faa0 	bl	8002124 <xTaskGetTickCount>
 8002be4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002be6:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <prvSampleTimeNow+0x3c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d205      	bcs.n	8002bfc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002bf0:	f000 f8de 	bl	8002db0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	e002      	b.n	8002c02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002c02:	4a04      	ldr	r2, [pc, #16]	; (8002c14 <prvSampleTimeNow+0x3c>)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002c08:	68fb      	ldr	r3, [r7, #12]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	200029fc 	.word	0x200029fc

08002c18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
 8002c24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002c26:	2300      	movs	r3, #0
 8002c28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d812      	bhi.n	8002c64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	1ad2      	subs	r2, r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d302      	bcc.n	8002c52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	e01b      	b.n	8002c8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002c52:	4b10      	ldr	r3, [pc, #64]	; (8002c94 <prvInsertTimerInActiveList+0x7c>)
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	3304      	adds	r3, #4
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4610      	mov	r0, r2
 8002c5e:	f7fe fa8d 	bl	800117c <vListInsert>
 8002c62:	e012      	b.n	8002c8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d206      	bcs.n	8002c7a <prvInsertTimerInActiveList+0x62>
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d302      	bcc.n	8002c7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002c74:	2301      	movs	r3, #1
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	e007      	b.n	8002c8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002c7a:	4b07      	ldr	r3, [pc, #28]	; (8002c98 <prvInsertTimerInActiveList+0x80>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	3304      	adds	r3, #4
 8002c82:	4619      	mov	r1, r3
 8002c84:	4610      	mov	r0, r2
 8002c86:	f7fe fa79 	bl	800117c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002c8a:	697b      	ldr	r3, [r7, #20]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	200029f0 	.word	0x200029f0
 8002c98:	200029ec 	.word	0x200029ec

08002c9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08c      	sub	sp, #48	; 0x30
 8002ca0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002ca2:	e073      	b.n	8002d8c <prvProcessReceivedCommands+0xf0>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	da0b      	bge.n	8002cc2 <prvProcessReceivedCommands+0x26>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8002caa:	f107 0308 	add.w	r3, r7, #8
 8002cae:	3304      	adds	r3, #4
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb8:	6850      	ldr	r0, [r2, #4]
 8002cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cbc:	6892      	ldr	r2, [r2, #8]
 8002cbe:	4611      	mov	r1, r2
 8002cc0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	db61      	blt.n	8002d8c <prvProcessReceivedCommands+0xf0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d004      	beq.n	8002cde <prvProcessReceivedCommands+0x42>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002cd4:	6a3b      	ldr	r3, [r7, #32]
 8002cd6:	3304      	adds	r3, #4
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7fe fa89 	bl	80011f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002cde:	1d3b      	adds	r3, r7, #4
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff ff79 	bl	8002bd8 <prvSampleTimeNow>
 8002ce6:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2b09      	cmp	r3, #9
 8002cec:	d84d      	bhi.n	8002d8a <prvProcessReceivedCommands+0xee>
 8002cee:	a201      	add	r2, pc, #4	; (adr r2, 8002cf4 <prvProcessReceivedCommands+0x58>)
 8002cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf4:	08002d1d 	.word	0x08002d1d
 8002cf8:	08002d1d 	.word	0x08002d1d
 8002cfc:	08002d1d 	.word	0x08002d1d
 8002d00:	08002d8d 	.word	0x08002d8d
 8002d04:	08002d5f 	.word	0x08002d5f
 8002d08:	08002d79 	.word	0x08002d79
 8002d0c:	08002d1d 	.word	0x08002d1d
 8002d10:	08002d1d 	.word	0x08002d1d
 8002d14:	08002d8d 	.word	0x08002d8d
 8002d18:	08002d5f 	.word	0x08002d5f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	18d1      	adds	r1, r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	69fa      	ldr	r2, [r7, #28]
 8002d28:	6a38      	ldr	r0, [r7, #32]
 8002d2a:	f7ff ff75 	bl	8002c18 <prvInsertTimerInActiveList>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d02b      	beq.n	8002d8c <prvProcessReceivedCommands+0xf0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	6a38      	ldr	r0, [r7, #32]
 8002d3a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d123      	bne.n	8002d8c <prvProcessReceivedCommands+0xf0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	441a      	add	r2, r3
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	2300      	movs	r3, #0
 8002d52:	2100      	movs	r1, #0
 8002d54:	6a38      	ldr	r0, [r7, #32]
 8002d56:	f7ff fe49 	bl	80029ec <xTimerGenericCommand>
 8002d5a:	61b8      	str	r0, [r7, #24]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 8002d5c:	e016      	b.n	8002d8c <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	619a      	str	r2, [r3, #24]
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	699a      	ldr	r2, [r3, #24]
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	18d1      	adds	r1, r2, r3
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	69fa      	ldr	r2, [r7, #28]
 8002d70:	6a38      	ldr	r0, [r7, #32]
 8002d72:	f7ff ff51 	bl	8002c18 <prvInsertTimerInActiveList>
					break;
 8002d76:	e009      	b.n	8002d8c <prvProcessReceivedCommands+0xf0>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d104      	bne.n	8002d8c <prvProcessReceivedCommands+0xf0>
						{
							vPortFree( pxTimer );
 8002d82:	6a38      	ldr	r0, [r7, #32]
 8002d84:	f7fe f8b2 	bl	8000eec <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002d88:	e000      	b.n	8002d8c <prvProcessReceivedCommands+0xf0>

				default	:
					/* Don't expect to get here. */
					break;
 8002d8a:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002d8c:	4b07      	ldr	r3, [pc, #28]	; (8002dac <prvProcessReceivedCommands+0x110>)
 8002d8e:	6818      	ldr	r0, [r3, #0]
 8002d90:	f107 0108 	add.w	r1, r7, #8
 8002d94:	2300      	movs	r3, #0
 8002d96:	2200      	movs	r2, #0
 8002d98:	f7fe fd34 	bl	8001804 <xQueueGenericReceive>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d180      	bne.n	8002ca4 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
 8002da2:	bf00      	nop
 8002da4:	3728      	adds	r7, #40	; 0x28
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	200029f4 	.word	0x200029f4

08002db0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b088      	sub	sp, #32
 8002db4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002db6:	e037      	b.n	8002e28 <prvSwitchTimerLists+0x78>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002db8:	4b25      	ldr	r3, [pc, #148]	; (8002e50 <prvSwitchTimerLists+0xa0>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002dc2:	4b23      	ldr	r3, [pc, #140]	; (8002e50 <prvSwitchTimerLists+0xa0>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	3304      	adds	r3, #4
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7fe fa0d 	bl	80011f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	6938      	ldr	r0, [r7, #16]
 8002ddc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d120      	bne.n	8002e28 <prvSwitchTimerLists+0x78>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	699a      	ldr	r2, [r3, #24]
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	4413      	add	r3, r2
 8002dee:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d90e      	bls.n	8002e16 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002e04:	4b12      	ldr	r3, [pc, #72]	; (8002e50 <prvSwitchTimerLists+0xa0>)
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4610      	mov	r0, r2
 8002e10:	f7fe f9b4 	bl	800117c <vListInsert>
 8002e14:	e008      	b.n	8002e28 <prvSwitchTimerLists+0x78>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002e16:	2300      	movs	r3, #0
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	2100      	movs	r1, #0
 8002e20:	6938      	ldr	r0, [r7, #16]
 8002e22:	f7ff fde3 	bl	80029ec <xTimerGenericCommand>
 8002e26:	60b8      	str	r0, [r7, #8]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002e28:	4b09      	ldr	r3, [pc, #36]	; (8002e50 <prvSwitchTimerLists+0xa0>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1c2      	bne.n	8002db8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002e32:	4b07      	ldr	r3, [pc, #28]	; (8002e50 <prvSwitchTimerLists+0xa0>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8002e38:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <prvSwitchTimerLists+0xa4>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a04      	ldr	r2, [pc, #16]	; (8002e50 <prvSwitchTimerLists+0xa0>)
 8002e3e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002e40:	4a04      	ldr	r2, [pc, #16]	; (8002e54 <prvSwitchTimerLists+0xa4>)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6013      	str	r3, [r2, #0]
}
 8002e46:	bf00      	nop
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	200029ec 	.word	0x200029ec
 8002e54:	200029f0 	.word	0x200029f0

08002e58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002e5e:	f7fe fa83 	bl	8001368 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002e62:	4b10      	ldr	r3, [pc, #64]	; (8002ea4 <prvCheckForValidListAndQueue+0x4c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d116      	bne.n	8002e98 <prvCheckForValidListAndQueue+0x40>
		{
			vListInitialise( &xActiveTimerList1 );
 8002e6a:	480f      	ldr	r0, [pc, #60]	; (8002ea8 <prvCheckForValidListAndQueue+0x50>)
 8002e6c:	f7fe f934 	bl	80010d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002e70:	480e      	ldr	r0, [pc, #56]	; (8002eac <prvCheckForValidListAndQueue+0x54>)
 8002e72:	f7fe f931 	bl	80010d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002e76:	4b0e      	ldr	r3, [pc, #56]	; (8002eb0 <prvCheckForValidListAndQueue+0x58>)
 8002e78:	4a0b      	ldr	r2, [pc, #44]	; (8002ea8 <prvCheckForValidListAndQueue+0x50>)
 8002e7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002e7c:	4b0d      	ldr	r3, [pc, #52]	; (8002eb4 <prvCheckForValidListAndQueue+0x5c>)
 8002e7e:	4a0b      	ldr	r2, [pc, #44]	; (8002eac <prvCheckForValidListAndQueue+0x54>)
 8002e80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue;
				static uint8_t ucStaticTimerQueueStorage[ configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ];

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8002e82:	2300      	movs	r3, #0
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <prvCheckForValidListAndQueue+0x60>)
 8002e88:	4a0c      	ldr	r2, [pc, #48]	; (8002ebc <prvCheckForValidListAndQueue+0x64>)
 8002e8a:	2110      	movs	r1, #16
 8002e8c:	2005      	movs	r0, #5
 8002e8e:	f7fe fb73 	bl	8001578 <xQueueGenericCreateStatic>
 8002e92:	4602      	mov	r2, r0
 8002e94:	4b03      	ldr	r3, [pc, #12]	; (8002ea4 <prvCheckForValidListAndQueue+0x4c>)
 8002e96:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002e98:	f7fe fa80 	bl	800139c <vPortExitCritical>
}
 8002e9c:	bf00      	nop
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	200029f4 	.word	0x200029f4
 8002ea8:	200029c4 	.word	0x200029c4
 8002eac:	200029d8 	.word	0x200029d8
 8002eb0:	200029ec 	.word	0x200029ec
 8002eb4:	200029f0 	.word	0x200029f0
 8002eb8:	20002a50 	.word	0x20002a50
 8002ebc:	20002a00 	.word	0x20002a00

08002ec0 <_ZN9NRF24L01pC1Ev>:
 */

#include "NRF24L01p.h"


NRF24L01p::NRF24L01p() {
 8002ec0:	b5b0      	push	{r4, r5, r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 fbb4 	bl	8003638 <_ZN15NRF24L01pDriverC1Ev>
 8002ed0:	4a85      	ldr	r2, [pc, #532]	; (80030e8 <_ZN9NRF24L01pC1Ev+0x228>)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	601a      	str	r2, [r3, #0]
    
    port_Initialize();
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f001 f887 	bl	8003fec <_ZN13NRF24L01pPort15port_InitializeEv>
    //ResetConfigValues(_RadioConfig, _RxPipeConfig);
    
    
    port_Pin_CE(0);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f001 f952 	bl	800418c <_ZN13NRF24L01pPort11port_Pin_CEEb>
    port_Pin_CSN(0);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2100      	movs	r1, #0
 8002eec:	4618      	mov	r0, r3
 8002eee:	f001 f95f 	bl	80041b0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>

    port_DelayMs(_NRF24L01P_TIMING_PowerOnReset_ms);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2164      	movs	r1, #100	; 0x64
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f001 f984 	bl	8004204 <_ZN13NRF24L01pPort12port_DelayMsEj>

    RadioMode(MODE_POWER_DOWN);
 8002efc:	2101      	movs	r1, #1
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f9f8 	bl	80032f4 <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE>
    RadioMode(MODE_RX);
 8002f04:	2103      	movs	r1, #3
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f9f4 	bl	80032f4 <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE>

    clear_data_ready_flag();
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f000 feb6 	bl	8003c80 <_ZN15NRF24L01pDriver21clear_data_ready_flagEv>
    flush_rx();
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 fcb4 	bl	8003884 <_ZN15NRF24L01pDriver8flush_rxEv>
    flush_tx();
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 fc94 	bl	800384c <_ZN15NRF24L01pDriver8flush_txEv>

    uint8_t status_rst_val = 0x70;//reset status
 8002f24:	2370      	movs	r3, #112	; 0x70
 8002f26:	72fb      	strb	r3, [r7, #11]
    write_register(_NRF24L01P_REG_STATUS, &status_rst_val,1);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f107 020b 	add.w	r2, r7, #11
 8002f2e:	2301      	movs	r3, #1
 8002f30:	2107      	movs	r1, #7
 8002f32:	f000 fc39 	bl	80037a8 <_ZN15NRF24L01pDriver14write_registerEhPhi>
    uint8_t config_rst_val = 0x0b;//reset config
 8002f36:	230b      	movs	r3, #11
 8002f38:	72bb      	strb	r3, [r7, #10]
    write_register(_NRF24L01P_REG_CONFIG, &config_rst_val,1);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f107 020a 	add.w	r2, r7, #10
 8002f40:	2301      	movs	r3, #1
 8002f42:	2100      	movs	r1, #0
 8002f44:	f000 fc30 	bl	80037a8 <_ZN15NRF24L01pDriver14write_registerEhPhi>

    
        RadioConfig.DataReadyInterruptEnabled = 0;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	715a      	strb	r2, [r3, #5]
    RadioConfig.DataSentInterruptFlagEnabled = 0;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	719a      	strb	r2, [r3, #6]
    RadioConfig.MaxRetryInterruptFlagEnabled = 0;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	71da      	strb	r2, [r3, #7]
    RadioConfig.Crc = NRF24L01p::CONFIG_CRC_16BIT;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	220c      	movs	r2, #12
 8002f5e:	721a      	strb	r2, [r3, #8]
    RadioConfig.AutoReTransmissionCount = 15;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	220f      	movs	r2, #15
 8002f64:	725a      	strb	r2, [r3, #9]
    RadioConfig.AutoReTransmitDelayX250us = 15;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	220f      	movs	r2, #15
 8002f6a:	729a      	strb	r2, [r3, #10]
    RadioConfig.frequencyOffset = 2;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	72da      	strb	r2, [r3, #11]
    RadioConfig.datarate = NRF24L01p::RF_SETUP_RF_DR_2MBPS;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2208      	movs	r2, #8
 8002f76:	731a      	strb	r2, [r3, #12]
    RadioConfig.RfPower = NRF24L01p::RF_SETUP_RF_PWR_0DBM;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2206      	movs	r2, #6
 8002f7c:	735a      	strb	r2, [r3, #13]
    RadioConfig.PllLock = 0;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	739a      	strb	r2, [r3, #14]
    RadioConfig.ContWaveEnabled = 0;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	73da      	strb	r2, [r3, #15]
    RadioConfig.FeatureDynamicPayloadEnabled = 1;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	741a      	strb	r2, [r3, #16]
    RadioConfig.FeaturePayloadWithAckEnabled = 1;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	745a      	strb	r2, [r3, #17]
    RadioConfig.FeatureDynamicPayloadWithNoAckEnabled = 1;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	749a      	strb	r2, [r3, #18]
    
    RxPipeConfig[0].address = 0xe7e7e7e7e7;
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	f04f 33e7 	mov.w	r3, #3890735079	; 0xe7e7e7e7
 8002fa2:	f04f 04e7 	mov.w	r4, #231	; 0xe7
 8002fa6:	e9c2 3408 	strd	r3, r4, [r2, #32]
    RxPipeConfig[1].address = 0xc2c2c2c2c2;
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	f04f 33c2 	mov.w	r3, #3267543746	; 0xc2c2c2c2
 8002fb0:	f04f 04c2 	mov.w	r4, #194	; 0xc2
 8002fb4:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    RxPipeConfig[2].address = 0xc2c2c2c2c3;
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	4b4c      	ldr	r3, [pc, #304]	; (80030ec <_ZN9NRF24L01pC1Ev+0x22c>)
 8002fbc:	f04f 04c2 	mov.w	r4, #194	; 0xc2
 8002fc0:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
    RxPipeConfig[3].address = 0xc2c2c2c2c4;
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	a444      	add	r4, pc, #272	; (adr r4, 80030d8 <_ZN9NRF24L01pC1Ev+0x218>)
 8002fc8:	cc18      	ldmia	r4, {r3, r4}
 8002fca:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
    RxPipeConfig[4].address = 0xc2c2c2c2c5;
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	a443      	add	r4, pc, #268	; (adr r4, 80030e0 <_ZN9NRF24L01pC1Ev+0x220>)
 8002fd2:	cc18      	ldmia	r4, {r3, r4}
 8002fd4:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
    RxPipeConfig[5].address = 0xc2c2c2c2c6;
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	4b45      	ldr	r3, [pc, #276]	; (80030f0 <_ZN9NRF24L01pC1Ev+0x230>)
 8002fdc:	f04f 04c2 	mov.w	r4, #194	; 0xc2
 8002fe0:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
    
    enable_dynamic_payload(RadioConfig.FeatureDynamicPayloadEnabled);
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	7c1b      	ldrb	r3, [r3, #16]
 8002fea:	4619      	mov	r1, r3
 8002fec:	4610      	mov	r0, r2
 8002fee:	f000 ff3f 	bl	8003e70 <_ZN15NRF24L01pDriver22enable_dynamic_payloadEb>
    enable_payload_with_ack(RadioConfig.FeaturePayloadWithAckEnabled);
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	7c5b      	ldrb	r3, [r3, #17]
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	f000 ff66 	bl	8003ecc <_ZN15NRF24L01pDriver23enable_payload_with_ackEb>
    enable_dynamic_payload_with_no_ack(RadioConfig.FeatureDynamicPayloadWithNoAckEnabled);
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	7c9b      	ldrb	r3, [r3, #18]
 8003006:	4619      	mov	r1, r3
 8003008:	4610      	mov	r0, r2
 800300a:	f000 ff8d 	bl	8003f28 <_ZN15NRF24L01pDriver34enable_dynamic_payload_with_no_ackEb>
    set_auto_retransmission_count(RadioConfig.AutoReTransmissionCount);
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	7a5b      	ldrb	r3, [r3, #9]
 8003014:	4619      	mov	r1, r3
 8003016:	4610      	mov	r0, r2
 8003018:	f000 fd6c 	bl	8003af4 <_ZN15NRF24L01pDriver29set_auto_retransmission_countEh>
    set_auto_retransmission_delay(RadioConfig.AutoReTransmitDelayX250us);        
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	7a9b      	ldrb	r3, [r3, #10]
 8003022:	4619      	mov	r1, r3
 8003024:	4610      	mov	r0, r2
 8003026:	f000 fd83 	bl	8003b30 <_ZN15NRF24L01pDriver29set_auto_retransmission_delayEh>
    set_DataRate(RadioConfig.datarate);
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	7b1b      	ldrb	r3, [r3, #12]
 8003030:	4619      	mov	r1, r3
 8003032:	4610      	mov	r0, r2
 8003034:	f000 fdb2 	bl	8003b9c <_ZN15NRF24L01pDriver12set_DataRateENS_10datarate_tE>
    
    int i;
    for(i=0;i<6;i++){
 8003038:	2300      	movs	r3, #0
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2b05      	cmp	r3, #5
 8003040:	dc45      	bgt.n	80030ce <_ZN9NRF24L01pC1Ev+0x20e>
        enable_rx_on_pipe((pipe_t)i,RxPipeConfig[i].PipeEnabled );
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	b2dc      	uxtb	r4, r3
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	4613      	mov	r3, r2
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	4413      	add	r3, r2
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	440b      	add	r3, r1
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	461a      	mov	r2, r3
 800305c:	4621      	mov	r1, r4
 800305e:	f000 fd0b 	bl	8003a78 <_ZN15NRF24L01pDriver17enable_rx_on_pipeENS_6pipe_tEb>
        enable_auto_ack((pipe_t)i,RxPipeConfig[i].autoAckEnabled );
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	b2dc      	uxtb	r4, r3
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	1c5a      	adds	r2, r3, #1
 800306e:	4613      	mov	r3, r2
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	4413      	add	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	440b      	add	r3, r1
 8003078:	3301      	adds	r3, #1
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	4621      	mov	r1, r4
 8003080:	f000 fcbc 	bl	80039fc <_ZN15NRF24L01pDriver15enable_auto_ackENS_6pipe_tEb>
        enable_dynamic_payload_pipe((pipe_t)i,RxPipeConfig[i].dynamicPayloadEnabled);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	b2dc      	uxtb	r4, r3
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	4613      	mov	r3, r2
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	4413      	add	r3, r2
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	440b      	add	r3, r1
 8003098:	3329      	adds	r3, #41	; 0x29
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	461a      	mov	r2, r3
 800309e:	4621      	mov	r1, r4
 80030a0:	f000 fea8 	bl	8003df4 <_ZN15NRF24L01pDriver27enable_dynamic_payload_pipeENS_6pipe_tEb>
        set_RX_pipe_address((pipe_t)i,RxPipeConfig[i].address);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	b2dd      	uxtb	r5, r3
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	4613      	mov	r3, r2
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	4413      	add	r3, r2
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	440b      	add	r3, r1
 80030b8:	3320      	adds	r3, #32
 80030ba:	cb18      	ldmia	r3, {r3, r4}
 80030bc:	461a      	mov	r2, r3
 80030be:	4623      	mov	r3, r4
 80030c0:	4629      	mov	r1, r5
 80030c2:	f000 fe01 	bl	8003cc8 <_ZN15NRF24L01pDriver19set_RX_pipe_addressENS_6pipe_tEy>
    set_auto_retransmission_count(RadioConfig.AutoReTransmissionCount);
    set_auto_retransmission_delay(RadioConfig.AutoReTransmitDelayX250us);        
    set_DataRate(RadioConfig.datarate);
    
    int i;
    for(i=0;i<6;i++){
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	3301      	adds	r3, #1
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	e7b6      	b.n	800303c <_ZN9NRF24L01pC1Ev+0x17c>
        enable_dynamic_payload_pipe((pipe_t)i,RxPipeConfig[i].dynamicPayloadEnabled);
        set_RX_pipe_address((pipe_t)i,RxPipeConfig[i].address);
    }

    
}
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bdb0      	pop	{r4, r5, r7, pc}
 80030d8:	c2c2c2c4 	.word	0xc2c2c2c4
 80030dc:	000000c2 	.word	0x000000c2
 80030e0:	c2c2c2c5 	.word	0xc2c2c2c5
 80030e4:	000000c2 	.word	0x000000c2
 80030e8:	08005664 	.word	0x08005664
 80030ec:	c2c2c2c3 	.word	0xc2c2c2c3
 80030f0:	c2c2c2c6 	.word	0xc2c2c2c6

080030f4 <_ZN9NRF24L01pD1Ev>:

NRF24L01p::NRF24L01p(const NRF24L01p& orig) {
}

NRF24L01p::~NRF24L01p() {
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	4a08      	ldr	r2, [pc, #32]	; (8003120 <_ZN9NRF24L01pD1Ev+0x2c>)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4618      	mov	r0, r3
 8003106:	f000 faa9 	bl	800365c <_ZN15NRF24L01pDriverD1Ev>
}
 800310a:	2300      	movs	r3, #0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d002      	beq.n	8003116 <_ZN9NRF24L01pD1Ev+0x22>
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f001 fab9 	bl	8004688 <_ZdlPv>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4618      	mov	r0, r3
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	08005664 	.word	0x08005664

08003124 <_ZN9NRF24L01pD0Ev>:
}

NRF24L01p::NRF24L01p(const NRF24L01p& orig) {
}

NRF24L01p::~NRF24L01p() {
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
}
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7ff ffe1 	bl	80030f4 <_ZN9NRF24L01pD1Ev>
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f001 faa8 	bl	8004688 <_ZdlPv>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4618      	mov	r0, r3
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop

08003144 <_ZN9NRF24L01p17ResetConfigValuesEPNS_13RadioConfig_tEPNS_14RxPipeConfig_tE>:


void NRF24L01p::ResetConfigValues(RadioConfig_t *_RadioConfig, RxPipeConfig_t *_RxPipeConfig){
 8003144:	b5b0      	push	{r4, r5, r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]

    RadioConfig.DataReadyInterruptEnabled = _RadioConfig->DataReadyInterruptEnabled;
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	781a      	ldrb	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	715a      	strb	r2, [r3, #5]
    RadioConfig.DataSentInterruptFlagEnabled = _RadioConfig->DataSentInterruptFlagEnabled;
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	785a      	ldrb	r2, [r3, #1]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	719a      	strb	r2, [r3, #6]
    RadioConfig.MaxRetryInterruptFlagEnabled = _RadioConfig->MaxRetryInterruptFlagEnabled;
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	789a      	ldrb	r2, [r3, #2]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	71da      	strb	r2, [r3, #7]
    RadioConfig.Crc = _RadioConfig->Crc;
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	78da      	ldrb	r2, [r3, #3]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	721a      	strb	r2, [r3, #8]
    RadioConfig.AutoReTransmissionCount = _RadioConfig->AutoReTransmissionCount;
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	791a      	ldrb	r2, [r3, #4]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	725a      	strb	r2, [r3, #9]
    RadioConfig.AutoReTransmitDelayX250us = _RadioConfig->AutoReTransmitDelayX250us;
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	795a      	ldrb	r2, [r3, #5]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	729a      	strb	r2, [r3, #10]
    RadioConfig.frequencyOffset = _RadioConfig->frequencyOffset;
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	799a      	ldrb	r2, [r3, #6]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	72da      	strb	r2, [r3, #11]
    RadioConfig.datarate = _RadioConfig->datarate;
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	79da      	ldrb	r2, [r3, #7]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	731a      	strb	r2, [r3, #12]
    RadioConfig.RfPower = _RadioConfig->RfPower;
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	7a1a      	ldrb	r2, [r3, #8]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	735a      	strb	r2, [r3, #13]
    RadioConfig.PllLock = _RadioConfig->PllLock;
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	7a5a      	ldrb	r2, [r3, #9]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	739a      	strb	r2, [r3, #14]
    RadioConfig.ContWaveEnabled = _RadioConfig->ContWaveEnabled;
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	7a9a      	ldrb	r2, [r3, #10]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	73da      	strb	r2, [r3, #15]
    RadioConfig.FeatureDynamicPayloadEnabled = _RadioConfig->FeatureDynamicPayloadEnabled;
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	7ada      	ldrb	r2, [r3, #11]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	741a      	strb	r2, [r3, #16]
    RadioConfig.FeaturePayloadWithAckEnabled = _RadioConfig->FeaturePayloadWithAckEnabled;
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	7b1a      	ldrb	r2, [r3, #12]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	745a      	strb	r2, [r3, #17]
    RadioConfig.FeatureDynamicPayloadWithNoAckEnabled = _RadioConfig->FeatureDynamicPayloadWithNoAckEnabled;
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	7b5a      	ldrb	r2, [r3, #13]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	749a      	strb	r2, [r3, #18]

    int i;
    for(i=0;i<6;i++){
 80031c0:	2300      	movs	r3, #0
 80031c2:	617b      	str	r3, [r7, #20]
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	2b05      	cmp	r3, #5
 80031c8:	dc1b      	bgt.n	8003202 <_ZN9NRF24L01p17ResetConfigValuesEPNS_13RadioConfig_tEPNS_14RxPipeConfig_tE+0xbe>
        RxPipeConfig[i] = _RxPipeConfig[i];
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	4613      	mov	r3, r2
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	4413      	add	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	461a      	mov	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	1898      	adds	r0, r3, r2
 80031da:	68f9      	ldr	r1, [r7, #12]
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	1c5a      	adds	r2, r3, #1
 80031e0:	4613      	mov	r3, r2
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	4413      	add	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	440b      	add	r3, r1
 80031ea:	461c      	mov	r4, r3
 80031ec:	4605      	mov	r5, r0
 80031ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80031f6:	e884 0003 	stmia.w	r4, {r0, r1}
    RadioConfig.FeatureDynamicPayloadEnabled = _RadioConfig->FeatureDynamicPayloadEnabled;
    RadioConfig.FeaturePayloadWithAckEnabled = _RadioConfig->FeaturePayloadWithAckEnabled;
    RadioConfig.FeatureDynamicPayloadWithNoAckEnabled = _RadioConfig->FeatureDynamicPayloadWithNoAckEnabled;

    int i;
    for(i=0;i<6;i++){
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	3301      	adds	r3, #1
 80031fe:	617b      	str	r3, [r7, #20]
 8003200:	e7e0      	b.n	80031c4 <_ZN9NRF24L01p17ResetConfigValuesEPNS_13RadioConfig_tEPNS_14RxPipeConfig_tE+0x80>
        RxPipeConfig[i] = _RxPipeConfig[i];
    }

    
    enable_dynamic_payload(RadioConfig.FeatureDynamicPayloadEnabled);
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	7c1b      	ldrb	r3, [r3, #16]
 8003208:	4619      	mov	r1, r3
 800320a:	4610      	mov	r0, r2
 800320c:	f000 fe30 	bl	8003e70 <_ZN15NRF24L01pDriver22enable_dynamic_payloadEb>
    enable_payload_with_ack(RadioConfig.FeaturePayloadWithAckEnabled);
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	7c5b      	ldrb	r3, [r3, #17]
 8003216:	4619      	mov	r1, r3
 8003218:	4610      	mov	r0, r2
 800321a:	f000 fe57 	bl	8003ecc <_ZN15NRF24L01pDriver23enable_payload_with_ackEb>
    enable_dynamic_payload_with_no_ack(RadioConfig.FeatureDynamicPayloadWithNoAckEnabled);
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	7c9b      	ldrb	r3, [r3, #18]
 8003224:	4619      	mov	r1, r3
 8003226:	4610      	mov	r0, r2
 8003228:	f000 fe7e 	bl	8003f28 <_ZN15NRF24L01pDriver34enable_dynamic_payload_with_no_ackEb>
    set_auto_retransmission_count(RadioConfig.AutoReTransmissionCount);
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	7a5b      	ldrb	r3, [r3, #9]
 8003232:	4619      	mov	r1, r3
 8003234:	4610      	mov	r0, r2
 8003236:	f000 fc5d 	bl	8003af4 <_ZN15NRF24L01pDriver29set_auto_retransmission_countEh>
    set_auto_retransmission_delay(RadioConfig.AutoReTransmitDelayX250us);        
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	7a9b      	ldrb	r3, [r3, #10]
 8003240:	4619      	mov	r1, r3
 8003242:	4610      	mov	r0, r2
 8003244:	f000 fc74 	bl	8003b30 <_ZN15NRF24L01pDriver29set_auto_retransmission_delayEh>
    set_DataRate(RadioConfig.datarate);
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	7b1b      	ldrb	r3, [r3, #12]
 800324e:	4619      	mov	r1, r3
 8003250:	4610      	mov	r0, r2
 8003252:	f000 fca3 	bl	8003b9c <_ZN15NRF24L01pDriver12set_DataRateENS_10datarate_tE>
    
    for(i=0;i<6;i++){
 8003256:	2300      	movs	r3, #0
 8003258:	617b      	str	r3, [r7, #20]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2b05      	cmp	r3, #5
 800325e:	dc45      	bgt.n	80032ec <_ZN9NRF24L01p17ResetConfigValuesEPNS_13RadioConfig_tEPNS_14RxPipeConfig_tE+0x1a8>
        enable_rx_on_pipe((pipe_t)i,RxPipeConfig[i].PipeEnabled );
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	b2dc      	uxtb	r4, r3
 8003266:	68f9      	ldr	r1, [r7, #12]
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	1c5a      	adds	r2, r3, #1
 800326c:	4613      	mov	r3, r2
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	4413      	add	r3, r2
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	440b      	add	r3, r1
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	461a      	mov	r2, r3
 800327a:	4621      	mov	r1, r4
 800327c:	f000 fbfc 	bl	8003a78 <_ZN15NRF24L01pDriver17enable_rx_on_pipeENS_6pipe_tEb>
        enable_auto_ack((pipe_t)i,RxPipeConfig[i].autoAckEnabled );
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	b2dc      	uxtb	r4, r3
 8003286:	68f9      	ldr	r1, [r7, #12]
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	1c5a      	adds	r2, r3, #1
 800328c:	4613      	mov	r3, r2
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	4413      	add	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	440b      	add	r3, r1
 8003296:	3301      	adds	r3, #1
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	461a      	mov	r2, r3
 800329c:	4621      	mov	r1, r4
 800329e:	f000 fbad 	bl	80039fc <_ZN15NRF24L01pDriver15enable_auto_ackENS_6pipe_tEb>
        enable_dynamic_payload_pipe((pipe_t)i,RxPipeConfig[i].dynamicPayloadEnabled);
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	b2dc      	uxtb	r4, r3
 80032a8:	68f9      	ldr	r1, [r7, #12]
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	4613      	mov	r3, r2
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	4413      	add	r3, r2
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	440b      	add	r3, r1
 80032b6:	3329      	adds	r3, #41	; 0x29
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	461a      	mov	r2, r3
 80032bc:	4621      	mov	r1, r4
 80032be:	f000 fd99 	bl	8003df4 <_ZN15NRF24L01pDriver27enable_dynamic_payload_pipeENS_6pipe_tEb>
        set_RX_pipe_address((pipe_t)i,RxPipeConfig[i].address);
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	b2dd      	uxtb	r5, r3
 80032c8:	68f9      	ldr	r1, [r7, #12]
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	4613      	mov	r3, r2
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	4413      	add	r3, r2
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	440b      	add	r3, r1
 80032d6:	3320      	adds	r3, #32
 80032d8:	cb18      	ldmia	r3, {r3, r4}
 80032da:	461a      	mov	r2, r3
 80032dc:	4623      	mov	r3, r4
 80032de:	4629      	mov	r1, r5
 80032e0:	f000 fcf2 	bl	8003cc8 <_ZN15NRF24L01pDriver19set_RX_pipe_addressENS_6pipe_tEy>
    enable_dynamic_payload_with_no_ack(RadioConfig.FeatureDynamicPayloadWithNoAckEnabled);
    set_auto_retransmission_count(RadioConfig.AutoReTransmissionCount);
    set_auto_retransmission_delay(RadioConfig.AutoReTransmitDelayX250us);        
    set_DataRate(RadioConfig.datarate);
    
    for(i=0;i<6;i++){
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	3301      	adds	r3, #1
 80032e8:	617b      	str	r3, [r7, #20]
 80032ea:	e7b6      	b.n	800325a <_ZN9NRF24L01p17ResetConfigValuesEPNS_13RadioConfig_tEPNS_14RxPipeConfig_tE+0x116>
        enable_rx_on_pipe((pipe_t)i,RxPipeConfig[i].PipeEnabled );
        enable_auto_ack((pipe_t)i,RxPipeConfig[i].autoAckEnabled );
        enable_dynamic_payload_pipe((pipe_t)i,RxPipeConfig[i].dynamicPayloadEnabled);
        set_RX_pipe_address((pipe_t)i,RxPipeConfig[i].address);
    }
}
 80032ec:	bf00      	nop
 80032ee:	3718      	adds	r7, #24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bdb0      	pop	{r4, r5, r7, pc}

080032f4 <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE>:

void NRF24L01p::RadioMode(NRF24L01p::RadioState_t mode){
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	70fb      	strb	r3, [r7, #3]
    switch(mode){
 8003300:	78fb      	ldrb	r3, [r7, #3]
 8003302:	3b01      	subs	r3, #1
 8003304:	2b03      	cmp	r3, #3
 8003306:	d869      	bhi.n	80033dc <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE+0xe8>
 8003308:	a201      	add	r2, pc, #4	; (adr r2, 8003310 <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE+0x1c>)
 800330a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330e:	bf00      	nop
 8003310:	08003321 	.word	0x08003321
 8003314:	0800333b 	.word	0x0800333b
 8003318:	0800336b 	.word	0x0800336b
 800331c:	080033a1 	.word	0x080033a1
        case MODE_POWER_DOWN: {
            power_down();
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4618      	mov	r0, r3
 8003324:	f000 fb22 	bl	800396c <_ZN15NRF24L01pDriver10power_downEv>
            port_Pin_CE(0);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2100      	movs	r1, #0
 800332c:	4618      	mov	r0, r3
 800332e:	f000 ff2d 	bl	800418c <_ZN13NRF24L01pPort11port_Pin_CEEb>
            RadioState = MODE_POWER_DOWN;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	711a      	strb	r2, [r3, #4]
            break;
 8003338:	e050      	b.n	80033dc <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE+0xe8>
        }
        case MODE_STANDBY: {
            if(RadioState == MODE_POWER_DOWN){
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	791b      	ldrb	r3, [r3, #4]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d10a      	bne.n	8003358 <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE+0x64>
                    power_up();
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4618      	mov	r0, r3
 8003346:	f000 faf9 	bl	800393c <_ZN15NRF24L01pDriver8power_upEv>
                    port_DelayUs(_NRF24L01P_TIMING_Tpd2stby_us);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f241 1194 	movw	r1, #4500	; 0x1194
 8003350:	4618      	mov	r0, r3
 8003352:	f000 ff63 	bl	800421c <_ZN13NRF24L01pPort12port_DelayUsEj>
 8003356:	e004      	b.n	8003362 <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE+0x6e>
            }
            else{
                    port_Pin_CE(0);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2100      	movs	r1, #0
 800335c:	4618      	mov	r0, r3
 800335e:	f000 ff15 	bl	800418c <_ZN13NRF24L01pPort11port_Pin_CEEb>
            }
            RadioState = MODE_STANDBY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2202      	movs	r2, #2
 8003366:	711a      	strb	r2, [r3, #4]
            break;
 8003368:	e038      	b.n	80033dc <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE+0xe8>
        }
        case MODE_RX: {
            if(RadioState != MODE_RX){
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	791b      	ldrb	r3, [r3, #4]
 800336e:	2b03      	cmp	r3, #3
 8003370:	d031      	beq.n	80033d6 <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE+0xe2>
                port_Pin_CE(0);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2100      	movs	r1, #0
 8003376:	4618      	mov	r0, r3
 8003378:	f000 ff08 	bl	800418c <_ZN13NRF24L01pPort11port_Pin_CEEb>
                rx_mode();
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4618      	mov	r0, r3
 8003380:	f000 fb0c 	bl	800399c <_ZN15NRF24L01pDriver7rx_modeEv>
                port_Pin_CE(1);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2101      	movs	r1, #1
 8003388:	4618      	mov	r0, r3
 800338a:	f000 feff 	bl	800418c <_ZN13NRF24L01pPort11port_Pin_CEEb>
                port_DelayUs(_NRF24L01P_TIMING_Tstby2a_us);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2182      	movs	r1, #130	; 0x82
 8003392:	4618      	mov	r0, r3
 8003394:	f000 ff42 	bl	800421c <_ZN13NRF24L01pPort12port_DelayUsEj>
                RadioState = MODE_RX;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2203      	movs	r2, #3
 800339c:	711a      	strb	r2, [r3, #4]
            }
            break;
 800339e:	e01a      	b.n	80033d6 <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE+0xe2>
        }
        case MODE_TX: {
            if(RadioState != MODE_TX){
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	791b      	ldrb	r3, [r3, #4]
 80033a4:	2b04      	cmp	r3, #4
 80033a6:	d018      	beq.n	80033da <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE+0xe6>
                port_Pin_CE(0);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2100      	movs	r1, #0
 80033ac:	4618      	mov	r0, r3
 80033ae:	f000 feed 	bl	800418c <_ZN13NRF24L01pPort11port_Pin_CEEb>
                tx_mode();
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 fb09 	bl	80039cc <_ZN15NRF24L01pDriver7tx_modeEv>
                port_Pin_CE(1);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2101      	movs	r1, #1
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 fee4 	bl	800418c <_ZN13NRF24L01pPort11port_Pin_CEEb>
                port_DelayUs(_NRF24L01P_TIMING_Tstby2a_us);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2182      	movs	r1, #130	; 0x82
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 ff27 	bl	800421c <_ZN13NRF24L01pPort12port_DelayUsEj>
                RadioState = MODE_TX;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2204      	movs	r2, #4
 80033d2:	711a      	strb	r2, [r3, #4]
            }
            break;
 80033d4:	e001      	b.n	80033da <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE+0xe6>
                rx_mode();
                port_Pin_CE(1);
                port_DelayUs(_NRF24L01P_TIMING_Tstby2a_us);
                RadioState = MODE_RX;
            }
            break;
 80033d6:	bf00      	nop
 80033d8:	e000      	b.n	80033dc <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE+0xe8>
                tx_mode();
                port_Pin_CE(1);
                port_DelayUs(_NRF24L01P_TIMING_Tstby2a_us);
                RadioState = MODE_TX;
            }
            break;
 80033da:	bf00      	nop
        }		
    }
}
 80033dc:	bf00      	nop
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <_ZN9NRF24L01p8writableEv>:


bool NRF24L01p::readable(){
    return (get_data_ready_flag() || !get_fifo_flag_rx_empty())&& (get_rx_payload_pipe() != 7)  ; 
}
bool NRF24L01p::writable(){
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
    return !get_fifo_flag_tx_full();
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 fce6 	bl	8003dc0 <_ZN15NRF24L01pDriver21get_fifo_flag_tx_fullEv>
 80033f4:	4603      	mov	r3, r0
 80033f6:	f083 0301 	eor.w	r3, r3, #1
 80033fa:	b2db      	uxtb	r3, r3
    
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <_ZN9NRF24L01p12writePayloadEPNS_9Payload_tE>:
bool NRF24L01p::readableOnPipe(pipe_t pipe){
    
}


NRF24L01p::ErrorStatus_t NRF24L01p::writePayload(Payload_t *payload){
 8003404:	b590      	push	{r4, r7, lr}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
    set_TX_pipe_address(payload->address);
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	cb18      	ldmia	r3, {r3, r4}
 8003414:	461a      	mov	r2, r3
 8003416:	4623      	mov	r3, r4
 8003418:	4608      	mov	r0, r1
 800341a:	f000 fc9d 	bl	8003d58 <_ZN15NRF24L01pDriver19set_TX_pipe_addressEy>
    if(payload->UseAck == 1){
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	7a5b      	ldrb	r3, [r3, #9]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d008      	beq.n	8003438 <_ZN9NRF24L01p12writePayloadEPNS_9Payload_tE+0x34>
        write_tx_payload(payload->data,payload->length);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	68d9      	ldr	r1, [r3, #12]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	461a      	mov	r2, r3
 8003432:	f000 f9e7 	bl	8003804 <_ZN15NRF24L01pDriver16write_tx_payloadEPhi>
 8003436:	e00b      	b.n	8003450 <_ZN9NRF24L01p12writePayloadEPNS_9Payload_tE+0x4c>
    }else{
        if(RadioConfig.FeatureDynamicPayloadWithNoAckEnabled == 1){
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	7c9b      	ldrb	r3, [r3, #18]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d007      	beq.n	8003450 <_ZN9NRF24L01p12writePayloadEPNS_9Payload_tE+0x4c>
            write_tx_payload_noack(payload->data,payload->length); 
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	68d9      	ldr	r1, [r3, #12]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	461a      	mov	r2, r3
 800344c:	f000 fa36 	bl	80038bc <_ZN15NRF24L01pDriver22write_tx_payload_noackEPhi>
        }
    }
}
 8003450:	bf00      	nop
 8003452:	4618      	mov	r0, r3
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	bd90      	pop	{r4, r7, pc}
 800345a:	bf00      	nop

0800345c <_ZN9NRF24L01p15TransmitPayloadEPNS_9Payload_tE>:
    }
    return error;
}


NRF24L01p::ErrorStatus_t NRF24L01p::TransmitPayload(Payload_t *payload){
 800345c:	b590      	push	{r4, r7, lr}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
    ErrorStatus_t error;
    if(TxPipeAddress != payload->address){
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	e9d3 122a 	ldrd	r1, r2, [r3, #168]	; 0xa8
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	cb18      	ldmia	r3, {r3, r4}
 8003470:	42a2      	cmp	r2, r4
 8003472:	bf08      	it	eq
 8003474:	4299      	cmpeq	r1, r3
 8003476:	d00c      	beq.n	8003492 <_ZN9NRF24L01p15TransmitPayloadEPNS_9Payload_tE+0x36>
        set_TX_pipe_address(payload->address);
 8003478:	6879      	ldr	r1, [r7, #4]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	cb18      	ldmia	r3, {r3, r4}
 800347e:	461a      	mov	r2, r3
 8003480:	4623      	mov	r3, r4
 8003482:	4608      	mov	r0, r1
 8003484:	f000 fc68 	bl	8003d58 <_ZN15NRF24L01pDriver19set_TX_pipe_addressEy>
        TxPipeAddress = payload->address;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	cb18      	ldmia	r3, {r3, r4}
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
    }

    if(payload->UseAck){
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	7a5b      	ldrb	r3, [r3, #9]
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 8095 	beq.w	80035c6 <_ZN9NRF24L01p15TransmitPayloadEPNS_9Payload_tE+0x16a>
        
        if(RxPipeConfig[PIPE_P0].autoAckEnabled == 0){
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	7e5b      	ldrb	r3, [r3, #25]
 80034a0:	f083 0301 	eor.w	r3, r3, #1
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d005      	beq.n	80034b6 <_ZN9NRF24L01p15TransmitPayloadEPNS_9Payload_tE+0x5a>
            enable_auto_ack(PIPE_P0, 1);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	2100      	movs	r1, #0
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 faa3 	bl	80039fc <_ZN15NRF24L01pDriver15enable_auto_ackENS_6pipe_tEb>
        }
        if(RxPipeConfig[PIPE_P0].PipeEnabled == 0){
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	7e1b      	ldrb	r3, [r3, #24]
 80034ba:	f083 0301 	eor.w	r3, r3, #1
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d005      	beq.n	80034d0 <_ZN9NRF24L01p15TransmitPayloadEPNS_9Payload_tE+0x74>
            enable_rx_on_pipe(PIPE_P0, 1);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	2100      	movs	r1, #0
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 fad4 	bl	8003a78 <_ZN15NRF24L01pDriver17enable_rx_on_pipeENS_6pipe_tEb>
        }
        set_RX_pipe_address(PIPE_P0, payload->address);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	cb18      	ldmia	r3, {r3, r4}
 80034d6:	461a      	mov	r2, r3
 80034d8:	4623      	mov	r3, r4
 80034da:	2100      	movs	r1, #0
 80034dc:	f000 fbf4 	bl	8003cc8 <_ZN15NRF24L01pDriver19set_RX_pipe_addressENS_6pipe_tEy>
        
        
        writePayload(payload);
 80034e0:	6839      	ldr	r1, [r7, #0]
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7ff ff8e 	bl	8003404 <_ZN9NRF24L01p12writePayloadEPNS_9Payload_tE>
        
        RadioState_t originalState = RadioState;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	791b      	ldrb	r3, [r3, #4]
 80034ec:	73bb      	strb	r3, [r7, #14]
        RadioMode(MODE_STANDBY);
 80034ee:	2102      	movs	r1, #2
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f7ff feff 	bl	80032f4 <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE>
        

        if(writable()){
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff ff74 	bl	80033e4 <_ZN9NRF24L01p8writableEv>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d038      	beq.n	8003574 <_ZN9NRF24L01p15TransmitPayloadEPNS_9Payload_tE+0x118>
            clear_data_sent_flag();
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4618      	mov	r0, r3
 8003506:	f000 fba9 	bl	8003c5c <_ZN15NRF24L01pDriver20clear_data_sent_flagEv>
            while(1){
                RadioMode(MODE_TX);   
 800350a:	2104      	movs	r1, #4
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f7ff fef1 	bl	80032f4 <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE>
                RadioMode(MODE_STANDBY);
 8003512:	2102      	movs	r1, #2
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f7ff feed 	bl	80032f4 <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE>
                
                if(get_data_sent_flag()){
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4618      	mov	r0, r3
 800351e:	f000 fb85 	bl	8003c2c <_ZN15NRF24L01pDriver18get_data_sent_flagEv>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d002      	beq.n	800352e <_ZN9NRF24L01p15TransmitPayloadEPNS_9Payload_tE+0xd2>
                    error = SUCCESS;
 8003528:	2300      	movs	r3, #0
 800352a:	73fb      	strb	r3, [r7, #15]
                    break;
 800352c:	e022      	b.n	8003574 <_ZN9NRF24L01p15TransmitPayloadEPNS_9Payload_tE+0x118>
                }
                if(get_max_retry_flag()){
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4618      	mov	r0, r3
 8003532:	f000 fb51 	bl	8003bd8 <_ZN15NRF24L01pDriver18get_max_retry_flagEv>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0e6      	beq.n	800350a <_ZN9NRF24L01p15TransmitPayloadEPNS_9Payload_tE+0xae>
                    clear_max_retry_flag();
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4618      	mov	r0, r3
 8003540:	f000 fb62 	bl	8003c08 <_ZN15NRF24L01pDriver20clear_max_retry_flagEv>
                    if(get_plos_count()>=payload->retransmitCount){
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4618      	mov	r0, r3
 8003548:	f000 fbac 	bl	8003ca4 <_ZN15NRF24L01pDriver14get_plos_countEv>
 800354c:	4603      	mov	r3, r0
 800354e:	461a      	mov	r2, r3
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	7d1b      	ldrb	r3, [r3, #20]
 8003554:	429a      	cmp	r2, r3
 8003556:	bf2c      	ite	cs
 8003558:	2301      	movcs	r3, #1
 800355a:	2300      	movcc	r3, #0
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0d3      	beq.n	800350a <_ZN9NRF24L01p15TransmitPayloadEPNS_9Payload_tE+0xae>
                        set_frequency_offset(RadioConfig.frequencyOffset);
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	7adb      	ldrb	r3, [r3, #11]
 8003568:	4619      	mov	r1, r3
 800356a:	4610      	mov	r0, r2
 800356c:	f000 fb02 	bl	8003b74 <_ZN15NRF24L01pDriver20set_frequency_offsetEh>
                        error = ERROR;
 8003570:	23ff      	movs	r3, #255	; 0xff
 8003572:	73fb      	strb	r3, [r7, #15]
                }
            }

        }
        
        RadioMode(originalState);
 8003574:	7bbb      	ldrb	r3, [r7, #14]
 8003576:	4619      	mov	r1, r3
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7ff febb 	bl	80032f4 <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE>
        
        set_RX_pipe_address(PIPE_P0, RxPipeConfig[PIPE_P0].address);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8003586:	461a      	mov	r2, r3
 8003588:	4623      	mov	r3, r4
 800358a:	2100      	movs	r1, #0
 800358c:	f000 fb9c 	bl	8003cc8 <_ZN15NRF24L01pDriver19set_RX_pipe_addressENS_6pipe_tEy>
        if(RxPipeConfig[PIPE_P0].autoAckEnabled == 0){
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	7e5b      	ldrb	r3, [r3, #25]
 8003594:	f083 0301 	eor.w	r3, r3, #1
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d005      	beq.n	80035aa <_ZN9NRF24L01p15TransmitPayloadEPNS_9Payload_tE+0x14e>
            enable_auto_ack(PIPE_P0, 0);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	2100      	movs	r1, #0
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 fa29 	bl	80039fc <_ZN15NRF24L01pDriver15enable_auto_ackENS_6pipe_tEb>
        }
        if(RxPipeConfig[PIPE_P0].PipeEnabled == 0){
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	7e1b      	ldrb	r3, [r3, #24]
 80035ae:	f083 0301 	eor.w	r3, r3, #1
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d035      	beq.n	8003624 <_ZN9NRF24L01p15TransmitPayloadEPNS_9Payload_tE+0x1c8>
            enable_rx_on_pipe(PIPE_P0, 0);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	2100      	movs	r1, #0
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 fa5a 	bl	8003a78 <_ZN15NRF24L01pDriver17enable_rx_on_pipeENS_6pipe_tEb>
 80035c4:	e02e      	b.n	8003624 <_ZN9NRF24L01p15TransmitPayloadEPNS_9Payload_tE+0x1c8>
        }
    }else{
        set_TX_pipe_address(payload->address);
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	cb18      	ldmia	r3, {r3, r4}
 80035cc:	461a      	mov	r2, r3
 80035ce:	4623      	mov	r3, r4
 80035d0:	4608      	mov	r0, r1
 80035d2:	f000 fbc1 	bl	8003d58 <_ZN15NRF24L01pDriver19set_TX_pipe_addressEy>
        writePayload(payload);
 80035d6:	6839      	ldr	r1, [r7, #0]
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f7ff ff13 	bl	8003404 <_ZN9NRF24L01p12writePayloadEPNS_9Payload_tE>
        RadioState_t originalState = RadioState;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	791b      	ldrb	r3, [r3, #4]
 80035e2:	737b      	strb	r3, [r7, #13]
        if(writable()){
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f7ff fefd 	bl	80033e4 <_ZN9NRF24L01p8writableEv>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d014      	beq.n	800361a <_ZN9NRF24L01p15TransmitPayloadEPNS_9Payload_tE+0x1be>
            clear_data_sent_flag();
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 fb32 	bl	8003c5c <_ZN15NRF24L01pDriver20clear_data_sent_flagEv>
            while(1){
                RadioMode(MODE_TX);   
 80035f8:	2104      	movs	r1, #4
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7ff fe7a 	bl	80032f4 <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE>
                RadioMode(MODE_STANDBY);
 8003600:	2102      	movs	r1, #2
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7ff fe76 	bl	80032f4 <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE>
                if(get_data_sent_flag()){
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4618      	mov	r0, r3
 800360c:	f000 fb0e 	bl	8003c2c <_ZN15NRF24L01pDriver18get_data_sent_flagEv>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0f0      	beq.n	80035f8 <_ZN9NRF24L01p15TransmitPayloadEPNS_9Payload_tE+0x19c>
                    error = SUCCESS;
 8003616:	2300      	movs	r3, #0
 8003618:	73fb      	strb	r3, [r7, #15]
                break;
                }
            }
        }
        RadioMode(originalState);
 800361a:	7b7b      	ldrb	r3, [r7, #13]
 800361c:	4619      	mov	r1, r3
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7ff fe68 	bl	80032f4 <_ZN9NRF24L01p9RadioModeENS_12RadioState_tE>
    }
    
    flush_tx();
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4618      	mov	r0, r3
 8003628:	f000 f910 	bl	800384c <_ZN15NRF24L01pDriver8flush_txEv>
    return error;
 800362c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	bd90      	pop	{r4, r7, pc}

08003638 <_ZN15NRF24L01pDriverC1Ev>:
 * Created on January 29, 2017, 7:56 AM
 */

#include "NRF24L01pDriver.h"

NRF24L01pDriver::NRF24L01pDriver() {
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4618      	mov	r0, r3
 8003644:	f000 fc9e 	bl	8003f84 <_ZN13NRF24L01pPortC1Ev>
 8003648:	4a03      	ldr	r2, [pc, #12]	; (8003658 <_ZN15NRF24L01pDriverC1Ev+0x20>)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	601a      	str	r2, [r3, #0]
}
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4618      	mov	r0, r3
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	08005674 	.word	0x08005674

0800365c <_ZN15NRF24L01pDriverD1Ev>:

NRF24L01pDriver::NRF24L01pDriver(const NRF24L01pDriver& orig) {
}

NRF24L01pDriver::~NRF24L01pDriver() {
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	4a08      	ldr	r2, [pc, #32]	; (8003688 <_ZN15NRF24L01pDriverD1Ev+0x2c>)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4618      	mov	r0, r3
 800366e:	f000 fc99 	bl	8003fa4 <_ZN13NRF24L01pPortD1Ev>
}
 8003672:	2300      	movs	r3, #0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d002      	beq.n	800367e <_ZN15NRF24L01pDriverD1Ev+0x22>
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f001 f805 	bl	8004688 <_ZdlPv>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4618      	mov	r0, r3
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	08005674 	.word	0x08005674

0800368c <_ZN15NRF24L01pDriverD0Ev>:
}

NRF24L01pDriver::NRF24L01pDriver(const NRF24L01pDriver& orig) {
}

NRF24L01pDriver::~NRF24L01pDriver() {
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
}
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f7ff ffe1 	bl	800365c <_ZN15NRF24L01pDriverD1Ev>
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 fff4 	bl	8004688 <_ZdlPv>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4618      	mov	r0, r3
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop

080036ac <_ZN15NRF24L01pDriver13read_registerEh>:

uint8_t NRF24L01pDriver::read_register(uint8_t address){
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	460b      	mov	r3, r1
 80036b6:	70fb      	strb	r3, [r7, #3]
    port_Pin_CSN(0);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2100      	movs	r1, #0
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 fd77 	bl	80041b0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>
    uint8_t temp = address&_NRF24L01P_REG_ADDRESS_MASK;
 80036c2:	78fb      	ldrb	r3, [r7, #3]
 80036c4:	f003 031f 	and.w	r3, r3, #31
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	73fb      	strb	r3, [r7, #15]
    port_SPI_Transcieve(&temp, 1);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f107 010f 	add.w	r1, r7, #15
 80036d2:	2201      	movs	r2, #1
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 fd7d 	bl	80041d4 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>
    port_SPI_Transcieve(&temp, 1);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f107 010f 	add.w	r1, r7, #15
 80036e0:	2201      	movs	r2, #1
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 fd76 	bl	80041d4 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>
    port_Pin_CSN(1);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2101      	movs	r1, #1
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 fd5f 	bl	80041b0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>
    return temp;
 80036f2:	7bfb      	ldrb	r3, [r7, #15]
    
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <_ZN15NRF24L01pDriver13read_registerEhPhi>:
void NRF24L01pDriver::read_register(uint8_t address, uint8_t *dataout, int len){
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	607a      	str	r2, [r7, #4]
 8003706:	603b      	str	r3, [r7, #0]
 8003708:	460b      	mov	r3, r1
 800370a:	72fb      	strb	r3, [r7, #11]
    port_Pin_CSN(0);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2100      	movs	r1, #0
 8003710:	4618      	mov	r0, r3
 8003712:	f000 fd4d 	bl	80041b0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>
    uint8_t temp = address&_NRF24L01P_REG_ADDRESS_MASK;
 8003716:	7afb      	ldrb	r3, [r7, #11]
 8003718:	f003 031f 	and.w	r3, r3, #31
 800371c:	b2db      	uxtb	r3, r3
 800371e:	75fb      	strb	r3, [r7, #23]
    port_SPI_Transcieve(&temp, 1);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f107 0117 	add.w	r1, r7, #23
 8003726:	2201      	movs	r2, #1
 8003728:	4618      	mov	r0, r3
 800372a:	f000 fd53 	bl	80041d4 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>
    port_SPI_Transcieve(dataout, len);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	4618      	mov	r0, r3
 8003736:	f000 fd4d 	bl	80041d4 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>
    port_Pin_CSN(1);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2101      	movs	r1, #1
 800373e:	4618      	mov	r0, r3
 8003740:	f000 fd36 	bl	80041b0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>
}
 8003744:	bf00      	nop
 8003746:	3718      	adds	r7, #24
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <_ZN15NRF24L01pDriver14write_registerEhh>:
void NRF24L01pDriver::write_register(uint8_t address, uint8_t datain){
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	460b      	mov	r3, r1
 8003756:	70fb      	strb	r3, [r7, #3]
 8003758:	4613      	mov	r3, r2
 800375a:	70bb      	strb	r3, [r7, #2]
    port_Pin_CSN(0);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2100      	movs	r1, #0
 8003760:	4618      	mov	r0, r3
 8003762:	f000 fd25 	bl	80041b0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>
    uint8_t temp = (( _NRF24L01P_SPI_CMD_WR_REG | (address&(_NRF24L01P_REG_ADDRESS_MASK))));
 8003766:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800376a:	f003 031f 	and.w	r3, r3, #31
 800376e:	b25b      	sxtb	r3, r3
 8003770:	f043 0320 	orr.w	r3, r3, #32
 8003774:	b25b      	sxtb	r3, r3
 8003776:	b2db      	uxtb	r3, r3
 8003778:	73fb      	strb	r3, [r7, #15]
    port_SPI_Transcieve(&temp, 1);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f107 010f 	add.w	r1, r7, #15
 8003780:	2201      	movs	r2, #1
 8003782:	4618      	mov	r0, r3
 8003784:	f000 fd26 	bl	80041d4 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>
    port_SPI_Transcieve(&datain, 1);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	1cb9      	adds	r1, r7, #2
 800378c:	2201      	movs	r2, #1
 800378e:	4618      	mov	r0, r3
 8003790:	f000 fd20 	bl	80041d4 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>
    port_Pin_CSN(1);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2101      	movs	r1, #1
 8003798:	4618      	mov	r0, r3
 800379a:	f000 fd09 	bl	80041b0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>
}
 800379e:	bf00      	nop
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop

080037a8 <_ZN15NRF24L01pDriver14write_registerEhPhi>:
void NRF24L01pDriver::write_register(uint8_t address, uint8_t *datain, int len){
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	607a      	str	r2, [r7, #4]
 80037b2:	603b      	str	r3, [r7, #0]
 80037b4:	460b      	mov	r3, r1
 80037b6:	72fb      	strb	r3, [r7, #11]
    port_Pin_CSN(0);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2100      	movs	r1, #0
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 fcf7 	bl	80041b0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>
    uint8_t temp = (( _NRF24L01P_SPI_CMD_WR_REG | (address&(_NRF24L01P_REG_ADDRESS_MASK))));
 80037c2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80037c6:	f003 031f 	and.w	r3, r3, #31
 80037ca:	b25b      	sxtb	r3, r3
 80037cc:	f043 0320 	orr.w	r3, r3, #32
 80037d0:	b25b      	sxtb	r3, r3
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	75fb      	strb	r3, [r7, #23]
    port_SPI_Transcieve(&temp, 1);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f107 0117 	add.w	r1, r7, #23
 80037dc:	2201      	movs	r2, #1
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 fcf8 	bl	80041d4 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>
    port_SPI_Transcieve(datain, len);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	6879      	ldr	r1, [r7, #4]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 fcf2 	bl	80041d4 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>
    port_Pin_CSN(1);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2101      	movs	r1, #1
 80037f4:	4618      	mov	r0, r3
 80037f6:	f000 fcdb 	bl	80041b0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>
}
 80037fa:	bf00      	nop
 80037fc:	3718      	adds	r7, #24
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop

08003804 <_ZN15NRF24L01pDriver16write_tx_payloadEPhi>:
    uint8_t temp = (_NRF24L01P_SPI_CMD_RD_RX_PAYLOAD);
    port_SPI_Transcieve(&temp,1);
    port_SPI_Transcieve(dataout,pay_len);
    port_Pin_CSN(1);
}
void NRF24L01pDriver::write_tx_payload(uint8_t *datain, int pay_len){
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
    port_Pin_CSN(0);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2100      	movs	r1, #0
 8003814:	4618      	mov	r0, r3
 8003816:	f000 fccb 	bl	80041b0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>
    uint8_t temp = (_NRF24L01P_SPI_CMD_WR_TX_PAYLOAD);
 800381a:	23a0      	movs	r3, #160	; 0xa0
 800381c:	75fb      	strb	r3, [r7, #23]
    port_SPI_Transcieve(&temp,1);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f107 0117 	add.w	r1, r7, #23
 8003824:	2201      	movs	r2, #1
 8003826:	4618      	mov	r0, r3
 8003828:	f000 fcd4 	bl	80041d4 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>
    port_SPI_Transcieve(datain,pay_len);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	68b9      	ldr	r1, [r7, #8]
 8003832:	4618      	mov	r0, r3
 8003834:	f000 fcce 	bl	80041d4 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>
    port_Pin_CSN(1);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2101      	movs	r1, #1
 800383c:	4618      	mov	r0, r3
 800383e:	f000 fcb7 	bl	80041b0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>
}
 8003842:	bf00      	nop
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop

0800384c <_ZN15NRF24L01pDriver8flush_txEv>:
void NRF24L01pDriver::flush_tx(){
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
    port_Pin_CSN(0);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2100      	movs	r1, #0
 8003858:	4618      	mov	r0, r3
 800385a:	f000 fca9 	bl	80041b0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>
    uint8_t temp = (_NRF24L01P_SPI_CMD_FLUSH_TX);
 800385e:	23e1      	movs	r3, #225	; 0xe1
 8003860:	73fb      	strb	r3, [r7, #15]
    port_SPI_Transcieve(&temp,1);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f107 010f 	add.w	r1, r7, #15
 8003868:	2201      	movs	r2, #1
 800386a:	4618      	mov	r0, r3
 800386c:	f000 fcb2 	bl	80041d4 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>
    port_Pin_CSN(1);  
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2101      	movs	r1, #1
 8003874:	4618      	mov	r0, r3
 8003876:	f000 fc9b 	bl	80041b0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>
}
 800387a:	bf00      	nop
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop

08003884 <_ZN15NRF24L01pDriver8flush_rxEv>:
void NRF24L01pDriver::flush_rx(){
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
    port_Pin_CSN(0);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2100      	movs	r1, #0
 8003890:	4618      	mov	r0, r3
 8003892:	f000 fc8d 	bl	80041b0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>
    uint8_t temp = (_NRF24L01P_SPI_CMD_FLUSH_RX);
 8003896:	23e2      	movs	r3, #226	; 0xe2
 8003898:	73fb      	strb	r3, [r7, #15]
    port_SPI_Transcieve(&temp,1);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f107 010f 	add.w	r1, r7, #15
 80038a0:	2201      	movs	r2, #1
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 fc96 	bl	80041d4 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>
    port_Pin_CSN(1);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2101      	movs	r1, #1
 80038ac:	4618      	mov	r0, r3
 80038ae:	f000 fc7f 	bl	80041b0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>
}
 80038b2:	bf00      	nop
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop

080038bc <_ZN15NRF24L01pDriver22write_tx_payload_noackEPhi>:
    uint8_t temp = (_NRF24L01P_SPI_CMD_W_ACK_PAYLOAD | pipe);
    port_SPI_Transcieve(&temp,1);
    port_SPI_Transcieve(datain,pay_len);
    port_Pin_CSN(1);
}
void NRF24L01pDriver::write_tx_payload_noack(uint8_t *datain, int pay_len){
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
    port_Pin_CSN(0);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2100      	movs	r1, #0
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 fc6f 	bl	80041b0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>
    uint8_t temp = (_NRF24L01P_SPI_CMD_W_TX_PYLD_NO_ACK);
 80038d2:	23b0      	movs	r3, #176	; 0xb0
 80038d4:	75fb      	strb	r3, [r7, #23]
    port_SPI_Transcieve(&temp,1);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f107 0117 	add.w	r1, r7, #23
 80038dc:	2201      	movs	r2, #1
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 fc78 	bl	80041d4 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>
    port_SPI_Transcieve(datain,pay_len);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	68b9      	ldr	r1, [r7, #8]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 fc72 	bl	80041d4 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>
    port_Pin_CSN(1);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2101      	movs	r1, #1
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 fc5b 	bl	80041b0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>
}
 80038fa:	bf00      	nop
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop

08003904 <_ZN15NRF24L01pDriver10get_statusEv>:
int NRF24L01pDriver::get_status(){
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
    port_Pin_CSN(0);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2100      	movs	r1, #0
 8003910:	4618      	mov	r0, r3
 8003912:	f000 fc4d 	bl	80041b0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>
    uint8_t temp = (_NRF24L01P_SPI_CMD_NOP );
 8003916:	23ff      	movs	r3, #255	; 0xff
 8003918:	73fb      	strb	r3, [r7, #15]
    port_SPI_Transcieve(&temp,1);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f107 010f 	add.w	r1, r7, #15
 8003920:	2201      	movs	r2, #1
 8003922:	4618      	mov	r0, r3
 8003924:	f000 fc56 	bl	80041d4 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>
    port_Pin_CSN(1);     
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2101      	movs	r1, #1
 800392c:	4618      	mov	r0, r3
 800392e:	f000 fc3f 	bl	80041b0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>
    return temp;
 8003932:	7bfb      	ldrb	r3, [r7, #15]
}
 8003934:	4618      	mov	r0, r3
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <_ZN15NRF24L01pDriver8power_upEv>:


void NRF24L01pDriver::power_up(){
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
    uint8_t temp = read_register(_NRF24L01P_REG_CONFIG);
 8003944:	2100      	movs	r1, #0
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7ff feb0 	bl	80036ac <_ZN15NRF24L01pDriver13read_registerEh>
 800394c:	4603      	mov	r3, r0
 800394e:	73fb      	strb	r3, [r7, #15]
    temp |= _NRF24L01P_CONFIG_PWR_UP;
 8003950:	7bfb      	ldrb	r3, [r7, #15]
 8003952:	f043 0302 	orr.w	r3, r3, #2
 8003956:	73fb      	strb	r3, [r7, #15]
    write_register(_NRF24L01P_REG_CONFIG,temp);
 8003958:	7bfb      	ldrb	r3, [r7, #15]
 800395a:	461a      	mov	r2, r3
 800395c:	2100      	movs	r1, #0
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff fef4 	bl	800374c <_ZN15NRF24L01pDriver14write_registerEhh>
}
 8003964:	bf00      	nop
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <_ZN15NRF24L01pDriver10power_downEv>:
void NRF24L01pDriver::power_down(){
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
    uint8_t temp = read_register(_NRF24L01P_REG_CONFIG);
 8003974:	2100      	movs	r1, #0
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff fe98 	bl	80036ac <_ZN15NRF24L01pDriver13read_registerEh>
 800397c:	4603      	mov	r3, r0
 800397e:	73fb      	strb	r3, [r7, #15]
    temp &= ~_NRF24L01P_CONFIG_PWR_UP;
 8003980:	7bfb      	ldrb	r3, [r7, #15]
 8003982:	f023 0302 	bic.w	r3, r3, #2
 8003986:	73fb      	strb	r3, [r7, #15]
    write_register(_NRF24L01P_REG_CONFIG,temp);
 8003988:	7bfb      	ldrb	r3, [r7, #15]
 800398a:	461a      	mov	r2, r3
 800398c:	2100      	movs	r1, #0
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7ff fedc 	bl	800374c <_ZN15NRF24L01pDriver14write_registerEhh>
}
 8003994:	bf00      	nop
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <_ZN15NRF24L01pDriver7rx_modeEv>:
void NRF24L01pDriver::rx_mode(){
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
    uint8_t temp = read_register(_NRF24L01P_REG_CONFIG);
 80039a4:	2100      	movs	r1, #0
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7ff fe80 	bl	80036ac <_ZN15NRF24L01pDriver13read_registerEh>
 80039ac:	4603      	mov	r3, r0
 80039ae:	73fb      	strb	r3, [r7, #15]
    temp |= _NRF24L01P_CONFIG_PRIM_RX;
 80039b0:	7bfb      	ldrb	r3, [r7, #15]
 80039b2:	f043 0301 	orr.w	r3, r3, #1
 80039b6:	73fb      	strb	r3, [r7, #15]
    write_register(_NRF24L01P_REG_CONFIG,temp);
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
 80039ba:	461a      	mov	r2, r3
 80039bc:	2100      	movs	r1, #0
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7ff fec4 	bl	800374c <_ZN15NRF24L01pDriver14write_registerEhh>
}
 80039c4:	bf00      	nop
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <_ZN15NRF24L01pDriver7tx_modeEv>:
void NRF24L01pDriver::tx_mode(){
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
    uint8_t temp = read_register(_NRF24L01P_REG_CONFIG);
 80039d4:	2100      	movs	r1, #0
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7ff fe68 	bl	80036ac <_ZN15NRF24L01pDriver13read_registerEh>
 80039dc:	4603      	mov	r3, r0
 80039de:	73fb      	strb	r3, [r7, #15]
    temp &= ~_NRF24L01P_CONFIG_PRIM_RX;
 80039e0:	7bfb      	ldrb	r3, [r7, #15]
 80039e2:	f023 0301 	bic.w	r3, r3, #1
 80039e6:	73fb      	strb	r3, [r7, #15]
    write_register(_NRF24L01P_REG_CONFIG,temp);
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
 80039ea:	461a      	mov	r2, r3
 80039ec:	2100      	movs	r1, #0
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7ff feac 	bl	800374c <_ZN15NRF24L01pDriver14write_registerEhh>
}
 80039f4:	bf00      	nop
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <_ZN15NRF24L01pDriver15enable_auto_ackENS_6pipe_tEb>:
void NRF24L01pDriver::enable_maxRetry_interrupt(bool sel){
    
}


void NRF24L01pDriver::enable_auto_ack(pipe_t pipe, bool sel){
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	70fb      	strb	r3, [r7, #3]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	70bb      	strb	r3, [r7, #2]
    if (sel){
 8003a0c:	78bb      	ldrb	r3, [r7, #2]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d016      	beq.n	8003a40 <_ZN15NRF24L01pDriver15enable_auto_ackENS_6pipe_tEb+0x44>
        uint8_t temp = read_register(_NRF24L01P_REG_EN_AA);
 8003a12:	2101      	movs	r1, #1
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7ff fe49 	bl	80036ac <_ZN15NRF24L01pDriver13read_registerEh>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	73fb      	strb	r3, [r7, #15]
        _nrf24l01p_set_bit(temp,pipe);
 8003a1e:	78fb      	ldrb	r3, [r7, #3]
 8003a20:	2201      	movs	r2, #1
 8003a22:	fa02 f303 	lsl.w	r3, r2, r3
 8003a26:	b25a      	sxtb	r2, r3
 8003a28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	b25b      	sxtb	r3, r3
 8003a30:	73fb      	strb	r3, [r7, #15]
        write_register(_NRF24L01P_REG_EN_AA,temp); 
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
 8003a34:	461a      	mov	r2, r3
 8003a36:	2101      	movs	r1, #1
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7ff fe87 	bl	800374c <_ZN15NRF24L01pDriver14write_registerEhh>
        uint8_t temp = read_register(_NRF24L01P_REG_EN_AA);
        _nrf24l01p_clr_bit(temp,pipe);
        write_register(_NRF24L01P_REG_EN_AA,temp); 
    }
  
}
 8003a3e:	e017      	b.n	8003a70 <_ZN15NRF24L01pDriver15enable_auto_ackENS_6pipe_tEb+0x74>
    if (sel){
        uint8_t temp = read_register(_NRF24L01P_REG_EN_AA);
        _nrf24l01p_set_bit(temp,pipe);
        write_register(_NRF24L01P_REG_EN_AA,temp); 
    }else{
        uint8_t temp = read_register(_NRF24L01P_REG_EN_AA);
 8003a40:	2101      	movs	r1, #1
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7ff fe32 	bl	80036ac <_ZN15NRF24L01pDriver13read_registerEh>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	73bb      	strb	r3, [r7, #14]
        _nrf24l01p_clr_bit(temp,pipe);
 8003a4c:	78fb      	ldrb	r3, [r7, #3]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	b25b      	sxtb	r3, r3
 8003a56:	43db      	mvns	r3, r3
 8003a58:	b25a      	sxtb	r2, r3
 8003a5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	b25b      	sxtb	r3, r3
 8003a62:	73bb      	strb	r3, [r7, #14]
        write_register(_NRF24L01P_REG_EN_AA,temp); 
 8003a64:	7bbb      	ldrb	r3, [r7, #14]
 8003a66:	461a      	mov	r2, r3
 8003a68:	2101      	movs	r1, #1
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff fe6e 	bl	800374c <_ZN15NRF24L01pDriver14write_registerEhh>
    }
  
}
 8003a70:	bf00      	nop
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <_ZN15NRF24L01pDriver17enable_rx_on_pipeENS_6pipe_tEb>:



void NRF24L01pDriver::enable_rx_on_pipe(pipe_t pipe, bool sel){
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	460b      	mov	r3, r1
 8003a82:	70fb      	strb	r3, [r7, #3]
 8003a84:	4613      	mov	r3, r2
 8003a86:	70bb      	strb	r3, [r7, #2]
    if(sel){
 8003a88:	78bb      	ldrb	r3, [r7, #2]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d016      	beq.n	8003abc <_ZN15NRF24L01pDriver17enable_rx_on_pipeENS_6pipe_tEb+0x44>
        uint8_t temp = read_register(_NRF24L01P_REG_EN_RXADDR);
 8003a8e:	2102      	movs	r1, #2
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7ff fe0b 	bl	80036ac <_ZN15NRF24L01pDriver13read_registerEh>
 8003a96:	4603      	mov	r3, r0
 8003a98:	73fb      	strb	r3, [r7, #15]
        _nrf24l01p_set_bit(temp,pipe);
 8003a9a:	78fb      	ldrb	r3, [r7, #3]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	b25a      	sxtb	r2, r3
 8003aa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	b25b      	sxtb	r3, r3
 8003aac:	73fb      	strb	r3, [r7, #15]
        write_register(_NRF24L01P_REG_EN_RXADDR,temp);
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	2102      	movs	r1, #2
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f7ff fe49 	bl	800374c <_ZN15NRF24L01pDriver14write_registerEhh>
        uint8_t temp = read_register(_NRF24L01P_REG_EN_RXADDR);
        _nrf24l01p_clr_bit(temp,pipe);
        write_register(_NRF24L01P_REG_EN_RXADDR,temp);
    }

}
 8003aba:	e017      	b.n	8003aec <_ZN15NRF24L01pDriver17enable_rx_on_pipeENS_6pipe_tEb+0x74>
    if(sel){
        uint8_t temp = read_register(_NRF24L01P_REG_EN_RXADDR);
        _nrf24l01p_set_bit(temp,pipe);
        write_register(_NRF24L01P_REG_EN_RXADDR,temp);
    }else{
        uint8_t temp = read_register(_NRF24L01P_REG_EN_RXADDR);
 8003abc:	2102      	movs	r1, #2
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7ff fdf4 	bl	80036ac <_ZN15NRF24L01pDriver13read_registerEh>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	73bb      	strb	r3, [r7, #14]
        _nrf24l01p_clr_bit(temp,pipe);
 8003ac8:	78fb      	ldrb	r3, [r7, #3]
 8003aca:	2201      	movs	r2, #1
 8003acc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad0:	b25b      	sxtb	r3, r3
 8003ad2:	43db      	mvns	r3, r3
 8003ad4:	b25a      	sxtb	r2, r3
 8003ad6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ada:	4013      	ands	r3, r2
 8003adc:	b25b      	sxtb	r3, r3
 8003ade:	73bb      	strb	r3, [r7, #14]
        write_register(_NRF24L01P_REG_EN_RXADDR,temp);
 8003ae0:	7bbb      	ldrb	r3, [r7, #14]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	2102      	movs	r1, #2
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7ff fe30 	bl	800374c <_ZN15NRF24L01pDriver14write_registerEhh>
    }

}
 8003aec:	bf00      	nop
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <_ZN15NRF24L01pDriver29set_auto_retransmission_countEh>:
}
NRF24L01pDriver::aw_t NRF24L01pDriver::get_address_width(){
    return (aw_t) read_register(_NRF24L01P_REG_SETUP_AW);  
}

void NRF24L01pDriver::set_auto_retransmission_count(uint8_t count){
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	460b      	mov	r3, r1
 8003afe:	70fb      	strb	r3, [r7, #3]
    uint8_t temp = read_register(_NRF24L01P_REG_SETUP_RETR);
 8003b00:	2104      	movs	r1, #4
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7ff fdd2 	bl	80036ac <_ZN15NRF24L01pDriver13read_registerEh>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	73fb      	strb	r3, [r7, #15]
    temp &= ~ 0x0F;
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
 8003b0e:	f023 030f 	bic.w	r3, r3, #15
 8003b12:	73fb      	strb	r3, [r7, #15]
    temp |= (count<<0);
 8003b14:	7bfa      	ldrb	r2, [r7, #15]
 8003b16:	78fb      	ldrb	r3, [r7, #3]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	73fb      	strb	r3, [r7, #15]
    write_register(_NRF24L01P_REG_SETUP_RETR,temp);
 8003b1c:	7bfb      	ldrb	r3, [r7, #15]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	2104      	movs	r1, #4
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7ff fe12 	bl	800374c <_ZN15NRF24L01pDriver14write_registerEhh>
}
 8003b28:	bf00      	nop
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <_ZN15NRF24L01pDriver29set_auto_retransmission_delayEh>:
uint8_t NRF24L01pDriver::read_auto_retransmission_count(){
    uint8_t temp = read_register(_NRF24L01P_REG_SETUP_RETR);
    return temp & 0x0F; 
}

void NRF24L01pDriver::set_auto_retransmission_delay(uint8_t times250us){
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	70fb      	strb	r3, [r7, #3]
    uint8_t temp = read_register(_NRF24L01P_REG_SETUP_RETR);
 8003b3c:	2104      	movs	r1, #4
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7ff fdb4 	bl	80036ac <_ZN15NRF24L01pDriver13read_registerEh>
 8003b44:	4603      	mov	r3, r0
 8003b46:	73fb      	strb	r3, [r7, #15]
    temp &= ~(0xF0);
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
 8003b4a:	f003 030f 	and.w	r3, r3, #15
 8003b4e:	73fb      	strb	r3, [r7, #15]
    temp |= (times250us<<4);
 8003b50:	78fb      	ldrb	r3, [r7, #3]
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	b25a      	sxtb	r2, r3
 8003b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	b25b      	sxtb	r3, r3
 8003b5e:	73fb      	strb	r3, [r7, #15]
    write_register(_NRF24L01P_REG_SETUP_RETR,temp);
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
 8003b62:	461a      	mov	r2, r3
 8003b64:	2104      	movs	r1, #4
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7ff fdf0 	bl	800374c <_ZN15NRF24L01pDriver14write_registerEhh>
}
 8003b6c:	bf00      	nop
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <_ZN15NRF24L01pDriver20set_frequency_offsetEh>:
uint8_t NRF24L01pDriver::read_auto_retransmission_delay(){
    uint8_t temp = read_register(_NRF24L01P_REG_SETUP_RETR);
    return temp & 0xF0;
}

void NRF24L01pDriver::set_frequency_offset(uint8_t offset){
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	70fb      	strb	r3, [r7, #3]
    if( (offset >=0)  && ( offset <= 125)){
 8003b80:	78fb      	ldrb	r3, [r7, #3]
 8003b82:	2b7d      	cmp	r3, #125	; 0x7d
 8003b84:	d805      	bhi.n	8003b92 <_ZN15NRF24L01pDriver20set_frequency_offsetEh+0x1e>
            write_register(_NRF24L01P_REG_RF_CH,offset);
 8003b86:	78fb      	ldrb	r3, [r7, #3]
 8003b88:	461a      	mov	r2, r3
 8003b8a:	2105      	movs	r1, #5
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7ff fddd 	bl	800374c <_ZN15NRF24L01pDriver14write_registerEhh>
    }
}
 8003b92:	bf00      	nop
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop

08003b9c <_ZN15NRF24L01pDriver12set_DataRateENS_10datarate_tE>:
uint8_t NRF24L01pDriver::get_frequency_offset(){
    return read_register(_NRF24L01P_REG_RF_CH);
}

void NRF24L01pDriver::set_DataRate(datarate_t DataRate){
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	70fb      	strb	r3, [r7, #3]
    uint8_t temp = read_register(_NRF24L01P_REG_RF_SETUP);
 8003ba8:	2106      	movs	r1, #6
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7ff fd7e 	bl	80036ac <_ZN15NRF24L01pDriver13read_registerEh>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	73fb      	strb	r3, [r7, #15]
    temp &= ~_NRF24L01P_RF_SETUP_RF_DR_MASK;
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
 8003bb6:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8003bba:	73fb      	strb	r3, [r7, #15]
    temp |= DataRate;
 8003bbc:	7bfa      	ldrb	r2, [r7, #15]
 8003bbe:	78fb      	ldrb	r3, [r7, #3]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	73fb      	strb	r3, [r7, #15]
    write_register(_NRF24L01P_REG_RF_SETUP,temp);
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	2106      	movs	r1, #6
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7ff fdbe 	bl	800374c <_ZN15NRF24L01pDriver14write_registerEhh>
}
 8003bd0:	bf00      	nop
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <_ZN15NRF24L01pDriver18get_max_retry_flagEv>:

bool NRF24L01pDriver::get_tx_fifo_full_flag(){
    if(get_status()&_NRF24L01P_STATUS_TX_FULL) return 1;
    else return 0;
}
bool NRF24L01pDriver::get_max_retry_flag(){
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
    if(get_status()&_NRF24L01P_STATUS_MAX_RT) return 1;
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7ff fe8f 	bl	8003904 <_ZN15NRF24L01pDriver10get_statusEv>
 8003be6:	4603      	mov	r3, r0
 8003be8:	f003 0310 	and.w	r3, r3, #16
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	bf14      	ite	ne
 8003bf0:	2301      	movne	r3, #1
 8003bf2:	2300      	moveq	r3, #0
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <_ZN15NRF24L01pDriver18get_max_retry_flagEv+0x26>
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e000      	b.n	8003c00 <_ZN15NRF24L01pDriver18get_max_retry_flagEv+0x28>
    else return 0;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <_ZN15NRF24L01pDriver20clear_max_retry_flagEv>:
void NRF24L01pDriver::clear_max_retry_flag(){
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
    uint8_t temp = _NRF24L01P_STATUS_MAX_RT;
 8003c10:	2310      	movs	r3, #16
 8003c12:	73fb      	strb	r3, [r7, #15]
    write_register(_NRF24L01P_REG_STATUS,&temp,sizeof(temp));
 8003c14:	2301      	movs	r3, #1
 8003c16:	f107 020f 	add.w	r2, r7, #15
 8003c1a:	2107      	movs	r1, #7
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f7ff fdc3 	bl	80037a8 <_ZN15NRF24L01pDriver14write_registerEhPhi>
}
 8003c22:	bf00      	nop
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop

08003c2c <_ZN15NRF24L01pDriver18get_data_sent_flagEv>:
bool NRF24L01pDriver::get_data_sent_flag(){
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
    if(get_status()&_NRF24L01P_STATUS_TX_DS) return 1;
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f7ff fe65 	bl	8003904 <_ZN15NRF24L01pDriver10get_statusEv>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	f003 0320 	and.w	r3, r3, #32
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	bf14      	ite	ne
 8003c44:	2301      	movne	r3, #1
 8003c46:	2300      	moveq	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <_ZN15NRF24L01pDriver18get_data_sent_flagEv+0x26>
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e000      	b.n	8003c54 <_ZN15NRF24L01pDriver18get_data_sent_flagEv+0x28>
    else return 0;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <_ZN15NRF24L01pDriver20clear_data_sent_flagEv>:
void NRF24L01pDriver::clear_data_sent_flag(){
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
    uint8_t temp = _NRF24L01P_STATUS_TX_DS;
 8003c64:	2320      	movs	r3, #32
 8003c66:	73fb      	strb	r3, [r7, #15]
    write_register(_NRF24L01P_REG_STATUS,&temp,sizeof(temp));
 8003c68:	2301      	movs	r3, #1
 8003c6a:	f107 020f 	add.w	r2, r7, #15
 8003c6e:	2107      	movs	r1, #7
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f7ff fd99 	bl	80037a8 <_ZN15NRF24L01pDriver14write_registerEhPhi>
}
 8003c76:	bf00      	nop
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop

08003c80 <_ZN15NRF24L01pDriver21clear_data_ready_flagEv>:
bool NRF24L01pDriver::get_data_ready_flag(){
    if(get_status()&_NRF24L01P_STATUS_RX_DR) return 1;
    else return 0;
}
void NRF24L01pDriver::clear_data_ready_flag(){
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
    uint8_t temp = _NRF24L01P_STATUS_RX_DR;
 8003c88:	2340      	movs	r3, #64	; 0x40
 8003c8a:	73fb      	strb	r3, [r7, #15]
    write_register(_NRF24L01P_REG_STATUS,&temp,sizeof(temp));
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	f107 020f 	add.w	r2, r7, #15
 8003c92:	2107      	movs	r1, #7
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f7ff fd87 	bl	80037a8 <_ZN15NRF24L01pDriver14write_registerEhPhi>
}
 8003c9a:	bf00      	nop
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop

08003ca4 <_ZN15NRF24L01pDriver14get_plos_countEv>:
    uint8_t temp = read_register(_NRF24L01P_REG_OBSERVE_TX);
    return ((temp&_NRF24L01P_OBSERVE_TX_ARC_CNT_MASK)>>_NRF24L01P_OBSERVE_TX_ARC_CNT_BP);
    //return (temp&0x0F)>>0;

}
uint8_t NRF24L01pDriver::get_plos_count(){
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
    uint8_t temp;
    read_register(_NRF24L01P_REG_OBSERVE_TX,&temp,sizeof(temp));
 8003cac:	2301      	movs	r3, #1
 8003cae:	f107 020f 	add.w	r2, r7, #15
 8003cb2:	2108      	movs	r1, #8
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f7ff fd21 	bl	80036fc <_ZN15NRF24L01pDriver13read_registerEhPhi>
    return ((temp&_NRF24L01P_OBSERVE_TX_PLOS_CNT_MASK)>>_NRF24L01P_OBSERVE_TX_PLOS_CNT_BP);
 8003cba:	7bfb      	ldrb	r3, [r7, #15]
 8003cbc:	091b      	lsrs	r3, r3, #4
 8003cbe:	b2db      	uxtb	r3, r3
    //return (temp&0xF0)>>4; 
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <_ZN15NRF24L01pDriver19set_RX_pipe_addressENS_6pipe_tEy>:
bool NRF24L01pDriver::get_rpd(){
    if(read_register(_NRF24L01P_REG_RPD)) return 1;
    else return 0;
}

void NRF24L01pDriver::set_RX_pipe_address(pipe_t pipe,PipeAddr_t address){
 8003cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cca:	b089      	sub	sp, #36	; 0x24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	e9c7 2300 	strd	r2, r3, [r7]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	72fb      	strb	r3, [r7, #11]
    int max_pipe_addr_width = 0;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	61fb      	str	r3, [r7, #28]
    if((pipe>=0) && (pipe<=1)   ){max_pipe_addr_width = 5;}
 8003cdc:	7afb      	ldrb	r3, [r7, #11]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d802      	bhi.n	8003ce8 <_ZN15NRF24L01pDriver19set_RX_pipe_addressENS_6pipe_tEy+0x20>
 8003ce2:	2305      	movs	r3, #5
 8003ce4:	61fb      	str	r3, [r7, #28]
 8003ce6:	e007      	b.n	8003cf8 <_ZN15NRF24L01pDriver19set_RX_pipe_addressENS_6pipe_tEy+0x30>
    else if ((pipe>=2) && (pipe<=5)   ){max_pipe_addr_width = 1;}
 8003ce8:	7afb      	ldrb	r3, [r7, #11]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d904      	bls.n	8003cf8 <_ZN15NRF24L01pDriver19set_RX_pipe_addressENS_6pipe_tEy+0x30>
 8003cee:	7afb      	ldrb	r3, [r7, #11]
 8003cf0:	2b05      	cmp	r3, #5
 8003cf2:	d801      	bhi.n	8003cf8 <_ZN15NRF24L01pDriver19set_RX_pipe_addressENS_6pipe_tEy+0x30>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	61fb      	str	r3, [r7, #28]
    uint8_t temp[5];
    int i;
    for(i=0;i<max_pipe_addr_width;i++){
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	61bb      	str	r3, [r7, #24]
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	da1c      	bge.n	8003d3e <_ZN15NRF24L01pDriver19set_RX_pipe_addressENS_6pipe_tEy+0x76>
            temp[i] = (address>>(8*i))&0xFF;
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	00d9      	lsls	r1, r3, #3
 8003d08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d0c:	f1c1 0620 	rsb	r6, r1, #32
 8003d10:	f1a1 0020 	sub.w	r0, r1, #32
 8003d14:	fa22 f401 	lsr.w	r4, r2, r1
 8003d18:	fa03 f606 	lsl.w	r6, r3, r6
 8003d1c:	4334      	orrs	r4, r6
 8003d1e:	fa23 f000 	lsr.w	r0, r3, r0
 8003d22:	4304      	orrs	r4, r0
 8003d24:	fa23 f501 	lsr.w	r5, r3, r1
 8003d28:	b2e1      	uxtb	r1, r4
 8003d2a:	f107 0210 	add.w	r2, r7, #16
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	4413      	add	r3, r2
 8003d32:	460a      	mov	r2, r1
 8003d34:	701a      	strb	r2, [r3, #0]
    int max_pipe_addr_width = 0;
    if((pipe>=0) && (pipe<=1)   ){max_pipe_addr_width = 5;}
    else if ((pipe>=2) && (pipe<=5)   ){max_pipe_addr_width = 1;}
    uint8_t temp[5];
    int i;
    for(i=0;i<max_pipe_addr_width;i++){
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	61bb      	str	r3, [r7, #24]
 8003d3c:	e7de      	b.n	8003cfc <_ZN15NRF24L01pDriver19set_RX_pipe_addressENS_6pipe_tEy+0x34>
            temp[i] = (address>>(8*i))&0xFF;
    }
    write_register(_NRF24L01P_REG_RX_ADDR_P0 + pipe,temp,max_pipe_addr_width);
 8003d3e:	7afb      	ldrb	r3, [r7, #11]
 8003d40:	330a      	adds	r3, #10
 8003d42:	b2d9      	uxtb	r1, r3
 8003d44:	f107 0210 	add.w	r2, r7, #16
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f7ff fd2c 	bl	80037a8 <_ZN15NRF24L01pDriver14write_registerEhPhi>
}
 8003d50:	bf00      	nop
 8003d52:	3724      	adds	r7, #36	; 0x24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d58 <_ZN15NRF24L01pDriver19set_TX_pipe_addressEy>:
    }

    return temp_addr;   
}

void NRF24L01pDriver::set_TX_pipe_address(PipeAddr_t address){
 8003d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d5a:	b089      	sub	sp, #36	; 0x24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	e9c7 2300 	strd	r2, r3, [r7]
    uint8_t temp[5];
    int i;
    for( i=0;i<5;i++){
 8003d64:	2300      	movs	r3, #0
 8003d66:	61fb      	str	r3, [r7, #28]
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	2b04      	cmp	r3, #4
 8003d6c:	dc1c      	bgt.n	8003da8 <_ZN15NRF24L01pDriver19set_TX_pipe_addressEy+0x50>
            temp[i] = (address>>(8*i))&0xFF;
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	00d9      	lsls	r1, r3, #3
 8003d72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d76:	f1c1 0620 	rsb	r6, r1, #32
 8003d7a:	f1a1 0020 	sub.w	r0, r1, #32
 8003d7e:	fa22 f401 	lsr.w	r4, r2, r1
 8003d82:	fa03 f606 	lsl.w	r6, r3, r6
 8003d86:	4334      	orrs	r4, r6
 8003d88:	fa23 f000 	lsr.w	r0, r3, r0
 8003d8c:	4304      	orrs	r4, r0
 8003d8e:	fa23 f501 	lsr.w	r5, r3, r1
 8003d92:	b2e1      	uxtb	r1, r4
 8003d94:	f107 0214 	add.w	r2, r7, #20
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	460a      	mov	r2, r1
 8003d9e:	701a      	strb	r2, [r3, #0]
}

void NRF24L01pDriver::set_TX_pipe_address(PipeAddr_t address){
    uint8_t temp[5];
    int i;
    for( i=0;i<5;i++){
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	3301      	adds	r3, #1
 8003da4:	61fb      	str	r3, [r7, #28]
 8003da6:	e7df      	b.n	8003d68 <_ZN15NRF24L01pDriver19set_TX_pipe_addressEy+0x10>
            temp[i] = (address>>(8*i))&0xFF;
    }
    write_register(_NRF24L01P_REG_TX_ADDR,temp,5);   
 8003da8:	f107 0214 	add.w	r2, r7, #20
 8003dac:	2305      	movs	r3, #5
 8003dae:	2110      	movs	r1, #16
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f7ff fcf9 	bl	80037a8 <_ZN15NRF24L01pDriver14write_registerEhPhi>
}
 8003db6:	bf00      	nop
 8003db8:	3724      	adds	r7, #36	; 0x24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dbe:	bf00      	nop

08003dc0 <_ZN15NRF24L01pDriver21get_fifo_flag_tx_fullEv>:
}
bool NRF24L01pDriver::get_fifo_flag_tx_empty(){
    if(read_register(_NRF24L01P_REG_FIFO_STATUS)&_NRF24L01P_FIFO_STATUS_TX_EMPTY ) return 1;
    else return 0;       
}
bool NRF24L01pDriver::get_fifo_flag_tx_full(){
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
    if(read_register(_NRF24L01P_REG_FIFO_STATUS)&_NRF24L01P_FIFO_STATUS_TX_FULL ) return 1;
 8003dc8:	2117      	movs	r1, #23
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff fc6e 	bl	80036ac <_ZN15NRF24L01pDriver13read_registerEh>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	f003 0320 	and.w	r3, r3, #32
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	bf14      	ite	ne
 8003dda:	2301      	movne	r3, #1
 8003ddc:	2300      	moveq	r3, #0
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <_ZN15NRF24L01pDriver21get_fifo_flag_tx_fullEv+0x28>
 8003de4:	2301      	movs	r3, #1
 8003de6:	e000      	b.n	8003dea <_ZN15NRF24L01pDriver21get_fifo_flag_tx_fullEv+0x2a>
    else return 0;      
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop

08003df4 <_ZN15NRF24L01pDriver27enable_dynamic_payload_pipeENS_6pipe_tEb>:
bool NRF24L01pDriver::get_fifo_flag_tx_reuse(){
    if(read_register(_NRF24L01P_REG_FIFO_STATUS)&_NRF24L01P_FIFO_STATUS_RX_REUSE ) return 1;
    else return 0;      
}

void NRF24L01pDriver::enable_dynamic_payload_pipe(pipe_t pipe, bool sel){
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	70fb      	strb	r3, [r7, #3]
 8003e00:	4613      	mov	r3, r2
 8003e02:	70bb      	strb	r3, [r7, #2]
    if(sel){
 8003e04:	78bb      	ldrb	r3, [r7, #2]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d016      	beq.n	8003e38 <_ZN15NRF24L01pDriver27enable_dynamic_payload_pipeENS_6pipe_tEb+0x44>
          uint8_t temp = read_register(_NRF24L01P_REG_DYNPD);
 8003e0a:	211c      	movs	r1, #28
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f7ff fc4d 	bl	80036ac <_ZN15NRF24L01pDriver13read_registerEh>
 8003e12:	4603      	mov	r3, r0
 8003e14:	73fb      	strb	r3, [r7, #15]
        temp |= (1<<pipe);
 8003e16:	78fb      	ldrb	r3, [r7, #3]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1e:	b25a      	sxtb	r2, r3
 8003e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	b25b      	sxtb	r3, r3
 8003e28:	73fb      	strb	r3, [r7, #15]
        write_register(_NRF24L01P_REG_DYNPD,temp);   
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	211c      	movs	r1, #28
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7ff fc8b 	bl	800374c <_ZN15NRF24L01pDriver14write_registerEhh>
        uint8_t temp = read_register(_NRF24L01P_REG_DYNPD);
        temp &= ~(1<<pipe);
        write_register(_NRF24L01P_REG_DYNPD,temp);    
    }
   
}
 8003e36:	e017      	b.n	8003e68 <_ZN15NRF24L01pDriver27enable_dynamic_payload_pipeENS_6pipe_tEb+0x74>
    if(sel){
          uint8_t temp = read_register(_NRF24L01P_REG_DYNPD);
        temp |= (1<<pipe);
        write_register(_NRF24L01P_REG_DYNPD,temp);   
    }else{
        uint8_t temp = read_register(_NRF24L01P_REG_DYNPD);
 8003e38:	211c      	movs	r1, #28
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7ff fc36 	bl	80036ac <_ZN15NRF24L01pDriver13read_registerEh>
 8003e40:	4603      	mov	r3, r0
 8003e42:	73bb      	strb	r3, [r7, #14]
        temp &= ~(1<<pipe);
 8003e44:	78fb      	ldrb	r3, [r7, #3]
 8003e46:	2201      	movs	r2, #1
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	b25b      	sxtb	r3, r3
 8003e4e:	43db      	mvns	r3, r3
 8003e50:	b25a      	sxtb	r2, r3
 8003e52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e56:	4013      	ands	r3, r2
 8003e58:	b25b      	sxtb	r3, r3
 8003e5a:	73bb      	strb	r3, [r7, #14]
        write_register(_NRF24L01P_REG_DYNPD,temp);    
 8003e5c:	7bbb      	ldrb	r3, [r7, #14]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	211c      	movs	r1, #28
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7ff fc72 	bl	800374c <_ZN15NRF24L01pDriver14write_registerEhh>
    }
   
}
 8003e68:	bf00      	nop
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <_ZN15NRF24L01pDriver22enable_dynamic_payloadEb>:



void NRF24L01pDriver::enable_dynamic_payload(bool sel){
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	460b      	mov	r3, r1
 8003e7a:	70fb      	strb	r3, [r7, #3]
    if(sel){
 8003e7c:	78fb      	ldrb	r3, [r7, #3]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d010      	beq.n	8003ea4 <_ZN15NRF24L01pDriver22enable_dynamic_payloadEb+0x34>
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
 8003e82:	211d      	movs	r1, #29
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7ff fc11 	bl	80036ac <_ZN15NRF24L01pDriver13read_registerEh>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	73fb      	strb	r3, [r7, #15]
        temp |= _NRF24L01_FEATURE_EN_DPL;
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	f043 0304 	orr.w	r3, r3, #4
 8003e94:	73fb      	strb	r3, [r7, #15]
        write_register(_NRF24L01P_REG_FEATURE,temp);     
 8003e96:	7bfb      	ldrb	r3, [r7, #15]
 8003e98:	461a      	mov	r2, r3
 8003e9a:	211d      	movs	r1, #29
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f7ff fc55 	bl	800374c <_ZN15NRF24L01pDriver14write_registerEhh>
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
        temp &= ~_NRF24L01_FEATURE_EN_DPL;
        write_register(_NRF24L01P_REG_FEATURE,temp);
    }
   
}
 8003ea2:	e00f      	b.n	8003ec4 <_ZN15NRF24L01pDriver22enable_dynamic_payloadEb+0x54>
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
        temp |= _NRF24L01_FEATURE_EN_DPL;
        write_register(_NRF24L01P_REG_FEATURE,temp);     
    }
    else{
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
 8003ea4:	211d      	movs	r1, #29
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7ff fc00 	bl	80036ac <_ZN15NRF24L01pDriver13read_registerEh>
 8003eac:	4603      	mov	r3, r0
 8003eae:	73bb      	strb	r3, [r7, #14]
        temp &= ~_NRF24L01_FEATURE_EN_DPL;
 8003eb0:	7bbb      	ldrb	r3, [r7, #14]
 8003eb2:	f023 0304 	bic.w	r3, r3, #4
 8003eb6:	73bb      	strb	r3, [r7, #14]
        write_register(_NRF24L01P_REG_FEATURE,temp);
 8003eb8:	7bbb      	ldrb	r3, [r7, #14]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	211d      	movs	r1, #29
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7ff fc44 	bl	800374c <_ZN15NRF24L01pDriver14write_registerEhh>
    }
   
}
 8003ec4:	bf00      	nop
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <_ZN15NRF24L01pDriver23enable_payload_with_ackEb>:



void NRF24L01pDriver::enable_payload_with_ack(bool sel){
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	70fb      	strb	r3, [r7, #3]
    if(sel){
 8003ed8:	78fb      	ldrb	r3, [r7, #3]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d010      	beq.n	8003f00 <_ZN15NRF24L01pDriver23enable_payload_with_ackEb+0x34>
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
 8003ede:	211d      	movs	r1, #29
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f7ff fbe3 	bl	80036ac <_ZN15NRF24L01pDriver13read_registerEh>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	73fb      	strb	r3, [r7, #15]
        temp |= _NRF24L01_FEATURE_EN_ACK_PAY;
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
 8003eec:	f043 0302 	orr.w	r3, r3, #2
 8003ef0:	73fb      	strb	r3, [r7, #15]
        write_register(_NRF24L01P_REG_FEATURE,temp); 
 8003ef2:	7bfb      	ldrb	r3, [r7, #15]
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	211d      	movs	r1, #29
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7ff fc27 	bl	800374c <_ZN15NRF24L01pDriver14write_registerEhh>
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
        temp &= ~_NRF24L01_FEATURE_EN_ACK_PAY;
        write_register(_NRF24L01P_REG_FEATURE,temp); 
    }
     
}
 8003efe:	e00f      	b.n	8003f20 <_ZN15NRF24L01pDriver23enable_payload_with_ackEb+0x54>
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
        temp |= _NRF24L01_FEATURE_EN_ACK_PAY;
        write_register(_NRF24L01P_REG_FEATURE,temp); 
    }
    else{
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
 8003f00:	211d      	movs	r1, #29
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7ff fbd2 	bl	80036ac <_ZN15NRF24L01pDriver13read_registerEh>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	73bb      	strb	r3, [r7, #14]
        temp &= ~_NRF24L01_FEATURE_EN_ACK_PAY;
 8003f0c:	7bbb      	ldrb	r3, [r7, #14]
 8003f0e:	f023 0302 	bic.w	r3, r3, #2
 8003f12:	73bb      	strb	r3, [r7, #14]
        write_register(_NRF24L01P_REG_FEATURE,temp); 
 8003f14:	7bbb      	ldrb	r3, [r7, #14]
 8003f16:	461a      	mov	r2, r3
 8003f18:	211d      	movs	r1, #29
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7ff fc16 	bl	800374c <_ZN15NRF24L01pDriver14write_registerEhh>
    }
     
}
 8003f20:	bf00      	nop
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <_ZN15NRF24L01pDriver34enable_dynamic_payload_with_no_ackEb>:



void NRF24L01pDriver::enable_dynamic_payload_with_no_ack(bool sel){
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	460b      	mov	r3, r1
 8003f32:	70fb      	strb	r3, [r7, #3]
    if(sel){
 8003f34:	78fb      	ldrb	r3, [r7, #3]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d010      	beq.n	8003f5c <_ZN15NRF24L01pDriver34enable_dynamic_payload_with_no_ackEb+0x34>
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
 8003f3a:	211d      	movs	r1, #29
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7ff fbb5 	bl	80036ac <_ZN15NRF24L01pDriver13read_registerEh>
 8003f42:	4603      	mov	r3, r0
 8003f44:	73fb      	strb	r3, [r7, #15]
        temp |= _NRF24L01_FEATURE_EN_DYN_ACK;
 8003f46:	7bfb      	ldrb	r3, [r7, #15]
 8003f48:	f043 0301 	orr.w	r3, r3, #1
 8003f4c:	73fb      	strb	r3, [r7, #15]
        write_register(_NRF24L01P_REG_FEATURE,temp);        
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
 8003f50:	461a      	mov	r2, r3
 8003f52:	211d      	movs	r1, #29
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f7ff fbf9 	bl	800374c <_ZN15NRF24L01pDriver14write_registerEhh>
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
        temp &= ~_NRF24L01_FEATURE_EN_DYN_ACK;
        write_register(_NRF24L01P_REG_FEATURE,temp);  
    }
     
}
 8003f5a:	e00f      	b.n	8003f7c <_ZN15NRF24L01pDriver34enable_dynamic_payload_with_no_ackEb+0x54>
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
        temp |= _NRF24L01_FEATURE_EN_DYN_ACK;
        write_register(_NRF24L01P_REG_FEATURE,temp);        
    }
    else{
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
 8003f5c:	211d      	movs	r1, #29
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7ff fba4 	bl	80036ac <_ZN15NRF24L01pDriver13read_registerEh>
 8003f64:	4603      	mov	r3, r0
 8003f66:	73bb      	strb	r3, [r7, #14]
        temp &= ~_NRF24L01_FEATURE_EN_DYN_ACK;
 8003f68:	7bbb      	ldrb	r3, [r7, #14]
 8003f6a:	f023 0301 	bic.w	r3, r3, #1
 8003f6e:	73bb      	strb	r3, [r7, #14]
        write_register(_NRF24L01P_REG_FEATURE,temp);  
 8003f70:	7bbb      	ldrb	r3, [r7, #14]
 8003f72:	461a      	mov	r2, r3
 8003f74:	211d      	movs	r1, #29
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7ff fbe8 	bl	800374c <_ZN15NRF24L01pDriver14write_registerEhh>
    }
     
}
 8003f7c:	bf00      	nop
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <_ZN13NRF24L01pPortC1Ev>:
static GPIO_InitTypeDef nrf24l01p_CE_pin_Struct = {NRF24L01P_CE_PIN,GPIO_MODE_OUTPUT_PP,GPIO_PULLUP,GPIO_SPEED_FREQ_HIGH,};
static GPIO_InitTypeDef nrf24l01p_CSN_pin_Struct = {NRF24L01P_CSN_PIN,GPIO_MODE_OUTPUT_PP,GPIO_PULLUP,GPIO_SPEED_FREQ_HIGH,};



NRF24L01pPort::NRF24L01pPort() {
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	4a04      	ldr	r2, [pc, #16]	; (8003fa0 <_ZN13NRF24L01pPortC1Ev+0x1c>)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	601a      	str	r2, [r3, #0]
}
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4618      	mov	r0, r3
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	08005684 	.word	0x08005684

08003fa4 <_ZN13NRF24L01pPortD1Ev>:

NRF24L01pPort::NRF24L01pPort(const NRF24L01pPort& orig) {
}

NRF24L01pPort::~NRF24L01pPort() {
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	4a06      	ldr	r2, [pc, #24]	; (8003fc8 <_ZN13NRF24L01pPortD1Ev+0x24>)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	601a      	str	r2, [r3, #0]
}
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d002      	beq.n	8003fbe <_ZN13NRF24L01pPortD1Ev+0x1a>
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 fb65 	bl	8004688 <_ZdlPv>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	08005684 	.word	0x08005684

08003fcc <_ZN13NRF24L01pPortD0Ev>:
}

NRF24L01pPort::NRF24L01pPort(const NRF24L01pPort& orig) {
}

NRF24L01pPort::~NRF24L01pPort() {
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
}
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f7ff ffe5 	bl	8003fa4 <_ZN13NRF24L01pPortD1Ev>
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 fb54 	bl	8004688 <_ZdlPv>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3708      	adds	r7, #8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop

08003fec <_ZN13NRF24L01pPort15port_InitializeEv>:

void NRF24L01pPort::port_Initialize(){
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b08e      	sub	sp, #56	; 0x38
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated destructor stub
		/*##-1- Configure the SPI peripheral #######################################*/
		/* Set the SPI parameters */
		nrf24l01p_SpiHandle.Instance               = SPIx;
 8003ff4:	4b5d      	ldr	r3, [pc, #372]	; (800416c <_ZN13NRF24L01pPort15port_InitializeEv+0x180>)
 8003ff6:	4a5e      	ldr	r2, [pc, #376]	; (8004170 <_ZN13NRF24L01pPort15port_InitializeEv+0x184>)
 8003ff8:	601a      	str	r2, [r3, #0]
		nrf24l01p_SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003ffa:	4b5c      	ldr	r3, [pc, #368]	; (800416c <_ZN13NRF24L01pPort15port_InitializeEv+0x180>)
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	61da      	str	r2, [r3, #28]
		nrf24l01p_SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 8004000:	4b5a      	ldr	r3, [pc, #360]	; (800416c <_ZN13NRF24L01pPort15port_InitializeEv+0x180>)
 8004002:	2200      	movs	r2, #0
 8004004:	609a      	str	r2, [r3, #8]
		nrf24l01p_SpiHandle.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8004006:	4b59      	ldr	r3, [pc, #356]	; (800416c <_ZN13NRF24L01pPort15port_InitializeEv+0x180>)
 8004008:	2200      	movs	r2, #0
 800400a:	615a      	str	r2, [r3, #20]
		nrf24l01p_SpiHandle.Init.CLKPolarity       = SPI_POLARITY_LOW;
 800400c:	4b57      	ldr	r3, [pc, #348]	; (800416c <_ZN13NRF24L01pPort15port_InitializeEv+0x180>)
 800400e:	2200      	movs	r2, #0
 8004010:	611a      	str	r2, [r3, #16]
		nrf24l01p_SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 8004012:	4b56      	ldr	r3, [pc, #344]	; (800416c <_ZN13NRF24L01pPort15port_InitializeEv+0x180>)
 8004014:	2200      	movs	r2, #0
 8004016:	60da      	str	r2, [r3, #12]
		nrf24l01p_SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8004018:	4b54      	ldr	r3, [pc, #336]	; (800416c <_ZN13NRF24L01pPort15port_InitializeEv+0x180>)
 800401a:	2200      	movs	r2, #0
 800401c:	621a      	str	r2, [r3, #32]
		nrf24l01p_SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLE;
 800401e:	4b53      	ldr	r3, [pc, #332]	; (800416c <_ZN13NRF24L01pPort15port_InitializeEv+0x180>)
 8004020:	2200      	movs	r2, #0
 8004022:	625a      	str	r2, [r3, #36]	; 0x24
		nrf24l01p_SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8004024:	4b51      	ldr	r3, [pc, #324]	; (800416c <_ZN13NRF24L01pPort15port_InitializeEv+0x180>)
 8004026:	2200      	movs	r2, #0
 8004028:	629a      	str	r2, [r3, #40]	; 0x28
		nrf24l01p_SpiHandle.Init.CRCPolynomial     = 7;
 800402a:	4b50      	ldr	r3, [pc, #320]	; (800416c <_ZN13NRF24L01pPort15port_InitializeEv+0x180>)
 800402c:	2207      	movs	r2, #7
 800402e:	62da      	str	r2, [r3, #44]	; 0x2c
		//nrf24l01p_SpiHandle.Init.CRCLength         = SPI_CRC_LENGTH_8BIT;
		nrf24l01p_SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 8004030:	4b4e      	ldr	r3, [pc, #312]	; (800416c <_ZN13NRF24L01pPort15port_InitializeEv+0x180>)
 8004032:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004036:	619a      	str	r2, [r3, #24]
		//nrf24l01p_SpiHandle.Init.NSSPMode          = SPI_NSS_PULSE_DISABLE;

		nrf24l01p_SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8004038:	4b4c      	ldr	r3, [pc, #304]	; (800416c <_ZN13NRF24L01pPort15port_InitializeEv+0x180>)
 800403a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800403e:	605a      	str	r2, [r3, #4]

		GPIO_InitTypeDef  GPIO_InitStruct;

		/*##-1- Enable peripherals and GPIO Clocks #################################*/
		/* Enable GPIO TX/RX clock */
		SPIx_SCK_GPIO_CLK_ENABLE();
 8004040:	2300      	movs	r3, #0
 8004042:	623b      	str	r3, [r7, #32]
 8004044:	4a4b      	ldr	r2, [pc, #300]	; (8004174 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 8004046:	4b4b      	ldr	r3, [pc, #300]	; (8004174 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	f043 0301 	orr.w	r3, r3, #1
 800404e:	6313      	str	r3, [r2, #48]	; 0x30
 8004050:	4b48      	ldr	r3, [pc, #288]	; (8004174 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	623b      	str	r3, [r7, #32]
 800405a:	6a3b      	ldr	r3, [r7, #32]
		SPIx_MISO_GPIO_CLK_ENABLE();
 800405c:	2300      	movs	r3, #0
 800405e:	61fb      	str	r3, [r7, #28]
 8004060:	4a44      	ldr	r2, [pc, #272]	; (8004174 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 8004062:	4b44      	ldr	r3, [pc, #272]	; (8004174 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 8004064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004066:	f043 0301 	orr.w	r3, r3, #1
 800406a:	6313      	str	r3, [r2, #48]	; 0x30
 800406c:	4b41      	ldr	r3, [pc, #260]	; (8004174 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 800406e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	61fb      	str	r3, [r7, #28]
 8004076:	69fb      	ldr	r3, [r7, #28]
		SPIx_MOSI_GPIO_CLK_ENABLE();
 8004078:	2300      	movs	r3, #0
 800407a:	61bb      	str	r3, [r7, #24]
 800407c:	4a3d      	ldr	r2, [pc, #244]	; (8004174 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 800407e:	4b3d      	ldr	r3, [pc, #244]	; (8004174 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 8004080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004082:	f043 0301 	orr.w	r3, r3, #1
 8004086:	6313      	str	r3, [r2, #48]	; 0x30
 8004088:	4b3a      	ldr	r3, [pc, #232]	; (8004174 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 800408a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	61bb      	str	r3, [r7, #24]
 8004092:	69bb      	ldr	r3, [r7, #24]
		/* Enable SPI clock */
		SPIx_CLK_ENABLE();
 8004094:	2300      	movs	r3, #0
 8004096:	617b      	str	r3, [r7, #20]
 8004098:	4a36      	ldr	r2, [pc, #216]	; (8004174 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 800409a:	4b36      	ldr	r3, [pc, #216]	; (8004174 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 800409c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80040a2:	6453      	str	r3, [r2, #68]	; 0x44
 80040a4:	4b33      	ldr	r3, [pc, #204]	; (8004174 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 80040a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040ac:	617b      	str	r3, [r7, #20]
 80040ae:	697b      	ldr	r3, [r7, #20]

		/*##-2- Configure peripheral GPIO ##########################################*/
		/* SPI SCK GPIO pin configuration  */
		GPIO_InitStruct.Pin       = SPIx_SCK_PIN;
 80040b0:	2320      	movs	r3, #32
 80040b2:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80040b4:	2302      	movs	r3, #2
 80040b6:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 80040b8:	2302      	movs	r3, #2
 80040ba:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 80040bc:	2302      	movs	r3, #2
 80040be:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 80040c0:	2305      	movs	r3, #5
 80040c2:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 80040c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040c8:	4619      	mov	r1, r3
 80040ca:	482b      	ldr	r0, [pc, #172]	; (8004178 <_ZN13NRF24L01pPort15port_InitializeEv+0x18c>)
 80040cc:	f7fc f96e 	bl	80003ac <HAL_GPIO_Init>

		/* SPI MISO GPIO pin configuration  */
		GPIO_InitStruct.Pin = SPIx_MISO_PIN;
 80040d0:	2340      	movs	r3, #64	; 0x40
 80040d2:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Alternate = SPIx_MISO_AF;
 80040d4:	2305      	movs	r3, #5
 80040d6:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 80040d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040dc:	4619      	mov	r1, r3
 80040de:	4826      	ldr	r0, [pc, #152]	; (8004178 <_ZN13NRF24L01pPort15port_InitializeEv+0x18c>)
 80040e0:	f7fc f964 	bl	80003ac <HAL_GPIO_Init>

		/* SPI MOSI GPIO pin configuration  */
		GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 80040e4:	2380      	movs	r3, #128	; 0x80
 80040e6:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Alternate = SPIx_MOSI_AF;
 80040e8:	2305      	movs	r3, #5
 80040ea:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80040ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040f0:	4619      	mov	r1, r3
 80040f2:	4821      	ldr	r0, [pc, #132]	; (8004178 <_ZN13NRF24L01pPort15port_InitializeEv+0x18c>)
 80040f4:	f7fc f95a 	bl	80003ac <HAL_GPIO_Init>

		/* Enable GPIOA clock */
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80040f8:	2300      	movs	r3, #0
 80040fa:	613b      	str	r3, [r7, #16]
 80040fc:	4a1d      	ldr	r2, [pc, #116]	; (8004174 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 80040fe:	4b1d      	ldr	r3, [pc, #116]	; (8004174 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 8004100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004102:	f043 0301 	orr.w	r3, r3, #1
 8004106:	6313      	str	r3, [r2, #48]	; 0x30
 8004108:	4b1a      	ldr	r3, [pc, #104]	; (8004174 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 800410a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	613b      	str	r3, [r7, #16]
 8004112:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8004114:	2300      	movs	r3, #0
 8004116:	60fb      	str	r3, [r7, #12]
 8004118:	4a16      	ldr	r2, [pc, #88]	; (8004174 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 800411a:	4b16      	ldr	r3, [pc, #88]	; (8004174 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 800411c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411e:	f043 0302 	orr.w	r3, r3, #2
 8004122:	6313      	str	r3, [r2, #48]	; 0x30
 8004124:	4b13      	ldr	r3, [pc, #76]	; (8004174 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 8004126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	60fb      	str	r3, [r7, #12]
 800412e:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8004130:	2300      	movs	r3, #0
 8004132:	60bb      	str	r3, [r7, #8]
 8004134:	4a0f      	ldr	r2, [pc, #60]	; (8004174 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 8004136:	4b0f      	ldr	r3, [pc, #60]	; (8004174 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 8004138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413a:	f043 0304 	orr.w	r3, r3, #4
 800413e:	6313      	str	r3, [r2, #48]	; 0x30
 8004140:	4b0c      	ldr	r3, [pc, #48]	; (8004174 <_ZN13NRF24L01pPort15port_InitializeEv+0x188>)
 8004142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	60bb      	str	r3, [r7, #8]
 800414a:	68bb      	ldr	r3, [r7, #8]


		HAL_SPI_Init(&nrf24l01p_SpiHandle);
 800414c:	4807      	ldr	r0, [pc, #28]	; (800416c <_ZN13NRF24L01pPort15port_InitializeEv+0x180>)
 800414e:	f7fc faeb 	bl	8000728 <HAL_SPI_Init>

		HAL_GPIO_Init(NRF24L01P_CE_PORT, &nrf24l01p_CE_pin_Struct);
 8004152:	490a      	ldr	r1, [pc, #40]	; (800417c <_ZN13NRF24L01pPort15port_InitializeEv+0x190>)
 8004154:	480a      	ldr	r0, [pc, #40]	; (8004180 <_ZN13NRF24L01pPort15port_InitializeEv+0x194>)
 8004156:	f7fc f929 	bl	80003ac <HAL_GPIO_Init>
		HAL_GPIO_Init(NRF24L01P_CSN_PORT, &nrf24l01p_CSN_pin_Struct);
 800415a:	490a      	ldr	r1, [pc, #40]	; (8004184 <_ZN13NRF24L01pPort15port_InitializeEv+0x198>)
 800415c:	480a      	ldr	r0, [pc, #40]	; (8004188 <_ZN13NRF24L01pPort15port_InitializeEv+0x19c>)
 800415e:	f7fc f925 	bl	80003ac <HAL_GPIO_Init>
}
 8004162:	bf00      	nop
 8004164:	3738      	adds	r7, #56	; 0x38
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	20002aa0 	.word	0x20002aa0
 8004170:	40013000 	.word	0x40013000
 8004174:	40023800 	.word	0x40023800
 8004178:	40020000 	.word	0x40020000
 800417c:	20000008 	.word	0x20000008
 8004180:	40020800 	.word	0x40020800
 8004184:	2000001c 	.word	0x2000001c
 8004188:	40020400 	.word	0x40020400

0800418c <_ZN13NRF24L01pPort11port_Pin_CEEb>:
void NRF24L01pPort::port_DeInitialize(){
    
}
void NRF24L01pPort::port_Pin_CE(bool val){
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	460b      	mov	r3, r1
 8004196:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(NRF24L01P_CE_PORT, NRF24L01P_CE_PIN, (GPIO_PinState)val);
 8004198:	78fb      	ldrb	r3, [r7, #3]
 800419a:	461a      	mov	r2, r3
 800419c:	2180      	movs	r1, #128	; 0x80
 800419e:	4803      	ldr	r0, [pc, #12]	; (80041ac <_ZN13NRF24L01pPort11port_Pin_CEEb+0x20>)
 80041a0:	f7fc fa96 	bl	80006d0 <HAL_GPIO_WritePin>
}
 80041a4:	bf00      	nop
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	40020800 	.word	0x40020800

080041b0 <_ZN13NRF24L01pPort12port_Pin_CSNEb>:
void NRF24L01pPort::port_Pin_CSN(bool val){
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	460b      	mov	r3, r1
 80041ba:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(NRF24L01P_CSN_PORT, NRF24L01P_CSN_PIN, (GPIO_PinState)val);
 80041bc:	78fb      	ldrb	r3, [r7, #3]
 80041be:	461a      	mov	r2, r3
 80041c0:	2140      	movs	r1, #64	; 0x40
 80041c2:	4803      	ldr	r0, [pc, #12]	; (80041d0 <_ZN13NRF24L01pPort12port_Pin_CSNEb+0x20>)
 80041c4:	f7fc fa84 	bl	80006d0 <HAL_GPIO_WritePin>
}
 80041c8:	bf00      	nop
 80041ca:	3708      	adds	r7, #8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	40020400 	.word	0x40020400

080041d4 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj>:
int NRF24L01pPort::port_SPI_Transcieve(uint8_t *dataInOut, unsigned int size){
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af02      	add	r7, sp, #8
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
	return HAL_SPI_TransmitReceive(&nrf24l01p_SpiHandle, dataInOut, dataInOut, size,1000);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	4613      	mov	r3, r2
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	68b9      	ldr	r1, [r7, #8]
 80041f0:	4803      	ldr	r0, [pc, #12]	; (8004200 <_ZN13NRF24L01pPort19port_SPI_TranscieveEPhj+0x2c>)
 80041f2:	f7fc fb0d 	bl	8000810 <HAL_SPI_TransmitReceive>
 80041f6:	4603      	mov	r3, r0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	20002aa0 	.word	0x20002aa0

08004204 <_ZN13NRF24L01pPort12port_DelayMsEj>:
void NRF24L01pPort::port_DelayMs(unsigned int ms){
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
	vTaskDelay(ms);
 800420e:	6838      	ldr	r0, [r7, #0]
 8004210:	f7fd fe72 	bl	8001ef8 <vTaskDelay>
}
 8004214:	bf00      	nop
 8004216:	3708      	adds	r7, #8
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <_ZN13NRF24L01pPort12port_DelayUsEj>:
void NRF24L01pPort::port_DelayUs(unsigned int us){
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
	vTaskDelay(us/1000);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	4a05      	ldr	r2, [pc, #20]	; (8004240 <_ZN13NRF24L01pPort12port_DelayUsEj+0x24>)
 800422a:	fba2 2303 	umull	r2, r3, r2, r3
 800422e:	099b      	lsrs	r3, r3, #6
 8004230:	4618      	mov	r0, r3
 8004232:	f7fd fe61 	bl	8001ef8 <vTaskDelay>
}
 8004236:	bf00      	nop
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	10624dd3 	.word	0x10624dd3
 8004244:	00000000 	.word	0x00000000

08004248 <_Z10RadioResetv>:
static GPIO_InitTypeDef  GPIO_InitStruct;

NRF24L01p::RadioConfig_t RadioConfig;
NRF24L01p::RxPipeConfig_t RxPipeConfig[6];

void RadioReset(){
 8004248:	b590      	push	{r4, r7, lr}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0

    RadioConfig.DataReadyInterruptEnabled = 0;
 800424e:	4b46      	ldr	r3, [pc, #280]	; (8004368 <_Z10RadioResetv+0x120>)
 8004250:	2200      	movs	r2, #0
 8004252:	701a      	strb	r2, [r3, #0]
    RadioConfig.DataSentInterruptFlagEnabled = 0;
 8004254:	4b44      	ldr	r3, [pc, #272]	; (8004368 <_Z10RadioResetv+0x120>)
 8004256:	2200      	movs	r2, #0
 8004258:	705a      	strb	r2, [r3, #1]
    RadioConfig.MaxRetryInterruptFlagEnabled = 0;
 800425a:	4b43      	ldr	r3, [pc, #268]	; (8004368 <_Z10RadioResetv+0x120>)
 800425c:	2200      	movs	r2, #0
 800425e:	709a      	strb	r2, [r3, #2]
    RadioConfig.Crc = NRF24L01p::CONFIG_CRC_16BIT;
 8004260:	4b41      	ldr	r3, [pc, #260]	; (8004368 <_Z10RadioResetv+0x120>)
 8004262:	220c      	movs	r2, #12
 8004264:	70da      	strb	r2, [r3, #3]
    RadioConfig.AutoReTransmissionCount = 15;
 8004266:	4b40      	ldr	r3, [pc, #256]	; (8004368 <_Z10RadioResetv+0x120>)
 8004268:	220f      	movs	r2, #15
 800426a:	711a      	strb	r2, [r3, #4]
    RadioConfig.AutoReTransmitDelayX250us = 15;
 800426c:	4b3e      	ldr	r3, [pc, #248]	; (8004368 <_Z10RadioResetv+0x120>)
 800426e:	220f      	movs	r2, #15
 8004270:	715a      	strb	r2, [r3, #5]
    RadioConfig.frequencyOffset = 2;
 8004272:	4b3d      	ldr	r3, [pc, #244]	; (8004368 <_Z10RadioResetv+0x120>)
 8004274:	2202      	movs	r2, #2
 8004276:	719a      	strb	r2, [r3, #6]
    RadioConfig.datarate = NRF24L01p::RF_SETUP_RF_DR_2MBPS;
 8004278:	4b3b      	ldr	r3, [pc, #236]	; (8004368 <_Z10RadioResetv+0x120>)
 800427a:	2208      	movs	r2, #8
 800427c:	71da      	strb	r2, [r3, #7]
    RadioConfig.RfPower = NRF24L01p::RF_SETUP_RF_PWR_0DBM;
 800427e:	4b3a      	ldr	r3, [pc, #232]	; (8004368 <_Z10RadioResetv+0x120>)
 8004280:	2206      	movs	r2, #6
 8004282:	721a      	strb	r2, [r3, #8]
    RadioConfig.PllLock = 0;
 8004284:	4b38      	ldr	r3, [pc, #224]	; (8004368 <_Z10RadioResetv+0x120>)
 8004286:	2200      	movs	r2, #0
 8004288:	725a      	strb	r2, [r3, #9]
    RadioConfig.ContWaveEnabled = 0;
 800428a:	4b37      	ldr	r3, [pc, #220]	; (8004368 <_Z10RadioResetv+0x120>)
 800428c:	2200      	movs	r2, #0
 800428e:	729a      	strb	r2, [r3, #10]
    RadioConfig.FeatureDynamicPayloadEnabled = 1;
 8004290:	4b35      	ldr	r3, [pc, #212]	; (8004368 <_Z10RadioResetv+0x120>)
 8004292:	2201      	movs	r2, #1
 8004294:	72da      	strb	r2, [r3, #11]
    RadioConfig.FeaturePayloadWithAckEnabled = 1;
 8004296:	4b34      	ldr	r3, [pc, #208]	; (8004368 <_Z10RadioResetv+0x120>)
 8004298:	2201      	movs	r2, #1
 800429a:	731a      	strb	r2, [r3, #12]
    RadioConfig.FeatureDynamicPayloadWithNoAckEnabled = 1;
 800429c:	4b32      	ldr	r3, [pc, #200]	; (8004368 <_Z10RadioResetv+0x120>)
 800429e:	2201      	movs	r2, #1
 80042a0:	735a      	strb	r2, [r3, #13]

    RxPipeConfig[0].address = 0xAABBCCDDEE;
 80042a2:	4a32      	ldr	r2, [pc, #200]	; (800436c <_Z10RadioResetv+0x124>)
 80042a4:	a428      	add	r4, pc, #160	; (adr r4, 8004348 <_Z10RadioResetv+0x100>)
 80042a6:	cc18      	ldmia	r4, {r3, r4}
 80042a8:	e9c2 3402 	strd	r3, r4, [r2, #8]
    RxPipeConfig[1].address = 0x6565656501;
 80042ac:	4a2f      	ldr	r2, [pc, #188]	; (800436c <_Z10RadioResetv+0x124>)
 80042ae:	4b30      	ldr	r3, [pc, #192]	; (8004370 <_Z10RadioResetv+0x128>)
 80042b0:	f04f 0465 	mov.w	r4, #101	; 0x65
 80042b4:	e9c2 3408 	strd	r3, r4, [r2, #32]
    RxPipeConfig[2].address = 0x6565656502;
 80042b8:	4a2c      	ldr	r2, [pc, #176]	; (800436c <_Z10RadioResetv+0x124>)
 80042ba:	a425      	add	r4, pc, #148	; (adr r4, 8004350 <_Z10RadioResetv+0x108>)
 80042bc:	cc18      	ldmia	r4, {r3, r4}
 80042be:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    RxPipeConfig[3].address = 0x6565656503;
 80042c2:	4a2a      	ldr	r2, [pc, #168]	; (800436c <_Z10RadioResetv+0x124>)
 80042c4:	a424      	add	r4, pc, #144	; (adr r4, 8004358 <_Z10RadioResetv+0x110>)
 80042c6:	cc18      	ldmia	r4, {r3, r4}
 80042c8:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
    RxPipeConfig[4].address = 0x6565656509;
 80042cc:	4a27      	ldr	r2, [pc, #156]	; (800436c <_Z10RadioResetv+0x124>)
 80042ce:	a424      	add	r4, pc, #144	; (adr r4, 8004360 <_Z10RadioResetv+0x118>)
 80042d0:	cc18      	ldmia	r4, {r3, r4}
 80042d2:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
    RxPipeConfig[5].address = 0x6565656505;
 80042d6:	4a25      	ldr	r2, [pc, #148]	; (800436c <_Z10RadioResetv+0x124>)
 80042d8:	4b26      	ldr	r3, [pc, #152]	; (8004374 <_Z10RadioResetv+0x12c>)
 80042da:	f04f 0465 	mov.w	r4, #101	; 0x65
 80042de:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

    int i;
    for(i=0;i<6;i++){
 80042e2:	2300      	movs	r3, #0
 80042e4:	607b      	str	r3, [r7, #4]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b05      	cmp	r3, #5
 80042ea:	dc20      	bgt.n	800432e <_Z10RadioResetv+0xe6>
        RxPipeConfig[i].PipeEnabled = 1;
 80042ec:	491f      	ldr	r1, [pc, #124]	; (800436c <_Z10RadioResetv+0x124>)
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	4613      	mov	r3, r2
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	4413      	add	r3, r2
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	440b      	add	r3, r1
 80042fa:	2201      	movs	r2, #1
 80042fc:	701a      	strb	r2, [r3, #0]
        RxPipeConfig[i].autoAckEnabled = 1;
 80042fe:	491b      	ldr	r1, [pc, #108]	; (800436c <_Z10RadioResetv+0x124>)
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	4613      	mov	r3, r2
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	4413      	add	r3, r2
 8004308:	00db      	lsls	r3, r3, #3
 800430a:	440b      	add	r3, r1
 800430c:	3301      	adds	r3, #1
 800430e:	2201      	movs	r2, #1
 8004310:	701a      	strb	r2, [r3, #0]
        RxPipeConfig[i].dynamicPayloadEnabled = 1;
 8004312:	4916      	ldr	r1, [pc, #88]	; (800436c <_Z10RadioResetv+0x124>)
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	4613      	mov	r3, r2
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	4413      	add	r3, r2
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	440b      	add	r3, r1
 8004320:	3311      	adds	r3, #17
 8004322:	2201      	movs	r2, #1
 8004324:	701a      	strb	r2, [r3, #0]
    RxPipeConfig[3].address = 0x6565656503;
    RxPipeConfig[4].address = 0x6565656509;
    RxPipeConfig[5].address = 0x6565656505;

    int i;
    for(i=0;i<6;i++){
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	3301      	adds	r3, #1
 800432a:	607b      	str	r3, [r7, #4]
 800432c:	e7db      	b.n	80042e6 <_Z10RadioResetv+0x9e>
        RxPipeConfig[i].autoAckEnabled = 1;
        RxPipeConfig[i].dynamicPayloadEnabled = 1;
    }


    Radio->ResetConfigValues(&RadioConfig, RxPipeConfig);
 800432e:	4b12      	ldr	r3, [pc, #72]	; (8004378 <_Z10RadioResetv+0x130>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a0e      	ldr	r2, [pc, #56]	; (800436c <_Z10RadioResetv+0x124>)
 8004334:	490c      	ldr	r1, [pc, #48]	; (8004368 <_Z10RadioResetv+0x120>)
 8004336:	4618      	mov	r0, r3
 8004338:	f7fe ff04 	bl	8003144 <_ZN9NRF24L01p17ResetConfigValuesEPNS_13RadioConfig_tEPNS_14RxPipeConfig_tE>
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	bd90      	pop	{r4, r7, pc}
 8004344:	f3af 8000 	nop.w
 8004348:	bbccddee 	.word	0xbbccddee
 800434c:	000000aa 	.word	0x000000aa
 8004350:	65656502 	.word	0x65656502
 8004354:	00000065 	.word	0x00000065
 8004358:	65656503 	.word	0x65656503
 800435c:	00000065 	.word	0x00000065
 8004360:	65656509 	.word	0x65656509
 8004364:	00000065 	.word	0x00000065
 8004368:	20002b10 	.word	0x20002b10
 800436c:	20002b20 	.word	0x20002b20
 8004370:	65656501 	.word	0x65656501
 8004374:	65656505 	.word	0x65656505
 8004378:	20002af8 	.word	0x20002af8
 800437c:	00000000 	.word	0x00000000

08004380 <_Z7thread1Pv>:




void thread1(void * ptr)
{
 8004380:	b590      	push	{r4, r7, lr}
 8004382:	b0bf      	sub	sp, #252	; 0xfc
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
	/* -1- Enable GPIO Clock (to be able to program the configuration registers) */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004388:	2300      	movs	r3, #0
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	4a44      	ldr	r2, [pc, #272]	; (80044a0 <_Z7thread1Pv+0x120>)
 800438e:	4b44      	ldr	r3, [pc, #272]	; (80044a0 <_Z7thread1Pv+0x120>)
 8004390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004392:	f043 0301 	orr.w	r3, r3, #1
 8004396:	6313      	str	r3, [r2, #48]	; 0x30
 8004398:	4b41      	ldr	r3, [pc, #260]	; (80044a0 <_Z7thread1Pv+0x120>)
 800439a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	68fb      	ldr	r3, [r7, #12]

	/* -2- Configure IO in output push-pull mode to drive external LEDs */
	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80043a4:	4b3f      	ldr	r3, [pc, #252]	; (80044a4 <_Z7thread1Pv+0x124>)
 80043a6:	2201      	movs	r2, #1
 80043a8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80043aa:	4b3e      	ldr	r3, [pc, #248]	; (80044a4 <_Z7thread1Pv+0x124>)
 80043ac:	2201      	movs	r2, #1
 80043ae:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043b0:	4b3c      	ldr	r3, [pc, #240]	; (80044a4 <_Z7thread1Pv+0x124>)
 80043b2:	2203      	movs	r2, #3
 80043b4:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = GPIO_PIN_5;
 80043b6:	4b3b      	ldr	r3, [pc, #236]	; (80044a4 <_Z7thread1Pv+0x124>)
 80043b8:	2220      	movs	r2, #32
 80043ba:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043bc:	4939      	ldr	r1, [pc, #228]	; (80044a4 <_Z7thread1Pv+0x124>)
 80043be:	483a      	ldr	r0, [pc, #232]	; (80044a8 <_Z7thread1Pv+0x128>)
 80043c0:	f7fb fff4 	bl	80003ac <HAL_GPIO_Init>

	NRF24L01p NrfRadio;
 80043c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7fe fd79 	bl	8002ec0 <_ZN9NRF24L01pC1Ev>
	Radio = &NrfRadio;
 80043ce:	4a37      	ldr	r2, [pc, #220]	; (80044ac <_Z7thread1Pv+0x12c>)
 80043d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80043d4:	6013      	str	r3, [r2, #0]

	RadioReset();
 80043d6:	f7ff ff37 	bl	8004248 <_Z10RadioResetv>

	printf("DYNPD : %x\r\n", Radio->read_register(0x1c));
 80043da:	4b34      	ldr	r3, [pc, #208]	; (80044ac <_Z7thread1Pv+0x12c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	211c      	movs	r1, #28
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff f963 	bl	80036ac <_ZN15NRF24L01pDriver13read_registerEh>
 80043e6:	4603      	mov	r3, r0
 80043e8:	4619      	mov	r1, r3
 80043ea:	4831      	ldr	r0, [pc, #196]	; (80044b0 <_Z7thread1Pv+0x130>)
 80043ec:	f000 fa3c 	bl	8004868 <iprintf>
	printf("FEATURE : %x\r\n", Radio->read_register(0x1d));
 80043f0:	4b2e      	ldr	r3, [pc, #184]	; (80044ac <_Z7thread1Pv+0x12c>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	211d      	movs	r1, #29
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7ff f958 	bl	80036ac <_ZN15NRF24L01pDriver13read_registerEh>
 80043fc:	4603      	mov	r3, r0
 80043fe:	4619      	mov	r1, r3
 8004400:	482c      	ldr	r0, [pc, #176]	; (80044b4 <_Z7thread1Pv+0x134>)
 8004402:	f000 fa31 	bl	8004868 <iprintf>
	printf("FIFO : %x\r\n", Radio->read_register(0x17));
 8004406:	4b29      	ldr	r3, [pc, #164]	; (80044ac <_Z7thread1Pv+0x12c>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2117      	movs	r1, #23
 800440c:	4618      	mov	r0, r3
 800440e:	f7ff f94d 	bl	80036ac <_ZN15NRF24L01pDriver13read_registerEh>
 8004412:	4603      	mov	r3, r0
 8004414:	4619      	mov	r1, r3
 8004416:	4828      	ldr	r0, [pc, #160]	; (80044b8 <_Z7thread1Pv+0x138>)
 8004418:	f000 fa26 	bl	8004868 <iprintf>
	printf("RF_SETUP : %x\r\n", Radio->read_register(0x06));
 800441c:	4b23      	ldr	r3, [pc, #140]	; (80044ac <_Z7thread1Pv+0x12c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2106      	movs	r1, #6
 8004422:	4618      	mov	r0, r3
 8004424:	f7ff f942 	bl	80036ac <_ZN15NRF24L01pDriver13read_registerEh>
 8004428:	4603      	mov	r3, r0
 800442a:	4619      	mov	r1, r3
 800442c:	4823      	ldr	r0, [pc, #140]	; (80044bc <_Z7thread1Pv+0x13c>)
 800442e:	f000 fa1b 	bl	8004868 <iprintf>

	char myMesg[32];
	NRF24L01p::Payload_t payload;

	payload.UseAck = 1;
 8004432:	2301      	movs	r3, #1
 8004434:	767b      	strb	r3, [r7, #25]


	payload.address = 0x11223344EE;
 8004436:	a418      	add	r4, pc, #96	; (adr r4, 8004498 <_Z7thread1Pv+0x118>)
 8004438:	cc18      	ldmia	r4, {r3, r4}
 800443a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	payload.data = (uint8_t*)myMesg;
 800443e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004442:	61fb      	str	r3, [r7, #28]
	payload.length = strlen(myMesg);
 8004444:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004448:	4618      	mov	r0, r3
 800444a:	f7fb fee1 	bl	8000210 <strlen>
 800444e:	4603      	mov	r3, r0
 8004450:	623b      	str	r3, [r7, #32]
	payload.retransmitCount = 15;
 8004452:	230f      	movs	r3, #15
 8004454:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	sprintf((char*) payload.data, "fan 0" );
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	4a19      	ldr	r2, [pc, #100]	; (80044c0 <_Z7thread1Pv+0x140>)
 800445c:	6810      	ldr	r0, [r2, #0]
 800445e:	6018      	str	r0, [r3, #0]
 8004460:	8892      	ldrh	r2, [r2, #4]
 8004462:	809a      	strh	r2, [r3, #4]
	payload.length = strlen((char*)payload.data);
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	4618      	mov	r0, r3
 8004468:	f7fb fed2 	bl	8000210 <strlen>
 800446c:	4603      	mov	r3, r0
 800446e:	623b      	str	r3, [r7, #32]
	Radio->TransmitPayload(&payload);
 8004470:	4b0e      	ldr	r3, [pc, #56]	; (80044ac <_Z7thread1Pv+0x12c>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f107 0210 	add.w	r2, r7, #16
 8004478:	4611      	mov	r1, r2
 800447a:	4618      	mov	r0, r3
 800447c:	f7fe ffee 	bl	800345c <_ZN9NRF24L01p15TransmitPayloadEPNS_9Payload_tE>



	  while (1)
	  {
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8004480:	2120      	movs	r1, #32
 8004482:	4809      	ldr	r0, [pc, #36]	; (80044a8 <_Z7thread1Pv+0x128>)
 8004484:	f7fc f93e 	bl	8000704 <HAL_GPIO_TogglePin>
			vTaskDelay(1000);
 8004488:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800448c:	f7fd fd34 	bl	8001ef8 <vTaskDelay>
			printf("hello world\r\n");
 8004490:	480c      	ldr	r0, [pc, #48]	; (80044c4 <_Z7thread1Pv+0x144>)
 8004492:	f000 fa5b 	bl	800494c <puts>
	Radio->TransmitPayload(&payload);




	  while (1)
 8004496:	e7f3      	b.n	8004480 <_Z7thread1Pv+0x100>
 8004498:	223344ee 	.word	0x223344ee
 800449c:	00000011 	.word	0x00000011
 80044a0:	40023800 	.word	0x40023800
 80044a4:	20002afc 	.word	0x20002afc
 80044a8:	40020000 	.word	0x40020000
 80044ac:	20002af8 	.word	0x20002af8
 80044b0:	08005600 	.word	0x08005600
 80044b4:	08005610 	.word	0x08005610
 80044b8:	08005620 	.word	0x08005620
 80044bc:	0800562c 	.word	0x0800562c
 80044c0:	0800563c 	.word	0x0800563c
 80044c4:	08005644 	.word	0x08005644

080044c8 <main>:
}


/* main function */
int main(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af02      	add	r7, sp, #8
  // create 'thread' functions that start executing,
  // example: tid_name = osThreadCreate (osThread(name), NULL);
  osKernelStart ();                     // start thread execution
#endif

  xTaskCreate(thread1,( const char * ) "t_gpio",configMINIMAL_STACK_SIZE*2,NULL,tskIDLE_PRIORITY+1 ,NULL );
 80044ce:	2300      	movs	r3, #0
 80044d0:	9301      	str	r3, [sp, #4]
 80044d2:	2301      	movs	r3, #1
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	2300      	movs	r3, #0
 80044d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044dc:	4904      	ldr	r1, [pc, #16]	; (80044f0 <main+0x28>)
 80044de:	4805      	ldr	r0, [pc, #20]	; (80044f4 <main+0x2c>)
 80044e0:	f7fd fbdc 	bl	8001c9c <xTaskCreate>

  vTaskStartScheduler();
 80044e4:	f7fd fd2c 	bl	8001f40 <vTaskStartScheduler>
  /* Infinite loop */
  while (1)
  {
   /* Add application code here */
	  //HAL_Delay(1000);
	  printf("hello world\r\n");
 80044e8:	4803      	ldr	r0, [pc, #12]	; (80044f8 <main+0x30>)
 80044ea:	f000 fa2f 	bl	800494c <puts>

  xTaskCreate(thread1,( const char * ) "t_gpio",configMINIMAL_STACK_SIZE*2,NULL,tskIDLE_PRIORITY+1 ,NULL );

  vTaskStartScheduler();
  /* Infinite loop */
  while (1)
 80044ee:	e7fb      	b.n	80044e8 <main+0x20>
 80044f0:	08005654 	.word	0x08005654
 80044f4:	08004381 	.word	0x08004381
 80044f8:	08005644 	.word	0x08005644

080044fc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004504:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004508:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b00      	cmp	r3, #0
 8004512:	d013      	beq.n	800453c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8004514:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004518:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800451c:	f003 0301 	and.w	r3, r3, #1
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00b      	beq.n	800453c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8004524:	e000      	b.n	8004528 <ITM_SendChar+0x2c>
    {
      __NOP();
 8004526:	bf00      	nop
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8004528:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0f9      	beq.n	8004526 <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8004532:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	b2d2      	uxtb	r2, r2
 800453a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800453c:	687b      	ldr	r3, [r7, #4]
}
 800453e:	4618      	mov	r0, r3
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop

0800454c <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	/* return len; */
	int i;
	for(i=0;i<len;i++){
 8004558:	2300      	movs	r3, #0
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	e009      	b.n	8004572 <_write+0x26>
		ITM_SendChar(*ptr++);
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	1c5a      	adds	r2, r3, #1
 8004562:	60ba      	str	r2, [r7, #8]
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	4618      	mov	r0, r3
 8004568:	f7ff ffc8 	bl	80044fc <ITM_SendChar>
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
	/* Implement your write code here, this is used by puts and printf for example */
	/* return len; */
	int i;
	for(i=0;i<len;i++){
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	3301      	adds	r3, #1
 8004570:	617b      	str	r3, [r7, #20]
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	429a      	cmp	r2, r3
 8004578:	dbf1      	blt.n	800455e <_write+0x12>
		ITM_SendChar(*ptr++);
	}
	errno = ENOSYS;
 800457a:	4b04      	ldr	r3, [pc, #16]	; (800458c <_write+0x40>)
 800457c:	2258      	movs	r2, #88	; 0x58
 800457e:	601a      	str	r2, [r3, #0]
	return len;
 8004580:	687b      	ldr	r3, [r7, #4]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3718      	adds	r7, #24
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	20002bc0 	.word	0x20002bc0

08004590 <_sbrk>:

void * _sbrk(int32_t incr)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8004598:	4b0b      	ldr	r3, [pc, #44]	; (80045c8 <_sbrk+0x38>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d102      	bne.n	80045a6 <_sbrk+0x16>
		heap_end = & end;
 80045a0:	4b09      	ldr	r3, [pc, #36]	; (80045c8 <_sbrk+0x38>)
 80045a2:	4a0a      	ldr	r2, [pc, #40]	; (80045cc <_sbrk+0x3c>)
 80045a4:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 80045a6:	4b08      	ldr	r3, [pc, #32]	; (80045c8 <_sbrk+0x38>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 80045ac:	4b06      	ldr	r3, [pc, #24]	; (80045c8 <_sbrk+0x38>)
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4413      	add	r3, r2
 80045b4:	4a04      	ldr	r2, [pc, #16]	; (80045c8 <_sbrk+0x38>)
 80045b6:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 80045b8:	68fb      	ldr	r3, [r7, #12]
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	20002bb0 	.word	0x20002bb0
 80045cc:	20002bc8 	.word	0x20002bc8

080045d0 <_close>:

int _close(int32_t file)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 80045d8:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <_close+0x20>)
 80045da:	2258      	movs	r2, #88	; 0x58
 80045dc:	601a      	str	r2, [r3, #0]
	return -1;
 80045de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	20002bc0 	.word	0x20002bc0

080045f4 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 80045fe:	4b05      	ldr	r3, [pc, #20]	; (8004614 <_fstat+0x20>)
 8004600:	2258      	movs	r2, #88	; 0x58
 8004602:	601a      	str	r2, [r3, #0]
	return -1;
 8004604:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004608:	4618      	mov	r0, r3
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	20002bc0 	.word	0x20002bc0

08004618 <_isatty>:

int _isatty(int32_t file)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8004620:	4b04      	ldr	r3, [pc, #16]	; (8004634 <_isatty+0x1c>)
 8004622:	2258      	movs	r2, #88	; 0x58
 8004624:	601a      	str	r2, [r3, #0]
	return 0;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	20002bc0 	.word	0x20002bc0

08004638 <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8004644:	4b05      	ldr	r3, [pc, #20]	; (800465c <_lseek+0x24>)
 8004646:	2258      	movs	r2, #88	; 0x58
 8004648:	601a      	str	r2, [r3, #0]
	return -1;
 800464a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800464e:	4618      	mov	r0, r3
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	20002bc0 	.word	0x20002bc0

08004660 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 800466c:	4b05      	ldr	r3, [pc, #20]	; (8004684 <_read+0x24>)
 800466e:	2258      	movs	r2, #88	; 0x58
 8004670:	601a      	str	r2, [r3, #0]
	return -1;
 8004672:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004676:	4618      	mov	r0, r3
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	20002bc0 	.word	0x20002bc0

08004688 <_ZdlPv>:
 8004688:	f000 b826 	b.w	80046d8 <free>

0800468c <__libc_init_array>:
 800468c:	b570      	push	{r4, r5, r6, lr}
 800468e:	4b0e      	ldr	r3, [pc, #56]	; (80046c8 <__libc_init_array+0x3c>)
 8004690:	4c0e      	ldr	r4, [pc, #56]	; (80046cc <__libc_init_array+0x40>)
 8004692:	1ae4      	subs	r4, r4, r3
 8004694:	10a4      	asrs	r4, r4, #2
 8004696:	2500      	movs	r5, #0
 8004698:	461e      	mov	r6, r3
 800469a:	42a5      	cmp	r5, r4
 800469c:	d004      	beq.n	80046a8 <__libc_init_array+0x1c>
 800469e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046a2:	4798      	blx	r3
 80046a4:	3501      	adds	r5, #1
 80046a6:	e7f8      	b.n	800469a <__libc_init_array+0xe>
 80046a8:	f000 ff96 	bl	80055d8 <_init>
 80046ac:	4c08      	ldr	r4, [pc, #32]	; (80046d0 <__libc_init_array+0x44>)
 80046ae:	4b09      	ldr	r3, [pc, #36]	; (80046d4 <__libc_init_array+0x48>)
 80046b0:	1ae4      	subs	r4, r4, r3
 80046b2:	10a4      	asrs	r4, r4, #2
 80046b4:	2500      	movs	r5, #0
 80046b6:	461e      	mov	r6, r3
 80046b8:	42a5      	cmp	r5, r4
 80046ba:	d004      	beq.n	80046c6 <__libc_init_array+0x3a>
 80046bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046c0:	4798      	blx	r3
 80046c2:	3501      	adds	r5, #1
 80046c4:	e7f8      	b.n	80046b8 <__libc_init_array+0x2c>
 80046c6:	bd70      	pop	{r4, r5, r6, pc}
 80046c8:	08005728 	.word	0x08005728
 80046cc:	08005728 	.word	0x08005728
 80046d0:	0800572c 	.word	0x0800572c
 80046d4:	08005728 	.word	0x08005728

080046d8 <free>:
 80046d8:	4b02      	ldr	r3, [pc, #8]	; (80046e4 <free+0xc>)
 80046da:	4601      	mov	r1, r0
 80046dc:	6818      	ldr	r0, [r3, #0]
 80046de:	f000 b817 	b.w	8004710 <_free_r>
 80046e2:	bf00      	nop
 80046e4:	20000090 	.word	0x20000090

080046e8 <memcpy>:
 80046e8:	b510      	push	{r4, lr}
 80046ea:	1e43      	subs	r3, r0, #1
 80046ec:	440a      	add	r2, r1
 80046ee:	4291      	cmp	r1, r2
 80046f0:	d004      	beq.n	80046fc <memcpy+0x14>
 80046f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046fa:	e7f8      	b.n	80046ee <memcpy+0x6>
 80046fc:	bd10      	pop	{r4, pc}

080046fe <memset>:
 80046fe:	4402      	add	r2, r0
 8004700:	4603      	mov	r3, r0
 8004702:	4293      	cmp	r3, r2
 8004704:	d002      	beq.n	800470c <memset+0xe>
 8004706:	f803 1b01 	strb.w	r1, [r3], #1
 800470a:	e7fa      	b.n	8004702 <memset+0x4>
 800470c:	4770      	bx	lr
	...

08004710 <_free_r>:
 8004710:	b538      	push	{r3, r4, r5, lr}
 8004712:	4605      	mov	r5, r0
 8004714:	2900      	cmp	r1, #0
 8004716:	d046      	beq.n	80047a6 <_free_r+0x96>
 8004718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800471c:	1f0c      	subs	r4, r1, #4
 800471e:	2b00      	cmp	r3, #0
 8004720:	bfb8      	it	lt
 8004722:	18e4      	addlt	r4, r4, r3
 8004724:	f000 fbc8 	bl	8004eb8 <__malloc_lock>
 8004728:	4a1f      	ldr	r2, [pc, #124]	; (80047a8 <_free_r+0x98>)
 800472a:	6813      	ldr	r3, [r2, #0]
 800472c:	4611      	mov	r1, r2
 800472e:	b913      	cbnz	r3, 8004736 <_free_r+0x26>
 8004730:	6063      	str	r3, [r4, #4]
 8004732:	6014      	str	r4, [r2, #0]
 8004734:	e032      	b.n	800479c <_free_r+0x8c>
 8004736:	42a3      	cmp	r3, r4
 8004738:	d90e      	bls.n	8004758 <_free_r+0x48>
 800473a:	6822      	ldr	r2, [r4, #0]
 800473c:	18a0      	adds	r0, r4, r2
 800473e:	4283      	cmp	r3, r0
 8004740:	bf04      	itt	eq
 8004742:	6818      	ldreq	r0, [r3, #0]
 8004744:	685b      	ldreq	r3, [r3, #4]
 8004746:	6063      	str	r3, [r4, #4]
 8004748:	bf04      	itt	eq
 800474a:	1812      	addeq	r2, r2, r0
 800474c:	6022      	streq	r2, [r4, #0]
 800474e:	600c      	str	r4, [r1, #0]
 8004750:	e024      	b.n	800479c <_free_r+0x8c>
 8004752:	42a2      	cmp	r2, r4
 8004754:	d803      	bhi.n	800475e <_free_r+0x4e>
 8004756:	4613      	mov	r3, r2
 8004758:	685a      	ldr	r2, [r3, #4]
 800475a:	2a00      	cmp	r2, #0
 800475c:	d1f9      	bne.n	8004752 <_free_r+0x42>
 800475e:	6818      	ldr	r0, [r3, #0]
 8004760:	1819      	adds	r1, r3, r0
 8004762:	42a1      	cmp	r1, r4
 8004764:	d10b      	bne.n	800477e <_free_r+0x6e>
 8004766:	6821      	ldr	r1, [r4, #0]
 8004768:	4401      	add	r1, r0
 800476a:	1858      	adds	r0, r3, r1
 800476c:	4282      	cmp	r2, r0
 800476e:	6019      	str	r1, [r3, #0]
 8004770:	d114      	bne.n	800479c <_free_r+0x8c>
 8004772:	6810      	ldr	r0, [r2, #0]
 8004774:	6852      	ldr	r2, [r2, #4]
 8004776:	605a      	str	r2, [r3, #4]
 8004778:	4401      	add	r1, r0
 800477a:	6019      	str	r1, [r3, #0]
 800477c:	e00e      	b.n	800479c <_free_r+0x8c>
 800477e:	d902      	bls.n	8004786 <_free_r+0x76>
 8004780:	230c      	movs	r3, #12
 8004782:	602b      	str	r3, [r5, #0]
 8004784:	e00a      	b.n	800479c <_free_r+0x8c>
 8004786:	6821      	ldr	r1, [r4, #0]
 8004788:	1860      	adds	r0, r4, r1
 800478a:	4282      	cmp	r2, r0
 800478c:	bf04      	itt	eq
 800478e:	6810      	ldreq	r0, [r2, #0]
 8004790:	6852      	ldreq	r2, [r2, #4]
 8004792:	6062      	str	r2, [r4, #4]
 8004794:	bf04      	itt	eq
 8004796:	1809      	addeq	r1, r1, r0
 8004798:	6021      	streq	r1, [r4, #0]
 800479a:	605c      	str	r4, [r3, #4]
 800479c:	4628      	mov	r0, r5
 800479e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047a2:	f000 bb8a 	b.w	8004eba <__malloc_unlock>
 80047a6:	bd38      	pop	{r3, r4, r5, pc}
 80047a8:	20002bb8 	.word	0x20002bb8

080047ac <_malloc_r>:
 80047ac:	b570      	push	{r4, r5, r6, lr}
 80047ae:	1ccd      	adds	r5, r1, #3
 80047b0:	f025 0503 	bic.w	r5, r5, #3
 80047b4:	3508      	adds	r5, #8
 80047b6:	2d0c      	cmp	r5, #12
 80047b8:	bf38      	it	cc
 80047ba:	250c      	movcc	r5, #12
 80047bc:	2d00      	cmp	r5, #0
 80047be:	4606      	mov	r6, r0
 80047c0:	db01      	blt.n	80047c6 <_malloc_r+0x1a>
 80047c2:	42a9      	cmp	r1, r5
 80047c4:	d902      	bls.n	80047cc <_malloc_r+0x20>
 80047c6:	230c      	movs	r3, #12
 80047c8:	6033      	str	r3, [r6, #0]
 80047ca:	e046      	b.n	800485a <_malloc_r+0xae>
 80047cc:	f000 fb74 	bl	8004eb8 <__malloc_lock>
 80047d0:	4b23      	ldr	r3, [pc, #140]	; (8004860 <_malloc_r+0xb4>)
 80047d2:	681c      	ldr	r4, [r3, #0]
 80047d4:	461a      	mov	r2, r3
 80047d6:	4621      	mov	r1, r4
 80047d8:	b1a1      	cbz	r1, 8004804 <_malloc_r+0x58>
 80047da:	680b      	ldr	r3, [r1, #0]
 80047dc:	1b5b      	subs	r3, r3, r5
 80047de:	d40e      	bmi.n	80047fe <_malloc_r+0x52>
 80047e0:	2b0b      	cmp	r3, #11
 80047e2:	d903      	bls.n	80047ec <_malloc_r+0x40>
 80047e4:	600b      	str	r3, [r1, #0]
 80047e6:	18cc      	adds	r4, r1, r3
 80047e8:	50cd      	str	r5, [r1, r3]
 80047ea:	e01e      	b.n	800482a <_malloc_r+0x7e>
 80047ec:	428c      	cmp	r4, r1
 80047ee:	bf0d      	iteet	eq
 80047f0:	6863      	ldreq	r3, [r4, #4]
 80047f2:	684b      	ldrne	r3, [r1, #4]
 80047f4:	6063      	strne	r3, [r4, #4]
 80047f6:	6013      	streq	r3, [r2, #0]
 80047f8:	bf18      	it	ne
 80047fa:	460c      	movne	r4, r1
 80047fc:	e015      	b.n	800482a <_malloc_r+0x7e>
 80047fe:	460c      	mov	r4, r1
 8004800:	6849      	ldr	r1, [r1, #4]
 8004802:	e7e9      	b.n	80047d8 <_malloc_r+0x2c>
 8004804:	4c17      	ldr	r4, [pc, #92]	; (8004864 <_malloc_r+0xb8>)
 8004806:	6823      	ldr	r3, [r4, #0]
 8004808:	b91b      	cbnz	r3, 8004812 <_malloc_r+0x66>
 800480a:	4630      	mov	r0, r6
 800480c:	f000 f8a6 	bl	800495c <_sbrk_r>
 8004810:	6020      	str	r0, [r4, #0]
 8004812:	4629      	mov	r1, r5
 8004814:	4630      	mov	r0, r6
 8004816:	f000 f8a1 	bl	800495c <_sbrk_r>
 800481a:	1c43      	adds	r3, r0, #1
 800481c:	d018      	beq.n	8004850 <_malloc_r+0xa4>
 800481e:	1cc4      	adds	r4, r0, #3
 8004820:	f024 0403 	bic.w	r4, r4, #3
 8004824:	42a0      	cmp	r0, r4
 8004826:	d10d      	bne.n	8004844 <_malloc_r+0x98>
 8004828:	6025      	str	r5, [r4, #0]
 800482a:	4630      	mov	r0, r6
 800482c:	f000 fb45 	bl	8004eba <__malloc_unlock>
 8004830:	f104 000b 	add.w	r0, r4, #11
 8004834:	1d23      	adds	r3, r4, #4
 8004836:	f020 0007 	bic.w	r0, r0, #7
 800483a:	1ac3      	subs	r3, r0, r3
 800483c:	d00e      	beq.n	800485c <_malloc_r+0xb0>
 800483e:	425a      	negs	r2, r3
 8004840:	50e2      	str	r2, [r4, r3]
 8004842:	bd70      	pop	{r4, r5, r6, pc}
 8004844:	1a21      	subs	r1, r4, r0
 8004846:	4630      	mov	r0, r6
 8004848:	f000 f888 	bl	800495c <_sbrk_r>
 800484c:	3001      	adds	r0, #1
 800484e:	d1eb      	bne.n	8004828 <_malloc_r+0x7c>
 8004850:	230c      	movs	r3, #12
 8004852:	6033      	str	r3, [r6, #0]
 8004854:	4630      	mov	r0, r6
 8004856:	f000 fb30 	bl	8004eba <__malloc_unlock>
 800485a:	2000      	movs	r0, #0
 800485c:	bd70      	pop	{r4, r5, r6, pc}
 800485e:	bf00      	nop
 8004860:	20002bb8 	.word	0x20002bb8
 8004864:	20002bb4 	.word	0x20002bb4

08004868 <iprintf>:
 8004868:	b40f      	push	{r0, r1, r2, r3}
 800486a:	4b0a      	ldr	r3, [pc, #40]	; (8004894 <iprintf+0x2c>)
 800486c:	b513      	push	{r0, r1, r4, lr}
 800486e:	681c      	ldr	r4, [r3, #0]
 8004870:	b124      	cbz	r4, 800487c <iprintf+0x14>
 8004872:	69a3      	ldr	r3, [r4, #24]
 8004874:	b913      	cbnz	r3, 800487c <iprintf+0x14>
 8004876:	4620      	mov	r0, r4
 8004878:	f000 fa34 	bl	8004ce4 <__sinit>
 800487c:	ab05      	add	r3, sp, #20
 800487e:	9a04      	ldr	r2, [sp, #16]
 8004880:	68a1      	ldr	r1, [r4, #8]
 8004882:	9301      	str	r3, [sp, #4]
 8004884:	4620      	mov	r0, r4
 8004886:	f000 fb43 	bl	8004f10 <_vfiprintf_r>
 800488a:	b002      	add	sp, #8
 800488c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004890:	b004      	add	sp, #16
 8004892:	4770      	bx	lr
 8004894:	20000090 	.word	0x20000090

08004898 <_puts_r>:
 8004898:	b570      	push	{r4, r5, r6, lr}
 800489a:	460e      	mov	r6, r1
 800489c:	4605      	mov	r5, r0
 800489e:	b118      	cbz	r0, 80048a8 <_puts_r+0x10>
 80048a0:	6983      	ldr	r3, [r0, #24]
 80048a2:	b90b      	cbnz	r3, 80048a8 <_puts_r+0x10>
 80048a4:	f000 fa1e 	bl	8004ce4 <__sinit>
 80048a8:	69ab      	ldr	r3, [r5, #24]
 80048aa:	68ac      	ldr	r4, [r5, #8]
 80048ac:	b913      	cbnz	r3, 80048b4 <_puts_r+0x1c>
 80048ae:	4628      	mov	r0, r5
 80048b0:	f000 fa18 	bl	8004ce4 <__sinit>
 80048b4:	4b22      	ldr	r3, [pc, #136]	; (8004940 <_puts_r+0xa8>)
 80048b6:	429c      	cmp	r4, r3
 80048b8:	d101      	bne.n	80048be <_puts_r+0x26>
 80048ba:	686c      	ldr	r4, [r5, #4]
 80048bc:	e008      	b.n	80048d0 <_puts_r+0x38>
 80048be:	4b21      	ldr	r3, [pc, #132]	; (8004944 <_puts_r+0xac>)
 80048c0:	429c      	cmp	r4, r3
 80048c2:	d101      	bne.n	80048c8 <_puts_r+0x30>
 80048c4:	68ac      	ldr	r4, [r5, #8]
 80048c6:	e003      	b.n	80048d0 <_puts_r+0x38>
 80048c8:	4b1f      	ldr	r3, [pc, #124]	; (8004948 <_puts_r+0xb0>)
 80048ca:	429c      	cmp	r4, r3
 80048cc:	bf08      	it	eq
 80048ce:	68ec      	ldreq	r4, [r5, #12]
 80048d0:	89a3      	ldrh	r3, [r4, #12]
 80048d2:	071b      	lsls	r3, r3, #28
 80048d4:	d501      	bpl.n	80048da <_puts_r+0x42>
 80048d6:	6923      	ldr	r3, [r4, #16]
 80048d8:	b93b      	cbnz	r3, 80048ea <_puts_r+0x52>
 80048da:	4621      	mov	r1, r4
 80048dc:	4628      	mov	r0, r5
 80048de:	f000 f8a1 	bl	8004a24 <__swsetup_r>
 80048e2:	b110      	cbz	r0, 80048ea <_puts_r+0x52>
 80048e4:	f04f 30ff 	mov.w	r0, #4294967295
 80048e8:	bd70      	pop	{r4, r5, r6, pc}
 80048ea:	3e01      	subs	r6, #1
 80048ec:	68a3      	ldr	r3, [r4, #8]
 80048ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80048f2:	3b01      	subs	r3, #1
 80048f4:	60a3      	str	r3, [r4, #8]
 80048f6:	b191      	cbz	r1, 800491e <_puts_r+0x86>
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	da04      	bge.n	8004906 <_puts_r+0x6e>
 80048fc:	69a2      	ldr	r2, [r4, #24]
 80048fe:	4293      	cmp	r3, r2
 8004900:	db06      	blt.n	8004910 <_puts_r+0x78>
 8004902:	290a      	cmp	r1, #10
 8004904:	d004      	beq.n	8004910 <_puts_r+0x78>
 8004906:	6823      	ldr	r3, [r4, #0]
 8004908:	1c5a      	adds	r2, r3, #1
 800490a:	6022      	str	r2, [r4, #0]
 800490c:	7019      	strb	r1, [r3, #0]
 800490e:	e7ed      	b.n	80048ec <_puts_r+0x54>
 8004910:	4622      	mov	r2, r4
 8004912:	4628      	mov	r0, r5
 8004914:	f000 f832 	bl	800497c <__swbuf_r>
 8004918:	3001      	adds	r0, #1
 800491a:	d1e7      	bne.n	80048ec <_puts_r+0x54>
 800491c:	e7e2      	b.n	80048e4 <_puts_r+0x4c>
 800491e:	2b00      	cmp	r3, #0
 8004920:	da08      	bge.n	8004934 <_puts_r+0x9c>
 8004922:	4622      	mov	r2, r4
 8004924:	210a      	movs	r1, #10
 8004926:	4628      	mov	r0, r5
 8004928:	f000 f828 	bl	800497c <__swbuf_r>
 800492c:	3001      	adds	r0, #1
 800492e:	d0d9      	beq.n	80048e4 <_puts_r+0x4c>
 8004930:	200a      	movs	r0, #10
 8004932:	bd70      	pop	{r4, r5, r6, pc}
 8004934:	6823      	ldr	r3, [r4, #0]
 8004936:	200a      	movs	r0, #10
 8004938:	1c5a      	adds	r2, r3, #1
 800493a:	6022      	str	r2, [r4, #0]
 800493c:	7018      	strb	r0, [r3, #0]
 800493e:	bd70      	pop	{r4, r5, r6, pc}
 8004940:	08005694 	.word	0x08005694
 8004944:	080056b4 	.word	0x080056b4
 8004948:	080056d4 	.word	0x080056d4

0800494c <puts>:
 800494c:	4b02      	ldr	r3, [pc, #8]	; (8004958 <puts+0xc>)
 800494e:	4601      	mov	r1, r0
 8004950:	6818      	ldr	r0, [r3, #0]
 8004952:	f7ff bfa1 	b.w	8004898 <_puts_r>
 8004956:	bf00      	nop
 8004958:	20000090 	.word	0x20000090

0800495c <_sbrk_r>:
 800495c:	b538      	push	{r3, r4, r5, lr}
 800495e:	4c06      	ldr	r4, [pc, #24]	; (8004978 <_sbrk_r+0x1c>)
 8004960:	2300      	movs	r3, #0
 8004962:	4605      	mov	r5, r0
 8004964:	4608      	mov	r0, r1
 8004966:	6023      	str	r3, [r4, #0]
 8004968:	f7ff fe12 	bl	8004590 <_sbrk>
 800496c:	1c43      	adds	r3, r0, #1
 800496e:	d102      	bne.n	8004976 <_sbrk_r+0x1a>
 8004970:	6823      	ldr	r3, [r4, #0]
 8004972:	b103      	cbz	r3, 8004976 <_sbrk_r+0x1a>
 8004974:	602b      	str	r3, [r5, #0]
 8004976:	bd38      	pop	{r3, r4, r5, pc}
 8004978:	20002bc0 	.word	0x20002bc0

0800497c <__swbuf_r>:
 800497c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800497e:	460f      	mov	r7, r1
 8004980:	4614      	mov	r4, r2
 8004982:	4606      	mov	r6, r0
 8004984:	b118      	cbz	r0, 800498e <__swbuf_r+0x12>
 8004986:	6983      	ldr	r3, [r0, #24]
 8004988:	b90b      	cbnz	r3, 800498e <__swbuf_r+0x12>
 800498a:	f000 f9ab 	bl	8004ce4 <__sinit>
 800498e:	4b22      	ldr	r3, [pc, #136]	; (8004a18 <__swbuf_r+0x9c>)
 8004990:	429c      	cmp	r4, r3
 8004992:	d101      	bne.n	8004998 <__swbuf_r+0x1c>
 8004994:	6874      	ldr	r4, [r6, #4]
 8004996:	e008      	b.n	80049aa <__swbuf_r+0x2e>
 8004998:	4b20      	ldr	r3, [pc, #128]	; (8004a1c <__swbuf_r+0xa0>)
 800499a:	429c      	cmp	r4, r3
 800499c:	d101      	bne.n	80049a2 <__swbuf_r+0x26>
 800499e:	68b4      	ldr	r4, [r6, #8]
 80049a0:	e003      	b.n	80049aa <__swbuf_r+0x2e>
 80049a2:	4b1f      	ldr	r3, [pc, #124]	; (8004a20 <__swbuf_r+0xa4>)
 80049a4:	429c      	cmp	r4, r3
 80049a6:	bf08      	it	eq
 80049a8:	68f4      	ldreq	r4, [r6, #12]
 80049aa:	69a3      	ldr	r3, [r4, #24]
 80049ac:	60a3      	str	r3, [r4, #8]
 80049ae:	89a3      	ldrh	r3, [r4, #12]
 80049b0:	071a      	lsls	r2, r3, #28
 80049b2:	d509      	bpl.n	80049c8 <__swbuf_r+0x4c>
 80049b4:	6923      	ldr	r3, [r4, #16]
 80049b6:	b13b      	cbz	r3, 80049c8 <__swbuf_r+0x4c>
 80049b8:	6823      	ldr	r3, [r4, #0]
 80049ba:	6920      	ldr	r0, [r4, #16]
 80049bc:	1a18      	subs	r0, r3, r0
 80049be:	6963      	ldr	r3, [r4, #20]
 80049c0:	4298      	cmp	r0, r3
 80049c2:	b2fd      	uxtb	r5, r7
 80049c4:	db0f      	blt.n	80049e6 <__swbuf_r+0x6a>
 80049c6:	e008      	b.n	80049da <__swbuf_r+0x5e>
 80049c8:	4621      	mov	r1, r4
 80049ca:	4630      	mov	r0, r6
 80049cc:	f000 f82a 	bl	8004a24 <__swsetup_r>
 80049d0:	2800      	cmp	r0, #0
 80049d2:	d0f1      	beq.n	80049b8 <__swbuf_r+0x3c>
 80049d4:	f04f 30ff 	mov.w	r0, #4294967295
 80049d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049da:	4621      	mov	r1, r4
 80049dc:	4630      	mov	r0, r6
 80049de:	f000 f917 	bl	8004c10 <_fflush_r>
 80049e2:	2800      	cmp	r0, #0
 80049e4:	d1f6      	bne.n	80049d4 <__swbuf_r+0x58>
 80049e6:	68a3      	ldr	r3, [r4, #8]
 80049e8:	3b01      	subs	r3, #1
 80049ea:	60a3      	str	r3, [r4, #8]
 80049ec:	6823      	ldr	r3, [r4, #0]
 80049ee:	1c5a      	adds	r2, r3, #1
 80049f0:	6022      	str	r2, [r4, #0]
 80049f2:	701f      	strb	r7, [r3, #0]
 80049f4:	6962      	ldr	r2, [r4, #20]
 80049f6:	1c43      	adds	r3, r0, #1
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d004      	beq.n	8004a06 <__swbuf_r+0x8a>
 80049fc:	89a3      	ldrh	r3, [r4, #12]
 80049fe:	07db      	lsls	r3, r3, #31
 8004a00:	d507      	bpl.n	8004a12 <__swbuf_r+0x96>
 8004a02:	2d0a      	cmp	r5, #10
 8004a04:	d105      	bne.n	8004a12 <__swbuf_r+0x96>
 8004a06:	4621      	mov	r1, r4
 8004a08:	4630      	mov	r0, r6
 8004a0a:	f000 f901 	bl	8004c10 <_fflush_r>
 8004a0e:	2800      	cmp	r0, #0
 8004a10:	d1e0      	bne.n	80049d4 <__swbuf_r+0x58>
 8004a12:	4628      	mov	r0, r5
 8004a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a16:	bf00      	nop
 8004a18:	08005694 	.word	0x08005694
 8004a1c:	080056b4 	.word	0x080056b4
 8004a20:	080056d4 	.word	0x080056d4

08004a24 <__swsetup_r>:
 8004a24:	4b32      	ldr	r3, [pc, #200]	; (8004af0 <__swsetup_r+0xcc>)
 8004a26:	b570      	push	{r4, r5, r6, lr}
 8004a28:	681d      	ldr	r5, [r3, #0]
 8004a2a:	4606      	mov	r6, r0
 8004a2c:	460c      	mov	r4, r1
 8004a2e:	b125      	cbz	r5, 8004a3a <__swsetup_r+0x16>
 8004a30:	69ab      	ldr	r3, [r5, #24]
 8004a32:	b913      	cbnz	r3, 8004a3a <__swsetup_r+0x16>
 8004a34:	4628      	mov	r0, r5
 8004a36:	f000 f955 	bl	8004ce4 <__sinit>
 8004a3a:	4b2e      	ldr	r3, [pc, #184]	; (8004af4 <__swsetup_r+0xd0>)
 8004a3c:	429c      	cmp	r4, r3
 8004a3e:	d101      	bne.n	8004a44 <__swsetup_r+0x20>
 8004a40:	686c      	ldr	r4, [r5, #4]
 8004a42:	e008      	b.n	8004a56 <__swsetup_r+0x32>
 8004a44:	4b2c      	ldr	r3, [pc, #176]	; (8004af8 <__swsetup_r+0xd4>)
 8004a46:	429c      	cmp	r4, r3
 8004a48:	d101      	bne.n	8004a4e <__swsetup_r+0x2a>
 8004a4a:	68ac      	ldr	r4, [r5, #8]
 8004a4c:	e003      	b.n	8004a56 <__swsetup_r+0x32>
 8004a4e:	4b2b      	ldr	r3, [pc, #172]	; (8004afc <__swsetup_r+0xd8>)
 8004a50:	429c      	cmp	r4, r3
 8004a52:	bf08      	it	eq
 8004a54:	68ec      	ldreq	r4, [r5, #12]
 8004a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	0715      	lsls	r5, r2, #28
 8004a5e:	d41d      	bmi.n	8004a9c <__swsetup_r+0x78>
 8004a60:	06d0      	lsls	r0, r2, #27
 8004a62:	d402      	bmi.n	8004a6a <__swsetup_r+0x46>
 8004a64:	2209      	movs	r2, #9
 8004a66:	6032      	str	r2, [r6, #0]
 8004a68:	e03a      	b.n	8004ae0 <__swsetup_r+0xbc>
 8004a6a:	0751      	lsls	r1, r2, #29
 8004a6c:	d512      	bpl.n	8004a94 <__swsetup_r+0x70>
 8004a6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a70:	b141      	cbz	r1, 8004a84 <__swsetup_r+0x60>
 8004a72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a76:	4299      	cmp	r1, r3
 8004a78:	d002      	beq.n	8004a80 <__swsetup_r+0x5c>
 8004a7a:	4630      	mov	r0, r6
 8004a7c:	f7ff fe48 	bl	8004710 <_free_r>
 8004a80:	2300      	movs	r3, #0
 8004a82:	6363      	str	r3, [r4, #52]	; 0x34
 8004a84:	89a3      	ldrh	r3, [r4, #12]
 8004a86:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004a8a:	81a3      	strh	r3, [r4, #12]
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	6063      	str	r3, [r4, #4]
 8004a90:	6923      	ldr	r3, [r4, #16]
 8004a92:	6023      	str	r3, [r4, #0]
 8004a94:	89a3      	ldrh	r3, [r4, #12]
 8004a96:	f043 0308 	orr.w	r3, r3, #8
 8004a9a:	81a3      	strh	r3, [r4, #12]
 8004a9c:	6923      	ldr	r3, [r4, #16]
 8004a9e:	b94b      	cbnz	r3, 8004ab4 <__swsetup_r+0x90>
 8004aa0:	89a3      	ldrh	r3, [r4, #12]
 8004aa2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004aa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aaa:	d003      	beq.n	8004ab4 <__swsetup_r+0x90>
 8004aac:	4621      	mov	r1, r4
 8004aae:	4630      	mov	r0, r6
 8004ab0:	f000 f9c6 	bl	8004e40 <__smakebuf_r>
 8004ab4:	89a2      	ldrh	r2, [r4, #12]
 8004ab6:	f012 0301 	ands.w	r3, r2, #1
 8004aba:	d005      	beq.n	8004ac8 <__swsetup_r+0xa4>
 8004abc:	2300      	movs	r3, #0
 8004abe:	60a3      	str	r3, [r4, #8]
 8004ac0:	6963      	ldr	r3, [r4, #20]
 8004ac2:	425b      	negs	r3, r3
 8004ac4:	61a3      	str	r3, [r4, #24]
 8004ac6:	e003      	b.n	8004ad0 <__swsetup_r+0xac>
 8004ac8:	0792      	lsls	r2, r2, #30
 8004aca:	bf58      	it	pl
 8004acc:	6963      	ldrpl	r3, [r4, #20]
 8004ace:	60a3      	str	r3, [r4, #8]
 8004ad0:	6923      	ldr	r3, [r4, #16]
 8004ad2:	b95b      	cbnz	r3, 8004aec <__swsetup_r+0xc8>
 8004ad4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ad8:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8004adc:	b280      	uxth	r0, r0
 8004ade:	b130      	cbz	r0, 8004aee <__swsetup_r+0xca>
 8004ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ae4:	81a3      	strh	r3, [r4, #12]
 8004ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8004aea:	bd70      	pop	{r4, r5, r6, pc}
 8004aec:	2000      	movs	r0, #0
 8004aee:	bd70      	pop	{r4, r5, r6, pc}
 8004af0:	20000090 	.word	0x20000090
 8004af4:	08005694 	.word	0x08005694
 8004af8:	080056b4 	.word	0x080056b4
 8004afc:	080056d4 	.word	0x080056d4

08004b00 <__sflush_r>:
 8004b00:	898a      	ldrh	r2, [r1, #12]
 8004b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b06:	4605      	mov	r5, r0
 8004b08:	0710      	lsls	r0, r2, #28
 8004b0a:	460c      	mov	r4, r1
 8004b0c:	d459      	bmi.n	8004bc2 <__sflush_r+0xc2>
 8004b0e:	684b      	ldr	r3, [r1, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	dc02      	bgt.n	8004b1a <__sflush_r+0x1a>
 8004b14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	dd17      	ble.n	8004b4a <__sflush_r+0x4a>
 8004b1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b1c:	b1ae      	cbz	r6, 8004b4a <__sflush_r+0x4a>
 8004b1e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004b22:	2300      	movs	r3, #0
 8004b24:	b292      	uxth	r2, r2
 8004b26:	682f      	ldr	r7, [r5, #0]
 8004b28:	602b      	str	r3, [r5, #0]
 8004b2a:	b10a      	cbz	r2, 8004b30 <__sflush_r+0x30>
 8004b2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b2e:	e015      	b.n	8004b5c <__sflush_r+0x5c>
 8004b30:	6a21      	ldr	r1, [r4, #32]
 8004b32:	2301      	movs	r3, #1
 8004b34:	4628      	mov	r0, r5
 8004b36:	47b0      	blx	r6
 8004b38:	1c41      	adds	r1, r0, #1
 8004b3a:	d10f      	bne.n	8004b5c <__sflush_r+0x5c>
 8004b3c:	682b      	ldr	r3, [r5, #0]
 8004b3e:	b16b      	cbz	r3, 8004b5c <__sflush_r+0x5c>
 8004b40:	2b1d      	cmp	r3, #29
 8004b42:	d001      	beq.n	8004b48 <__sflush_r+0x48>
 8004b44:	2b16      	cmp	r3, #22
 8004b46:	d103      	bne.n	8004b50 <__sflush_r+0x50>
 8004b48:	602f      	str	r7, [r5, #0]
 8004b4a:	2000      	movs	r0, #0
 8004b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b50:	89a3      	ldrh	r3, [r4, #12]
 8004b52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b56:	81a3      	strh	r3, [r4, #12]
 8004b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b5c:	89a3      	ldrh	r3, [r4, #12]
 8004b5e:	075a      	lsls	r2, r3, #29
 8004b60:	d505      	bpl.n	8004b6e <__sflush_r+0x6e>
 8004b62:	6863      	ldr	r3, [r4, #4]
 8004b64:	1ac0      	subs	r0, r0, r3
 8004b66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b68:	b10b      	cbz	r3, 8004b6e <__sflush_r+0x6e>
 8004b6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b6c:	1ac0      	subs	r0, r0, r3
 8004b6e:	2300      	movs	r3, #0
 8004b70:	4602      	mov	r2, r0
 8004b72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b74:	6a21      	ldr	r1, [r4, #32]
 8004b76:	4628      	mov	r0, r5
 8004b78:	47b0      	blx	r6
 8004b7a:	1c43      	adds	r3, r0, #1
 8004b7c:	89a3      	ldrh	r3, [r4, #12]
 8004b7e:	d106      	bne.n	8004b8e <__sflush_r+0x8e>
 8004b80:	6829      	ldr	r1, [r5, #0]
 8004b82:	291d      	cmp	r1, #29
 8004b84:	d83a      	bhi.n	8004bfc <__sflush_r+0xfc>
 8004b86:	4a21      	ldr	r2, [pc, #132]	; (8004c0c <__sflush_r+0x10c>)
 8004b88:	40ca      	lsrs	r2, r1
 8004b8a:	07d6      	lsls	r6, r2, #31
 8004b8c:	d536      	bpl.n	8004bfc <__sflush_r+0xfc>
 8004b8e:	2200      	movs	r2, #0
 8004b90:	6062      	str	r2, [r4, #4]
 8004b92:	04d9      	lsls	r1, r3, #19
 8004b94:	6922      	ldr	r2, [r4, #16]
 8004b96:	6022      	str	r2, [r4, #0]
 8004b98:	d504      	bpl.n	8004ba4 <__sflush_r+0xa4>
 8004b9a:	1c42      	adds	r2, r0, #1
 8004b9c:	d101      	bne.n	8004ba2 <__sflush_r+0xa2>
 8004b9e:	682b      	ldr	r3, [r5, #0]
 8004ba0:	b903      	cbnz	r3, 8004ba4 <__sflush_r+0xa4>
 8004ba2:	6560      	str	r0, [r4, #84]	; 0x54
 8004ba4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ba6:	602f      	str	r7, [r5, #0]
 8004ba8:	2900      	cmp	r1, #0
 8004baa:	d0ce      	beq.n	8004b4a <__sflush_r+0x4a>
 8004bac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bb0:	4299      	cmp	r1, r3
 8004bb2:	d002      	beq.n	8004bba <__sflush_r+0xba>
 8004bb4:	4628      	mov	r0, r5
 8004bb6:	f7ff fdab 	bl	8004710 <_free_r>
 8004bba:	2000      	movs	r0, #0
 8004bbc:	6360      	str	r0, [r4, #52]	; 0x34
 8004bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bc2:	690f      	ldr	r7, [r1, #16]
 8004bc4:	2f00      	cmp	r7, #0
 8004bc6:	d0c0      	beq.n	8004b4a <__sflush_r+0x4a>
 8004bc8:	0793      	lsls	r3, r2, #30
 8004bca:	680e      	ldr	r6, [r1, #0]
 8004bcc:	bf08      	it	eq
 8004bce:	694b      	ldreq	r3, [r1, #20]
 8004bd0:	600f      	str	r7, [r1, #0]
 8004bd2:	bf18      	it	ne
 8004bd4:	2300      	movne	r3, #0
 8004bd6:	ebc7 0806 	rsb	r8, r7, r6
 8004bda:	608b      	str	r3, [r1, #8]
 8004bdc:	e002      	b.n	8004be4 <__sflush_r+0xe4>
 8004bde:	4407      	add	r7, r0
 8004be0:	ebc0 0808 	rsb	r8, r0, r8
 8004be4:	f1b8 0f00 	cmp.w	r8, #0
 8004be8:	ddaf      	ble.n	8004b4a <__sflush_r+0x4a>
 8004bea:	4643      	mov	r3, r8
 8004bec:	463a      	mov	r2, r7
 8004bee:	6a21      	ldr	r1, [r4, #32]
 8004bf0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004bf2:	4628      	mov	r0, r5
 8004bf4:	47b0      	blx	r6
 8004bf6:	2800      	cmp	r0, #0
 8004bf8:	dcf1      	bgt.n	8004bde <__sflush_r+0xde>
 8004bfa:	89a3      	ldrh	r3, [r4, #12]
 8004bfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c00:	81a3      	strh	r3, [r4, #12]
 8004c02:	f04f 30ff 	mov.w	r0, #4294967295
 8004c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c0a:	bf00      	nop
 8004c0c:	20400001 	.word	0x20400001

08004c10 <_fflush_r>:
 8004c10:	b538      	push	{r3, r4, r5, lr}
 8004c12:	690b      	ldr	r3, [r1, #16]
 8004c14:	4605      	mov	r5, r0
 8004c16:	460c      	mov	r4, r1
 8004c18:	b1db      	cbz	r3, 8004c52 <_fflush_r+0x42>
 8004c1a:	b118      	cbz	r0, 8004c24 <_fflush_r+0x14>
 8004c1c:	6983      	ldr	r3, [r0, #24]
 8004c1e:	b90b      	cbnz	r3, 8004c24 <_fflush_r+0x14>
 8004c20:	f000 f860 	bl	8004ce4 <__sinit>
 8004c24:	4b0c      	ldr	r3, [pc, #48]	; (8004c58 <_fflush_r+0x48>)
 8004c26:	429c      	cmp	r4, r3
 8004c28:	d101      	bne.n	8004c2e <_fflush_r+0x1e>
 8004c2a:	686c      	ldr	r4, [r5, #4]
 8004c2c:	e008      	b.n	8004c40 <_fflush_r+0x30>
 8004c2e:	4b0b      	ldr	r3, [pc, #44]	; (8004c5c <_fflush_r+0x4c>)
 8004c30:	429c      	cmp	r4, r3
 8004c32:	d101      	bne.n	8004c38 <_fflush_r+0x28>
 8004c34:	68ac      	ldr	r4, [r5, #8]
 8004c36:	e003      	b.n	8004c40 <_fflush_r+0x30>
 8004c38:	4b09      	ldr	r3, [pc, #36]	; (8004c60 <_fflush_r+0x50>)
 8004c3a:	429c      	cmp	r4, r3
 8004c3c:	bf08      	it	eq
 8004c3e:	68ec      	ldreq	r4, [r5, #12]
 8004c40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c44:	b12b      	cbz	r3, 8004c52 <_fflush_r+0x42>
 8004c46:	4621      	mov	r1, r4
 8004c48:	4628      	mov	r0, r5
 8004c4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c4e:	f7ff bf57 	b.w	8004b00 <__sflush_r>
 8004c52:	2000      	movs	r0, #0
 8004c54:	bd38      	pop	{r3, r4, r5, pc}
 8004c56:	bf00      	nop
 8004c58:	08005694 	.word	0x08005694
 8004c5c:	080056b4 	.word	0x080056b4
 8004c60:	080056d4 	.word	0x080056d4

08004c64 <_cleanup_r>:
 8004c64:	4901      	ldr	r1, [pc, #4]	; (8004c6c <_cleanup_r+0x8>)
 8004c66:	f000 b8a9 	b.w	8004dbc <_fwalk_reent>
 8004c6a:	bf00      	nop
 8004c6c:	08004c11 	.word	0x08004c11

08004c70 <std.isra.0>:
 8004c70:	2300      	movs	r3, #0
 8004c72:	b510      	push	{r4, lr}
 8004c74:	4604      	mov	r4, r0
 8004c76:	6003      	str	r3, [r0, #0]
 8004c78:	6043      	str	r3, [r0, #4]
 8004c7a:	6083      	str	r3, [r0, #8]
 8004c7c:	8181      	strh	r1, [r0, #12]
 8004c7e:	6643      	str	r3, [r0, #100]	; 0x64
 8004c80:	81c2      	strh	r2, [r0, #14]
 8004c82:	6103      	str	r3, [r0, #16]
 8004c84:	6143      	str	r3, [r0, #20]
 8004c86:	6183      	str	r3, [r0, #24]
 8004c88:	4619      	mov	r1, r3
 8004c8a:	2208      	movs	r2, #8
 8004c8c:	305c      	adds	r0, #92	; 0x5c
 8004c8e:	f7ff fd36 	bl	80046fe <memset>
 8004c92:	4b05      	ldr	r3, [pc, #20]	; (8004ca8 <std.isra.0+0x38>)
 8004c94:	6263      	str	r3, [r4, #36]	; 0x24
 8004c96:	4b05      	ldr	r3, [pc, #20]	; (8004cac <std.isra.0+0x3c>)
 8004c98:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c9a:	4b05      	ldr	r3, [pc, #20]	; (8004cb0 <std.isra.0+0x40>)
 8004c9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c9e:	4b05      	ldr	r3, [pc, #20]	; (8004cb4 <std.isra.0+0x44>)
 8004ca0:	6224      	str	r4, [r4, #32]
 8004ca2:	6323      	str	r3, [r4, #48]	; 0x30
 8004ca4:	bd10      	pop	{r4, pc}
 8004ca6:	bf00      	nop
 8004ca8:	08005481 	.word	0x08005481
 8004cac:	080054a3 	.word	0x080054a3
 8004cb0:	080054db 	.word	0x080054db
 8004cb4:	080054ff 	.word	0x080054ff

08004cb8 <__sfmoreglue>:
 8004cb8:	b570      	push	{r4, r5, r6, lr}
 8004cba:	2368      	movs	r3, #104	; 0x68
 8004cbc:	1e4d      	subs	r5, r1, #1
 8004cbe:	435d      	muls	r5, r3
 8004cc0:	460e      	mov	r6, r1
 8004cc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004cc6:	f7ff fd71 	bl	80047ac <_malloc_r>
 8004cca:	4604      	mov	r4, r0
 8004ccc:	b140      	cbz	r0, 8004ce0 <__sfmoreglue+0x28>
 8004cce:	2100      	movs	r1, #0
 8004cd0:	e880 0042 	stmia.w	r0, {r1, r6}
 8004cd4:	300c      	adds	r0, #12
 8004cd6:	60a0      	str	r0, [r4, #8]
 8004cd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004cdc:	f7ff fd0f 	bl	80046fe <memset>
 8004ce0:	4620      	mov	r0, r4
 8004ce2:	bd70      	pop	{r4, r5, r6, pc}

08004ce4 <__sinit>:
 8004ce4:	6983      	ldr	r3, [r0, #24]
 8004ce6:	b510      	push	{r4, lr}
 8004ce8:	4604      	mov	r4, r0
 8004cea:	bb33      	cbnz	r3, 8004d3a <__sinit+0x56>
 8004cec:	6483      	str	r3, [r0, #72]	; 0x48
 8004cee:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004cf0:	6503      	str	r3, [r0, #80]	; 0x50
 8004cf2:	4b12      	ldr	r3, [pc, #72]	; (8004d3c <__sinit+0x58>)
 8004cf4:	4a12      	ldr	r2, [pc, #72]	; (8004d40 <__sinit+0x5c>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6282      	str	r2, [r0, #40]	; 0x28
 8004cfa:	4298      	cmp	r0, r3
 8004cfc:	bf04      	itt	eq
 8004cfe:	2301      	moveq	r3, #1
 8004d00:	6183      	streq	r3, [r0, #24]
 8004d02:	f000 f81f 	bl	8004d44 <__sfp>
 8004d06:	6060      	str	r0, [r4, #4]
 8004d08:	4620      	mov	r0, r4
 8004d0a:	f000 f81b 	bl	8004d44 <__sfp>
 8004d0e:	60a0      	str	r0, [r4, #8]
 8004d10:	4620      	mov	r0, r4
 8004d12:	f000 f817 	bl	8004d44 <__sfp>
 8004d16:	2200      	movs	r2, #0
 8004d18:	60e0      	str	r0, [r4, #12]
 8004d1a:	2104      	movs	r1, #4
 8004d1c:	6860      	ldr	r0, [r4, #4]
 8004d1e:	f7ff ffa7 	bl	8004c70 <std.isra.0>
 8004d22:	2201      	movs	r2, #1
 8004d24:	2109      	movs	r1, #9
 8004d26:	68a0      	ldr	r0, [r4, #8]
 8004d28:	f7ff ffa2 	bl	8004c70 <std.isra.0>
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	2112      	movs	r1, #18
 8004d30:	68e0      	ldr	r0, [r4, #12]
 8004d32:	f7ff ff9d 	bl	8004c70 <std.isra.0>
 8004d36:	2301      	movs	r3, #1
 8004d38:	61a3      	str	r3, [r4, #24]
 8004d3a:	bd10      	pop	{r4, pc}
 8004d3c:	08005690 	.word	0x08005690
 8004d40:	08004c65 	.word	0x08004c65

08004d44 <__sfp>:
 8004d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d46:	4b1c      	ldr	r3, [pc, #112]	; (8004db8 <__sfp+0x74>)
 8004d48:	681e      	ldr	r6, [r3, #0]
 8004d4a:	69b3      	ldr	r3, [r6, #24]
 8004d4c:	4607      	mov	r7, r0
 8004d4e:	b913      	cbnz	r3, 8004d56 <__sfp+0x12>
 8004d50:	4630      	mov	r0, r6
 8004d52:	f7ff ffc7 	bl	8004ce4 <__sinit>
 8004d56:	3648      	adds	r6, #72	; 0x48
 8004d58:	68b4      	ldr	r4, [r6, #8]
 8004d5a:	6873      	ldr	r3, [r6, #4]
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	d404      	bmi.n	8004d6a <__sfp+0x26>
 8004d60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004d64:	b17d      	cbz	r5, 8004d86 <__sfp+0x42>
 8004d66:	3468      	adds	r4, #104	; 0x68
 8004d68:	e7f8      	b.n	8004d5c <__sfp+0x18>
 8004d6a:	6833      	ldr	r3, [r6, #0]
 8004d6c:	b10b      	cbz	r3, 8004d72 <__sfp+0x2e>
 8004d6e:	6836      	ldr	r6, [r6, #0]
 8004d70:	e7f2      	b.n	8004d58 <__sfp+0x14>
 8004d72:	2104      	movs	r1, #4
 8004d74:	4638      	mov	r0, r7
 8004d76:	f7ff ff9f 	bl	8004cb8 <__sfmoreglue>
 8004d7a:	6030      	str	r0, [r6, #0]
 8004d7c:	2800      	cmp	r0, #0
 8004d7e:	d1f6      	bne.n	8004d6e <__sfp+0x2a>
 8004d80:	230c      	movs	r3, #12
 8004d82:	603b      	str	r3, [r7, #0]
 8004d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d8a:	81e3      	strh	r3, [r4, #14]
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	81a3      	strh	r3, [r4, #12]
 8004d90:	6665      	str	r5, [r4, #100]	; 0x64
 8004d92:	6025      	str	r5, [r4, #0]
 8004d94:	60a5      	str	r5, [r4, #8]
 8004d96:	6065      	str	r5, [r4, #4]
 8004d98:	6125      	str	r5, [r4, #16]
 8004d9a:	6165      	str	r5, [r4, #20]
 8004d9c:	61a5      	str	r5, [r4, #24]
 8004d9e:	2208      	movs	r2, #8
 8004da0:	4629      	mov	r1, r5
 8004da2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004da6:	f7ff fcaa 	bl	80046fe <memset>
 8004daa:	6365      	str	r5, [r4, #52]	; 0x34
 8004dac:	63a5      	str	r5, [r4, #56]	; 0x38
 8004dae:	64a5      	str	r5, [r4, #72]	; 0x48
 8004db0:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004db2:	4620      	mov	r0, r4
 8004db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004db6:	bf00      	nop
 8004db8:	08005690 	.word	0x08005690

08004dbc <_fwalk_reent>:
 8004dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dc0:	4680      	mov	r8, r0
 8004dc2:	4689      	mov	r9, r1
 8004dc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004dc8:	2600      	movs	r6, #0
 8004dca:	b194      	cbz	r4, 8004df2 <_fwalk_reent+0x36>
 8004dcc:	68a5      	ldr	r5, [r4, #8]
 8004dce:	6867      	ldr	r7, [r4, #4]
 8004dd0:	3f01      	subs	r7, #1
 8004dd2:	d40c      	bmi.n	8004dee <_fwalk_reent+0x32>
 8004dd4:	89ab      	ldrh	r3, [r5, #12]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d907      	bls.n	8004dea <_fwalk_reent+0x2e>
 8004dda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004dde:	3301      	adds	r3, #1
 8004de0:	d003      	beq.n	8004dea <_fwalk_reent+0x2e>
 8004de2:	4629      	mov	r1, r5
 8004de4:	4640      	mov	r0, r8
 8004de6:	47c8      	blx	r9
 8004de8:	4306      	orrs	r6, r0
 8004dea:	3568      	adds	r5, #104	; 0x68
 8004dec:	e7f0      	b.n	8004dd0 <_fwalk_reent+0x14>
 8004dee:	6824      	ldr	r4, [r4, #0]
 8004df0:	e7eb      	b.n	8004dca <_fwalk_reent+0xe>
 8004df2:	4630      	mov	r0, r6
 8004df4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004df8 <__swhatbuf_r>:
 8004df8:	b570      	push	{r4, r5, r6, lr}
 8004dfa:	460e      	mov	r6, r1
 8004dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e00:	2900      	cmp	r1, #0
 8004e02:	b090      	sub	sp, #64	; 0x40
 8004e04:	4614      	mov	r4, r2
 8004e06:	461d      	mov	r5, r3
 8004e08:	da06      	bge.n	8004e18 <__swhatbuf_r+0x20>
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	602b      	str	r3, [r5, #0]
 8004e0e:	89b3      	ldrh	r3, [r6, #12]
 8004e10:	061a      	lsls	r2, r3, #24
 8004e12:	d50e      	bpl.n	8004e32 <__swhatbuf_r+0x3a>
 8004e14:	2340      	movs	r3, #64	; 0x40
 8004e16:	e00e      	b.n	8004e36 <__swhatbuf_r+0x3e>
 8004e18:	aa01      	add	r2, sp, #4
 8004e1a:	f000 fb97 	bl	800554c <_fstat_r>
 8004e1e:	2800      	cmp	r0, #0
 8004e20:	dbf3      	blt.n	8004e0a <__swhatbuf_r+0x12>
 8004e22:	9a02      	ldr	r2, [sp, #8]
 8004e24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004e28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004e2c:	425a      	negs	r2, r3
 8004e2e:	415a      	adcs	r2, r3
 8004e30:	602a      	str	r2, [r5, #0]
 8004e32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e36:	2000      	movs	r0, #0
 8004e38:	6023      	str	r3, [r4, #0]
 8004e3a:	b010      	add	sp, #64	; 0x40
 8004e3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004e40 <__smakebuf_r>:
 8004e40:	898b      	ldrh	r3, [r1, #12]
 8004e42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e44:	079e      	lsls	r6, r3, #30
 8004e46:	4605      	mov	r5, r0
 8004e48:	460c      	mov	r4, r1
 8004e4a:	d410      	bmi.n	8004e6e <__smakebuf_r+0x2e>
 8004e4c:	ab01      	add	r3, sp, #4
 8004e4e:	466a      	mov	r2, sp
 8004e50:	f7ff ffd2 	bl	8004df8 <__swhatbuf_r>
 8004e54:	9900      	ldr	r1, [sp, #0]
 8004e56:	4606      	mov	r6, r0
 8004e58:	4628      	mov	r0, r5
 8004e5a:	f7ff fca7 	bl	80047ac <_malloc_r>
 8004e5e:	b968      	cbnz	r0, 8004e7c <__smakebuf_r+0x3c>
 8004e60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e64:	059a      	lsls	r2, r3, #22
 8004e66:	d422      	bmi.n	8004eae <__smakebuf_r+0x6e>
 8004e68:	f043 0302 	orr.w	r3, r3, #2
 8004e6c:	81a3      	strh	r3, [r4, #12]
 8004e6e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004e72:	6023      	str	r3, [r4, #0]
 8004e74:	6123      	str	r3, [r4, #16]
 8004e76:	2301      	movs	r3, #1
 8004e78:	6163      	str	r3, [r4, #20]
 8004e7a:	e018      	b.n	8004eae <__smakebuf_r+0x6e>
 8004e7c:	4b0d      	ldr	r3, [pc, #52]	; (8004eb4 <__smakebuf_r+0x74>)
 8004e7e:	62ab      	str	r3, [r5, #40]	; 0x28
 8004e80:	89a3      	ldrh	r3, [r4, #12]
 8004e82:	6020      	str	r0, [r4, #0]
 8004e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e88:	81a3      	strh	r3, [r4, #12]
 8004e8a:	9b00      	ldr	r3, [sp, #0]
 8004e8c:	6163      	str	r3, [r4, #20]
 8004e8e:	9b01      	ldr	r3, [sp, #4]
 8004e90:	6120      	str	r0, [r4, #16]
 8004e92:	b14b      	cbz	r3, 8004ea8 <__smakebuf_r+0x68>
 8004e94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e98:	4628      	mov	r0, r5
 8004e9a:	f000 fb69 	bl	8005570 <_isatty_r>
 8004e9e:	b118      	cbz	r0, 8004ea8 <__smakebuf_r+0x68>
 8004ea0:	89a3      	ldrh	r3, [r4, #12]
 8004ea2:	f043 0301 	orr.w	r3, r3, #1
 8004ea6:	81a3      	strh	r3, [r4, #12]
 8004ea8:	89a0      	ldrh	r0, [r4, #12]
 8004eaa:	4330      	orrs	r0, r6
 8004eac:	81a0      	strh	r0, [r4, #12]
 8004eae:	b002      	add	sp, #8
 8004eb0:	bd70      	pop	{r4, r5, r6, pc}
 8004eb2:	bf00      	nop
 8004eb4:	08004c65 	.word	0x08004c65

08004eb8 <__malloc_lock>:
 8004eb8:	4770      	bx	lr

08004eba <__malloc_unlock>:
 8004eba:	4770      	bx	lr

08004ebc <__sfputc_r>:
 8004ebc:	6893      	ldr	r3, [r2, #8]
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	b410      	push	{r4}
 8004ec4:	6093      	str	r3, [r2, #8]
 8004ec6:	da09      	bge.n	8004edc <__sfputc_r+0x20>
 8004ec8:	6994      	ldr	r4, [r2, #24]
 8004eca:	42a3      	cmp	r3, r4
 8004ecc:	db02      	blt.n	8004ed4 <__sfputc_r+0x18>
 8004ece:	b2cb      	uxtb	r3, r1
 8004ed0:	2b0a      	cmp	r3, #10
 8004ed2:	d103      	bne.n	8004edc <__sfputc_r+0x20>
 8004ed4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ed8:	f7ff bd50 	b.w	800497c <__swbuf_r>
 8004edc:	6813      	ldr	r3, [r2, #0]
 8004ede:	1c58      	adds	r0, r3, #1
 8004ee0:	6010      	str	r0, [r2, #0]
 8004ee2:	7019      	strb	r1, [r3, #0]
 8004ee4:	b2c8      	uxtb	r0, r1
 8004ee6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <__sfputs_r>:
 8004eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eee:	4606      	mov	r6, r0
 8004ef0:	460f      	mov	r7, r1
 8004ef2:	4614      	mov	r4, r2
 8004ef4:	18d5      	adds	r5, r2, r3
 8004ef6:	42ac      	cmp	r4, r5
 8004ef8:	d008      	beq.n	8004f0c <__sfputs_r+0x20>
 8004efa:	463a      	mov	r2, r7
 8004efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f00:	4630      	mov	r0, r6
 8004f02:	f7ff ffdb 	bl	8004ebc <__sfputc_r>
 8004f06:	1c43      	adds	r3, r0, #1
 8004f08:	d1f5      	bne.n	8004ef6 <__sfputs_r+0xa>
 8004f0a:	e000      	b.n	8004f0e <__sfputs_r+0x22>
 8004f0c:	2000      	movs	r0, #0
 8004f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004f10 <_vfiprintf_r>:
 8004f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f14:	b09d      	sub	sp, #116	; 0x74
 8004f16:	460c      	mov	r4, r1
 8004f18:	4617      	mov	r7, r2
 8004f1a:	9303      	str	r3, [sp, #12]
 8004f1c:	4606      	mov	r6, r0
 8004f1e:	b118      	cbz	r0, 8004f28 <_vfiprintf_r+0x18>
 8004f20:	6983      	ldr	r3, [r0, #24]
 8004f22:	b90b      	cbnz	r3, 8004f28 <_vfiprintf_r+0x18>
 8004f24:	f7ff fede 	bl	8004ce4 <__sinit>
 8004f28:	4b7f      	ldr	r3, [pc, #508]	; (8005128 <_vfiprintf_r+0x218>)
 8004f2a:	429c      	cmp	r4, r3
 8004f2c:	d101      	bne.n	8004f32 <_vfiprintf_r+0x22>
 8004f2e:	6874      	ldr	r4, [r6, #4]
 8004f30:	e008      	b.n	8004f44 <_vfiprintf_r+0x34>
 8004f32:	4b7e      	ldr	r3, [pc, #504]	; (800512c <_vfiprintf_r+0x21c>)
 8004f34:	429c      	cmp	r4, r3
 8004f36:	d101      	bne.n	8004f3c <_vfiprintf_r+0x2c>
 8004f38:	68b4      	ldr	r4, [r6, #8]
 8004f3a:	e003      	b.n	8004f44 <_vfiprintf_r+0x34>
 8004f3c:	4b7c      	ldr	r3, [pc, #496]	; (8005130 <_vfiprintf_r+0x220>)
 8004f3e:	429c      	cmp	r4, r3
 8004f40:	bf08      	it	eq
 8004f42:	68f4      	ldreq	r4, [r6, #12]
 8004f44:	89a3      	ldrh	r3, [r4, #12]
 8004f46:	0718      	lsls	r0, r3, #28
 8004f48:	d50c      	bpl.n	8004f64 <_vfiprintf_r+0x54>
 8004f4a:	6923      	ldr	r3, [r4, #16]
 8004f4c:	b153      	cbz	r3, 8004f64 <_vfiprintf_r+0x54>
 8004f4e:	2300      	movs	r3, #0
 8004f50:	9309      	str	r3, [sp, #36]	; 0x24
 8004f52:	2320      	movs	r3, #32
 8004f54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f58:	2330      	movs	r3, #48	; 0x30
 8004f5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f5e:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 8005134 <_vfiprintf_r+0x224>
 8004f62:	e044      	b.n	8004fee <_vfiprintf_r+0xde>
 8004f64:	4621      	mov	r1, r4
 8004f66:	4630      	mov	r0, r6
 8004f68:	f7ff fd5c 	bl	8004a24 <__swsetup_r>
 8004f6c:	2800      	cmp	r0, #0
 8004f6e:	d0ee      	beq.n	8004f4e <_vfiprintf_r+0x3e>
 8004f70:	f04f 30ff 	mov.w	r0, #4294967295
 8004f74:	e0d5      	b.n	8005122 <_vfiprintf_r+0x212>
 8004f76:	9a03      	ldr	r2, [sp, #12]
 8004f78:	1d11      	adds	r1, r2, #4
 8004f7a:	6812      	ldr	r2, [r2, #0]
 8004f7c:	9103      	str	r1, [sp, #12]
 8004f7e:	2a00      	cmp	r2, #0
 8004f80:	f280 808c 	bge.w	800509c <_vfiprintf_r+0x18c>
 8004f84:	4252      	negs	r2, r2
 8004f86:	f043 0002 	orr.w	r0, r3, #2
 8004f8a:	9207      	str	r2, [sp, #28]
 8004f8c:	9004      	str	r0, [sp, #16]
 8004f8e:	f898 3000 	ldrb.w	r3, [r8]
 8004f92:	2b2e      	cmp	r3, #46	; 0x2e
 8004f94:	f000 8084 	beq.w	80050a0 <_vfiprintf_r+0x190>
 8004f98:	2203      	movs	r2, #3
 8004f9a:	f898 1000 	ldrb.w	r1, [r8]
 8004f9e:	4865      	ldr	r0, [pc, #404]	; (8005134 <_vfiprintf_r+0x224>)
 8004fa0:	f7fb f93e 	bl	8000220 <memchr>
 8004fa4:	b148      	cbz	r0, 8004fba <_vfiprintf_r+0xaa>
 8004fa6:	2340      	movs	r3, #64	; 0x40
 8004fa8:	ebcb 0000 	rsb	r0, fp, r0
 8004fac:	fa03 f000 	lsl.w	r0, r3, r0
 8004fb0:	9b04      	ldr	r3, [sp, #16]
 8004fb2:	4318      	orrs	r0, r3
 8004fb4:	9004      	str	r0, [sp, #16]
 8004fb6:	f108 0801 	add.w	r8, r8, #1
 8004fba:	f898 1000 	ldrb.w	r1, [r8]
 8004fbe:	485e      	ldr	r0, [pc, #376]	; (8005138 <_vfiprintf_r+0x228>)
 8004fc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fc4:	2206      	movs	r2, #6
 8004fc6:	f108 0701 	add.w	r7, r8, #1
 8004fca:	f7fb f929 	bl	8000220 <memchr>
 8004fce:	2800      	cmp	r0, #0
 8004fd0:	f000 8095 	beq.w	80050fe <_vfiprintf_r+0x1ee>
 8004fd4:	4b59      	ldr	r3, [pc, #356]	; (800513c <_vfiprintf_r+0x22c>)
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f040 8088 	bne.w	80050ec <_vfiprintf_r+0x1dc>
 8004fdc:	9b03      	ldr	r3, [sp, #12]
 8004fde:	3307      	adds	r3, #7
 8004fe0:	f023 0307 	bic.w	r3, r3, #7
 8004fe4:	3308      	adds	r3, #8
 8004fe6:	9303      	str	r3, [sp, #12]
 8004fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fea:	4453      	add	r3, sl
 8004fec:	9309      	str	r3, [sp, #36]	; 0x24
 8004fee:	46b8      	mov	r8, r7
 8004ff0:	4645      	mov	r5, r8
 8004ff2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004ff6:	b91b      	cbnz	r3, 8005000 <_vfiprintf_r+0xf0>
 8004ff8:	ebb8 0907 	subs.w	r9, r8, r7
 8004ffc:	d00f      	beq.n	800501e <_vfiprintf_r+0x10e>
 8004ffe:	e003      	b.n	8005008 <_vfiprintf_r+0xf8>
 8005000:	2b25      	cmp	r3, #37	; 0x25
 8005002:	d0f9      	beq.n	8004ff8 <_vfiprintf_r+0xe8>
 8005004:	46a8      	mov	r8, r5
 8005006:	e7f3      	b.n	8004ff0 <_vfiprintf_r+0xe0>
 8005008:	464b      	mov	r3, r9
 800500a:	463a      	mov	r2, r7
 800500c:	4621      	mov	r1, r4
 800500e:	4630      	mov	r0, r6
 8005010:	f7ff ff6c 	bl	8004eec <__sfputs_r>
 8005014:	3001      	adds	r0, #1
 8005016:	d07f      	beq.n	8005118 <_vfiprintf_r+0x208>
 8005018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800501a:	444b      	add	r3, r9
 800501c:	9309      	str	r3, [sp, #36]	; 0x24
 800501e:	f898 3000 	ldrb.w	r3, [r8]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d078      	beq.n	8005118 <_vfiprintf_r+0x208>
 8005026:	2300      	movs	r3, #0
 8005028:	f04f 32ff 	mov.w	r2, #4294967295
 800502c:	9304      	str	r3, [sp, #16]
 800502e:	9307      	str	r3, [sp, #28]
 8005030:	9205      	str	r2, [sp, #20]
 8005032:	9306      	str	r3, [sp, #24]
 8005034:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005038:	931a      	str	r3, [sp, #104]	; 0x68
 800503a:	2701      	movs	r7, #1
 800503c:	2205      	movs	r2, #5
 800503e:	7829      	ldrb	r1, [r5, #0]
 8005040:	483f      	ldr	r0, [pc, #252]	; (8005140 <_vfiprintf_r+0x230>)
 8005042:	f7fb f8ed 	bl	8000220 <memchr>
 8005046:	f105 0801 	add.w	r8, r5, #1
 800504a:	9b04      	ldr	r3, [sp, #16]
 800504c:	b138      	cbz	r0, 800505e <_vfiprintf_r+0x14e>
 800504e:	4a3c      	ldr	r2, [pc, #240]	; (8005140 <_vfiprintf_r+0x230>)
 8005050:	1a80      	subs	r0, r0, r2
 8005052:	fa07 f000 	lsl.w	r0, r7, r0
 8005056:	4318      	orrs	r0, r3
 8005058:	9004      	str	r0, [sp, #16]
 800505a:	4645      	mov	r5, r8
 800505c:	e7ee      	b.n	800503c <_vfiprintf_r+0x12c>
 800505e:	06d9      	lsls	r1, r3, #27
 8005060:	bf44      	itt	mi
 8005062:	2220      	movmi	r2, #32
 8005064:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005068:	071a      	lsls	r2, r3, #28
 800506a:	bf44      	itt	mi
 800506c:	222b      	movmi	r2, #43	; 0x2b
 800506e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005072:	782a      	ldrb	r2, [r5, #0]
 8005074:	2a2a      	cmp	r2, #42	; 0x2a
 8005076:	f43f af7e 	beq.w	8004f76 <_vfiprintf_r+0x66>
 800507a:	9a07      	ldr	r2, [sp, #28]
 800507c:	2100      	movs	r1, #0
 800507e:	200a      	movs	r0, #10
 8005080:	46a8      	mov	r8, r5
 8005082:	3501      	adds	r5, #1
 8005084:	f898 3000 	ldrb.w	r3, [r8]
 8005088:	3b30      	subs	r3, #48	; 0x30
 800508a:	2b09      	cmp	r3, #9
 800508c:	d803      	bhi.n	8005096 <_vfiprintf_r+0x186>
 800508e:	fb00 3202 	mla	r2, r0, r2, r3
 8005092:	2101      	movs	r1, #1
 8005094:	e7f4      	b.n	8005080 <_vfiprintf_r+0x170>
 8005096:	2900      	cmp	r1, #0
 8005098:	f43f af79 	beq.w	8004f8e <_vfiprintf_r+0x7e>
 800509c:	9207      	str	r2, [sp, #28]
 800509e:	e776      	b.n	8004f8e <_vfiprintf_r+0x7e>
 80050a0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80050a4:	2b2a      	cmp	r3, #42	; 0x2a
 80050a6:	d10b      	bne.n	80050c0 <_vfiprintf_r+0x1b0>
 80050a8:	9b03      	ldr	r3, [sp, #12]
 80050aa:	1d1a      	adds	r2, r3, #4
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	9203      	str	r2, [sp, #12]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	bfb8      	it	lt
 80050b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80050b8:	f108 0802 	add.w	r8, r8, #2
 80050bc:	9305      	str	r3, [sp, #20]
 80050be:	e76b      	b.n	8004f98 <_vfiprintf_r+0x88>
 80050c0:	2300      	movs	r3, #0
 80050c2:	9305      	str	r3, [sp, #20]
 80050c4:	f108 0001 	add.w	r0, r8, #1
 80050c8:	4619      	mov	r1, r3
 80050ca:	250a      	movs	r5, #10
 80050cc:	4680      	mov	r8, r0
 80050ce:	3001      	adds	r0, #1
 80050d0:	f898 2000 	ldrb.w	r2, [r8]
 80050d4:	3a30      	subs	r2, #48	; 0x30
 80050d6:	2a09      	cmp	r2, #9
 80050d8:	d803      	bhi.n	80050e2 <_vfiprintf_r+0x1d2>
 80050da:	fb05 2101 	mla	r1, r5, r1, r2
 80050de:	2301      	movs	r3, #1
 80050e0:	e7f4      	b.n	80050cc <_vfiprintf_r+0x1bc>
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	f43f af58 	beq.w	8004f98 <_vfiprintf_r+0x88>
 80050e8:	9105      	str	r1, [sp, #20]
 80050ea:	e755      	b.n	8004f98 <_vfiprintf_r+0x88>
 80050ec:	ab03      	add	r3, sp, #12
 80050ee:	9300      	str	r3, [sp, #0]
 80050f0:	4622      	mov	r2, r4
 80050f2:	4b14      	ldr	r3, [pc, #80]	; (8005144 <_vfiprintf_r+0x234>)
 80050f4:	a904      	add	r1, sp, #16
 80050f6:	4630      	mov	r0, r6
 80050f8:	f3af 8000 	nop.w
 80050fc:	e007      	b.n	800510e <_vfiprintf_r+0x1fe>
 80050fe:	ab03      	add	r3, sp, #12
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	4622      	mov	r2, r4
 8005104:	4b0f      	ldr	r3, [pc, #60]	; (8005144 <_vfiprintf_r+0x234>)
 8005106:	a904      	add	r1, sp, #16
 8005108:	4630      	mov	r0, r6
 800510a:	f000 f893 	bl	8005234 <_printf_i>
 800510e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005112:	4682      	mov	sl, r0
 8005114:	f47f af68 	bne.w	8004fe8 <_vfiprintf_r+0xd8>
 8005118:	89a3      	ldrh	r3, [r4, #12]
 800511a:	065b      	lsls	r3, r3, #25
 800511c:	f53f af28 	bmi.w	8004f70 <_vfiprintf_r+0x60>
 8005120:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005122:	b01d      	add	sp, #116	; 0x74
 8005124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005128:	08005694 	.word	0x08005694
 800512c:	080056b4 	.word	0x080056b4
 8005130:	080056d4 	.word	0x080056d4
 8005134:	080056fa 	.word	0x080056fa
 8005138:	080056fe 	.word	0x080056fe
 800513c:	00000000 	.word	0x00000000
 8005140:	080056f4 	.word	0x080056f4
 8005144:	08004eed 	.word	0x08004eed

08005148 <_printf_common>:
 8005148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800514c:	4691      	mov	r9, r2
 800514e:	461f      	mov	r7, r3
 8005150:	690a      	ldr	r2, [r1, #16]
 8005152:	688b      	ldr	r3, [r1, #8]
 8005154:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005158:	4293      	cmp	r3, r2
 800515a:	bfb8      	it	lt
 800515c:	4613      	movlt	r3, r2
 800515e:	f8c9 3000 	str.w	r3, [r9]
 8005162:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005166:	4606      	mov	r6, r0
 8005168:	460c      	mov	r4, r1
 800516a:	b112      	cbz	r2, 8005172 <_printf_common+0x2a>
 800516c:	3301      	adds	r3, #1
 800516e:	f8c9 3000 	str.w	r3, [r9]
 8005172:	6823      	ldr	r3, [r4, #0]
 8005174:	0699      	lsls	r1, r3, #26
 8005176:	bf42      	ittt	mi
 8005178:	f8d9 3000 	ldrmi.w	r3, [r9]
 800517c:	3302      	addmi	r3, #2
 800517e:	f8c9 3000 	strmi.w	r3, [r9]
 8005182:	6825      	ldr	r5, [r4, #0]
 8005184:	f015 0506 	ands.w	r5, r5, #6
 8005188:	d110      	bne.n	80051ac <_printf_common+0x64>
 800518a:	f104 0a19 	add.w	sl, r4, #25
 800518e:	e007      	b.n	80051a0 <_printf_common+0x58>
 8005190:	2301      	movs	r3, #1
 8005192:	4652      	mov	r2, sl
 8005194:	4639      	mov	r1, r7
 8005196:	4630      	mov	r0, r6
 8005198:	47c0      	blx	r8
 800519a:	3001      	adds	r0, #1
 800519c:	d01a      	beq.n	80051d4 <_printf_common+0x8c>
 800519e:	3501      	adds	r5, #1
 80051a0:	68e3      	ldr	r3, [r4, #12]
 80051a2:	f8d9 2000 	ldr.w	r2, [r9]
 80051a6:	1a9b      	subs	r3, r3, r2
 80051a8:	429d      	cmp	r5, r3
 80051aa:	dbf1      	blt.n	8005190 <_printf_common+0x48>
 80051ac:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80051b0:	6822      	ldr	r2, [r4, #0]
 80051b2:	3300      	adds	r3, #0
 80051b4:	bf18      	it	ne
 80051b6:	2301      	movne	r3, #1
 80051b8:	0692      	lsls	r2, r2, #26
 80051ba:	d50f      	bpl.n	80051dc <_printf_common+0x94>
 80051bc:	18e1      	adds	r1, r4, r3
 80051be:	1c5a      	adds	r2, r3, #1
 80051c0:	2030      	movs	r0, #48	; 0x30
 80051c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051c6:	4422      	add	r2, r4
 80051c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051d0:	3302      	adds	r3, #2
 80051d2:	e003      	b.n	80051dc <_printf_common+0x94>
 80051d4:	f04f 30ff 	mov.w	r0, #4294967295
 80051d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051e0:	4639      	mov	r1, r7
 80051e2:	4630      	mov	r0, r6
 80051e4:	47c0      	blx	r8
 80051e6:	3001      	adds	r0, #1
 80051e8:	d0f4      	beq.n	80051d4 <_printf_common+0x8c>
 80051ea:	6822      	ldr	r2, [r4, #0]
 80051ec:	f8d9 5000 	ldr.w	r5, [r9]
 80051f0:	68e3      	ldr	r3, [r4, #12]
 80051f2:	f002 0206 	and.w	r2, r2, #6
 80051f6:	2a04      	cmp	r2, #4
 80051f8:	bf08      	it	eq
 80051fa:	1b5d      	subeq	r5, r3, r5
 80051fc:	6922      	ldr	r2, [r4, #16]
 80051fe:	68a3      	ldr	r3, [r4, #8]
 8005200:	bf0c      	ite	eq
 8005202:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005206:	2500      	movne	r5, #0
 8005208:	4293      	cmp	r3, r2
 800520a:	bfc4      	itt	gt
 800520c:	1a9b      	subgt	r3, r3, r2
 800520e:	18ed      	addgt	r5, r5, r3
 8005210:	f04f 0900 	mov.w	r9, #0
 8005214:	341a      	adds	r4, #26
 8005216:	454d      	cmp	r5, r9
 8005218:	d009      	beq.n	800522e <_printf_common+0xe6>
 800521a:	2301      	movs	r3, #1
 800521c:	4622      	mov	r2, r4
 800521e:	4639      	mov	r1, r7
 8005220:	4630      	mov	r0, r6
 8005222:	47c0      	blx	r8
 8005224:	3001      	adds	r0, #1
 8005226:	d0d5      	beq.n	80051d4 <_printf_common+0x8c>
 8005228:	f109 0901 	add.w	r9, r9, #1
 800522c:	e7f3      	b.n	8005216 <_printf_common+0xce>
 800522e:	2000      	movs	r0, #0
 8005230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005234 <_printf_i>:
 8005234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005238:	4617      	mov	r7, r2
 800523a:	7e0a      	ldrb	r2, [r1, #24]
 800523c:	b085      	sub	sp, #20
 800523e:	2a6e      	cmp	r2, #110	; 0x6e
 8005240:	4698      	mov	r8, r3
 8005242:	4606      	mov	r6, r0
 8005244:	460c      	mov	r4, r1
 8005246:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005248:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800524c:	f000 80ae 	beq.w	80053ac <_printf_i+0x178>
 8005250:	d811      	bhi.n	8005276 <_printf_i+0x42>
 8005252:	2a63      	cmp	r2, #99	; 0x63
 8005254:	d022      	beq.n	800529c <_printf_i+0x68>
 8005256:	d809      	bhi.n	800526c <_printf_i+0x38>
 8005258:	2a00      	cmp	r2, #0
 800525a:	f000 80bb 	beq.w	80053d4 <_printf_i+0x1a0>
 800525e:	2a58      	cmp	r2, #88	; 0x58
 8005260:	f040 80ca 	bne.w	80053f8 <_printf_i+0x1c4>
 8005264:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005268:	4983      	ldr	r1, [pc, #524]	; (8005478 <_printf_i+0x244>)
 800526a:	e055      	b.n	8005318 <_printf_i+0xe4>
 800526c:	2a64      	cmp	r2, #100	; 0x64
 800526e:	d01e      	beq.n	80052ae <_printf_i+0x7a>
 8005270:	2a69      	cmp	r2, #105	; 0x69
 8005272:	d01c      	beq.n	80052ae <_printf_i+0x7a>
 8005274:	e0c0      	b.n	80053f8 <_printf_i+0x1c4>
 8005276:	2a73      	cmp	r2, #115	; 0x73
 8005278:	f000 80b0 	beq.w	80053dc <_printf_i+0x1a8>
 800527c:	d809      	bhi.n	8005292 <_printf_i+0x5e>
 800527e:	2a6f      	cmp	r2, #111	; 0x6f
 8005280:	d02e      	beq.n	80052e0 <_printf_i+0xac>
 8005282:	2a70      	cmp	r2, #112	; 0x70
 8005284:	f040 80b8 	bne.w	80053f8 <_printf_i+0x1c4>
 8005288:	680a      	ldr	r2, [r1, #0]
 800528a:	f042 0220 	orr.w	r2, r2, #32
 800528e:	600a      	str	r2, [r1, #0]
 8005290:	e03e      	b.n	8005310 <_printf_i+0xdc>
 8005292:	2a75      	cmp	r2, #117	; 0x75
 8005294:	d024      	beq.n	80052e0 <_printf_i+0xac>
 8005296:	2a78      	cmp	r2, #120	; 0x78
 8005298:	d03a      	beq.n	8005310 <_printf_i+0xdc>
 800529a:	e0ad      	b.n	80053f8 <_printf_i+0x1c4>
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80052a2:	1d11      	adds	r1, r2, #4
 80052a4:	6019      	str	r1, [r3, #0]
 80052a6:	6813      	ldr	r3, [r2, #0]
 80052a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052ac:	e0a8      	b.n	8005400 <_printf_i+0x1cc>
 80052ae:	6821      	ldr	r1, [r4, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80052b6:	d002      	beq.n	80052be <_printf_i+0x8a>
 80052b8:	1d11      	adds	r1, r2, #4
 80052ba:	6019      	str	r1, [r3, #0]
 80052bc:	e008      	b.n	80052d0 <_printf_i+0x9c>
 80052be:	f011 0f40 	tst.w	r1, #64	; 0x40
 80052c2:	f102 0104 	add.w	r1, r2, #4
 80052c6:	6019      	str	r1, [r3, #0]
 80052c8:	d002      	beq.n	80052d0 <_printf_i+0x9c>
 80052ca:	f9b2 3000 	ldrsh.w	r3, [r2]
 80052ce:	e000      	b.n	80052d2 <_printf_i+0x9e>
 80052d0:	6813      	ldr	r3, [r2, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	da3c      	bge.n	8005350 <_printf_i+0x11c>
 80052d6:	222d      	movs	r2, #45	; 0x2d
 80052d8:	425b      	negs	r3, r3
 80052da:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80052de:	e037      	b.n	8005350 <_printf_i+0x11c>
 80052e0:	6821      	ldr	r1, [r4, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80052e8:	d002      	beq.n	80052f0 <_printf_i+0xbc>
 80052ea:	1d11      	adds	r1, r2, #4
 80052ec:	6019      	str	r1, [r3, #0]
 80052ee:	e007      	b.n	8005300 <_printf_i+0xcc>
 80052f0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80052f4:	f102 0104 	add.w	r1, r2, #4
 80052f8:	6019      	str	r1, [r3, #0]
 80052fa:	d001      	beq.n	8005300 <_printf_i+0xcc>
 80052fc:	8813      	ldrh	r3, [r2, #0]
 80052fe:	e000      	b.n	8005302 <_printf_i+0xce>
 8005300:	6813      	ldr	r3, [r2, #0]
 8005302:	7e22      	ldrb	r2, [r4, #24]
 8005304:	495c      	ldr	r1, [pc, #368]	; (8005478 <_printf_i+0x244>)
 8005306:	2a6f      	cmp	r2, #111	; 0x6f
 8005308:	bf14      	ite	ne
 800530a:	220a      	movne	r2, #10
 800530c:	2208      	moveq	r2, #8
 800530e:	e01b      	b.n	8005348 <_printf_i+0x114>
 8005310:	2278      	movs	r2, #120	; 0x78
 8005312:	495a      	ldr	r1, [pc, #360]	; (800547c <_printf_i+0x248>)
 8005314:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005318:	6822      	ldr	r2, [r4, #0]
 800531a:	6818      	ldr	r0, [r3, #0]
 800531c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005320:	f100 0504 	add.w	r5, r0, #4
 8005324:	601d      	str	r5, [r3, #0]
 8005326:	d103      	bne.n	8005330 <_printf_i+0xfc>
 8005328:	0655      	lsls	r5, r2, #25
 800532a:	d501      	bpl.n	8005330 <_printf_i+0xfc>
 800532c:	8803      	ldrh	r3, [r0, #0]
 800532e:	e000      	b.n	8005332 <_printf_i+0xfe>
 8005330:	6803      	ldr	r3, [r0, #0]
 8005332:	07d0      	lsls	r0, r2, #31
 8005334:	bf44      	itt	mi
 8005336:	f042 0220 	orrmi.w	r2, r2, #32
 800533a:	6022      	strmi	r2, [r4, #0]
 800533c:	b91b      	cbnz	r3, 8005346 <_printf_i+0x112>
 800533e:	6822      	ldr	r2, [r4, #0]
 8005340:	f022 0220 	bic.w	r2, r2, #32
 8005344:	6022      	str	r2, [r4, #0]
 8005346:	2210      	movs	r2, #16
 8005348:	2000      	movs	r0, #0
 800534a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800534e:	e001      	b.n	8005354 <_printf_i+0x120>
 8005350:	4949      	ldr	r1, [pc, #292]	; (8005478 <_printf_i+0x244>)
 8005352:	220a      	movs	r2, #10
 8005354:	6865      	ldr	r5, [r4, #4]
 8005356:	60a5      	str	r5, [r4, #8]
 8005358:	2d00      	cmp	r5, #0
 800535a:	db08      	blt.n	800536e <_printf_i+0x13a>
 800535c:	6820      	ldr	r0, [r4, #0]
 800535e:	f020 0004 	bic.w	r0, r0, #4
 8005362:	6020      	str	r0, [r4, #0]
 8005364:	b92b      	cbnz	r3, 8005372 <_printf_i+0x13e>
 8005366:	2d00      	cmp	r5, #0
 8005368:	d17d      	bne.n	8005466 <_printf_i+0x232>
 800536a:	4675      	mov	r5, lr
 800536c:	e00c      	b.n	8005388 <_printf_i+0x154>
 800536e:	2b00      	cmp	r3, #0
 8005370:	d079      	beq.n	8005466 <_printf_i+0x232>
 8005372:	4675      	mov	r5, lr
 8005374:	fbb3 f0f2 	udiv	r0, r3, r2
 8005378:	fb02 3310 	mls	r3, r2, r0, r3
 800537c:	5ccb      	ldrb	r3, [r1, r3]
 800537e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005382:	4603      	mov	r3, r0
 8005384:	2800      	cmp	r0, #0
 8005386:	d1f5      	bne.n	8005374 <_printf_i+0x140>
 8005388:	2a08      	cmp	r2, #8
 800538a:	d10b      	bne.n	80053a4 <_printf_i+0x170>
 800538c:	6823      	ldr	r3, [r4, #0]
 800538e:	07da      	lsls	r2, r3, #31
 8005390:	d508      	bpl.n	80053a4 <_printf_i+0x170>
 8005392:	6923      	ldr	r3, [r4, #16]
 8005394:	6862      	ldr	r2, [r4, #4]
 8005396:	429a      	cmp	r2, r3
 8005398:	bfde      	ittt	le
 800539a:	2330      	movle	r3, #48	; 0x30
 800539c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80053a4:	ebc5 030e 	rsb	r3, r5, lr
 80053a8:	6123      	str	r3, [r4, #16]
 80053aa:	e02e      	b.n	800540a <_printf_i+0x1d6>
 80053ac:	6808      	ldr	r0, [r1, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	6949      	ldr	r1, [r1, #20]
 80053b2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80053b6:	d003      	beq.n	80053c0 <_printf_i+0x18c>
 80053b8:	1d10      	adds	r0, r2, #4
 80053ba:	6018      	str	r0, [r3, #0]
 80053bc:	6813      	ldr	r3, [r2, #0]
 80053be:	e008      	b.n	80053d2 <_printf_i+0x19e>
 80053c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80053c4:	f102 0004 	add.w	r0, r2, #4
 80053c8:	6018      	str	r0, [r3, #0]
 80053ca:	6813      	ldr	r3, [r2, #0]
 80053cc:	d001      	beq.n	80053d2 <_printf_i+0x19e>
 80053ce:	8019      	strh	r1, [r3, #0]
 80053d0:	e000      	b.n	80053d4 <_printf_i+0x1a0>
 80053d2:	6019      	str	r1, [r3, #0]
 80053d4:	2300      	movs	r3, #0
 80053d6:	6123      	str	r3, [r4, #16]
 80053d8:	4675      	mov	r5, lr
 80053da:	e016      	b.n	800540a <_printf_i+0x1d6>
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	1d11      	adds	r1, r2, #4
 80053e0:	6019      	str	r1, [r3, #0]
 80053e2:	6815      	ldr	r5, [r2, #0]
 80053e4:	6862      	ldr	r2, [r4, #4]
 80053e6:	2100      	movs	r1, #0
 80053e8:	4628      	mov	r0, r5
 80053ea:	f7fa ff19 	bl	8000220 <memchr>
 80053ee:	b108      	cbz	r0, 80053f4 <_printf_i+0x1c0>
 80053f0:	1b40      	subs	r0, r0, r5
 80053f2:	6060      	str	r0, [r4, #4]
 80053f4:	6863      	ldr	r3, [r4, #4]
 80053f6:	e004      	b.n	8005402 <_printf_i+0x1ce>
 80053f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053fc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005400:	2301      	movs	r3, #1
 8005402:	6123      	str	r3, [r4, #16]
 8005404:	2300      	movs	r3, #0
 8005406:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800540a:	f8cd 8000 	str.w	r8, [sp]
 800540e:	463b      	mov	r3, r7
 8005410:	aa03      	add	r2, sp, #12
 8005412:	4621      	mov	r1, r4
 8005414:	4630      	mov	r0, r6
 8005416:	f7ff fe97 	bl	8005148 <_printf_common>
 800541a:	3001      	adds	r0, #1
 800541c:	d102      	bne.n	8005424 <_printf_i+0x1f0>
 800541e:	f04f 30ff 	mov.w	r0, #4294967295
 8005422:	e026      	b.n	8005472 <_printf_i+0x23e>
 8005424:	6923      	ldr	r3, [r4, #16]
 8005426:	462a      	mov	r2, r5
 8005428:	4639      	mov	r1, r7
 800542a:	4630      	mov	r0, r6
 800542c:	47c0      	blx	r8
 800542e:	3001      	adds	r0, #1
 8005430:	d0f5      	beq.n	800541e <_printf_i+0x1ea>
 8005432:	6823      	ldr	r3, [r4, #0]
 8005434:	079b      	lsls	r3, r3, #30
 8005436:	d510      	bpl.n	800545a <_printf_i+0x226>
 8005438:	2500      	movs	r5, #0
 800543a:	f104 0919 	add.w	r9, r4, #25
 800543e:	e007      	b.n	8005450 <_printf_i+0x21c>
 8005440:	2301      	movs	r3, #1
 8005442:	464a      	mov	r2, r9
 8005444:	4639      	mov	r1, r7
 8005446:	4630      	mov	r0, r6
 8005448:	47c0      	blx	r8
 800544a:	3001      	adds	r0, #1
 800544c:	d0e7      	beq.n	800541e <_printf_i+0x1ea>
 800544e:	3501      	adds	r5, #1
 8005450:	68e3      	ldr	r3, [r4, #12]
 8005452:	9a03      	ldr	r2, [sp, #12]
 8005454:	1a9b      	subs	r3, r3, r2
 8005456:	429d      	cmp	r5, r3
 8005458:	dbf2      	blt.n	8005440 <_printf_i+0x20c>
 800545a:	68e0      	ldr	r0, [r4, #12]
 800545c:	9b03      	ldr	r3, [sp, #12]
 800545e:	4298      	cmp	r0, r3
 8005460:	bfb8      	it	lt
 8005462:	4618      	movlt	r0, r3
 8005464:	e005      	b.n	8005472 <_printf_i+0x23e>
 8005466:	780b      	ldrb	r3, [r1, #0]
 8005468:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800546c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005470:	e78a      	b.n	8005388 <_printf_i+0x154>
 8005472:	b005      	add	sp, #20
 8005474:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005478:	08005705 	.word	0x08005705
 800547c:	08005716 	.word	0x08005716

08005480 <__sread>:
 8005480:	b510      	push	{r4, lr}
 8005482:	460c      	mov	r4, r1
 8005484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005488:	f000 f894 	bl	80055b4 <_read_r>
 800548c:	2800      	cmp	r0, #0
 800548e:	bfab      	itete	ge
 8005490:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005492:	89a3      	ldrhlt	r3, [r4, #12]
 8005494:	181b      	addge	r3, r3, r0
 8005496:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800549a:	bfac      	ite	ge
 800549c:	6563      	strge	r3, [r4, #84]	; 0x54
 800549e:	81a3      	strhlt	r3, [r4, #12]
 80054a0:	bd10      	pop	{r4, pc}

080054a2 <__swrite>:
 80054a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054a6:	461f      	mov	r7, r3
 80054a8:	898b      	ldrh	r3, [r1, #12]
 80054aa:	05db      	lsls	r3, r3, #23
 80054ac:	4605      	mov	r5, r0
 80054ae:	460c      	mov	r4, r1
 80054b0:	4616      	mov	r6, r2
 80054b2:	d505      	bpl.n	80054c0 <__swrite+0x1e>
 80054b4:	2302      	movs	r3, #2
 80054b6:	2200      	movs	r2, #0
 80054b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054bc:	f000 f868 	bl	8005590 <_lseek_r>
 80054c0:	89a3      	ldrh	r3, [r4, #12]
 80054c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054ca:	81a3      	strh	r3, [r4, #12]
 80054cc:	4632      	mov	r2, r6
 80054ce:	463b      	mov	r3, r7
 80054d0:	4628      	mov	r0, r5
 80054d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054d6:	f000 b817 	b.w	8005508 <_write_r>

080054da <__sseek>:
 80054da:	b510      	push	{r4, lr}
 80054dc:	460c      	mov	r4, r1
 80054de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054e2:	f000 f855 	bl	8005590 <_lseek_r>
 80054e6:	1c43      	adds	r3, r0, #1
 80054e8:	89a3      	ldrh	r3, [r4, #12]
 80054ea:	bf15      	itete	ne
 80054ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80054ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80054f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80054f6:	81a3      	strheq	r3, [r4, #12]
 80054f8:	bf18      	it	ne
 80054fa:	81a3      	strhne	r3, [r4, #12]
 80054fc:	bd10      	pop	{r4, pc}

080054fe <__sclose>:
 80054fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005502:	f000 b813 	b.w	800552c <_close_r>
	...

08005508 <_write_r>:
 8005508:	b538      	push	{r3, r4, r5, lr}
 800550a:	4c07      	ldr	r4, [pc, #28]	; (8005528 <_write_r+0x20>)
 800550c:	4605      	mov	r5, r0
 800550e:	4608      	mov	r0, r1
 8005510:	4611      	mov	r1, r2
 8005512:	2200      	movs	r2, #0
 8005514:	6022      	str	r2, [r4, #0]
 8005516:	461a      	mov	r2, r3
 8005518:	f7ff f818 	bl	800454c <_write>
 800551c:	1c43      	adds	r3, r0, #1
 800551e:	d102      	bne.n	8005526 <_write_r+0x1e>
 8005520:	6823      	ldr	r3, [r4, #0]
 8005522:	b103      	cbz	r3, 8005526 <_write_r+0x1e>
 8005524:	602b      	str	r3, [r5, #0]
 8005526:	bd38      	pop	{r3, r4, r5, pc}
 8005528:	20002bc0 	.word	0x20002bc0

0800552c <_close_r>:
 800552c:	b538      	push	{r3, r4, r5, lr}
 800552e:	4c06      	ldr	r4, [pc, #24]	; (8005548 <_close_r+0x1c>)
 8005530:	2300      	movs	r3, #0
 8005532:	4605      	mov	r5, r0
 8005534:	4608      	mov	r0, r1
 8005536:	6023      	str	r3, [r4, #0]
 8005538:	f7ff f84a 	bl	80045d0 <_close>
 800553c:	1c43      	adds	r3, r0, #1
 800553e:	d102      	bne.n	8005546 <_close_r+0x1a>
 8005540:	6823      	ldr	r3, [r4, #0]
 8005542:	b103      	cbz	r3, 8005546 <_close_r+0x1a>
 8005544:	602b      	str	r3, [r5, #0]
 8005546:	bd38      	pop	{r3, r4, r5, pc}
 8005548:	20002bc0 	.word	0x20002bc0

0800554c <_fstat_r>:
 800554c:	b538      	push	{r3, r4, r5, lr}
 800554e:	4c07      	ldr	r4, [pc, #28]	; (800556c <_fstat_r+0x20>)
 8005550:	2300      	movs	r3, #0
 8005552:	4605      	mov	r5, r0
 8005554:	4608      	mov	r0, r1
 8005556:	4611      	mov	r1, r2
 8005558:	6023      	str	r3, [r4, #0]
 800555a:	f7ff f84b 	bl	80045f4 <_fstat>
 800555e:	1c43      	adds	r3, r0, #1
 8005560:	d102      	bne.n	8005568 <_fstat_r+0x1c>
 8005562:	6823      	ldr	r3, [r4, #0]
 8005564:	b103      	cbz	r3, 8005568 <_fstat_r+0x1c>
 8005566:	602b      	str	r3, [r5, #0]
 8005568:	bd38      	pop	{r3, r4, r5, pc}
 800556a:	bf00      	nop
 800556c:	20002bc0 	.word	0x20002bc0

08005570 <_isatty_r>:
 8005570:	b538      	push	{r3, r4, r5, lr}
 8005572:	4c06      	ldr	r4, [pc, #24]	; (800558c <_isatty_r+0x1c>)
 8005574:	2300      	movs	r3, #0
 8005576:	4605      	mov	r5, r0
 8005578:	4608      	mov	r0, r1
 800557a:	6023      	str	r3, [r4, #0]
 800557c:	f7ff f84c 	bl	8004618 <_isatty>
 8005580:	1c43      	adds	r3, r0, #1
 8005582:	d102      	bne.n	800558a <_isatty_r+0x1a>
 8005584:	6823      	ldr	r3, [r4, #0]
 8005586:	b103      	cbz	r3, 800558a <_isatty_r+0x1a>
 8005588:	602b      	str	r3, [r5, #0]
 800558a:	bd38      	pop	{r3, r4, r5, pc}
 800558c:	20002bc0 	.word	0x20002bc0

08005590 <_lseek_r>:
 8005590:	b538      	push	{r3, r4, r5, lr}
 8005592:	4c07      	ldr	r4, [pc, #28]	; (80055b0 <_lseek_r+0x20>)
 8005594:	4605      	mov	r5, r0
 8005596:	4608      	mov	r0, r1
 8005598:	4611      	mov	r1, r2
 800559a:	2200      	movs	r2, #0
 800559c:	6022      	str	r2, [r4, #0]
 800559e:	461a      	mov	r2, r3
 80055a0:	f7ff f84a 	bl	8004638 <_lseek>
 80055a4:	1c43      	adds	r3, r0, #1
 80055a6:	d102      	bne.n	80055ae <_lseek_r+0x1e>
 80055a8:	6823      	ldr	r3, [r4, #0]
 80055aa:	b103      	cbz	r3, 80055ae <_lseek_r+0x1e>
 80055ac:	602b      	str	r3, [r5, #0]
 80055ae:	bd38      	pop	{r3, r4, r5, pc}
 80055b0:	20002bc0 	.word	0x20002bc0

080055b4 <_read_r>:
 80055b4:	b538      	push	{r3, r4, r5, lr}
 80055b6:	4c07      	ldr	r4, [pc, #28]	; (80055d4 <_read_r+0x20>)
 80055b8:	4605      	mov	r5, r0
 80055ba:	4608      	mov	r0, r1
 80055bc:	4611      	mov	r1, r2
 80055be:	2200      	movs	r2, #0
 80055c0:	6022      	str	r2, [r4, #0]
 80055c2:	461a      	mov	r2, r3
 80055c4:	f7ff f84c 	bl	8004660 <_read>
 80055c8:	1c43      	adds	r3, r0, #1
 80055ca:	d102      	bne.n	80055d2 <_read_r+0x1e>
 80055cc:	6823      	ldr	r3, [r4, #0]
 80055ce:	b103      	cbz	r3, 80055d2 <_read_r+0x1e>
 80055d0:	602b      	str	r3, [r5, #0]
 80055d2:	bd38      	pop	{r3, r4, r5, pc}
 80055d4:	20002bc0 	.word	0x20002bc0

080055d8 <_init>:
 80055d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055da:	bf00      	nop
 80055dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055de:	bc08      	pop	{r3}
 80055e0:	469e      	mov	lr, r3
 80055e2:	4770      	bx	lr

080055e4 <_fini>:
 80055e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e6:	bf00      	nop
 80055e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ea:	bc08      	pop	{r3}
 80055ec:	469e      	mov	lr, r3
 80055ee:	4770      	bx	lr
